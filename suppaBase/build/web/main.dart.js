// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const convert = dart_sdk.convert;
  const js_util = dart_sdk.js_util;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const _internal = dart_sdk._internal;
  const io = dart_sdk.io;
  const math = dart_sdk.math;
  const _native_typed_data = dart_sdk._native_typed_data;
  const indexed_db = dart_sdk.indexed_db;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const color_scheme = flutter_sdk.src__material__color_scheme;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const snack_bar = flutter_sdk.src__material__snack_bar;
  const text = flutter_sdk.src__widgets__text;
  const basic = flutter_sdk.src__widgets__basic;
  const progress_indicator = flutter_sdk.src__material__progress_indicator;
  const alignment = flutter_sdk.src__painting__alignment;
  const refresh_indicator = flutter_sdk.src__material__refresh_indicator;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const divider = flutter_sdk.src__material__divider;
  const list_tile = flutter_sdk.src__material__list_tile;
  const circle_avatar = flutter_sdk.src__material__circle_avatar;
  const app_bar = flutter_sdk.src__material__app_bar;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const system_navigator = flutter_sdk.src__services__system_navigator;
  const message_codec = flutter_sdk.src__services__message_codec;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const stack = flutter_sdk.src__rendering__stack;
  const platform_view = flutter_sdk.src__widgets__platform_view;
  const basic_types = flutter_sdk.src__foundation__basic_types;
  const recognizer = flutter_sdk.src__gestures__recognizer;
  const platform_view$ = flutter_sdk.src__rendering__platform_view;
  const platform_views = flutter_sdk.src__services__platform_views;
  const system_channels = flutter_sdk.src__services__system_channels;
  const url_strategy = flutter_sdk.src__navigation__url_strategy;
  const events = flutter_sdk.src__gestures__events;
  const print = flutter_sdk.src__foundation__print;
  const assertions = flutter_sdk.src__foundation__assertions;
  const navigator = flutter_sdk.src__widgets__navigator;
  const material = flutter_sdk.src__material__material;
  const safe_area = flutter_sdk.src__widgets__safe_area;
  const pages = flutter_sdk.src__widgets__pages;
  const animation = flutter_sdk.src__animation__animation;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const equality = flutter_sdk.src__equality;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const platform = flutter_sdk.src__foundation__platform;
  const system_chrome = flutter_sdk.src__services__system_chrome;
  const iterable_extensions = flutter_sdk.src__iterable_extensions;
  const custom_paint = flutter_sdk.src__rendering__custom_paint;
  const async$ = flutter_sdk.src__widgets__async;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const box_border = flutter_sdk.src__painting__box_border;
  const text_style = flutter_sdk.src__painting__text_style;
  const container = flutter_sdk.src__widgets__container;
  const button = flutter_sdk.src__cupertino__button;
  const flex = flutter_sdk.src__rendering__flex;
  const decoration = flutter_sdk.src__painting__decoration;
  const stream_channel = flutter_sdk.stream_channel;
  const stream_sink = flutter_sdk.src__delegate__stream_sink;
  const string_scanner = flutter_sdk.src__string_scanner;
  const canonicalized_map = flutter_sdk.src__canonicalized_map;
  const key = flutter_sdk.src__foundation__key;
  const stream_channel_controller = flutter_sdk.src__stream_channel_controller;
  const span_exception = flutter_sdk.src__span_exception;
  const queue_list = flutter_sdk.src__queue_list;
  const serialization = flutter_sdk.src__foundation__serialization;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var supabase_client = Object.create(dart.library);
  var app_links_web = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var sign_in_with_apple_web = Object.create(dart.library);
  var url_launcher_web = Object.create(dart.library);
  var supabase_flutter = Object.create(dart.library);
  var app_links_platform_interface = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var sign_in_with_apple_platform_interface = Object.create(dart.library);
  var link = Object.create(dart.library);
  var url_launcher_platform_interface = Object.create(dart.library);
  var link$ = Object.create(dart.library);
  var dart_ui = Object.create(dart.library);
  var supabase = Object.create(dart.library);
  var local_storage = Object.create(dart.library);
  var supabase$ = Object.create(dart.library);
  var supabase_auth = Object.create(dart.library);
  var url_launcher = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var app_links_method_channel = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var authorization_credential = Object.create(dart.library);
  var authorization_request = Object.create(dart.library);
  var credential_state = Object.create(dart.library);
  var web_authentication_options = Object.create(dart.library);
  var exceptions = Object.create(dart.library);
  var nonce = Object.create(dart.library);
  var method_channel_sign_in_with_apple = Object.create(dart.library);
  var types$ = Object.create(dart.library);
  var url_launcher_platform = Object.create(dart.library);
  var dart_ui_real = Object.create(dart.library);
  var functions_client = Object.create(dart.library);
  var gotrue = Object.create(dart.library);
  var postgrest = Object.create(dart.library);
  var realtime_client = Object.create(dart.library);
  var storage_client = Object.create(dart.library);
  var auth_user = Object.create(dart.library);
  var realtime_client_options = Object.create(dart.library);
  var remove_subscription_result = Object.create(dart.library);
  var supabase_client$ = Object.create(dart.library);
  var supabase_event_types = Object.create(dart.library);
  var supabase_query_builder = Object.create(dart.library);
  var supabase_realtime_error = Object.create(dart.library);
  var hive_flutter = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var http = Object.create(dart.library);
  var constants = Object.create(dart.library);
  var app_links = Object.create(dart.library);
  var crypto = Object.create(dart.library);
  var sign_in_with_apple = Object.create(dart.library);
  var url_launcher_string = Object.create(dart.library);
  var webview_flutter = Object.create(dart.library);
  var legacy_api = Object.create(dart.library);
  var types$0 = Object.create(dart.library);
  var url_launcher_uri = Object.create(dart.library);
  var method_channel_url_launcher = Object.create(dart.library);
  var functions_client$ = Object.create(dart.library);
  var types$1 = Object.create(dart.library);
  var constants$ = Object.create(dart.library);
  var gotrue_admin_api = Object.create(dart.library);
  var gotrue_client = Object.create(dart.library);
  var auth_exception = Object.create(dart.library);
  var auth_response = Object.create(dart.library);
  var auth_state = Object.create(dart.library);
  var gotrue_async_storage = Object.create(dart.library);
  var mfa = Object.create(dart.library);
  var oauth_flow_type = Object.create(dart.library);
  var provider$ = Object.create(dart.library);
  var session$ = Object.create(dart.library);
  var user = Object.create(dart.library);
  var user_attributes = Object.create(dart.library);
  var postgrest$ = Object.create(dart.library);
  var postgrest_builder = Object.create(dart.library);
  var types$2 = Object.create(dart.library);
  var realtime_channel = Object.create(dart.library);
  var realtime_client$ = Object.create(dart.library);
  var realtime_presence = Object.create(dart.library);
  var transformers = Object.create(dart.library);
  var constants$0 = Object.create(dart.library);
  var storage_client$ = Object.create(dart.library);
  var storage_file_api = Object.create(dart.library);
  var types$3 = Object.create(dart.library);
  var constants$1 = Object.create(dart.library);
  var yet_another_json_isolate = Object.create(dart.library);
  var auth_http_client = Object.create(dart.library);
  var supabase_stream_builder = Object.create(dart.library);
  var hive = Object.create(dart.library);
  var path_provider = Object.create(dart.library);
  var path = Object.create(dart.library);
  var client$ = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var request$ = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var streamed_request = Object.create(dart.library);
  var base_client = Object.create(dart.library);
  var base_request = Object.create(dart.library);
  var base_response = Object.create(dart.library);
  var byte_stream = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var multipart_request = Object.create(dart.library);
  var streamed_response = Object.create(dart.library);
  var version = Object.create(dart.library);
  var app_links$ = Object.create(dart.library);
  var digest = Object.create(dart.library);
  var hash = Object.create(dart.library);
  var hmac = Object.create(dart.library);
  var md5 = Object.create(dart.library);
  var sha1 = Object.create(dart.library);
  var sha256 = Object.create(dart.library);
  var sha512 = Object.create(dart.library);
  var sign_in_with_apple$ = Object.create(dart.library);
  var apple_logo_painter = Object.create(dart.library);
  var sign_in_with_apple_builder = Object.create(dart.library);
  var sign_in_with_apple_button = Object.create(dart.library);
  var url_launcher_string$ = Object.create(dart.library);
  var webview_flutter_platform_interface = Object.create(dart.library);
  var navigation_delegate = Object.create(dart.library);
  var webview_controller = Object.create(dart.library);
  var webview_cookie_manager = Object.create(dart.library);
  var webview_widget = Object.create(dart.library);
  var type_conversion = Object.create(dart.library);
  var constants$2 = Object.create(dart.library);
  var version$ = Object.create(dart.library);
  var fetch = Object.create(dart.library);
  var fetch_options = Object.create(dart.library);
  var gotrue_admin_mfa_api = Object.create(dart.library);
  var helper = Object.create(dart.library);
  var jwt_decode = Object.create(dart.library);
  var subjects = Object.create(dart.library);
  var constants$3 = Object.create(dart.library);
  var push = Object.create(dart.library);
  var retry_timer = Object.create(dart.library);
  var message = Object.create(dart.library);
  var websocket = Object.create(dart.library);
  var web_socket_channel = Object.create(dart.library);
  var version$0 = Object.create(dart.library);
  var constants$4 = Object.create(dart.library);
  var storage_bucket_api = Object.create(dart.library);
  var fetch$ = Object.create(dart.library);
  var file_stub = Object.create(dart.library);
  var version$1 = Object.create(dart.library);
  var _isolates_web = Object.create(dart.library);
  var rxdart = Object.create(dart.library);
  var default_compaction_strategy = Object.create(dart.library);
  var default_key_comparator = Object.create(dart.library);
  var aes_cbc_pkcs7 = Object.create(dart.library);
  var crc32 = Object.create(dart.library);
  var hive_impl = Object.create(dart.library);
  var hive_list_impl = Object.create(dart.library);
  var hive_object = Object.create(dart.library);
  var extensions = Object.create(dart.library);
  var box_collection_indexed_db = Object.create(dart.library);
  var browser_client = Object.create(dart.library);
  var http_parser = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var multipart_file_stub = Object.create(dart.library);
  var boundary_characters = Object.create(dart.library);
  var digest_sink = Object.create(dart.library);
  var hash_sink = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var sha512_slowsinks = Object.create(dart.library);
  var platform_navigation_delegate = Object.create(dart.library);
  var platform_webview_controller = Object.create(dart.library);
  var platform_webview_cookie_manager = Object.create(dart.library);
  var platform_webview_widget = Object.create(dart.library);
  var types$4 = Object.create(dart.library);
  var webview_platform = Object.create(dart.library);
  var version$2 = Object.create(dart.library);
  var behavior_subject = Object.create(dart.library);
  var publish_subject = Object.create(dart.library);
  var replay_subject = Object.create(dart.library);
  var subject = Object.create(dart.library);
  var version$3 = Object.create(dart.library);
  var websocket_web = Object.create(dart.library);
  var channel$ = Object.create(dart.library);
  var exception$ = Object.create(dart.library);
  var version$4 = Object.create(dart.library);
  var mime = Object.create(dart.library);
  var retry = Object.create(dart.library);
  var rx = Object.create(dart.library);
  var streams = Object.create(dart.library);
  var transformers$ = Object.create(dart.library);
  var utils$0 = Object.create(dart.library);
  var aes_engine = Object.create(dart.library);
  var big_int_adapter = Object.create(dart.library);
  var date_time_adapter = Object.create(dart.library);
  var storage_backend_memory = Object.create(dart.library);
  var box_base_impl = Object.create(dart.library);
  var box_impl = Object.create(dart.library);
  var lazy_box_impl = Object.create(dart.library);
  var type_registry_impl = Object.create(dart.library);
  var storage_backend = Object.create(dart.library);
  var hive_collection_mixin = Object.create(dart.library);
  var delegating_list_view_mixin = Object.create(dart.library);
  var box_collection_stub = Object.create(dart.library);
  var authentication_challenge = Object.create(dart.library);
  var case_insensitive_map = Object.create(dart.library);
  var chunked_coding = Object.create(dart.library);
  var http_date = Object.create(dart.library);
  var media_type = Object.create(dart.library);
  var typed_data$ = Object.create(dart.library);
  var http_response_error = Object.create(dart.library);
  var javascript_console_message = Object.create(dart.library);
  var javascript_log_level = Object.create(dart.library);
  var javascript_message = Object.create(dart.library);
  var javascript_mode = Object.create(dart.library);
  var load_request_params = Object.create(dart.library);
  var navigation_decision = Object.create(dart.library);
  var navigation_request = Object.create(dart.library);
  var platform_navigation_delegate_creation_params = Object.create(dart.library);
  var platform_webview_controller_creation_params = Object.create(dart.library);
  var platform_webview_cookie_manager_creation_params = Object.create(dart.library);
  var platform_webview_permission_request = Object.create(dart.library);
  var platform_webview_widget_creation_params = Object.create(dart.library);
  var url_change = Object.create(dart.library);
  var web_resource_error = Object.create(dart.library);
  var webview_cookie = Object.create(dart.library);
  var value_stream = Object.create(dart.library);
  var start_with = Object.create(dart.library);
  var start_with_error = Object.create(dart.library);
  var empty = Object.create(dart.library);
  var error_and_stacktrace = Object.create(dart.library);
  var replay_stream = Object.create(dart.library);
  var collection_extensions = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var _connect_html = Object.create(dart.library);
  var web_socket_impl = Object.create(dart.library);
  var mime_multipart_transformer = Object.create(dart.library);
  var mime_shared = Object.create(dart.library);
  var mime_type = Object.create(dart.library);
  var combine_latest = Object.create(dart.library);
  var concat = Object.create(dart.library);
  var concat_eager = Object.create(dart.library);
  var connectable_stream = Object.create(dart.library);
  var defer = Object.create(dart.library);
  var fork_join = Object.create(dart.library);
  var from_callable = Object.create(dart.library);
  var merge = Object.create(dart.library);
  var never = Object.create(dart.library);
  var race = Object.create(dart.library);
  var range = Object.create(dart.library);
  var repeat = Object.create(dart.library);
  var retry$ = Object.create(dart.library);
  var retry_when = Object.create(dart.library);
  var sequence_equal = Object.create(dart.library);
  var switch_latest = Object.create(dart.library);
  var timer = Object.create(dart.library);
  var using = Object.create(dart.library);
  var zip = Object.create(dart.library);
  var buffer = Object.create(dart.library);
  var debounce = Object.create(dart.library);
  var pairwise = Object.create(dart.library);
  var sample = Object.create(dart.library);
  var throttle = Object.create(dart.library);
  var window$ = Object.create(dart.library);
  var default_if_empty = Object.create(dart.library);
  var delay = Object.create(dart.library);
  var delay_when = Object.create(dart.library);
  var dematerialize = Object.create(dart.library);
  var distinct_unique = Object.create(dart.library);
  var $do = Object.create(dart.library);
  var end_with = Object.create(dart.library);
  var end_with_many = Object.create(dart.library);
  var exhaust_map = Object.create(dart.library);
  var flat_map = Object.create(dart.library);
  var group_by = Object.create(dart.library);
  var ignore_elements = Object.create(dart.library);
  var interval = Object.create(dart.library);
  var map_not_null = Object.create(dart.library);
  var map_to = Object.create(dart.library);
  var materialize = Object.create(dart.library);
  var max = Object.create(dart.library);
  var min = Object.create(dart.library);
  var on_error_resume = Object.create(dart.library);
  var scan = Object.create(dart.library);
  var skip_last = Object.create(dart.library);
  var skip_until = Object.create(dart.library);
  var start_with_many = Object.create(dart.library);
  var switch_if_empty = Object.create(dart.library);
  var switch_map = Object.create(dart.library);
  var take_last = Object.create(dart.library);
  var take_until = Object.create(dart.library);
  var take_while_inclusive = Object.create(dart.library);
  var time_interval = Object.create(dart.library);
  var timestamp$ = Object.create(dart.library);
  var where_not_null = Object.create(dart.library);
  var where_type = Object.create(dart.library);
  var with_latest_from = Object.create(dart.library);
  var composite_subscription = Object.create(dart.library);
  var notification = Object.create(dart.library);
  var aes_tables = Object.create(dart.library);
  var frame$ = Object.create(dart.library);
  var frame_helper = Object.create(dart.library);
  var keystore$ = Object.create(dart.library);
  var change_notifier$ = Object.create(dart.library);
  var ignored_type_adapter = Object.create(dart.library);
  var backend_manager = Object.create(dart.library);
  var scan$ = Object.create(dart.library);
  var utils$1 = Object.create(dart.library);
  var decoder = Object.create(dart.library);
  var encoder = Object.create(dart.library);
  var typed_queue = Object.create(dart.library);
  var typed_buffers = Object.create(dart.library);
  var forwarding_sink = Object.create(dart.library);
  var forwarding_stream = Object.create(dart.library);
  var io_sink = Object.create(dart.library);
  var web_socket = Object.create(dart.library);
  var bound_multipart_stream = Object.create(dart.library);
  var char_code = Object.create(dart.library);
  var default_extension_map = Object.create(dart.library);
  var magic_number = Object.create(dart.library);
  var subscription = Object.create(dart.library);
  var future$ = Object.create(dart.library);
  var backpressure = Object.create(dart.library);
  var min_max = Object.create(dart.library);
  var binary_reader_impl = Object.create(dart.library);
  var indexable_skip_list = Object.create(dart.library);
  var backend_manager$ = Object.create(dart.library);
  var charcodes = Object.create(dart.library);
  var typed_buffer = Object.create(dart.library);
  var storage_backend_js = Object.create(dart.library);
  var binary_writer_impl = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    BuildContextAndintToDivider: () => (T$.BuildContextAndintToDivider = dart.constFn(dart.fnType(divider.Divider, [framework.BuildContext, core.int])))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    BuildContextAndintToListTile: () => (T$.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    UriN: () => (T$.UriN = dart.constFn(dart.nullable(core.Uri)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    _EmptyStreamOfString: () => (T$._EmptyStreamOfString = dart.constFn(async._EmptyStream$(core.String)))(),
    _EmptyStreamOfUri: () => (T$._EmptyStreamOfUri = dart.constFn(async._EmptyStream$(core.Uri)))(),
    StreamOfUri: () => (T$.StreamOfUri = dart.constFn(async.Stream$(core.Uri)))(),
    StreamOfString: () => (T$.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T$.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    MapOfString$Object: () => (T$.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    LinkInfoToWebLinkDelegate: () => (T$.LinkInfoToWebLinkDelegate = dart.constFn(dart.fnType(link$.WebLinkDelegate, [link.LinkInfo])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    LinkedHashMapOfString$Object: () => (T$.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T$.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))(),
    CompleterOfByteData: () => (T$.CompleterOfByteData = dart.constFn(async.Completer$(typed_data.ByteData)))(),
    FutureOrOfByteData: () => (T$.FutureOrOfByteData = dart.constFn(async.FutureOr$(typed_data.ByteData)))(),
    FutureOrNOfByteData: () => (T$.FutureOrNOfByteData = dart.constFn(dart.nullable(T$.FutureOrOfByteData())))(),
    FutureOrNOfByteDataTovoid: () => (T$.FutureOrNOfByteDataTovoid = dart.constFn(dart.fnType(dart.void, [], [T$.FutureOrNOfByteData()])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    PlatformViewCreationParamsToLinkViewController: () => (T$.PlatformViewCreationParamsToLinkViewController = dart.constFn(dart.fnType(link$.LinkViewController, [platform_view.PlatformViewCreationParams])))(),
    FactoryOfOneSequenceGestureRecognizer: () => (T$.FactoryOfOneSequenceGestureRecognizer = dart.constFn(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))(),
    BuildContextAndPlatformViewControllerToPlatformViewSurface: () => (T$.BuildContextAndPlatformViewControllerToPlatformViewSurface = dart.constFn(dart.fnType(platform_view.PlatformViewSurface, [framework.BuildContext, platform_views.PlatformViewController])))(),
    MouseEventTovoid: () => (T$.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MouseEvent])))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    IdentityMapOfint$LinkViewController: () => (T$.IdentityMapOfint$LinkViewController = dart.constFn(_js_helper.IdentityMap$(core.int, link$.LinkViewController)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    intToElement: () => (T$.intToElement = dart.constFn(dart.fnType(html.Element, [core.int])))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    VoidToFutureOfbool: () => (T$.VoidToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [])))(),
    FutureOfStringN: () => (T$.FutureOfStringN = dart.constFn(async.Future$(T$.StringN())))(),
    VoidToFutureOfStringN: () => (T$.VoidToFutureOfStringN = dart.constFn(dart.fnType(T$.FutureOfStringN(), [])))(),
    dynamicToFutureOfvoid: () => (T$.dynamicToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [dart.dynamic])))(),
    StringToFutureOfvoid: () => (T$.StringToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.String])))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    SessionN: () => (T$.SessionN = dart.constFn(dart.nullable(session$.Session)))(),
    CompleterOfSessionN: () => (T$.CompleterOfSessionN = dart.constFn(async.Completer$(T$.SessionN())))(),
    dynamicAnddynamicToNull: () => (T$.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    AuthStateTovoid: () => (T$.AuthStateTovoid = dart.constFn(dart.fnType(dart.void, [auth_state.AuthState])))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation.Animation$(core.double)))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdoubleTo_OAuthSignInWebView: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleTo_OAuthSignInWebView = dart.constFn(dart.fnType(supabase_auth._OAuthSignInWebView, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble()])))(),
    BuildContextN: () => (T$.BuildContextN = dart.constFn(dart.nullable(framework.BuildContext)))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapNOfString$String: () => (T$.MapNOfString$String = dart.constFn(dart.nullable(T$.MapOfString$String())))(),
    Provider__ToFutureOfbool: () => (T$.Provider__ToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [provider$.Provider], {authScreenLaunchMode: types$0.LaunchMode, context: T$.BuildContextN(), queryParams: T$.MapNOfString$String(), redirectTo: T$.StringN(), scopes: T$.StringN()}, {})))(),
    JSArrayOfAppleIDAuthorizationScopes: () => (T$.JSArrayOfAppleIDAuthorizationScopes = dart.constFn(_interceptors.JSArray$(authorization_request.AppleIDAuthorizationScopes)))(),
    FutureOfAuthResponse: () => (T$.FutureOfAuthResponse = dart.constFn(async.Future$(auth_response.AuthResponse)))(),
    VoidToFutureOfAuthResponse: () => (T$.VoidToFutureOfAuthResponse = dart.constFn(dart.fnType(T$.FutureOfAuthResponse(), [])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    dynamicTobool: () => (T$.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    _StreamHandlerTransformerOfString$Uri: () => (T$._StreamHandlerTransformerOfString$Uri = dart.constFn(async._StreamHandlerTransformer$(core.String, core.Uri)))(),
    EventSinkOfUri: () => (T$.EventSinkOfUri = dart.constFn(async.EventSink$(core.Uri)))(),
    StringAndEventSinkOfUriTovoid: () => (T$.StringAndEventSinkOfUriTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.EventSinkOfUri()])))(),
    _AsyncStarImplOfUri: () => (T$._AsyncStarImplOfUri = dart.constFn(async._AsyncStarImpl$(core.Uri)))(),
    _AsyncStarImplOfString: () => (T$._AsyncStarImplOfString = dart.constFn(async._AsyncStarImpl$(core.String)))(),
    MapNOfString$dynamic: () => (T$.MapNOfString$dynamic = dart.constFn(dart.nullable(T$.MapOfString$dynamic())))(),
    IterableOfString: () => (T$.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    intToString: () => (T$.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    JSArrayOfMapOfString$dynamic: () => (T$.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T$.MapOfString$dynamic())))(),
    JSArrayOfPasswordAuthorizationRequest: () => (T$.JSArrayOfPasswordAuthorizationRequest = dart.constFn(_interceptors.JSArray$(authorization_request.PasswordAuthorizationRequest)))(),
    PasswordAuthorizationRequestToMapOfString$dynamic: () => (T$.PasswordAuthorizationRequestToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [authorization_request.PasswordAuthorizationRequest])))(),
    AppleIDAuthorizationScopesToString: () => (T$.AppleIDAuthorizationScopesToString = dart.constFn(dart.fnType(core.String, [authorization_request.AppleIDAuthorizationScopes])))(),
    ListOfUserIdentity: () => (T$.ListOfUserIdentity = dart.constFn(core.List$(user.UserIdentity)))(),
    dynamicToUserIdentity: () => (T$.dynamicToUserIdentity = dart.constFn(dart.fnType(user.UserIdentity, [dart.dynamic])))(),
    ListOfFactor: () => (T$.ListOfFactor = dart.constFn(core.List$(mfa.Factor)))(),
    dynamicToFactor: () => (T$.dynamicToFactor = dart.constFn(dart.fnType(mfa.Factor, [dart.dynamic])))(),
    UserIdentityToMapOfString$dynamic: () => (T$.UserIdentityToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [user.UserIdentity])))(),
    FactorToMapOfString$dynamic: () => (T$.FactorToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [mfa.Factor])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    ListOfMapOfString$dynamic: () => (T$.ListOfMapOfString$dynamic = dart.constFn(core.List$(T$.MapOfString$dynamic())))(),
    ListOfStringAndMapOfString$dynamicToListOfString: () => (T$.ListOfStringAndMapOfString$dynamicToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [T$.ListOfString(), T$.MapOfString$dynamic()])))(),
    PostgrestResponseOfListOfMapOfString$dynamic: () => (T$.PostgrestResponseOfListOfMapOfString$dynamic = dart.constFn(types$2.PostgrestResponse$(T$.ListOfMapOfString$dynamic())))(),
    PostgrestResponseOfMapOfString$dynamic: () => (T$.PostgrestResponseOfMapOfString$dynamic = dart.constFn(types$2.PostgrestResponse$(T$.MapOfString$dynamic())))(),
    PostgrestResponseOfMapNOfString$dynamic: () => (T$.PostgrestResponseOfMapNOfString$dynamic = dart.constFn(types$2.PostgrestResponse$(T$.MapNOfString$dynamic())))(),
    ListOfMap: () => (T$.ListOfMap = dart.constFn(core.List$(core.Map)))(),
    FutureOfResponse: () => (T$.FutureOfResponse = dart.constFn(async.Future$(response$.Response)))(),
    Uri__ToFutureOfResponse: () => (T$.Uri__ToFutureOfResponse = dart.constFn(dart.fnType(T$.FutureOfResponse(), [core.Uri], {headers: T$.MapNOfString$String()}, {})))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    EncodingN: () => (T$.EncodingN = dart.constFn(dart.nullable(convert.Encoding)))(),
    Uri__ToFutureOfResponse$1: () => (T$.Uri__ToFutureOfResponse$1 = dart.constFn(dart.fnType(T$.FutureOfResponse(), [core.Uri], {body: T$.ObjectN(), encoding: T$.EncodingN(), headers: T$.MapNOfString$String()}, {})))(),
    LinkedHashMapOfString$dynamic: () => (T$.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    ListNOfMapOfString$dynamic: () => (T$.ListNOfMapOfString$dynamic = dart.constFn(dart.nullable(T$.ListOfMapOfString$dynamic())))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    ObjectAndStackTraceTodynamic: () => (T$.ObjectAndStackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object, core.StackTrace])))(),
    ObjectTodynamic: () => (T$.ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    dynamicToNever: () => (T$.dynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic])))(),
    FutureOfNever: () => (T$.FutureOfNever = dart.constFn(async.Future$(dart.Never)))(),
    ObjectToFutureOfNever: () => (T$.ObjectToFutureOfNever = dart.constFn(dart.fnType(T$.FutureOfNever(), [core.Object])))(),
    JSArrayOfVoidTovoid: () => (T$.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T$.VoidTovoid())))(),
    BoxEventTovoid: () => (T$.BoxEventTovoid = dart.constFn(dart.fnType(dart.void, [hive.BoxEvent])))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    StringNToFutureOfvoid: () => (T$.StringNToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [], [T$.StringN()])))(),
    CompleterOfSharedPreferences: () => (T$.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    MapEntryOfString$Object: () => (T$.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T$.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T$.MapEntryOfString$Object(), [core.String, core.Object])))(),
    ClientToFutureOfResponse: () => (T$.ClientToFutureOfResponse = dart.constFn(dart.fnType(T$.FutureOfResponse(), [client$.Client])))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    ClientToFutureOfString: () => (T$.ClientToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [client$.Client])))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    ClientToFutureOfUint8List: () => (T$.ClientToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [client$.Client])))(),
    boolNTobool: () => (T$.boolNTobool = dart.constFn(dart.fnType(core.bool, [T$.boolN()])))(),
    dynamicToUser: () => (T$.dynamicToUser = dart.constFn(dart.fnType(user.User, [dart.dynamic])))(),
    ListOfUser: () => (T$.ListOfUser = dart.constFn(core.List$(user.User)))(),
    BehaviorSubjectOfAuthState: () => (T$.BehaviorSubjectOfAuthState = dart.constFn(behavior_subject.BehaviorSubject$(auth_state.AuthState)))(),
    IdentityMapOfString$StringN: () => (T$.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    JSArrayOfOtpType: () => (T$.JSArrayOfOtpType = dart.constFn(_interceptors.JSArray$(constants$.OtpType)))(),
    CompleterOfAuthResponse: () => (T$.CompleterOfAuthResponse = dart.constFn(async.Completer$(auth_response.AuthResponse)))(),
    JSArrayOfFactor: () => (T$.JSArrayOfFactor = dart.constFn(_interceptors.JSArray$(mfa.Factor)))(),
    FactorTobool: () => (T$.FactorTobool = dart.constFn(dart.fnType(core.bool, [mfa.Factor])))(),
    JSArrayOfAMREntry: () => (T$.JSArrayOfAMREntry = dart.constFn(_interceptors.JSArray$(mfa.AMREntry)))(),
    AuthenticatorAssuranceLevelsTobool: () => (T$.AuthenticatorAssuranceLevelsTobool = dart.constFn(dart.fnType(core.bool, [mfa.AuthenticatorAssuranceLevels])))(),
    dynamicToAMREntry: () => (T$.dynamicToAMREntry = dart.constFn(dart.fnType(mfa.AMREntry, [dart.dynamic])))(),
    FactorTypeTobool: () => (T$.FactorTypeTobool = dart.constFn(dart.fnType(core.bool, [mfa.FactorType])))(),
    FactorStatusTobool: () => (T$.FactorStatusTobool = dart.constFn(dart.fnType(core.bool, [mfa.FactorStatus])))(),
    AMRMethodTobool: () => (T$.AMRMethodTobool = dart.constFn(dart.fnType(core.bool, [mfa.AMRMethod])))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    PostgrestQueryBuilderOfvoid: () => (T$.PostgrestQueryBuilderOfvoid = dart.constFn(postgrest_builder.PostgrestQueryBuilder$(dart.void)))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    IdentityMapOfString$bool: () => (T$.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    IdentityMapOfString$MapOfString$Object: () => (T$.IdentityMapOfString$MapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, T$.MapOfString$Object())))(),
    ListOfBinding: () => (T$.ListOfBinding = dart.constFn(core.List$(realtime_channel.Binding)))(),
    IdentityMapOfString$ListOfBinding: () => (T$.IdentityMapOfString$ListOfBinding = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfBinding())))(),
    JSArrayOfPush: () => (T$.JSArrayOfPush = dart.constFn(_interceptors.JSArray$(push.Push)))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    StringNTovoid: () => (T$.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN()])))(),
    dynamicAnddynamicTovoid$1: () => (T$.dynamicAnddynamicTovoid$1 = dart.constFn(dart.fnType(dart.void, [dart.dynamic], [dart.dynamic])))(),
    BindingToMapOfString$String: () => (T$.BindingToMapOfString$String = dart.constFn(dart.fnType(T$.MapOfString$String(), [realtime_channel.Binding])))(),
    JSArrayOfBinding: () => (T$.JSArrayOfBinding = dart.constFn(_interceptors.JSArray$(realtime_channel.Binding)))(),
    BindingTobool: () => (T$.BindingTobool = dart.constFn(dart.fnType(core.bool, [realtime_channel.Binding])))(),
    CompleterOfChannelResponse: () => (T$.CompleterOfChannelResponse = dart.constFn(async.Completer$(realtime_channel.ChannelResponse)))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    JSArrayOfMapOfString$ObjectN: () => (T$.JSArrayOfMapOfString$ObjectN = dart.constFn(_interceptors.JSArray$(T$.MapOfString$ObjectN())))(),
    ListOfMapOfString$ObjectN: () => (T$.ListOfMapOfString$ObjectN = dart.constFn(core.List$(T$.MapOfString$ObjectN())))(),
    IdentityMapOfString$ListOfMapOfString$ObjectN: () => (T$.IdentityMapOfString$ListOfMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfMapOfString$ObjectN())))(),
    DurationN: () => (T$.DurationN = dart.constFn(dart.nullable(core.Duration)))(),
    CompleterOfString: () => (T$.CompleterOfString = dart.constFn(async.Completer$(core.String)))(),
    JSArrayOfChannelEvents: () => (T$.JSArrayOfChannelEvents = dart.constFn(_interceptors.JSArray$(constants$0.ChannelEvents)))(),
    ChannelEventsToString: () => (T$.ChannelEventsToString = dart.constFn(dart.fnType(core.String, [constants$0.ChannelEvents])))(),
    JSArrayOfRealtimeChannel: () => (T$.JSArrayOfRealtimeChannel = dart.constFn(_interceptors.JSArray$(realtime_channel.RealtimeChannel)))(),
    JSArrayOfFunction: () => (T$.JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))(),
    ListOfFunction: () => (T$.ListOfFunction = dart.constFn(core.List$(core.Function)))(),
    IdentityMapOfString$ListOfFunction: () => (T$.IdentityMapOfString$ListOfFunction = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfFunction())))(),
    StringAndMapOfString$StringToWebSocketChannel: () => (T$.StringAndMapOfString$StringToWebSocketChannel = dart.constFn(dart.fnType(channel$.WebSocketChannel, [core.String, T$.MapOfString$String()])))(),
    StringTodynamic: () => (T$.StringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.String])))(),
    dynamicAndFnTovoid: () => (T$.dynamicAndFnTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, T$.StringTodynamic()])))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    StringAndFnTovoid: () => (T$.StringAndFnTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.dynamicTodynamic()])))(),
    RealtimeChannelToFutureOfString: () => (T$.RealtimeChannelToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [realtime_channel.RealtimeChannel])))(),
    RealtimeChannelTobool: () => (T$.RealtimeChannelTobool = dart.constFn(dart.fnType(core.bool, [realtime_channel.RealtimeChannel])))(),
    RealtimeChannelTovoid: () => (T$.RealtimeChannelTovoid = dart.constFn(dart.fnType(dart.void, [realtime_channel.RealtimeChannel])))(),
    TimerTovoid: () => (T$.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    ListOfPresence: () => (T$.ListOfPresence = dart.constFn(core.List$(realtime_presence.Presence)))(),
    IdentityMapOfString$ListOfPresence: () => (T$.IdentityMapOfString$ListOfPresence = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfPresence())))(),
    dynamicAnddynamicAnddynamicToNull: () => (T$.dynamicAnddynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic, dart.dynamic])))(),
    StringNAnddynamicAnddynamicTovoid: () => (T$.StringNAnddynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN(), dart.dynamic, dart.dynamic])))(),
    StringNAnddynamicAnddynamicToNvoid: () => (T$.StringNAnddynamicAnddynamicToNvoid = dart.constFn(dart.nullable(T$.StringNAnddynamicAnddynamicTovoid())))(),
    StringAnddynamicToNull: () => (T$.StringAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [core.String, dart.dynamic])))(),
    PresenceToString: () => (T$.PresenceToString = dart.constFn(dart.fnType(core.String, [realtime_presence.Presence])))(),
    PresenceTobool: () => (T$.PresenceTobool = dart.constFn(dart.fnType(core.bool, [realtime_presence.Presence])))(),
    JSArrayOfPresence: () => (T$.JSArrayOfPresence = dart.constFn(_interceptors.JSArray$(realtime_presence.Presence)))(),
    dynamicToPresence: () => (T$.dynamicToPresence = dart.constFn(dart.fnType(realtime_presence.Presence, [dart.dynamic])))(),
    MapOfString$ListOfPresence: () => (T$.MapOfString$ListOfPresence = dart.constFn(core.Map$(core.String, T$.ListOfPresence())))(),
    MapEntryOfString$ListOfPresence: () => (T$.MapEntryOfString$ListOfPresence = dart.constFn(core.MapEntry$(core.String, T$.ListOfPresence())))(),
    PresenceToPresence: () => (T$.PresenceToPresence = dart.constFn(dart.fnType(realtime_presence.Presence, [realtime_presence.Presence])))(),
    MapEntryOfString$ListOfPresenceToMapEntryOfString$ListOfPresence: () => (T$.MapEntryOfString$ListOfPresenceToMapEntryOfString$ListOfPresence = dart.constFn(dart.fnType(T$.MapEntryOfString$ListOfPresence(), [T$.MapEntryOfString$ListOfPresence()])))(),
    JSArrayOfPostgresColumn: () => (T$.JSArrayOfPostgresColumn = dart.constFn(_interceptors.JSArray$(transformers.PostgresColumn)))(),
    StringAnddynamicTovoid: () => (T$.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    PostgresColumnTobool: () => (T$.PostgresColumnTobool = dart.constFn(dart.fnType(core.bool, [transformers.PostgresColumn])))(),
    PostgresTypesTobool: () => (T$.PostgresTypesTobool = dart.constFn(dart.fnType(core.bool, [transformers.PostgresTypes])))(),
    IdentityMapOfString$MapOfString$dynamic: () => (T$.IdentityMapOfString$MapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T$.MapOfString$dynamic())))(),
    ListOfBucket: () => (T$.ListOfBucket = dart.constFn(core.List$(types$3.Bucket)))(),
    dynamicToBucket: () => (T$.dynamicToBucket = dart.constFn(dart.fnType(types$3.Bucket, [dart.dynamic])))(),
    dynamicToSignedUrl: () => (T$.dynamicToSignedUrl = dart.constFn(dart.fnType(types$3.SignedUrl, [dart.dynamic])))(),
    ListOfSignedUrl: () => (T$.ListOfSignedUrl = dart.constFn(core.List$(types$3.SignedUrl)))(),
    ListOfFileObject: () => (T$.ListOfFileObject = dart.constFn(core.List$(types$3.FileObject)))(),
    dynamicToFileObject: () => (T$.dynamicToFileObject = dart.constFn(dart.fnType(types$3.FileObject, [dart.dynamic])))(),
    BehaviorSubjectOfListOfMapOfString$dynamic: () => (T$.BehaviorSubjectOfListOfMapOfString$dynamic = dart.constFn(behavior_subject.BehaviorSubject$(T$.ListOfMapOfString$dynamic())))(),
    MapOfString$dynamicTobool: () => (T$.MapOfString$dynamicTobool = dart.constFn(dart.fnType(core.bool, [T$.MapOfString$dynamic()])))(),
    StringAndObjectNTovoid: () => (T$.StringAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [core.String], [T$.ObjectN()])))(),
    MapOfString$dynamicAndMapOfString$dynamicToint: () => (T$.MapOfString$dynamicAndMapOfString$dynamicToint = dart.constFn(dart.fnType(core.int, [T$.MapOfString$dynamic(), T$.MapOfString$dynamic()])))(),
    ListOfMapOfString$dynamicTovoid: () => (T$.ListOfMapOfString$dynamicTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfMapOfString$dynamic()])))(),
    intTobool: () => (T$.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    VoidToClient: () => (T$.VoidToClient = dart.constFn(dart.fnType(client$.Client, [])))(),
    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    _EmptyStreamOfListOfint: () => (T$._EmptyStreamOfListOfint = dart.constFn(async._EmptyStream$(T$.ListOfint())))(),
    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),
    JSArrayOfMultipartFile: () => (T$.JSArrayOfMultipartFile = dart.constFn(_interceptors.JSArray$(multipart_file.MultipartFile)))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    _AsyncStarImplOfListOfint: () => (T$._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T$.ListOfint())))(),
    SinkOfDigest: () => (T$.SinkOfDigest = dart.constFn(core.Sink$(digest.Digest)))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    FutureBuilderOfbool: () => (T$.FutureBuilderOfbool = dart.constFn(async$.FutureBuilder$(core.bool)))(),
    AsyncSnapshotOfbool: () => (T$.AsyncSnapshotOfbool = dart.constFn(async$.AsyncSnapshot$(core.bool)))(),
    BuildContextAndAsyncSnapshotOfboolToWidget: () => (T$.BuildContextAndAsyncSnapshotOfboolToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AsyncSnapshotOfbool()])))(),
    PlatformWebViewPermissionRequestTovoid: () => (T$.PlatformWebViewPermissionRequestTovoid = dart.constFn(dart.fnType(dart.void, [platform_webview_permission_request.PlatformWebViewPermissionRequest])))(),
    JSArrayOfHook: () => (T$.JSArrayOfHook = dart.constFn(_interceptors.JSArray$(push.Hook)))(),
    HookTobool: () => (T$.HookTobool = dart.constFn(dart.fnType(core.bool, [push.Hook])))(),
    HookTovoid: () => (T$.HookTovoid = dart.constFn(dart.fnType(dart.void, [push.Hook])))(),
    FutureOfStreamedResponse: () => (T$.FutureOfStreamedResponse = dart.constFn(async.Future$(streamed_response.StreamedResponse)))(),
    VoidToFutureOfStreamedResponse: () => (T$.VoidToFutureOfStreamedResponse = dart.constFn(dart.fnType(T$.FutureOfStreamedResponse(), [])))(),
    ExceptionTobool: () => (T$.ExceptionTobool = dart.constFn(dart.fnType(core.bool, [core.Exception])))(),
    IdentityMapOfString$BoxBaseImpl: () => (T$.IdentityMapOfString$BoxBaseImpl = dart.constFn(_js_helper.IdentityMap$(core.String, box_base_impl.BoxBaseImpl)))(),
    IdentityMapOfString$Future: () => (T$.IdentityMapOfString$Future = dart.constFn(_js_helper.IdentityMap$(core.String, async.Future)))(),
    DateTimeAdapterOfDateTimeWithoutTZ: () => (T$.DateTimeAdapterOfDateTimeWithoutTZ = dart.constFn(date_time_adapter.DateTimeAdapter$(date_time_adapter.DateTimeWithoutTZ)))(),
    dynamicAnddynamicToint: () => (T$.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    intAndintTobool: () => (T$.intAndintTobool = dart.constFn(dart.fnType(core.bool, [core.int, core.int])))(),
    BoxBaseImplToFutureOfvoid: () => (T$.BoxBaseImplToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [box_base_impl.BoxBaseImpl])))(),
    IdentityMapOfint$ResolvedAdapter: () => (T$.IdentityMapOfint$ResolvedAdapter = dart.constFn(_js_helper.IdentityMap$(core.int, type_registry_impl.ResolvedAdapter)))(),
    HiveListOfHiveObjectMixin: () => (T$.HiveListOfHiveObjectMixin = dart.constFn(hive.HiveList$(hive_object.HiveObjectMixin)))(),
    LinkedMapOfHiveListOfHiveObjectMixin$int: () => (T$.LinkedMapOfHiveListOfHiveObjectMixin$int = dart.constFn(_js_helper.LinkedMap$(T$.HiveListOfHiveObjectMixin(), core.int)))(),
    dynamicAndBoxBaseTovoid: () => (T$.dynamicAndBoxBaseTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, hive.BoxBase])))(),
    HiveListImplOfHiveObjectMixin: () => (T$.HiveListImplOfHiveObjectMixin = dart.constFn(hive_list_impl.HiveListImpl$(hive_object.HiveObjectMixin)))(),
    HiveListOfHiveObjectMixinTovoid: () => (T$.HiveListOfHiveObjectMixinTovoid = dart.constFn(dart.fnType(dart.void, [T$.HiveListOfHiveObjectMixin()])))(),
    HiveListOfHiveObjectMixinTobool: () => (T$.HiveListOfHiveObjectMixinTobool = dart.constFn(dart.fnType(core.bool, [T$.HiveListOfHiveObjectMixin()])))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    intAndintToUint8List: () => (T$.intAndintToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int, core.int])))(),
    intToUint8List: () => (T$.intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))(),
    JSArrayOfCollectionBox: () => (T$.JSArrayOfCollectionBox = dart.constFn(_interceptors.JSArray$(box_collection_indexed_db.CollectionBox)))(),
    VersionChangeEventTovoid: () => (T$.VersionChangeEventTovoid = dart.constFn(dart.fnType(dart.void, [indexed_db.VersionChangeEvent])))(),
    CollectionBoxTobool: () => (T$.CollectionBoxTobool = dart.constFn(dart.fnType(core.bool, [box_collection_indexed_db.CollectionBox])))(),
    TransactionToFutureOfvoid: () => (T$.TransactionToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [indexed_db.Transaction])))(),
    JSArrayOfTransactionToFutureOfvoid: () => (T$.JSArrayOfTransactionToFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.TransactionToFutureOfvoid())))(),
    ListOfTransactionToFutureOfvoid: () => (T$.ListOfTransactionToFutureOfvoid = dart.constFn(core.List$(T$.TransactionToFutureOfvoid())))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    CompleterOfStreamedResponse: () => (T$.CompleterOfStreamedResponse = dart.constFn(async.Completer$(streamed_response.StreamedResponse)))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    JSArrayOfListOfString: () => (T$.JSArrayOfListOfString = dart.constFn(_interceptors.JSArray$(T$.ListOfString())))(),
    ListOfStringToString: () => (T$.ListOfStringToString = dart.constFn(dart.fnType(core.String, [T$.ListOfString()])))(),
    ErrorAndStackTraceN: () => (T$.ErrorAndStackTraceN = dart.constFn(dart.nullable(error_and_stacktrace.ErrorAndStackTrace)))(),
    ErrorAndStackTraceToStackTraceN: () => (T$.ErrorAndStackTraceToStackTraceN = dart.constFn(dart.fnType(T$.StackTraceN(), [error_and_stacktrace.ErrorAndStackTrace])))(),
    ListOfUint32List: () => (T$.ListOfUint32List = dart.constFn(core.List$(typed_data.Uint32List)))(),
    intToUint32List: () => (T$.intToUint32List = dart.constFn(dart.fnType(typed_data.Uint32List, [core.int])))(),
    IterableOfint: () => (T$.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    JSArrayOfFrame: () => (T$.JSArrayOfFrame = dart.constFn(_interceptors.JSArray$(frame$.Frame)))(),
    UnmodifiableMapViewOfString$String: () => (T$.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    CaseInsensitiveMapOfString: () => (T$.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),
    ListOfAuthenticationChallenge: () => (T$.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),
    VoidToAuthenticationChallenge: () => (T$.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),
    VoidToListOfAuthenticationChallenge: () => (T$.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T$.ListOfAuthenticationChallenge(), [])))(),
    VoidToDateTime: () => (T$.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    VoidToMediaType: () => (T$.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    EventToNull: () => (T$.EventToNull = dart.constFn(dart.fnType(core.Null, [html.Event])))(),
    MessageEventTovoid: () => (T$.MessageEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MessageEvent])))(),
    CloseEventToNull: () => (T$.CloseEventToNull = dart.constFn(dart.fnType(core.Null, [html.CloseEvent])))(),
    EventSinkTo_WebSocketProtocolTransformer: () => (T$.EventSinkTo_WebSocketProtocolTransformer = dart.constFn(dart.fnType(web_socket_impl._WebSocketProtocolTransformer, [async.EventSink])))(),
    EventSinkOfListOfint: () => (T$.EventSinkOfListOfint = dart.constFn(async.EventSink$(T$.ListOfint())))(),
    EventSinkOfListOfintTo_WebSocketOutgoingTransformer: () => (T$.EventSinkOfListOfintTo_WebSocketOutgoingTransformer = dart.constFn(dart.fnType(web_socket_impl._WebSocketOutgoingTransformer, [T$.EventSinkOfListOfint()])))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    CompleterOfWebSocketImpl: () => (T$.CompleterOfWebSocketImpl = dart.constFn(async.Completer$(web_socket_impl.WebSocketImpl)))(),
    dynamicAndStackTraceToNull: () => (T$.dynamicAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))(),
    dynamicToWebSocketImpl: () => (T$.dynamicToWebSocketImpl = dart.constFn(dart.fnType(web_socket_impl.WebSocketImpl, [dart.dynamic])))(),
    VoidToFuture: () => (T$.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    dynamicToMap: () => (T$.dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))(),
    IdentityMapOfint$WebSocketImpl: () => (T$.IdentityMapOfint$WebSocketImpl = dart.constFn(_js_helper.IdentityMap$(core.int, web_socket_impl.WebSocketImpl)))(),
    JSArrayOfMagicNumber: () => (T$.JSArrayOfMagicNumber = dart.constFn(_interceptors.JSArray$(magic_number.MagicNumber)))(),
    JSArrayOfStream: () => (T$.JSArrayOfStream = dart.constFn(_interceptors.JSArray$(async.Stream)))(),
    FutureNOfvoid: () => (T$.FutureNOfvoid = dart.constFn(dart.nullable(T$.FutureOfvoid())))(),
    VoidToFutureNOfvoid: () => (T$.VoidToFutureNOfvoid = dart.constFn(dart.fnType(T$.FutureNOfvoid(), [])))(),
    JSArrayOfCompleterOfvoid: () => (T$.JSArrayOfCompleterOfvoid = dart.constFn(_interceptors.JSArray$(T$.CompleterOfvoid())))(),
    intToFn: () => (T$.intToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [core.int])))(),
    voidToFuture: () => (T$.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    StreamOfint: () => (T$.StreamOfint = dart.constFn(async.Stream$(core.int)))(),
    JSArrayOfErrorAndStackTrace: () => (T$.JSArrayOfErrorAndStackTrace = dart.constFn(_interceptors.JSArray$(error_and_stacktrace.ErrorAndStackTrace)))(),
    ListOfErrorAndStackTrace: () => (T$.ListOfErrorAndStackTrace = dart.constFn(core.List$(error_and_stacktrace.ErrorAndStackTrace)))(),
    voidTovoid: () => (T$.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    ErrorAndStackTraceAndErrorAndStackTraceTobool: () => (T$.ErrorAndStackTraceAndErrorAndStackTraceTobool = dart.constFn(dart.fnType(core.bool, [error_and_stacktrace.ErrorAndStackTrace, error_and_stacktrace.ErrorAndStackTrace])))(),
    StreamControllerOfbool: () => (T$.StreamControllerOfbool = dart.constFn(async.StreamController$(core.bool)))(),
    boolTovoid: () => (T$.boolTovoid = dart.constFn(dart.fnType(dart.void, [], [core.bool])))(),
    boolTobool: () => (T$.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    VoidToFutureOrOfvoid: () => (T$.VoidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [])))(),
    StreamOfvoid: () => (T$.StreamOfvoid = dart.constFn(async.Stream$(dart.void)))(),
    TimerStreamOfvoid: () => (T$.TimerStreamOfvoid = dart.constFn(timer.TimerStream$(dart.void)))(),
    NeverStreamOfvoid: () => (T$.NeverStreamOfvoid = dart.constFn(never.NeverStream$(dart.void)))(),
    TimerStreamOfbool: () => (T$.TimerStreamOfbool = dart.constFn(timer.TimerStream$(core.bool)))(),
    StreamSubscriptionOfvoid: () => (T$.StreamSubscriptionOfvoid = dart.constFn(async.StreamSubscription$(dart.void)))(),
    ListQueueOfStreamSubscriptionOfvoid: () => (T$.ListQueueOfStreamSubscriptionOfvoid = dart.constFn(collection.ListQueue$(T$.StreamSubscriptionOfvoid())))(),
    JSArrayOfStreamSubscriptionOfvoid: () => (T$.JSArrayOfStreamSubscriptionOfvoid = dart.constFn(_interceptors.JSArray$(T$.StreamSubscriptionOfvoid())))(),
    JSArrayOfFutureOfvoid: () => (T$.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    StreamNOfvoid: () => (T$.StreamNOfvoid = dart.constFn(dart.nullable(T$.StreamOfvoid())))(),
    NotificationOfNever: () => (T$.NotificationOfNever = dart.constFn(notification.Notification$(dart.Never)))(),
    StreamOfNever: () => (T$.StreamOfNever = dart.constFn(async.Stream$(dart.Never)))(),
    EventSinkOfNever: () => (T$.EventSinkOfNever = dart.constFn(async.EventSink$(dart.Never)))(),
    VoidToStreamOfNever: () => (T$.VoidToStreamOfNever = dart.constFn(dart.fnType(T$.StreamOfNever(), [])))()
  };
  var T$0 = {
    TToStreamOfT: () => (T$0.TToStreamOfT = dart.constFn(dart.gFnType(T => {
      var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
      return [__t$StreamOfT(), [T]];
    }, T => {
      var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
      return [T$.ObjectN()];
    })))(),
    VoidToStreamOfS: () => (T$0.VoidToStreamOfS = dart.constFn(dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [__t$StreamOfS(), []];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    })))(),
    JSArrayOfStreamSubscription: () => (T$0.JSArrayOfStreamSubscription = dart.constFn(_interceptors.JSArray$(async.StreamSubscription)))(),
    StreamSubscriptionTobool: () => (T$0.StreamSubscriptionTobool = dart.constFn(dart.fnType(core.bool, [async.StreamSubscription])))(),
    CompositeSubscriptionTovoid: () => (T$0.CompositeSubscriptionTovoid = dart.constFn(dart.fnType(dart.void, [composite_subscription.CompositeSubscription])))(),
    LinkedMapOfdynamic$Frame: () => (T$0.LinkedMapOfdynamic$Frame = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, frame$.Frame)))(),
    IndexableSkipListOfdynamic$Frame: () => (T$0.IndexableSkipListOfdynamic$Frame = dart.constFn(indexable_skip_list.IndexableSkipList$(dart.dynamic, frame$.Frame)))(),
    StreamControllerOfBoxEvent: () => (T$0.StreamControllerOfBoxEvent = dart.constFn(async.StreamController$(hive.BoxEvent)))(),
    BoxEventTobool: () => (T$0.BoxEventTobool = dart.constFn(dart.fnType(core.bool, [hive.BoxEvent])))(),
    SinkOfListOfint: () => (T$0.SinkOfListOfint = dart.constFn(core.Sink$(T$.ListOfint())))(),
    intAndStringTovoid: () => (T$0.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))(),
    voidTovoid$1: () => (T$0.voidTovoid$1 = dart.constFn(dart.fnType(dart.void, [], [dart.void])))(),
    StreamControllerOfMimeMultipart: () => (T$0.StreamControllerOfMimeMultipart = dart.constFn(async.StreamController$(mime_shared.MimeMultipart)))(),
    FutureNOfvoidTovoid: () => (T$0.FutureNOfvoidTovoid = dart.constFn(dart.fnType(dart.void, [], [T$.FutureNOfvoid()])))(),
    ObjectNTovoid: () => (T$0.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    ObjectAndStackTraceToFutureOfvoid: () => (T$0.ObjectAndStackTraceToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.Object, core.StackTrace])))(),
    ComparableAndComparableToint: () => (T$0.ComparableAndComparableToint = dart.constFn(dart.fnType(core.int, [core.Comparable, core.Comparable])))(),
    ListOfdouble: () => (T$0.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    ListOfbool: () => (T$0.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    ListOfnum: () => (T$0.ListOfnum = dart.constFn(core.List$(core.num)))(),
    CompleterOfList: () => (T$0.CompleterOfList = dart.constFn(async.Completer$(core.List)))(),
    EventTovoid: () => (T$0.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    CursorWithValueToObjectN: () => (T$0.CursorWithValueToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [indexed_db.CursorWithValue])))(),
    CompleterOfIterable: () => (T$0.CompleterOfIterable = dart.constFn(async.Completer$(core.Iterable)))(),
    CursorWithValueTodynamic: () => (T$0.CursorWithValueTodynamic = dart.constFn(dart.fnType(dart.dynamic, [indexed_db.CursorWithValue])))()
  };
  var S$ = {
    $toString: dartx.toString,
    Widget_key: dart.privateName(framework, "Widget.key"),
    _loading: dart.privateName(main, "_loading"),
    _error: dart.privateName(main, "_error"),
    _items: dart.privateName(main, "_items"),
    _loadItems: dart.privateName(main, "_loadItems"),
    _addItem: dart.privateName(main, "_addItem"),
    ProgressIndicator_semanticsValue: dart.privateName(progress_indicator, "ProgressIndicator.semanticsValue"),
    ProgressIndicator_semanticsLabel: dart.privateName(progress_indicator, "ProgressIndicator.semanticsLabel"),
    ProgressIndicator_valueColor: dart.privateName(progress_indicator, "ProgressIndicator.valueColor"),
    ProgressIndicator_color: dart.privateName(progress_indicator, "ProgressIndicator.color"),
    ProgressIndicator_backgroundColor: dart.privateName(progress_indicator, "ProgressIndicator.backgroundColor"),
    ProgressIndicator_value: dart.privateName(progress_indicator, "ProgressIndicator.value"),
    CircularProgressIndicator_strokeWidth: dart.privateName(progress_indicator, "CircularProgressIndicator.strokeWidth"),
    _Enum__name: dart.privateName(core, "_Enum._name"),
    _Enum_index: dart.privateName(core, "_Enum.index"),
    CircularProgressIndicator__indicatorType: dart.privateName(progress_indicator, "CircularProgressIndicator._indicatorType"),
    SingleChildRenderObjectWidget_child: dart.privateName(framework, "SingleChildRenderObjectWidget.child"),
    Align_heightFactor: dart.privateName(basic, "Align.heightFactor"),
    Align_widthFactor: dart.privateName(basic, "Align.widthFactor"),
    Alignment_y: dart.privateName(alignment, "Alignment.y"),
    Alignment_x: dart.privateName(alignment, "Alignment.x"),
    Align_alignment: dart.privateName(basic, "Align.alignment"),
    EdgeInsets_bottom: dart.privateName(edge_insets, "EdgeInsets.bottom"),
    EdgeInsets_right: dart.privateName(edge_insets, "EdgeInsets.right"),
    EdgeInsets_top: dart.privateName(edge_insets, "EdgeInsets.top"),
    EdgeInsets_left: dart.privateName(edge_insets, "EdgeInsets.left"),
    $length: dartx.length,
    Divider_color: dart.privateName(divider, "Divider.color"),
    Divider_endIndent: dart.privateName(divider, "Divider.endIndent"),
    Divider_indent: dart.privateName(divider, "Divider.indent"),
    Divider_thickness: dart.privateName(divider, "Divider.thickness"),
    Divider_height: dart.privateName(divider, "Divider.height"),
    $_get: dartx._get,
    Text_selectionColor: dart.privateName(text, "Text.selectionColor"),
    Text_textHeightBehavior: dart.privateName(text, "Text.textHeightBehavior"),
    Text_textWidthBasis: dart.privateName(text, "Text.textWidthBasis"),
    Text_semanticsLabel: dart.privateName(text, "Text.semanticsLabel"),
    Text_maxLines: dart.privateName(text, "Text.maxLines"),
    Text_textScaleFactor: dart.privateName(text, "Text.textScaleFactor"),
    Text_overflow: dart.privateName(text, "Text.overflow"),
    Text_softWrap: dart.privateName(text, "Text.softWrap"),
    Text_locale: dart.privateName(text, "Text.locale"),
    Text_textDirection: dart.privateName(text, "Text.textDirection"),
    Text_textAlign: dart.privateName(text, "Text.textAlign"),
    Text_strutStyle: dart.privateName(text, "Text.strutStyle"),
    Text_style: dart.privateName(text, "Text.style"),
    Text_textSpan: dart.privateName(text, "Text.textSpan"),
    Text_data: dart.privateName(text, "Text.data"),
    Icon_textDirection: dart.privateName(icon, "Icon.textDirection"),
    Icon_semanticLabel: dart.privateName(icon, "Icon.semanticLabel"),
    Icon_shadows: dart.privateName(icon, "Icon.shadows"),
    Icon_color: dart.privateName(icon, "Icon.color"),
    Icon_opticalSize: dart.privateName(icon, "Icon.opticalSize"),
    Icon_grade: dart.privateName(icon, "Icon.grade"),
    Icon_weight: dart.privateName(icon, "Icon.weight"),
    Icon_fill: dart.privateName(icon, "Icon.fill"),
    Icon_size: dart.privateName(icon, "Icon.size"),
    IconData_matchTextDirection: dart.privateName(icon_data, "IconData.matchTextDirection"),
    IconData_fontPackage: dart.privateName(icon_data, "IconData.fontPackage"),
    IconData_fontFamily: dart.privateName(icon_data, "IconData.fontFamily"),
    IconData_codePoint: dart.privateName(icon_data, "IconData.codePoint"),
    Icon_icon: dart.privateName(icon, "Icon.icon"),
    _initialLink: dart.privateName(app_links_web, "_initialLink"),
    $href: dartx.href,
    $location: dartx.location,
    _getFilteredKeys: dart.privateName(shared_preferences_web, "_getFilteredKeys"),
    $remove: dartx.remove,
    $localStorage: dartx.localStorage,
    $forEach: dartx.forEach,
    _decodeValue: dart.privateName(shared_preferences_web, "_decodeValue"),
    $_set: dartx._set,
    _encodeValue: dart.privateName(shared_preferences_web, "_encodeValue"),
    $keys: dartx.keys,
    $startsWith: dartx.startsWith,
    $where: dartx.where,
    $cast: dartx.cast,
    $join: dartx.join,
    _isSafari: dart.privateName(url_launcher_web, "_isSafari"),
    _window: dart.privateName(url_launcher_web, "_window"),
    $navigator: dartx.navigator,
    $open: dartx.open,
    $userAgent: dartx.userAgent,
    $contains: dartx.contains,
    _data: dart.privateName(shared_preferences_platform_interface, "_data"),
    $removeWhere: dartx.removeWhere,
    prefix: dart.privateName(types, "PreferencesFilter.prefix"),
    allowList: dart.privateName(types, "PreferencesFilter.allowList"),
    filter: dart.privateName(types, "GetAllParameters.filter"),
    filter$1: dart.privateName(types, "ClearParameters.filter"),
    debugLabel: dart.privateName(link, "LinkTarget.debugLabel"),
    link: dart.privateName(link$, "WebLinkDelegate.link"),
    __WebLinkDelegateState__controller: dart.privateName(link$, "_#WebLinkDelegateState#_controller"),
    _controller: dart.privateName(link$, "_controller"),
    $_equals: dartx._equals,
    _followLink: dart.privateName(link$, "_followLink"),
    viewId: dart.privateName(link$, "LinkViewController.viewId"),
    __LinkViewController__element: dart.privateName(link$, "_#LinkViewController#_element"),
    _uri: dart.privateName(link$, "_uri"),
    $isEmpty: dartx.isEmpty,
    $onClick: dartx.onClick,
    _initialize: dart.privateName(link$, "_initialize"),
    _element: dart.privateName(link$, "_element"),
    _onDomClick: dart.privateName(link$, "_onDomClick"),
    $style: dartx.style,
    $opacity: dartx.opacity,
    $display: dartx.display,
    $width: dartx.width,
    $height: dartx.height,
    $cursor: dartx.cursor,
    $setAttribute: dartx.setAttribute,
    $removeAttribute: dartx.removeAttribute,
    _getHtmlTarget: dart.privateName(link$, "_getHtmlTarget"),
    $target: dartx.target,
    $shadowRoot: dartx.shadowRoot,
    $tagName: dartx.tagName,
    initialize: dart.privateName(local_storage, "LocalStorage.initialize"),
    hasAccessToken: dart.privateName(local_storage, "LocalStorage.hasAccessToken"),
    accessToken: dart.privateName(local_storage, "LocalStorage.accessToken"),
    removePersistedSession: dart.privateName(local_storage, "LocalStorage.removePersistedSession"),
    persistSession: dart.privateName(local_storage, "LocalStorage.persistSession"),
    _initializationCompleter: dart.privateName(local_storage, "_initializationCompleter"),
    __SharedPreferencesGotrueAsyncStorage__prefs: dart.privateName(local_storage, "_#SharedPreferencesGotrueAsyncStorage#_prefs"),
    _initialize$1: dart.privateName(local_storage, "_initialize"),
    _prefs: dart.privateName(local_storage, "_prefs"),
    _initialized: dart.privateName(supabase$, "_initialized"),
    __Supabase_client: dart.privateName(supabase$, "_#Supabase#client"),
    _debugEnable: dart.privateName(supabase$, "_debugEnable"),
    RealtimeClientOptions_logLevel: dart.privateName(realtime_client_options, "RealtimeClientOptions.logLevel"),
    RealtimeClientOptions_eventsPerSecond: dart.privateName(realtime_client_options, "RealtimeClientOptions.eventsPerSecond"),
    _init: dart.privateName(supabase$, "_init"),
    $addAll: dartx.addAll,
    _initialized$1: dart.privateName(supabase_auth, "_initialized"),
    __SupabaseAuth__localStorage: dart.privateName(supabase_auth, "_#SupabaseAuth#_localStorage"),
    __SupabaseAuth__authFlowType: dart.privateName(supabase_auth, "_#SupabaseAuth#_authFlowType"),
    __SupabaseAuth__initialSessionCompleter: dart.privateName(supabase_auth, "_#SupabaseAuth#_initialSessionCompleter"),
    _initialDeeplinkIsHandled: dart.privateName(supabase_auth, "_initialDeeplinkIsHandled"),
    _authCallbackUrlHostname: dart.privateName(supabase_auth, "_authCallbackUrlHostname"),
    _authSubscription: dart.privateName(supabase_auth, "_authSubscription"),
    _deeplinkSubscription: dart.privateName(supabase_auth, "_deeplinkSubscription"),
    _appLinks: dart.privateName(supabase_auth, "_appLinks"),
    _localStorage: dart.privateName(supabase_auth, "_localStorage"),
    _authFlowType: dart.privateName(supabase_auth, "_authFlowType"),
    _initialSessionCompleter: dart.privateName(supabase_auth, "_initialSessionCompleter"),
    _onAuthStateChange: dart.privateName(supabase_auth, "_onAuthStateChange"),
    $containsKey: dartx.containsKey,
    _startDeeplinkObserver: dart.privateName(supabase_auth, "_startDeeplinkObserver"),
    _stopDeeplinkObserver: dart.privateName(supabase_auth, "_stopDeeplinkObserver"),
    _recoverSupabaseSession: dart.privateName(supabase_auth, "_recoverSupabaseSession"),
    _isAuthCallbackDeeplink: dart.privateName(supabase_auth, "_isAuthCallbackDeeplink"),
    _handleIncomingLinks: dart.privateName(supabase_auth, "_handleIncomingLinks"),
    _handleInitialUri: dart.privateName(supabase_auth, "_handleInitialUri"),
    _handleDeeplink: dart.privateName(supabase_auth, "_handleDeeplink"),
    _onErrorReceivingDeeplink: dart.privateName(supabase_auth, "_onErrorReceivingDeeplink"),
    oAuthUri: dart.privateName(supabase_auth, "_OAuthSignInWebView.oAuthUri"),
    redirectTo: dart.privateName(supabase_auth, "_OAuthSignInWebView.redirectTo"),
    ___OAuthSignInWebViewState__controller: dart.privateName(supabase_auth, "_#_OAuthSignInWebViewState#_controller"),
    _controller$1: dart.privateName(supabase_auth, "_controller"),
    _handleWebResourceError: dart.privateName(supabase_auth, "_handleWebResourceError"),
    _handleNavigationRequest: dart.privateName(supabase_auth, "_handleNavigationRequest"),
    $isNotEmpty: dartx.isNotEmpty,
    MethodChannel__binaryMessenger: dart.privateName(platform_channel, "MethodChannel._binaryMessenger"),
    StandardMethodCodec_messageCodec: dart.privateName(message_codecs, "StandardMethodCodec.messageCodec"),
    MethodChannel_codec: dart.privateName(platform_channel, "MethodChannel.codec"),
    MethodChannel_name: dart.privateName(platform_channel, "MethodChannel.name"),
    EventChannel__binaryMessenger: dart.privateName(platform_channel, "EventChannel._binaryMessenger"),
    EventChannel_codec: dart.privateName(platform_channel, "EventChannel.codec"),
    EventChannel_name: dart.privateName(platform_channel, "EventChannel.name"),
    $toList: dartx.toList,
    userIdentifier: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.userIdentifier"),
    givenName: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.givenName"),
    familyName: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.familyName"),
    email: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.email"),
    authorizationCode: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.authorizationCode"),
    identityToken: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.identityToken"),
    state: dart.privateName(authorization_credential, "AuthorizationCredentialAppleID.state"),
    username: dart.privateName(authorization_credential, "AuthorizationCredentialPassword.username"),
    password: dart.privateName(authorization_credential, "AuthorizationCredentialPassword.password"),
    SignInWithAppleAuthorizationException_message: dart.privateName(exceptions, "SignInWithAppleAuthorizationException.message"),
    SignInWithAppleAuthorizationException_code: dart.privateName(exceptions, "SignInWithAppleAuthorizationException.code"),
    _name: dart.privateName(core, "_name"),
    _enumToString: dart.privateName(core, "_enumToString"),
    scopes: dart.privateName(authorization_request, "AppleIDAuthorizationRequest.scopes"),
    nonce: dart.privateName(authorization_request, "AppleIDAuthorizationRequest.nonce"),
    state$1: dart.privateName(authorization_request, "AppleIDAuthorizationRequest.state"),
    clientId: dart.privateName(web_authentication_options, "WebAuthenticationOptions.clientId"),
    redirectUri: dart.privateName(web_authentication_options, "WebAuthenticationOptions.redirectUri"),
    message: dart.privateName(exceptions, "SignInWithAppleNotSupportedException.message"),
    code: dart.privateName(exceptions, "SignInWithAppleAuthorizationException.code"),
    message$1: dart.privateName(exceptions, "SignInWithAppleAuthorizationException.message"),
    message$2: dart.privateName(exceptions, "SignInWithAppleCredentialsException.message"),
    _signInWithAppleAndroid: dart.privateName(method_channel_sign_in_with_apple, "_signInWithAppleAndroid"),
    $map: dartx.map,
    enableJavaScript: dart.privateName(types$, "InAppWebViewConfiguration.enableJavaScript"),
    enableDomStorage: dart.privateName(types$, "InAppWebViewConfiguration.enableDomStorage"),
    headers: dart.privateName(types$, "InAppWebViewConfiguration.headers"),
    mode: dart.privateName(types$, "LaunchOptions.mode"),
    webViewConfiguration: dart.privateName(types$, "LaunchOptions.webViewConfiguration"),
    webOnlyWindowName: dart.privateName(types$, "LaunchOptions.webOnlyWindowName"),
    id: dart.privateName(user, "User.id"),
    appMetadata: dart.privateName(user, "User.appMetadata"),
    userMetadata: dart.privateName(user, "User.userMetadata"),
    aud: dart.privateName(user, "User.aud"),
    confirmationSentAt: dart.privateName(user, "User.confirmationSentAt"),
    recoverySentAt: dart.privateName(user, "User.recoverySentAt"),
    emailChangeSentAt: dart.privateName(user, "User.emailChangeSentAt"),
    newEmail: dart.privateName(user, "User.newEmail"),
    invitedAt: dart.privateName(user, "User.invitedAt"),
    actionLink: dart.privateName(user, "User.actionLink"),
    email$1: dart.privateName(user, "User.email"),
    phone: dart.privateName(user, "User.phone"),
    createdAt: dart.privateName(user, "User.createdAt"),
    confirmedAt: dart.privateName(user, "User.confirmedAt"),
    emailConfirmedAt: dart.privateName(user, "User.emailConfirmedAt"),
    phoneConfirmedAt: dart.privateName(user, "User.phoneConfirmedAt"),
    lastSignInAt: dart.privateName(user, "User.lastSignInAt"),
    role: dart.privateName(user, "User.role"),
    updatedAt: dart.privateName(user, "User.updatedAt"),
    identities: dart.privateName(user, "User.identities"),
    factors: dart.privateName(user, "User.factors"),
    DeepCollectionEquality__unordered: dart.privateName(equality, "DeepCollectionEquality._unordered"),
    DeepCollectionEquality__base: dart.privateName(equality, "DeepCollectionEquality._base"),
    $hashCode: dartx.hashCode,
    eventsPerSecond: dart.privateName(realtime_client_options, "RealtimeClientOptions.eventsPerSecond"),
    logLevel: dart.privateName(realtime_client_options, "RealtimeClientOptions.logLevel"),
    openSubscriptions: dart.privateName(remove_subscription_result, "RemoveSubscriptionResult.openSubscriptions"),
    error: dart.privateName(remove_subscription_result, "RemoveSubscriptionResult.error"),
    supabaseUrl: dart.privateName(supabase_client$, "SupabaseClient.supabaseUrl"),
    supabaseKey: dart.privateName(supabase_client$, "SupabaseClient.supabaseKey"),
    schema: dart.privateName(supabase_client$, "SupabaseClient.schema"),
    restUrl: dart.privateName(supabase_client$, "SupabaseClient.restUrl"),
    realtimeUrl: dart.privateName(supabase_client$, "SupabaseClient.realtimeUrl"),
    authUrl: dart.privateName(supabase_client$, "SupabaseClient.authUrl"),
    storageUrl: dart.privateName(supabase_client$, "SupabaseClient.storageUrl"),
    functionsUrl: dart.privateName(supabase_client$, "SupabaseClient.functionsUrl"),
    __SupabaseClient__authHttpClient: dart.privateName(supabase_client$, "_#SupabaseClient#_authHttpClient"),
    __SupabaseClient_auth: dart.privateName(supabase_client$, "_#SupabaseClient#auth"),
    __SupabaseClient_functions: dart.privateName(supabase_client$, "_#SupabaseClient#functions"),
    __SupabaseClient_storage: dart.privateName(supabase_client$, "_#SupabaseClient#storage"),
    __SupabaseClient_realtime: dart.privateName(supabase_client$, "_#SupabaseClient#realtime"),
    __SupabaseClient_rest: dart.privateName(supabase_client$, "_#SupabaseClient#rest"),
    _changedAccessToken: dart.privateName(supabase_client$, "_changedAccessToken"),
    __SupabaseClient__authStateSubscription: dart.privateName(supabase_client$, "_#SupabaseClient#_authStateSubscription"),
    __SupabaseClient__isolate: dart.privateName(supabase_client$, "_#SupabaseClient#_isolate"),
    _incrementId: dart.privateName(supabase_client$, "_incrementId"),
    $replaceAll: dartx.replaceAll,
    _headers: dart.privateName(supabase_client$, "_headers"),
    _httpClient: dart.privateName(supabase_client$, "_httpClient"),
    _initSupabaseAuthClient: dart.privateName(supabase_client$, "_initSupabaseAuthClient"),
    _authHttpClient: dart.privateName(supabase_client$, "_authHttpClient"),
    _initRestClient: dart.privateName(supabase_client$, "_initRestClient"),
    _initFunctionsClient: dart.privateName(supabase_client$, "_initFunctionsClient"),
    _initStorageClient: dart.privateName(supabase_client$, "_initStorageClient"),
    _initRealtimeClient: dart.privateName(supabase_client$, "_initRealtimeClient"),
    _listenForAuthEvents: dart.privateName(supabase_client$, "_listenForAuthEvents"),
    _authStateSubscription: dart.privateName(supabase_client$, "_authStateSubscription"),
    _isolate: dart.privateName(supabase_client$, "_isolate"),
    $clear: dartx.clear,
    _getAuthHeaders: dart.privateName(supabase_client$, "_getAuthHeaders"),
    FetchOptions_forceResponse: dart.privateName(types$2, "FetchOptions.forceResponse"),
    FetchOptions_count: dart.privateName(types$2, "FetchOptions.count"),
    FetchOptions_head: dart.privateName(types$2, "FetchOptions.head"),
    RealtimeChannelConfig_key: dart.privateName(realtime_channel, "RealtimeChannelConfig.key"),
    RealtimeChannelConfig_self: dart.privateName(realtime_channel, "RealtimeChannelConfig.self"),
    RealtimeChannelConfig_ack: dart.privateName(realtime_channel, "RealtimeChannelConfig.ack"),
    _handleTokenChanged: dart.privateName(supabase_client$, "_handleTokenChanged"),
    $last: dartx.last,
    $split: dartx.split,
    $toUpperCase: dartx.toUpperCase,
    _realtime: dart.privateName(supabase_query_builder, "_realtime"),
    _schema: dart.privateName(supabase_query_builder, "_schema"),
    _table: dart.privateName(supabase_query_builder, "_table"),
    _incrementId$1: dart.privateName(supabase_query_builder, "_incrementId"),
    _assertCorrectGeneric: dart.privateName(postgrest_builder, "_assertCorrectGeneric"),
    _method: dart.privateName(postgrest_builder, "_method"),
    _options: dart.privateName(postgrest_builder, "_options"),
    _url: dart.privateName(postgrest_builder, "_url"),
    _headers$1: dart.privateName(postgrest_builder, "_headers"),
    _schema$1: dart.privateName(postgrest_builder, "_schema"),
    _httpClient$1: dart.privateName(postgrest_builder, "_httpClient"),
    _isolate$1: dart.privateName(postgrest_builder, "_isolate"),
    _body: dart.privateName(postgrest_builder, "_body"),
    _setColumnsSearchParam: dart.privateName(postgrest_builder, "_setColumnsSearchParam"),
    $fold: dartx.fold,
    __PostgrestBuilder__headers: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_headers"),
    __PostgrestBuilder__schema: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_schema"),
    __PostgrestBuilder__schema_isSet: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_schema#isSet"),
    __PostgrestBuilder__url: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_url"),
    __PostgrestBuilder__httpClient: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_httpClient"),
    __PostgrestBuilder__httpClient_isSet: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_httpClient#isSet"),
    __PostgrestBuilder__isolate: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_isolate"),
    __PostgrestBuilder__isolate_isSet: dart.privateName(postgrest_builder, "_#PostgrestBuilder#_isolate#isSet"),
    _maybeSingle: dart.privateName(postgrest_builder, "_maybeSingle"),
    _converter: dart.privateName(postgrest_builder, "_converter"),
    _execute: dart.privateName(postgrest_builder, "_execute"),
    _parseResponse: dart.privateName(postgrest_builder, "_parseResponse"),
    $first: dartx.first,
    _handleMaybeSingleError: dart.privateName(postgrest_builder, "_handleMaybeSingleError"),
    message$3: dart.privateName(supabase_realtime_error, "SupabaseRealtimeError.message"),
    _listeners: dart.privateName(hive_flutter, "_listeners"),
    _subscription: dart.privateName(hive_flutter, "_subscription"),
    $add: dartx.add,
    box: dart.privateName(hive_flutter, "WatchBoxBuilder.box"),
    builder: dart.privateName(hive_flutter, "WatchBoxBuilder.builder"),
    watchKeys: dart.privateName(hive_flutter, "WatchBoxBuilder.watchKeys"),
    _subscribe: dart.privateName(hive_flutter, "_subscribe"),
    _unsubscribe: dart.privateName(hive_flutter, "_unsubscribe"),
    $toSet: dartx.toSet,
    _preferenceCache: dart.privateName(shared_preferences, "_preferenceCache"),
    _setValue: dart.privateName(shared_preferences, "_setValue"),
    $substring: dartx.substring,
    $trimLeft: dartx.trimLeft,
    enableJavaScript$1: dart.privateName(types$0, "WebViewConfiguration.enableJavaScript"),
    enableDomStorage$1: dart.privateName(types$0, "WebViewConfiguration.enableDomStorage"),
    headers$1: dart.privateName(types$0, "WebViewConfiguration.headers"),
    linkDelegate: dart.privateName(method_channel_url_launcher, "MethodChannelUrlLauncher.linkDelegate"),
    _url$1: dart.privateName(functions_client$, "_url"),
    _headers$2: dart.privateName(functions_client$, "_headers"),
    _isolate$2: dart.privateName(functions_client$, "_isolate"),
    _hasCustomIsolate: dart.privateName(functions_client$, "_hasCustomIsolate"),
    _httpClient$2: dart.privateName(functions_client$, "_httpClient"),
    headers$2: dart.privateName(types$1, "FunctionInvokeOptions.headers"),
    body: dart.privateName(types$1, "FunctionInvokeOptions.body"),
    responseType: dart.privateName(types$1, "FunctionInvokeOptions.responseType"),
    data: dart.privateName(types$1, "FunctionResponse.data"),
    status: dart.privateName(types$1, "FunctionResponse.status"),
    Duration__duration: dart.privateName(core, "Duration._duration"),
    __GoTrueAdminApi__fetch: dart.privateName(gotrue_admin_api, "_#GoTrueAdminApi#_fetch"),
    __GoTrueAdminApi_mfa: dart.privateName(gotrue_admin_api, "_#GoTrueAdminApi#mfa"),
    _url$2: dart.privateName(gotrue_admin_api, "_url"),
    _headers$3: dart.privateName(gotrue_admin_api, "_headers"),
    _httpClient$3: dart.privateName(gotrue_admin_api, "_httpClient"),
    _fetch: dart.privateName(gotrue_admin_api, "_fetch"),
    __GoTrueClient_admin: dart.privateName(gotrue_client, "_#GoTrueClient#admin"),
    __GoTrueClient_mfa: dart.privateName(gotrue_client, "_#GoTrueClient#mfa"),
    _currentUser: dart.privateName(gotrue_client, "_currentUser"),
    _currentSession: dart.privateName(gotrue_client, "_currentSession"),
    __GoTrueClient__fetch: dart.privateName(gotrue_client, "_#GoTrueClient#_fetch"),
    __GoTrueClient__autoRefreshToken: dart.privateName(gotrue_client, "_#GoTrueClient#_autoRefreshToken"),
    _refreshTokenTimer: dart.privateName(gotrue_client, "_refreshTokenTimer"),
    _refreshTokenRetryCount: dart.privateName(gotrue_client, "_refreshTokenRetryCount"),
    _refreshTokenCompleter: dart.privateName(gotrue_client, "_refreshTokenCompleter"),
    _isRefreshingToken: dart.privateName(gotrue_client, "_isRefreshingToken"),
    _onAuthStateChangeController: dart.privateName(gotrue_client, "_onAuthStateChangeController"),
    _onAuthStateChangeControllerSync: dart.privateName(gotrue_client, "_onAuthStateChangeControllerSync"),
    _url$3: dart.privateName(gotrue_client, "_url"),
    _headers$4: dart.privateName(gotrue_client, "_headers"),
    _httpClient$4: dart.privateName(gotrue_client, "_httpClient"),
    _asyncStorage: dart.privateName(gotrue_client, "_asyncStorage"),
    _flowType: dart.privateName(gotrue_client, "_flowType"),
    _autoRefreshToken: dart.privateName(gotrue_client, "_autoRefreshToken"),
    _fetch$1: dart.privateName(gotrue_client, "_fetch"),
    _removeSession: dart.privateName(gotrue_client, "_removeSession"),
    _saveSession: dart.privateName(gotrue_client, "_saveSession"),
    _notifyAllSubscribers: dart.privateName(gotrue_client, "_notifyAllSubscribers"),
    _handleProviderSignIn: dart.privateName(gotrue_client, "_handleProviderSignIn"),
    _callRefreshToken: dart.privateName(gotrue_client, "_callRefreshToken"),
    _notifyException: dart.privateName(gotrue_client, "_notifyException"),
    $round: dartx.round,
    _setTokenRefreshTimer: dart.privateName(gotrue_client, "_setTokenRefreshTimer"),
    _client: dart.privateName(gotrue_client, "_client"),
    $any: dartx.any,
    message$4: dart.privateName(auth_exception, "AuthException.message"),
    statusCode: dart.privateName(auth_exception, "AuthException.statusCode"),
    session: dart.privateName(auth_response, "AuthResponse.session"),
    user: dart.privateName(auth_response, "AuthResponse.user"),
    provider: dart.privateName(auth_response, "OAuthResponse.provider"),
    url: dart.privateName(auth_response, "OAuthResponse.url"),
    user$1: dart.privateName(auth_response, "UserResponse.user"),
    messageId: dart.privateName(auth_response, "ResendResponse.messageId"),
    session$1: dart.privateName(auth_response, "AuthSessionUrlResponse.session"),
    redirectType: dart.privateName(auth_response, "AuthSessionUrlResponse.redirectType"),
    properties: dart.privateName(auth_response, "GenerateLinkResponse.properties"),
    user$2: dart.privateName(auth_response, "GenerateLinkResponse.user"),
    actionLink$1: dart.privateName(auth_response, "GenerateLinkProperties.actionLink"),
    emailOtp: dart.privateName(auth_response, "GenerateLinkProperties.emailOtp"),
    hashedToken: dart.privateName(auth_response, "GenerateLinkProperties.hashedToken"),
    redirectTo$1: dart.privateName(auth_response, "GenerateLinkProperties.redirectTo"),
    verificationType: dart.privateName(auth_response, "GenerateLinkProperties.verificationType"),
    $codeUnitAt: dartx.codeUnitAt,
    $toLowerCase: dartx.toLowerCase,
    event: dart.privateName(auth_state, "AuthState.event"),
    session$2: dart.privateName(auth_state, "AuthState.session"),
    id$1: dart.privateName(mfa, "AuthMFAEnrollResponse.id"),
    type: dart.privateName(mfa, "AuthMFAEnrollResponse.type"),
    totp: dart.privateName(mfa, "AuthMFAEnrollResponse.totp"),
    $firstWhere: dartx.firstWhere,
    qrCode: dart.privateName(mfa, "TOTPEnrollment.qrCode"),
    secret: dart.privateName(mfa, "TOTPEnrollment.secret"),
    uri: dart.privateName(mfa, "TOTPEnrollment.uri"),
    id$2: dart.privateName(mfa, "AuthMFAChallengeResponse.id"),
    expiresAt: dart.privateName(mfa, "AuthMFAChallengeResponse.expiresAt"),
    accessToken$1: dart.privateName(mfa, "AuthMFAVerifyResponse.accessToken"),
    tokenType: dart.privateName(mfa, "AuthMFAVerifyResponse.tokenType"),
    expiresIn: dart.privateName(mfa, "AuthMFAVerifyResponse.expiresIn"),
    refreshToken: dart.privateName(mfa, "AuthMFAVerifyResponse.refreshToken"),
    user$3: dart.privateName(mfa, "AuthMFAVerifyResponse.user"),
    id$3: dart.privateName(mfa, "AuthMFAUnenrollResponse.id"),
    all: dart.privateName(mfa, "AuthMFAListFactorsResponse.all"),
    totp$1: dart.privateName(mfa, "AuthMFAListFactorsResponse.totp"),
    factors$1: dart.privateName(mfa, "AuthMFAAdminListFactorsResponse.factors"),
    id$4: dart.privateName(mfa, "AuthMFAAdminDeleteFactorResponse.id"),
    id$5: dart.privateName(mfa, "Factor.id"),
    friendlyName: dart.privateName(mfa, "Factor.friendlyName"),
    factorType: dart.privateName(mfa, "Factor.factorType"),
    status$1: dart.privateName(mfa, "Factor.status"),
    createdAt$1: dart.privateName(mfa, "Factor.createdAt"),
    updatedAt$1: dart.privateName(mfa, "Factor.updatedAt"),
    currentLevel: dart.privateName(mfa, "AuthMFAGetAuthenticatorAssuranceLevelResponse.currentLevel"),
    nextLevel: dart.privateName(mfa, "AuthMFAGetAuthenticatorAssuranceLevelResponse.nextLevel"),
    currentAuthenticationMethods: dart.privateName(mfa, "AuthMFAGetAuthenticatorAssuranceLevelResponse.currentAuthenticationMethods"),
    method: dart.privateName(mfa, "AMREntry.method"),
    timestamp: dart.privateName(mfa, "AMREntry.timestamp"),
    providerToken: dart.privateName(session$, "Session.providerToken"),
    providerRefreshToken: dart.privateName(session$, "Session.providerRefreshToken"),
    accessToken$2: dart.privateName(session$, "Session.accessToken"),
    expiresIn$1: dart.privateName(session$, "Session.expiresIn"),
    refreshToken$1: dart.privateName(session$, "Session.refreshToken"),
    tokenType$1: dart.privateName(session$, "Session.tokenType"),
    user$4: dart.privateName(session$, "Session.user"),
    __Session_expiresAt: dart.privateName(session$, "_#Session#expiresAt"),
    __Session_expiresAt_isSet: dart.privateName(session$, "_#Session#expiresAt#isSet"),
    _expiresAt: dart.privateName(session$, "_expiresAt"),
    id$6: dart.privateName(user, "UserIdentity.id"),
    userId: dart.privateName(user, "UserIdentity.userId"),
    identityData: dart.privateName(user, "UserIdentity.identityData"),
    provider$1: dart.privateName(user, "UserIdentity.provider"),
    createdAt$2: dart.privateName(user, "UserIdentity.createdAt"),
    lastSignInAt$1: dart.privateName(user, "UserIdentity.lastSignInAt"),
    updatedAt$2: dart.privateName(user, "UserIdentity.updatedAt"),
    email$2: dart.privateName(user_attributes, "UserAttributes.email"),
    phone$1: dart.privateName(user_attributes, "UserAttributes.phone"),
    password$1: dart.privateName(user_attributes, "UserAttributes.password"),
    nonce$1: dart.privateName(user_attributes, "UserAttributes.nonce"),
    data$1: dart.privateName(user_attributes, "UserAttributes.data"),
    userMetadata$1: dart.privateName(user_attributes, "AdminUserAttributes.userMetadata"),
    appMetadata$1: dart.privateName(user_attributes, "AdminUserAttributes.appMetadata"),
    emailConfirm: dart.privateName(user_attributes, "AdminUserAttributes.emailConfirm"),
    phoneConfirm: dart.privateName(user_attributes, "AdminUserAttributes.phoneConfirm"),
    banDuration: dart.privateName(user_attributes, "AdminUserAttributes.banDuration"),
    url$1: dart.privateName(postgrest$, "PostgrestClient.url"),
    headers$3: dart.privateName(postgrest$, "PostgrestClient.headers"),
    schema$1: dart.privateName(postgrest$, "PostgrestClient.schema"),
    httpClient: dart.privateName(postgrest$, "PostgrestClient.httpClient"),
    _isolate$3: dart.privateName(postgrest$, "_isolate"),
    _hasCustomIsolate$1: dart.privateName(postgrest$, "_hasCustomIsolate"),
    $every: dartx.every,
    _cleanFilterArray: dart.privateName(postgrest_builder, "_cleanFilterArray"),
    message$5: dart.privateName(types$2, "PostgrestException.message"),
    code$1: dart.privateName(types$2, "PostgrestException.code"),
    details: dart.privateName(types$2, "PostgrestException.details"),
    hint: dart.privateName(types$2, "PostgrestException.hint"),
    data$2: dart.privateName(types$2, "PostgrestResponse.data"),
    status$2: dart.privateName(types$2, "PostgrestResponse.status"),
    count: dart.privateName(types$2, "PostgrestResponse.count"),
    head: dart.privateName(types$2, "FetchOptions.head"),
    count$1: dart.privateName(types$2, "FetchOptions.count"),
    forceResponse: dart.privateName(types$2, "FetchOptions.forceResponse"),
    type$1: dart.privateName(realtime_channel, "Binding.type"),
    filter$2: dart.privateName(realtime_channel, "Binding.filter"),
    callback: dart.privateName(realtime_channel, "Binding.callback"),
    id$7: dart.privateName(realtime_channel, "Binding.id"),
    event$1: dart.privateName(realtime_channel, "ChannelFilter.event"),
    schema$2: dart.privateName(realtime_channel, "ChannelFilter.schema"),
    table: dart.privateName(realtime_channel, "ChannelFilter.table"),
    filter$3: dart.privateName(realtime_channel, "ChannelFilter.filter"),
    ack: dart.privateName(realtime_channel, "RealtimeChannelConfig.ack"),
    self: dart.privateName(realtime_channel, "RealtimeChannelConfig.self"),
    key: dart.privateName(realtime_channel, "RealtimeChannelConfig.key"),
    joinedOnce: dart.privateName(realtime_channel, "RealtimeChannel.joinedOnce"),
    subTopic: dart.privateName(realtime_channel, "RealtimeChannel.subTopic"),
    topic: dart.privateName(realtime_channel, "RealtimeChannel.topic"),
    params: dart.privateName(realtime_channel, "RealtimeChannel.params"),
    socket: dart.privateName(realtime_channel, "RealtimeChannel.socket"),
    _bindings: dart.privateName(realtime_channel, "_bindings"),
    _state: dart.privateName(realtime_channel, "_state"),
    __RealtimeChannel_joinPush: dart.privateName(realtime_channel, "_#RealtimeChannel#joinPush"),
    __RealtimeChannel__rejoinTimer: dart.privateName(realtime_channel, "_#RealtimeChannel#_rejoinTimer"),
    _pushBuffer: dart.privateName(realtime_channel, "_pushBuffer"),
    __RealtimeChannel_presence: dart.privateName(realtime_channel, "_#RealtimeChannel#presence"),
    __RealtimeChannel_broadcastEndpointURL: dart.privateName(realtime_channel, "_#RealtimeChannel#broadcastEndpointURL"),
    _timeout: dart.privateName(realtime_channel, "_timeout"),
    $replaceFirst: dartx.replaceFirst,
    _broadcastEndpointURL: dart.privateName(realtime_channel, "_broadcastEndpointURL"),
    _rejoinTimer: dart.privateName(realtime_channel, "_rejoinTimer"),
    $values: dartx.values,
    code$2: dart.privateName(realtime_client$, "RealtimeCloseEvent.code"),
    reason: dart.privateName(realtime_client$, "RealtimeCloseEvent.reason"),
    accessToken$3: dart.privateName(realtime_client$, "RealtimeClient.accessToken"),
    channels: dart.privateName(realtime_client$, "RealtimeClient.channels"),
    endPoint: dart.privateName(realtime_client$, "RealtimeClient.endPoint"),
    headers$4: dart.privateName(realtime_client$, "RealtimeClient.headers"),
    params$1: dart.privateName(realtime_client$, "RealtimeClient.params"),
    timeout: dart.privateName(realtime_client$, "RealtimeClient.timeout"),
    transport: dart.privateName(realtime_client$, "RealtimeClient.transport"),
    httpClient$1: dart.privateName(realtime_client$, "RealtimeClient.httpClient"),
    heartbeatIntervalMs: dart.privateName(realtime_client$, "RealtimeClient.heartbeatIntervalMs"),
    heartbeatTimer: dart.privateName(realtime_client$, "RealtimeClient.heartbeatTimer"),
    pendingHeartbeatRef: dart.privateName(realtime_client$, "RealtimeClient.pendingHeartbeatRef"),
    ref: dart.privateName(realtime_client$, "RealtimeClient.ref")
  };
  var S$0 = {
    logger: dart.privateName(realtime_client$, "RealtimeClient.logger"),
    conn: dart.privateName(realtime_client$, "RealtimeClient.conn"),
    sendBuffer: dart.privateName(realtime_client$, "RealtimeClient.sendBuffer"),
    stateChangeCallbacks: dart.privateName(realtime_client$, "RealtimeClient.stateChangeCallbacks"),
    longpollerTimeout: dart.privateName(realtime_client$, "RealtimeClient.longpollerTimeout"),
    connState: dart.privateName(realtime_client$, "RealtimeClient.connState"),
    eventsPerSecondLimitMs: dart.privateName(realtime_client$, "RealtimeClient.eventsPerSecondLimitMs"),
    inThrottle: dart.privateName(realtime_client$, "RealtimeClient.inThrottle"),
    __RealtimeClient_reconnectTimer: dart.privateName(realtime_client$, "_#RealtimeClient#reconnectTimer"),
    __RealtimeClient_encode: dart.privateName(realtime_client$, "_#RealtimeClient#encode"),
    __RealtimeClient_decode: dart.privateName(realtime_client$, "_#RealtimeClient#decode"),
    __RealtimeClient_reconnectAfterMs: dart.privateName(realtime_client$, "_#RealtimeClient#reconnectAfterMs"),
    $floor: dartx.floor,
    _onConnError: dart.privateName(realtime_client$, "_onConnError"),
    _onConnOpen: dart.privateName(realtime_client$, "_onConnOpen"),
    _onConnClose: dart.privateName(realtime_client$, "_onConnClose"),
    _throttle: dart.privateName(realtime_client$, "_throttle"),
    _appendParams: dart.privateName(realtime_client$, "_appendParams"),
    _flushSendBuffer: dart.privateName(realtime_client$, "_flushSendBuffer"),
    _triggerChanError: dart.privateName(realtime_client$, "_triggerChanError"),
    presenceRef: dart.privateName(realtime_presence, "Presence.presenceRef"),
    payload: dart.privateName(realtime_presence, "Presence.payload"),
    events: dart.privateName(realtime_presence, "PresenceOpts.events"),
    state$2: dart.privateName(realtime_presence, "PresenceEvents.state"),
    diff: dart.privateName(realtime_presence, "PresenceEvents.diff"),
    state$3: dart.privateName(realtime_presence, "RealtimePresence.state"),
    pendingDiffs: dart.privateName(realtime_presence, "RealtimePresence.pendingDiffs"),
    joinRef: dart.privateName(realtime_presence, "RealtimePresence.joinRef"),
    caller: dart.privateName(realtime_presence, "RealtimePresence.caller"),
    channel: dart.privateName(realtime_presence, "RealtimePresence.channel"),
    $insertAll: dartx.insertAll,
    $entries: dartx.entries,
    name: dart.privateName(transformers, "PostgresColumn.name"),
    type$2: dart.privateName(transformers, "PostgresColumn.type"),
    flags: dart.privateName(transformers, "PostgresColumn.flags"),
    typeModifier: dart.privateName(transformers, "PostgresColumn.typeModifier"),
    _defaultRetryAttempts: dart.privateName(storage_client$, "_defaultRetryAttempts"),
    url$2: dart.privateName(storage_bucket_api, "StorageBucketApi.url"),
    headers$5: dart.privateName(storage_bucket_api, "StorageBucketApi.headers"),
    BucketOptions_allowedMimeTypes: dart.privateName(types$3, "BucketOptions.allowedMimeTypes"),
    BucketOptions_fileSizeLimit: dart.privateName(types$3, "BucketOptions.fileSizeLimit"),
    BucketOptions_public: dart.privateName(types$3, "BucketOptions.public"),
    url$3: dart.privateName(storage_file_api, "StorageFileApi.url"),
    headers$6: dart.privateName(storage_file_api, "StorageFileApi.headers"),
    bucketId: dart.privateName(storage_file_api, "StorageFileApi.bucketId"),
    _retryAttempts: dart.privateName(storage_file_api, "StorageFileApi._retryAttempts"),
    _retryAttempts$1: dart.privateName(storage_file_api, "_retryAttempts"),
    _getFinalPath: dart.privateName(storage_file_api, "_getFinalPath"),
    _removeEmptyFolders: dart.privateName(storage_file_api, "_removeEmptyFolders"),
    FileOptions_contentType: dart.privateName(types$3, "FileOptions.contentType"),
    FileOptions_upsert: dart.privateName(types$3, "FileOptions.upsert"),
    FileOptions_cacheControl: dart.privateName(types$3, "FileOptions.cacheControl"),
    SearchOptions_search: dart.privateName(types$3, "SearchOptions.search"),
    SortBy_order: dart.privateName(types$3, "SortBy.order"),
    SortBy_column: dart.privateName(types$3, "SortBy.column"),
    SearchOptions_sortBy: dart.privateName(types$3, "SearchOptions.sortBy"),
    SearchOptions_offset: dart.privateName(types$3, "SearchOptions.offset"),
    SearchOptions_limit: dart.privateName(types$3, "SearchOptions.limit"),
    headers$7: dart.privateName(types$3, "FetchOptions.headers"),
    noResolveJson: dart.privateName(types$3, "FetchOptions.noResolveJson"),
    id$8: dart.privateName(types$3, "Bucket.id"),
    name$1: dart.privateName(types$3, "Bucket.name"),
    owner: dart.privateName(types$3, "Bucket.owner"),
    createdAt$3: dart.privateName(types$3, "Bucket.createdAt"),
    updatedAt$3: dart.privateName(types$3, "Bucket.updatedAt"),
    $public: dart.privateName(types$3, "Bucket.public"),
    fileSizeLimit: dart.privateName(types$3, "Bucket.fileSizeLimit"),
    allowedMimeTypes: dart.privateName(types$3, "Bucket.allowedMimeTypes"),
    name$2: dart.privateName(types$3, "FileObject.name"),
    bucketId$1: dart.privateName(types$3, "FileObject.bucketId"),
    owner$1: dart.privateName(types$3, "FileObject.owner"),
    id$9: dart.privateName(types$3, "FileObject.id"),
    updatedAt$4: dart.privateName(types$3, "FileObject.updatedAt"),
    createdAt$4: dart.privateName(types$3, "FileObject.createdAt"),
    lastAccessedAt: dart.privateName(types$3, "FileObject.lastAccessedAt"),
    metadata: dart.privateName(types$3, "FileObject.metadata"),
    buckets: dart.privateName(types$3, "FileObject.buckets"),
    $public$1: dart.privateName(types$3, "BucketOptions.public"),
    fileSizeLimit$1: dart.privateName(types$3, "BucketOptions.fileSizeLimit"),
    allowedMimeTypes$1: dart.privateName(types$3, "BucketOptions.allowedMimeTypes"),
    cacheControl: dart.privateName(types$3, "FileOptions.cacheControl"),
    upsert: dart.privateName(types$3, "FileOptions.upsert"),
    contentType: dart.privateName(types$3, "FileOptions.contentType"),
    limit: dart.privateName(types$3, "SearchOptions.limit"),
    offset: dart.privateName(types$3, "SearchOptions.offset"),
    sortBy: dart.privateName(types$3, "SearchOptions.sortBy"),
    search: dart.privateName(types$3, "SearchOptions.search"),
    column: dart.privateName(types$3, "SortBy.column"),
    order: dart.privateName(types$3, "SortBy.order"),
    path: dart.privateName(types$3, "SignedUrl.path"),
    signedUrl: dart.privateName(types$3, "SignedUrl.signedUrl"),
    token: dart.privateName(types$3, "SignedUploadURLResponse.token"),
    message$6: dart.privateName(types$3, "StorageException.message"),
    error$1: dart.privateName(types$3, "StorageException.error"),
    statusCode$1: dart.privateName(types$3, "StorageException.statusCode"),
    _cancelled: dart.privateName(types$3, "_cancelled"),
    width: dart.privateName(types$3, "TransformOptions.width"),
    height: dart.privateName(types$3, "TransformOptions.height"),
    resize: dart.privateName(types$3, "TransformOptions.resize"),
    quality: dart.privateName(types$3, "TransformOptions.quality"),
    format: dart.privateName(types$3, "TransformOptions.format"),
    _supabaseKey: dart.privateName(auth_http_client, "_supabaseKey"),
    _inner: dart.privateName(auth_http_client, "_inner"),
    _auth: dart.privateName(auth_http_client, "_auth"),
    $putIfAbsent: dartx.putIfAbsent,
    _sendUnstreamed: dart.privateName(base_client, "_sendUnstreamed"),
    _checkResponseSuccess: dart.privateName(base_client, "_checkResponseSuccess"),
    _channel: dart.privateName(supabase_stream_builder, "_channel"),
    _streamController: dart.privateName(supabase_stream_builder, "_streamController"),
    _streamData: dart.privateName(supabase_stream_builder, "_streamData"),
    _streamFilter: dart.privateName(supabase_stream_builder, "_streamFilter"),
    _orderBy: dart.privateName(supabase_stream_builder, "_orderBy"),
    _limit: dart.privateName(supabase_stream_builder, "_limit"),
    _queryBuilder: dart.privateName(supabase_stream_builder, "_queryBuilder"),
    _realtimeTopic: dart.privateName(supabase_stream_builder, "_realtimeTopic"),
    _realtimeClient: dart.privateName(supabase_stream_builder, "_realtimeClient"),
    _schema$2: dart.privateName(supabase_stream_builder, "_schema"),
    _table$1: dart.privateName(supabase_stream_builder, "_table"),
    _uniqueColumns: dart.privateName(supabase_stream_builder, "_uniqueColumns"),
    _setupStream: dart.privateName(supabase_stream_builder, "_setupStream"),
    _getStreamData: dart.privateName(supabase_stream_builder, "_getStreamData"),
    _addStream: dart.privateName(supabase_stream_builder, "_addStream"),
    _isTargetRecord: dart.privateName(supabase_stream_builder, "_isTargetRecord"),
    $indexWhere: dartx.indexWhere,
    $removeAt: dartx.removeAt,
    _addException: dart.privateName(supabase_stream_builder, "_addException"),
    $compareTo: dartx.compareTo,
    $sort: dartx.sort,
    _sortData: dart.privateName(supabase_stream_builder, "_sortData"),
    $take: dartx.take,
    index: dart.privateName(hive, "HiveField.index"),
    defaultValue: dart.privateName(hive, "HiveField.defaultValue"),
    typeId: dart.privateName(hive, "HiveType.typeId"),
    adapterName: dart.privateName(hive, "HiveType.adapterName"),
    Utf8Decoder__allowMalformed: dart.privateName(convert, "Utf8Decoder._allowMalformed"),
    key$1: dart.privateName(hive, "BoxEvent.key"),
    value: dart.privateName(hive, "BoxEvent.value"),
    deleted: dart.privateName(hive, "BoxEvent.deleted"),
    $runtimeType: dartx.runtimeType,
    __HiveAesCipher__cipher: dart.privateName(hive, "_#HiveAesCipher#_cipher"),
    __HiveAesCipher__keyCrc: dart.privateName(hive, "_#HiveAesCipher#_keyCrc"),
    _cipher: dart.privateName(hive, "_cipher"),
    _keyCrc: dart.privateName(hive, "_keyCrc"),
    $setAll: dartx.setAll,
    message$7: dart.privateName(hive, "HiveError.message"),
    $iterator: dartx.iterator,
    _clientToken: dart.privateName(client$, "_clientToken"),
    message$8: dart.privateName(exception, "ClientException.message"),
    uri$1: dart.privateName(exception, "ClientException.uri"),
    _defaultEncoding: dart.privateName(request$, "_defaultEncoding"),
    _bodyBytes: dart.privateName(request$, "_bodyBytes"),
    _contentType: dart.privateName(request$, "_contentType"),
    _checkFinalized: dart.privateName(request$, "_checkFinalized"),
    method$1: dart.privateName(base_request, "BaseRequest.method"),
    url$4: dart.privateName(base_request, "BaseRequest.url"),
    headers$8: dart.privateName(base_request, "BaseRequest.headers"),
    _contentLength: dart.privateName(base_request, "_contentLength"),
    _persistentConnection: dart.privateName(base_request, "_persistentConnection"),
    _followRedirects: dart.privateName(base_request, "_followRedirects"),
    _maxRedirects: dart.privateName(base_request, "_maxRedirects"),
    _finalized: dart.privateName(base_request, "_finalized"),
    _checkFinalized$1: dart.privateName(base_request, "_checkFinalized"),
    StreamView__stream: dart.privateName(async, "StreamView._stream"),
    bodyBytes: dart.privateName(response$, "Response.bodyBytes"),
    request: dart.privateName(base_response, "BaseResponse.request"),
    statusCode$2: dart.privateName(base_response, "BaseResponse.statusCode"),
    reasonPhrase: dart.privateName(base_response, "BaseResponse.reasonPhrase"),
    contentLength: dart.privateName(base_response, "BaseResponse.contentLength"),
    headers$9: dart.privateName(base_response, "BaseResponse.headers"),
    isRedirect: dart.privateName(base_response, "BaseResponse.isRedirect"),
    persistentConnection: dart.privateName(base_response, "BaseResponse.persistentConnection"),
    _controller$2: dart.privateName(streamed_request, "_controller"),
    Utf8Codec__allowMalformed: dart.privateName(convert, "Utf8Codec._allowMalformed"),
    field: dart.privateName(multipart_file, "MultipartFile.field"),
    length: dart.privateName(multipart_file, "MultipartFile.length"),
    filename: dart.privateName(multipart_file, "MultipartFile.filename"),
    contentType$1: dart.privateName(multipart_file, "MultipartFile.contentType"),
    _isFinalized: dart.privateName(multipart_file, "_isFinalized"),
    _stream: dart.privateName(multipart_file, "_stream"),
    fields: dart.privateName(multipart_request, "MultipartRequest.fields"),
    files: dart.privateName(multipart_request, "MultipartRequest.files"),
    _headerForField: dart.privateName(multipart_request, "_headerForField"),
    _headerForFile: dart.privateName(multipart_request, "_headerForFile"),
    _boundaryString: dart.privateName(multipart_request, "_boundaryString"),
    _finalize: dart.privateName(multipart_request, "_finalize"),
    _browserEncode: dart.privateName(multipart_request, "_browserEncode"),
    stream: dart.privateName(streamed_response, "StreamedResponse.stream"),
    bytes: dart.privateName(digest, "Digest.bytes"),
    _hash: dart.privateName(hmac, "_hash"),
    _key: dart.privateName(hmac, "_key"),
    $setRange: dartx.setRange,
    _innerResultSink: dart.privateName(hmac, "_innerResultSink"),
    ___HmacSink__innerSink: dart.privateName(hmac, "_#_HmacSink#_innerSink"),
    _isClosed: dart.privateName(hmac, "_isClosed"),
    _outerSink: dart.privateName(hmac, "_outerSink"),
    _innerSink: dart.privateName(hmac, "_innerSink"),
    blockSize: dart.privateName(md5, "_MD5.blockSize"),
    digest: dart.privateName(md5, "_MD5Sink.digest"),
    $modulo: dartx['%'],
    Endian__littleEndian: dart.privateName(typed_data, "Endian._littleEndian"),
    _lengthInBytes: dart.privateName(hash_sink, "_lengthInBytes"),
    _pendingData: dart.privateName(hash_sink, "_pendingData"),
    _isClosed$1: dart.privateName(hash_sink, "_isClosed"),
    _sink: dart.privateName(hash_sink, "_sink"),
    _endian: dart.privateName(hash_sink, "_endian"),
    _signatureBytes: dart.privateName(hash_sink, "_signatureBytes"),
    _currentChunk: dart.privateName(hash_sink, "_currentChunk"),
    _iterate: dart.privateName(hash_sink, "_iterate"),
    _finalizeData: dart.privateName(hash_sink, "_finalizeData"),
    _byteDigest: dart.privateName(hash_sink, "_byteDigest"),
    $buffer: dartx.buffer,
    $asUint8List: dartx.asUint8List,
    $lengthInBytes: dartx.lengthInBytes,
    $asByteData: dartx.asByteData,
    $setUint32: dartx.setUint32,
    $truncate: dartx.truncate,
    $getUint32: dartx.getUint32,
    $removeRange: dartx.removeRange,
    _roundUp: dart.privateName(hash_sink, "_roundUp"),
    blockSize$1: dart.privateName(sha1, "_Sha1.blockSize"),
    digest$1: dart.privateName(sha1, "_Sha1Sink.digest"),
    _extended: dart.privateName(sha1, "_extended"),
    blockSize$2: dart.privateName(sha256, "_Sha256.blockSize"),
    blockSize$3: dart.privateName(sha256, "_Sha224.blockSize"),
    _extended$1: dart.privateName(sha256, "_extended"),
    _digest: dart.privateName(sha256, "_digest"),
    $rightShift: dartx['>>'],
    $leftShift: dartx['<<'],
    _rotr32: dart.privateName(sha256, "_rotr32"),
    _ch: dart.privateName(sha256, "_ch"),
    _maj: dart.privateName(sha256, "_maj"),
    _bsig0: dart.privateName(sha256, "_bsig0"),
    _bsig1: dart.privateName(sha256, "_bsig1"),
    _ssig0: dart.privateName(sha256, "_ssig0"),
    _ssig1: dart.privateName(sha256, "_ssig1"),
    $asUint32List: dartx.asUint32List,
    blockSize$4: dart.privateName(sha512, "_Sha384.blockSize"),
    blockSize$5: dart.privateName(sha512, "_Sha512.blockSize"),
    blockSize$6: dart.privateName(sha512, "_Sha512224.blockSize"),
    blockSize$7: dart.privateName(sha512, "_Sha512256.blockSize"),
    color: dart.privateName(apple_logo_painter, "AppleLogoPainter.color"),
    builder$1: dart.privateName(sign_in_with_apple_builder, "SignInWithAppleBuilder.builder"),
    fallbackBuilder: dart.privateName(sign_in_with_apple_builder, "SignInWithAppleBuilder.fallbackBuilder"),
    _isAvailableFuture: dart.privateName(sign_in_with_apple_builder, "_isAvailableFuture"),
    SizedBox_height: dart.privateName(basic, "SizedBox.height"),
    SizedBox_width: dart.privateName(basic, "SizedBox.width"),
    onPressed: dart.privateName(sign_in_with_apple_button, "SignInWithAppleButton.onPressed"),
    text: dart.privateName(sign_in_with_apple_button, "SignInWithAppleButton.text"),
    height$1: dart.privateName(sign_in_with_apple_button, "SignInWithAppleButton.height"),
    style: dart.privateName(sign_in_with_apple_button, "SignInWithAppleButton.style"),
    borderRadius: dart.privateName(sign_in_with_apple_button, "SignInWithAppleButton.borderRadius"),
    iconAlignment: dart.privateName(sign_in_with_apple_button, "SignInWithAppleButton.iconAlignment"),
    Radius_y: dart.privateName(ui, "Radius.y"),
    Radius_x: dart.privateName(ui, "Radius.x"),
    BorderRadius_bottomRight: dart.privateName(border_radius, "BorderRadius.bottomRight"),
    BorderRadius_bottomLeft: dart.privateName(border_radius, "BorderRadius.bottomLeft"),
    BorderRadius_topRight: dart.privateName(border_radius, "BorderRadius.topRight"),
    BorderRadius_topLeft: dart.privateName(border_radius, "BorderRadius.topLeft"),
    _backgroundColor: dart.privateName(sign_in_with_apple_button, "_backgroundColor"),
    _contrastColor: dart.privateName(sign_in_with_apple_button, "_contrastColor"),
    _decoration: dart.privateName(sign_in_with_apple_button, "_decoration"),
    platform: dart.privateName(navigation_delegate, "NavigationDelegate.platform"),
    onNavigationRequest: dart.privateName(navigation_delegate, "NavigationDelegate.onNavigationRequest"),
    onPageStarted: dart.privateName(navigation_delegate, "NavigationDelegate.onPageStarted"),
    onPageFinished: dart.privateName(navigation_delegate, "NavigationDelegate.onPageFinished"),
    onProgress: dart.privateName(navigation_delegate, "NavigationDelegate.onProgress"),
    onWebResourceError: dart.privateName(navigation_delegate, "NavigationDelegate.onWebResourceError"),
    platform$1: dart.privateName(webview_controller, "WebViewController.platform"),
    types: dart.privateName(webview_controller, "WebViewPermissionRequest.types"),
    platform$2: dart.privateName(webview_controller, "WebViewPermissionRequest.platform"),
    platform$3: dart.privateName(webview_cookie_manager, "WebViewCookieManager.platform"),
    platform$4: dart.privateName(webview_widget, "WebViewWidget.platform"),
    __WebViewWidget_layoutDirection: dart.privateName(webview_widget, "_#WebViewWidget#layoutDirection"),
    __WebViewWidget_gestureRecognizers: dart.privateName(webview_widget, "_#WebViewWidget#gestureRecognizers"),
    httpClient$2: dart.privateName(fetch, "GotrueFetch.httpClient"),
    _handleError: dart.privateName(fetch, "_handleError"),
    headers$10: dart.privateName(fetch_options, "FetchOptions.headers"),
    noResolveJson$1: dart.privateName(fetch_options, "FetchOptions.noResolveJson"),
    jwt: dart.privateName(fetch_options, "GotrueRequestOptions.jwt"),
    redirectTo$2: dart.privateName(fetch_options, "GotrueRequestOptions.redirectTo"),
    body$1: dart.privateName(fetch_options, "GotrueRequestOptions.body"),
    query: dart.privateName(fetch_options, "GotrueRequestOptions.query"),
    _url$4: dart.privateName(gotrue_admin_mfa_api, "_url"),
    _headers$5: dart.privateName(gotrue_admin_mfa_api, "_headers"),
    _fetch$2: dart.privateName(gotrue_admin_mfa_api, "_fetch"),
    $toRadixString: dartx.toRadixString,
    sent: dart.privateName(push, "Push.sent"),
    rateLimited: dart.privateName(push, "Push.rateLimited"),
    _timeoutTimer: dart.privateName(push, "_timeoutTimer"),
    _ref: dart.privateName(push, "_ref"),
    _receivedResp: dart.privateName(push, "_receivedResp"),
    _recHooks: dart.privateName(push, "_recHooks"),
    _refEvent: dart.privateName(push, "_refEvent"),
    __Push_payload: dart.privateName(push, "_#Push#payload"),
    _channel$1: dart.privateName(push, "_channel"),
    _event: dart.privateName(push, "_event"),
    _timeout$1: dart.privateName(push, "_timeout"),
    _cancelRefEvent: dart.privateName(push, "_cancelRefEvent"),
    _hasReceived: dart.privateName(push, "_hasReceived"),
    _cancelTimeout: dart.privateName(push, "_cancelTimeout"),
    _matchReceive: dart.privateName(push, "_matchReceive"),
    status$3: dart.privateName(push, "Hook.status"),
    callback$1: dart.privateName(push, "Hook.callback"),
    callback$2: dart.privateName(retry_timer, "RetryTimer.callback"),
    timerCalc: dart.privateName(retry_timer, "RetryTimer.timerCalc"),
    _timer: dart.privateName(retry_timer, "_timer"),
    _tries: dart.privateName(retry_timer, "_tries"),
    topic$1: dart.privateName(message, "Message.topic"),
    event$2: dart.privateName(message, "Message.event"),
    payload$1: dart.privateName(message, "Message.payload"),
    ref$1: dart.privateName(message, "Message.ref"),
    joinRef$1: dart.privateName(message, "Message.joinRef"),
    httpClient$3: dart.privateName(fetch$, "Fetch.httpClient"),
    _isSuccessStatusCode: dart.privateName(fetch$, "_isSuccessStatusCode"),
    _parseMediaType: dart.privateName(fetch$, "_parseMediaType"),
    _handleError$1: dart.privateName(fetch$, "_handleError"),
    _handleResponse: dart.privateName(fetch$, "_handleResponse"),
    _handleRequest: dart.privateName(fetch$, "_handleRequest"),
    _handleMultipartRequest: dart.privateName(fetch$, "_handleMultipartRequest"),
    _handleBinaryFileRequest: dart.privateName(fetch$, "_handleBinaryFileRequest"),
    __AesCbcPkcs7__encryptionKey: dart.privateName(aes_cbc_pkcs7, "_#AesCbcPkcs7#_encryptionKey"),
    __AesCbcPkcs7__decryptionKey: dart.privateName(aes_cbc_pkcs7, "_#AesCbcPkcs7#_decryptionKey"),
    _keyBytes: dart.privateName(aes_cbc_pkcs7, "_keyBytes"),
    _encryptionKey: dart.privateName(aes_cbc_pkcs7, "_encryptionKey"),
    _decryptionKey: dart.privateName(aes_cbc_pkcs7, "_decryptionKey"),
    $fillRange: dartx.fillRange,
    homePath: dart.privateName(hive_impl, "HiveImpl.homePath"),
    _boxes: dart.privateName(hive_impl, "_boxes"),
    _openingBoxes: dart.privateName(hive_impl, "_openingBoxes"),
    _managerOverride: dart.privateName(hive_impl, "_managerOverride"),
    _secureRandom: dart.privateName(hive_impl, "_secureRandom"),
    _registerDefaultAdapters: dart.privateName(hive_impl, "_registerDefaultAdapters"),
    _manager: dart.privateName(hive_impl, "_manager"),
    _openBox: dart.privateName(hive_impl, "_openBox"),
    _getBoxInternal: dart.privateName(hive_impl, "_getBoxInternal"),
    _typeAdapters: dart.privateName(type_registry_impl, "_typeAdapters"),
    boxName: dart.privateName(hive_list_impl, "HiveListImpl.boxName"),
    _hive: dart.privateName(hive_list_impl, "_hive"),
    _invalidated: dart.privateName(hive_list_impl, "_invalidated"),
    _disposed: dart.privateName(hive_list_impl, "_disposed"),
    _keys: dart.privateName(hive_list_impl, "_keys"),
    _delegate: dart.privateName(hive_list_impl, "_delegate"),
    _box: dart.privateName(hive_list_impl, "_box"),
    _checkElementIsValid: dart.privateName(hive_list_impl, "_checkElementIsValid"),
    $plus: dartx['+'],
    $asMap: dartx.asMap,
    $elementAt: dartx.elementAt,
    $expand: dartx.expand,
    $followedBy: dartx.followedBy,
    $getRange: dartx.getRange,
    $indexOf: dartx.indexOf,
    $lastIndexOf: dartx.lastIndexOf,
    $lastIndexWhere: dartx.lastIndexWhere,
    $lastWhere: dartx.lastWhere,
    $reduce: dartx.reduce,
    $reversed: dartx.reversed,
    $single: dartx.single,
    $singleWhere: dartx.singleWhere,
    $skip: dartx.skip,
    $skipWhile: dartx.skipWhile,
    $sublist: dartx.sublist,
    $takeWhile: dartx.takeWhile,
    $whereType: dartx.whereType,
    _box$1: dart.privateName(hive_object, "HiveObjectMixin._box"),
    _key$1: dart.privateName(hive_object, "HiveObjectMixin._key"),
    _hiveLists: dart.privateName(hive_object, "HiveObjectMixin._hiveLists"),
    _box$2: dart.privateName(hive_object, "_box"),
    _key$2: dart.privateName(hive_object, "_key"),
    _hiveLists$1: dart.privateName(hive_object, "_hiveLists"),
    _requireInitialized: dart.privateName(hive_object, "_requireInitialized"),
    $codeUnits: dartx.codeUnits,
    $offsetInBytes: dartx.offsetInBytes,
    boxNames: dart.privateName(box_collection_indexed_db, "BoxCollection.boxNames"),
    _openBoxes: dart.privateName(box_collection_indexed_db, "_openBoxes"),
    _txnCache: dart.privateName(box_collection_indexed_db, "_txnCache"),
    _db: dart.privateName(box_collection_indexed_db, "_db"),
    $indexedDB: dartx.indexedDB,
    $result: dartx.result,
    _cache: dart.privateName(box_collection_indexed_db, "_cache"),
    $transaction: dartx.transaction,
    $completed: dartx.completed,
    _cachedKeys: dart.privateName(box_collection_indexed_db, "_cachedKeys"),
    $deleteDatabase: dartx.deleteDatabase,
    name$3: dart.privateName(box_collection_indexed_db, "CollectionBox.name"),
    boxCollection: dart.privateName(box_collection_indexed_db, "CollectionBox.boxCollection"),
    $objectStore: dartx.objectStore,
    $getAllKeys: dartx.getAllKeys,
    $onSuccess: dartx.onSuccess,
    $openCursor: dartx.openCursor,
    $value: dartx.value,
    $getObject: dartx.getObject,
    $put: dartx.put,
    $delete: dartx.delete,
    withCredentials: dart.privateName(browser_client, "BrowserClient.withCredentials"),
    _xhrs: dart.privateName(browser_client, "_xhrs"),
    _isClosed$2: dart.privateName(browser_client, "_isClosed"),
    $responseType: dartx.responseType,
    $onLoad: dartx.onLoad,
    $response: dartx.response,
    $responseHeaders: dartx.responseHeaders,
    $onError: dartx.onError,
    Latin1Codec__allowInvalid: dart.privateName(convert, "Latin1Codec._allowInvalid"),
    _value: dart.privateName(digest_sink, "_value"),
    _extended$2: dart.privateName(sha512_slowsinks, "_extended"),
    _nums: dart.privateName(sha512_slowsinks, "_nums"),
    _digest$1: dart.privateName(sha512_slowsinks, "_digest"),
    _shr: dart.privateName(sha512_slowsinks, "_shr"),
    _shl: dart.privateName(sha512_slowsinks, "_shl"),
    _or: dart.privateName(sha512_slowsinks, "_or"),
    _xor: dart.privateName(sha512_slowsinks, "_xor"),
    _add: dart.privateName(sha512_slowsinks, "_add"),
    _addTo2: dart.privateName(sha512_slowsinks, "_addTo2"),
    _rotr: dart.privateName(sha512_slowsinks, "_rotr"),
    _bsig0$1: dart.privateName(sha512_slowsinks, "_bsig0"),
    _bsig1$1: dart.privateName(sha512_slowsinks, "_bsig1"),
    _ssig0$1: dart.privateName(sha512_slowsinks, "_ssig0"),
    _ssig1$1: dart.privateName(sha512_slowsinks, "_ssig1"),
    _ch$1: dart.privateName(sha512_slowsinks, "_ch"),
    _maj$1: dart.privateName(sha512_slowsinks, "_maj"),
    digestBytes: dart.privateName(sha512_slowsinks, "Sha384Sink.digestBytes"),
    digestBytes$1: dart.privateName(sha512_slowsinks, "Sha512Sink.digestBytes"),
    digestBytes$2: dart.privateName(sha512_slowsinks, "Sha512224Sink.digestBytes"),
    digestBytes$3: dart.privateName(sha512_slowsinks, "Sha512256Sink.digestBytes"),
    params$2: dart.privateName(platform_navigation_delegate, "PlatformNavigationDelegate.params"),
    params$3: dart.privateName(platform_webview_controller, "PlatformWebViewController.params"),
    name$4: dart.privateName(platform_webview_controller, "JavaScriptChannelParams.name"),
    onMessageReceived: dart.privateName(platform_webview_controller, "JavaScriptChannelParams.onMessageReceived"),
    params$4: dart.privateName(platform_webview_cookie_manager, "PlatformWebViewCookieManager.params"),
    params$5: dart.privateName(platform_webview_widget, "PlatformWebViewWidget.params"),
    _wrapper: dart.privateName(behavior_subject, "_wrapper"),
    _isAddingStreamItems: dart.privateName(subject, "_isAddingStreamItems"),
    _controller$3: dart.privateName(subject, "_controller"),
    _addError: dart.privateName(subject, "_addError"),
    _add$1: dart.privateName(subject, "_add"),
    _subject: dart.privateName(behavior_subject, "_subject"),
    _queue: dart.privateName(replay_subject, "_queue"),
    _maxSize: dart.privateName(replay_subject, "_maxSize"),
    _subject$1: dart.privateName(replay_subject, "_subject"),
    _subject$2: dart.privateName(subject, "_subject"),
    _target: dart.privateName(subject, "_target"),
    ready: dart.privateName(channel$, "WebSocketChannel.ready"),
    _webSocket: dart.privateName(channel$, "_webSocket"),
    message$9: dart.privateName(exception$, "WebSocketChannelException.message"),
    inner: dart.privateName(exception$, "WebSocketChannelException.inner"),
    delayFactor: dart.privateName(retry, "RetryOptions.delayFactor"),
    randomizationFactor: dart.privateName(retry, "RetryOptions.randomizationFactor"),
    maxDelay: dart.privateName(retry, "RetryOptions.maxDelay"),
    maxAttempts: dart.privateName(retry, "RetryOptions.maxAttempts"),
    typeId$1: dart.privateName(big_int_adapter, "BigIntAdapter.typeId"),
    typeId$2: dart.privateName(date_time_adapter, "DateTimeAdapter.typeId"),
    typeId$3: dart.privateName(date_time_adapter, "DateTimeWithTimezoneAdapter.typeId"),
    supportsCompaction: dart.privateName(storage_backend_memory, "StorageBackendMemory.supportsCompaction"),
    _cipher$1: dart.privateName(storage_backend_memory, "_cipher"),
    _bytes: dart.privateName(storage_backend_memory, "_bytes"),
    _frameHelper: dart.privateName(storage_backend_memory, "_frameHelper"),
    name$5: dart.privateName(box_base_impl, "BoxBaseImpl.name"),
    hive: dart.privateName(box_base_impl, "BoxBaseImpl.hive"),
    backend: dart.privateName(box_base_impl, "BoxBaseImpl.backend"),
    __BoxBaseImpl_keystore: dart.privateName(box_base_impl, "_#BoxBaseImpl#keystore"),
    _open: dart.privateName(box_base_impl, "_open"),
    _compactionStrategy: dart.privateName(box_base_impl, "_compactionStrategy"),
    lazy: dart.privateName(box_impl, "BoxImpl.lazy"),
    _writeFrames: dart.privateName(box_impl, "_writeFrames"),
    lazy$1: dart.privateName(lazy_box_impl, "LazyBoxImpl.lazy"),
    adapter: dart.privateName(type_registry_impl, "ResolvedAdapter.adapter"),
    typeId$4: dart.privateName(type_registry_impl, "ResolvedAdapter.typeId"),
    scheme: dart.privateName(authentication_challenge, "AuthenticationChallenge.scheme"),
    parameters: dart.privateName(authentication_challenge, "AuthenticationChallenge.parameters"),
    type$3: dart.privateName(media_type, "MediaType.type"),
    subtype: dart.privateName(media_type, "MediaType.subtype"),
    parameters$1: dart.privateName(media_type, "MediaType.parameters"),
    $replaceAllMapped: dartx.replaceAllMapped,
    statusCode$3: dart.privateName(http_response_error, "HttpResponseError.statusCode"),
    level: dart.privateName(javascript_console_message, "JavaScriptConsoleMessage.level"),
    message$10: dart.privateName(javascript_console_message, "JavaScriptConsoleMessage.message"),
    message$11: dart.privateName(javascript_message, "JavaScriptMessage.message"),
    uri$2: dart.privateName(load_request_params, "LoadRequestParams.uri"),
    method$2: dart.privateName(load_request_params, "LoadRequestParams.method"),
    headers$11: dart.privateName(load_request_params, "LoadRequestParams.headers"),
    body$2: dart.privateName(load_request_params, "LoadRequestParams.body"),
    url$5: dart.privateName(navigation_request, "NavigationRequest.url"),
    isMainFrame: dart.privateName(navigation_request, "NavigationRequest.isMainFrame"),
    name$6: dart.privateName(platform_webview_permission_request, "WebViewPermissionResourceType.name"),
    types$1: dart.privateName(platform_webview_permission_request, "PlatformWebViewPermissionRequest.types"),
    key$2: dart.privateName(platform_webview_widget_creation_params, "PlatformWebViewWidgetCreationParams.key"),
    controller: dart.privateName(platform_webview_widget_creation_params, "PlatformWebViewWidgetCreationParams.controller"),
    layoutDirection: dart.privateName(platform_webview_widget_creation_params, "PlatformWebViewWidgetCreationParams.layoutDirection"),
    gestureRecognizers: dart.privateName(platform_webview_widget_creation_params, "PlatformWebViewWidgetCreationParams.gestureRecognizers"),
    url$6: dart.privateName(url_change, "UrlChange.url"),
    errorCode: dart.privateName(web_resource_error, "WebResourceError.errorCode"),
    description: dart.privateName(web_resource_error, "WebResourceError.description"),
    errorType: dart.privateName(web_resource_error, "WebResourceError.errorType"),
    isForMainFrame: dart.privateName(web_resource_error, "WebResourceError.isForMainFrame"),
    url$7: dart.privateName(web_resource_error, "WebResourceError.url"),
    name$7: dart.privateName(webview_cookie, "WebViewCookie.name"),
    value$1: dart.privateName(webview_cookie, "WebViewCookie.value"),
    domain: dart.privateName(webview_cookie, "WebViewCookie.domain"),
    path$1: dart.privateName(webview_cookie, "WebViewCookie.path"),
    _missingCase: dart.privateName(value_stream, "_missingCase"),
    _startValue: dart.privateName(start_with, "_startValue")
  };
  var S$1 = {
    _sink$1: dart.privateName(forwarding_sink, "_sink"),
    startValue: dart.privateName(start_with, "StartWithStreamTransformer.startValue"),
    _e: dart.privateName(start_with_error, "_e"),
    _st: dart.privateName(start_with_error, "_st"),
    error$2: dart.privateName(start_with_error, "StartWithErrorStreamTransformer.error"),
    stackTrace: dart.privateName(start_with_error, "StartWithErrorStreamTransformer.stackTrace"),
    error$3: dart.privateName(error_and_stacktrace, "ErrorAndStackTrace.error"),
    stackTrace$1: dart.privateName(error_and_stacktrace, "ErrorAndStackTrace.stackTrace"),
    innerWebSocket: dart.privateName(html$, "HtmlWebSocketChannel.innerWebSocket"),
    _closeCode: dart.privateName(html$, "_closeCode"),
    _closeReason: dart.privateName(html$, "_closeReason"),
    _localCloseCode: dart.privateName(html$, "_localCloseCode"),
    _localCloseReason: dart.privateName(html$, "_localCloseReason"),
    __HtmlWebSocketChannel__readyCompleter: dart.privateName(html$, "_#HtmlWebSocketChannel#_readyCompleter"),
    _controller$4: dart.privateName(html$, "_controller"),
    __HtmlWebSocketChannel_sink: dart.privateName(html$, "_#HtmlWebSocketChannel#sink"),
    _readyCompleter: dart.privateName(html$, "_readyCompleter"),
    $readyState: dartx.readyState,
    _listen: dart.privateName(html$, "_listen"),
    $onOpen: dartx.onOpen,
    $onMessage: dartx.onMessage,
    $data: dartx.data,
    $onClose: dartx.onClose,
    _webSocket$1: dart.privateName(html$, "_webSocket"),
    _channel$2: dart.privateName(html$, "_channel"),
    name$8: dart.privateName(html$, "BinaryType.name"),
    value$2: dart.privateName(html$, "BinaryType.value"),
    _state$1: dart.privateName(web_socket_impl, "_state"),
    _fin: dart.privateName(web_socket_impl, "_fin"),
    _opcode: dart.privateName(web_socket_impl, "_opcode"),
    _len: dart.privateName(web_socket_impl, "_len"),
    _masked: dart.privateName(web_socket_impl, "_masked"),
    _remainingLenBytes: dart.privateName(web_socket_impl, "_remainingLenBytes"),
    _remainingMaskingKeyBytes: dart.privateName(web_socket_impl, "_remainingMaskingKeyBytes"),
    _remainingPayloadBytes: dart.privateName(web_socket_impl, "_remainingPayloadBytes"),
    _unmaskingIndex: dart.privateName(web_socket_impl, "_unmaskingIndex"),
    _currentMessageType: dart.privateName(web_socket_impl, "_currentMessageType"),
    _eventSink: dart.privateName(web_socket_impl, "_eventSink"),
    _maskingBytes: dart.privateName(web_socket_impl, "_maskingBytes"),
    _payload: dart.privateName(web_socket_impl, "_payload"),
    _serverSide: dart.privateName(web_socket_impl, "_serverSide"),
    _isControlFrame: dart.privateName(web_socket_impl, "_isControlFrame"),
    _lengthDone: dart.privateName(web_socket_impl, "_lengthDone"),
    _maskDone: dart.privateName(web_socket_impl, "_maskDone"),
    _unmask: dart.privateName(web_socket_impl, "_unmask"),
    _controlFrameEnd: dart.privateName(web_socket_impl, "_controlFrameEnd"),
    _messageFrameEnd: dart.privateName(web_socket_impl, "_messageFrameEnd"),
    _startPayload: dart.privateName(web_socket_impl, "_startPayload"),
    _prepareForNextFrame: dart.privateName(web_socket_impl, "_prepareForNextFrame"),
    _outCloseCode: dart.privateName(web_socket_impl, "_outCloseCode"),
    _outCloseReason: dart.privateName(web_socket_impl, "_outCloseReason"),
    _controller$5: dart.privateName(web_socket_impl, "_controller"),
    _subscription$1: dart.privateName(web_socket_impl, "_subscription"),
    _issuedPause: dart.privateName(web_socket_impl, "_issuedPause"),
    _closed: dart.privateName(web_socket_impl, "_closed"),
    _closeCompleter: dart.privateName(web_socket_impl, "_closeCompleter"),
    _completer: dart.privateName(web_socket_impl, "_completer"),
    _onListen: dart.privateName(web_socket_impl, "_onListen"),
    _onPause: dart.privateName(web_socket_impl, "_onPause"),
    _onResume: dart.privateName(web_socket_impl, "_onResume"),
    _cancel: dart.privateName(web_socket_impl, "_cancel"),
    _done: dart.privateName(web_socket_impl, "_done"),
    _ensureController: dart.privateName(web_socket_impl, "_ensureController"),
    protocol: dart.privateName(web_socket_impl, "WebSocketImpl.protocol"),
    __WebSocketImpl__controller: dart.privateName(web_socket_impl, "_#WebSocketImpl#_controller"),
    __WebSocketImpl__sink: dart.privateName(web_socket_impl, "_#WebSocketImpl#_sink"),
    _readyState: dart.privateName(web_socket_impl, "_readyState"),
    _writeClosed: dart.privateName(web_socket_impl, "_writeClosed"),
    _closeCode$1: dart.privateName(web_socket_impl, "_closeCode"),
    _closeReason$1: dart.privateName(web_socket_impl, "_closeReason"),
    _pingInterval: dart.privateName(web_socket_impl, "_pingInterval"),
    _pingTimer: dart.privateName(web_socket_impl, "_pingTimer"),
    __WebSocketImpl__consumer: dart.privateName(web_socket_impl, "_#WebSocketImpl#_consumer"),
    _closeTimer: dart.privateName(web_socket_impl, "_closeTimer"),
    _consumer: dart.privateName(web_socket_impl, "_consumer"),
    _sink$2: dart.privateName(web_socket_impl, "_sink"),
    _close: dart.privateName(web_socket_impl, "_close"),
    _serviceId: dart.privateName(web_socket_impl, "_serviceId"),
    __serviceId: dart.privateName(web_socket_impl, "_ServiceObject.__serviceId"),
    __serviceId$1: dart.privateName(web_socket_impl, "__serviceId"),
    _boundary: dart.privateName(mime_multipart_transformer, "_boundary"),
    message$12: dart.privateName(mime_shared, "MimeMultipartException.message"),
    _extensionMap: dart.privateName(mime_type, "_extensionMap"),
    _magicNumbers: dart.privateName(mime_type, "_magicNumbers"),
    _useDefault: dart.privateName(mime_type, "_useDefault"),
    _magicNumbersMaxLength: dart.privateName(mime_type, "_magicNumbersMaxLength"),
    _use: dart.privateName(connectable_stream, "_use"),
    __AbstractConnectableStream__connection: dart.privateName(connectable_stream, "_#AbstractConnectableStream#_connection"),
    __AbstractConnectableStream__connection_isSet: dart.privateName(connectable_stream, "_#AbstractConnectableStream#_connection#isSet"),
    _source: dart.privateName(connectable_stream, "_source"),
    _subject$3: dart.privateName(connectable_stream, "_subject"),
    _connection: dart.privateName(connectable_stream, "_connection"),
    _canReuse: dart.privateName(connectable_stream, "_canReuse"),
    _unsupportedError: dart.privateName(connectable_stream, "_unsupportedError"),
    _isReusable: dart.privateName(defer, "_isReusable"),
    _factory: dart.privateName(defer, "_factory"),
    callable: dart.privateName(from_callable, "FromCallableStream.callable"),
    _stream$1: dart.privateName(from_callable, "_stream"),
    _isReusable$1: dart.privateName(from_callable, "_isReusable"),
    _controller$6: dart.privateName(never, "_controller"),
    _isListened: dart.privateName(range, "_isListened"),
    _stream$2: dart.privateName(range, "_stream"),
    $abs: dartx.abs,
    streamFactory: dart.privateName(repeat, "RepeatStream.streamFactory"),
    count$2: dart.privateName(repeat, "RepeatStream.count"),
    _repeatStep: dart.privateName(repeat, "_repeatStep"),
    _controller$7: dart.privateName(repeat, "_controller"),
    _subscription$2: dart.privateName(repeat, "_subscription"),
    _maybeRepeatNext: dart.privateName(repeat, "_maybeRepeatNext"),
    _repeatNext: dart.privateName(repeat, "_repeatNext"),
    streamFactory$1: dart.privateName(retry$, "RetryStream.streamFactory"),
    count$3: dart.privateName(retry$, "RetryStream.count"),
    _retryStep: dart.privateName(retry$, "_retryStep"),
    _errors: dart.privateName(retry$, "_errors"),
    __RetryStream__controller: dart.privateName(retry$, "_#RetryStream#_controller"),
    _subscription$3: dart.privateName(retry$, "_subscription"),
    _retry: dart.privateName(retry$, "_retry"),
    _controller$8: dart.privateName(retry$, "_controller"),
    streamFactory$2: dart.privateName(retry_when, "RetryWhenStream.streamFactory"),
    retryWhenFactory: dart.privateName(retry_when, "RetryWhenStream.retryWhenFactory"),
    __RetryWhenStream__controller: dart.privateName(retry_when, "_#RetryWhenStream#_controller"),
    __RetryWhenStream__controller_isSet: dart.privateName(retry_when, "_#RetryWhenStream#_controller#isSet"),
    _subscription$4: dart.privateName(retry_when, "_subscription"),
    _retry$1: dart.privateName(retry_when, "_retry"),
    _controller$9: dart.privateName(retry_when, "_controller"),
    _cancelSubscription: dart.privateName(retry_when, "_cancelSubscription"),
    _addErrorAndClose: dart.privateName(retry_when, "_addErrorAndClose"),
    _controller$10: dart.privateName(sequence_equal, "_controller"),
    _controller$11: dart.privateName(switch_latest, "_controller"),
    _controller$12: dart.privateName(timer, "_controller"),
    _valuesReceived: dart.privateName(zip, "_valuesReceived"),
    _values: dart.privateName(zip, "_values"),
    strategy: dart.privateName(backpressure, "BackpressureStreamTransformer.strategy"),
    windowStreamFactory: dart.privateName(backpressure, "BackpressureStreamTransformer.windowStreamFactory"),
    onWindowStart: dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowStart"),
    onWindowEnd: dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowEnd"),
    maxLengthQueue: dart.privateName(backpressure, "BackpressureStreamTransformer.maxLengthQueue"),
    startBufferEvery: dart.privateName(backpressure, "BackpressureStreamTransformer.startBufferEvery"),
    closeWindowWhen: dart.privateName(backpressure, "BackpressureStreamTransformer.closeWindowWhen"),
    ignoreEmptyWindows: dart.privateName(backpressure, "BackpressureStreamTransformer.ignoreEmptyWindows"),
    dispatchOnClose: dart.privateName(backpressure, "BackpressureStreamTransformer.dispatchOnClose"),
    _isEmpty: dart.privateName(default_if_empty, "_isEmpty"),
    _outputSink: dart.privateName(default_if_empty, "_outputSink"),
    _defaultValue: dart.privateName(default_if_empty, "_defaultValue"),
    defaultValue$1: dart.privateName(default_if_empty, "DefaultIfEmptyStreamTransformer.defaultValue"),
    _inputClosed: dart.privateName(delay, "_inputClosed"),
    _subscriptions: dart.privateName(delay, "_subscriptions"),
    _duration: dart.privateName(delay, "_duration"),
    duration: dart.privateName(delay, "DelayStreamTransformer.duration"),
    itemDelaySelector: dart.privateName(delay_when, "DelayWhenStreamTransformer.itemDelaySelector"),
    listenDelay: dart.privateName(delay_when, "DelayWhenStreamTransformer.listenDelay"),
    _outputSink$1: dart.privateName(dematerialize, "_outputSink"),
    kind: dart.privateName(notification, "Notification.kind"),
    _value$1: dart.privateName(notification, "Notification._value"),
    errorAndStackTrace: dart.privateName(notification, "Notification.errorAndStackTrace"),
    _value$2: dart.privateName(notification, "_value"),
    _outputSink$2: dart.privateName(distinct_unique, "_outputSink"),
    _collection: dart.privateName(distinct_unique, "_collection"),
    equals: dart.privateName(distinct_unique, "DistinctUniqueStreamTransformer.equals"),
    hashCodeMethod: dart.privateName(distinct_unique, "DistinctUniqueStreamTransformer.hashCodeMethod"),
    _onCancel: dart.privateName($do, "_onCancel"),
    _onData: dart.privateName($do, "_onData"),
    _onDone: dart.privateName($do, "_onDone"),
    _onEach: dart.privateName($do, "_onEach"),
    _onError: dart.privateName($do, "_onError"),
    _onListen$1: dart.privateName($do, "_onListen"),
    _onPause$1: dart.privateName($do, "_onPause"),
    _onResume$1: dart.privateName($do, "_onResume"),
    onCancel: dart.privateName($do, "DoStreamTransformer.onCancel"),
    onData: dart.privateName($do, "DoStreamTransformer.onData"),
    onDone: dart.privateName($do, "DoStreamTransformer.onDone"),
    onEach: dart.privateName($do, "DoStreamTransformer.onEach"),
    onError: dart.privateName($do, "DoStreamTransformer.onError"),
    onListen: dart.privateName($do, "DoStreamTransformer.onListen"),
    onPause: dart.privateName($do, "DoStreamTransformer.onPause"),
    onResume: dart.privateName($do, "DoStreamTransformer.onResume"),
    _outputSink$3: dart.privateName(end_with, "_outputSink"),
    _endValue: dart.privateName(end_with, "_endValue"),
    endValue: dart.privateName(end_with, "EndWithStreamTransformer.endValue"),
    _outputSink$4: dart.privateName(end_with_many, "_outputSink"),
    _endValues: dart.privateName(end_with_many, "_endValues"),
    endValues: dart.privateName(end_with_many, "EndWithManyStreamTransformer.endValues"),
    _mapperSubscription: dart.privateName(exhaust_map, "_mapperSubscription"),
    _inputClosed$1: dart.privateName(exhaust_map, "_inputClosed"),
    _mapper: dart.privateName(exhaust_map, "_mapper"),
    mapper: dart.privateName(exhaust_map, "ExhaustMapStreamTransformer.mapper"),
    _subscriptions$1: dart.privateName(flat_map, "_subscriptions"),
    _inputClosed$2: dart.privateName(flat_map, "_inputClosed"),
    _mapper$1: dart.privateName(flat_map, "_mapper"),
    mapper$1: dart.privateName(flat_map, "FlatMapStreamTransformer.mapper"),
    maxConcurrent: dart.privateName(flat_map, "FlatMapStreamTransformer.maxConcurrent"),
    groups: dart.privateName(group_by, "_GroupByStreamSink.groups"),
    subscriptions: dart.privateName(group_by, "_GroupByStreamSink.subscriptions"),
    _closeAll: dart.privateName(group_by, "_closeAll"),
    _controllerBuilder: dart.privateName(group_by, "_controllerBuilder"),
    key$3: dart.privateName(group_by, "GroupedStream.key"),
    grouper: dart.privateName(group_by, "GroupByStreamTransformer.grouper"),
    durationSelector: dart.privateName(group_by, "GroupByStreamTransformer.durationSelector"),
    _outputSink$5: dart.privateName(ignore_elements, "_outputSink"),
    _queue$1: dart.privateName(interval, "_queue"),
    _inputClosed$3: dart.privateName(interval, "_inputClosed"),
    _openIntervals: dart.privateName(interval, "_openIntervals"),
    _outputSink$6: dart.privateName(interval, "_outputSink"),
    _duration$1: dart.privateName(interval, "_duration"),
    _addNext: dart.privateName(interval, "_addNext"),
    _addDelayed: dart.privateName(interval, "_addDelayed"),
    duration$1: dart.privateName(interval, "IntervalStreamTransformer.duration"),
    _outputSink$7: dart.privateName(map_not_null, "_outputSink"),
    _transform: dart.privateName(map_not_null, "_transform"),
    transform: dart.privateName(map_not_null, "MapNotNullStreamTransformer.transform"),
    _outputSink$8: dart.privateName(map_to, "_outputSink"),
    _value$3: dart.privateName(map_to, "_value"),
    value$3: dart.privateName(map_to, "MapToStreamTransformer.value"),
    _outputSink$9: dart.privateName(materialize, "_outputSink"),
    _recoverySubscriptions: dart.privateName(on_error_resume, "_recoverySubscriptions"),
    _recoveryFn: dart.privateName(on_error_resume, "_recoveryFn"),
    recoveryFn: dart.privateName(on_error_resume, "OnErrorResumeStreamTransformer.recoveryFn"),
    _index: dart.privateName(scan, "_index"),
    _outputSink$10: dart.privateName(scan, "_outputSink"),
    _accumulator: dart.privateName(scan, "_accumulator"),
    _acc: dart.privateName(scan, "_acc"),
    accumulator: dart.privateName(scan, "ScanStreamTransformer.accumulator"),
    seed: dart.privateName(scan, "ScanStreamTransformer.seed"),
    count$4: dart.privateName(skip_last, "SkipLastStreamTransformer.count"),
    _otherSubscription: dart.privateName(skip_until, "_otherSubscription"),
    _canAdd: dart.privateName(skip_until, "_canAdd"),
    _otherStream: dart.privateName(skip_until, "_otherStream"),
    otherStream: dart.privateName(skip_until, "SkipUntilStreamTransformer.otherStream"),
    _startValues: dart.privateName(start_with_many, "_startValues"),
    startValues: dart.privateName(start_with_many, "StartWithManyStreamTransformer.startValues"),
    _isEmpty$1: dart.privateName(switch_if_empty, "_isEmpty"),
    _fallbackSubscription: dart.privateName(switch_if_empty, "_fallbackSubscription"),
    _fallbackStream: dart.privateName(switch_if_empty, "_fallbackStream"),
    fallbackStream: dart.privateName(switch_if_empty, "SwitchIfEmptyStreamTransformer.fallbackStream"),
    _mapperSubscription$1: dart.privateName(switch_map, "_mapperSubscription"),
    _inputClosed$4: dart.privateName(switch_map, "_inputClosed"),
    _mapper$2: dart.privateName(switch_map, "_mapper"),
    mapper$2: dart.privateName(switch_map, "SwitchMapStreamTransformer.mapper"),
    count$5: dart.privateName(take_last, "TakeLastStreamTransformer.count"),
    _otherSubscription$1: dart.privateName(take_until, "_otherSubscription"),
    _otherStream$1: dart.privateName(take_until, "_otherStream"),
    otherStream$1: dart.privateName(take_until, "TakeUntilStreamTransformer.otherStream"),
    _outputSink$11: dart.privateName(take_while_inclusive, "_outputSink"),
    _test: dart.privateName(take_while_inclusive, "_test"),
    test: dart.privateName(take_while_inclusive, "TakeWhileInclusiveStreamTransformer.test"),
    _stopwatch: dart.privateName(time_interval, "_stopwatch"),
    interval: dart.privateName(time_interval, "TimeInterval.interval"),
    value$4: dart.privateName(time_interval, "TimeInterval.value"),
    _outputSink$12: dart.privateName(timestamp$, "_outputSink"),
    value$5: dart.privateName(timestamp$, "Timestamped.value"),
    timestamp$1: dart.privateName(timestamp$, "Timestamped.timestamp"),
    _outputSink$13: dart.privateName(where_not_null, "_outputSink"),
    _outputSink$14: dart.privateName(where_type, "_outputSink"),
    _hasValues: dart.privateName(with_latest_from, "_hasValues"),
    _latestValues: dart.privateName(with_latest_from, "_latestValues"),
    ___WithLatestFromStreamSink__subscriptions: dart.privateName(with_latest_from, "_#_WithLatestFromStreamSink#_subscriptions"),
    _latestFromStreams: dart.privateName(with_latest_from, "_latestFromStreams"),
    _combiner: dart.privateName(with_latest_from, "_combiner"),
    _subscriptions$2: dart.privateName(with_latest_from, "_subscriptions"),
    latestFromStreams: dart.privateName(with_latest_from, "WithLatestFromStreamTransformer.latestFromStreams"),
    combiner: dart.privateName(with_latest_from, "WithLatestFromStreamTransformer.combiner"),
    _isDisposed: dart.privateName(composite_subscription, "_isDisposed"),
    _subscriptionsList: dart.privateName(composite_subscription, "_subscriptionsList"),
    _unsupportedError$1: dart.privateName(composite_subscription, "_unsupportedError"),
    key$4: dart.privateName(frame$, "Frame.key"),
    value$6: dart.privateName(frame$, "Frame.value"),
    deleted$1: dart.privateName(frame$, "Frame.deleted"),
    lazy$2: dart.privateName(frame$, "Frame.lazy"),
    length$1: dart.privateName(frame$, "Frame.length"),
    offset$1: dart.privateName(frame$, "Frame.offset"),
    added: dart.privateName(keystore$, "KeyTransaction.added"),
    deleted$2: dart.privateName(keystore$, "KeyTransaction.deleted"),
    transactions: dart.privateName(keystore$, "Keystore.transactions"),
    _deletedEntries: dart.privateName(keystore$, "_deletedEntries"),
    _autoIncrement: dart.privateName(keystore$, "_autoIncrement"),
    _box$3: dart.privateName(keystore$, "_box"),
    _notifier: dart.privateName(keystore$, "_notifier"),
    _store: dart.privateName(keystore$, "_store"),
    _streamController$1: dart.privateName(change_notifier$, "_streamController"),
    typeId$5: dart.privateName(ignored_type_adapter, "IgnoredTypeAdapter.typeId"),
    _decode: dart.privateName(decoder, "_decode"),
    _state$2: dart.privateName(decoder, "_state"),
    ___Sink__size: dart.privateName(decoder, "_#_Sink#_size"),
    _sink$3: dart.privateName(decoder, "_sink"),
    _size: dart.privateName(decoder, "_size"),
    _close$1: dart.privateName(decoder, "_close"),
    _digitForByte: dart.privateName(decoder, "_digitForByte"),
    _State__name: dart.privateName(decoder, "_State._name"),
    _name$1: dart.privateName(decoder, "_State._name"),
    _name$2: dart.privateName(decoder, "_name"),
    _sink$4: dart.privateName(encoder, "_sink"),
    _table$2: dart.privateName(typed_queue, "_TypedQueue._table"),
    _head: dart.privateName(typed_queue, "_TypedQueue._head"),
    _tail: dart.privateName(typed_queue, "_TypedQueue._tail"),
    _table$3: dart.privateName(typed_queue, "_table"),
    _head$1: dart.privateName(typed_queue, "_head"),
    _tail$1: dart.privateName(typed_queue, "_tail"),
    _createBuffer: dart.privateName(typed_queue, "_createBuffer"),
    _createList: dart.privateName(typed_queue, "_createList"),
    _writeToList: dart.privateName(typed_queue, "_writeToList"),
    _growAtCapacity: dart.privateName(typed_queue, "_growAtCapacity"),
    _growTo: dart.privateName(typed_queue, "_growTo"),
    _defaultValue$1: dart.privateName(typed_queue, "_defaultValue"),
    _add$2: dart.privateName(typed_queue, "_add"),
    _add$3: dart.privateName(serialization, "_add"),
    _head$2: dart.privateName(queue_list, "_head"),
    _writeToList$1: dart.privateName(queue_list, "_writeToList"),
    _grow: dart.privateName(typed_queue, "_grow"),
    _grow$1: dart.privateName(queue_list, "_grow"),
    _preGrow: dart.privateName(typed_queue, "_preGrow"),
    _preGrow$1: dart.privateName(queue_list, "_preGrow"),
    _table$4: dart.privateName(queue_list, "_table"),
    _tail$2: dart.privateName(queue_list, "_tail"),
    _head_: dart.privateName(typed_queue, "_head="),
    _table_: dart.privateName(typed_queue, "_table="),
    _tail_: dart.privateName(typed_queue, "_tail="),
    _doneCompleter: dart.privateName(io_sink, "_doneCompleter"),
    _controllerInstance: dart.privateName(io_sink, "_controllerInstance"),
    _controllerCompleter: dart.privateName(io_sink, "_controllerCompleter"),
    _isClosed$3: dart.privateName(io_sink, "_isClosed"),
    _isBound: dart.privateName(io_sink, "_isBound"),
    _hasError: dart.privateName(io_sink, "_hasError"),
    _target$1: dart.privateName(io_sink, "_target"),
    _controller$13: dart.privateName(io_sink, "_controller"),
    _closeTarget: dart.privateName(io_sink, "_closeTarget"),
    _completeDoneValue: dart.privateName(io_sink, "_completeDoneValue"),
    _completeDoneError: dart.privateName(io_sink, "_completeDoneError"),
    headers$12: dart.privateName(bound_multipart_stream, "_MimeMultipart.headers"),
    _stream$3: dart.privateName(bound_multipart_stream, "_stream"),
    _headerField: dart.privateName(bound_multipart_stream, "_headerField"),
    _headerValue: dart.privateName(bound_multipart_stream, "_headerValue"),
    _controllerState: dart.privateName(bound_multipart_stream, "_controllerState"),
    _controller$14: dart.privateName(bound_multipart_stream, "_controller"),
    __BoundMultipartStream__subscription: dart.privateName(bound_multipart_stream, "_#BoundMultipartStream#_subscription"),
    _multipartController: dart.privateName(bound_multipart_stream, "_multipartController"),
    _headers$6: dart.privateName(bound_multipart_stream, "_headers"),
    _state$3: dart.privateName(bound_multipart_stream, "_state"),
    _boundaryIndex: dart.privateName(bound_multipart_stream, "_boundaryIndex"),
    _index$1: dart.privateName(bound_multipart_stream, "_index"),
    _buffer: dart.privateName(bound_multipart_stream, "_buffer"),
    _boundary$1: dart.privateName(bound_multipart_stream, "_boundary"),
    _pauseStream: dart.privateName(bound_multipart_stream, "_pauseStream"),
    _resumeStream: dart.privateName(bound_multipart_stream, "_resumeStream"),
    _tryPropagateControllerState: dart.privateName(bound_multipart_stream, "_tryPropagateControllerState"),
    _subscription$5: dart.privateName(bound_multipart_stream, "_subscription"),
    _parse: dart.privateName(bound_multipart_stream, "_parse"),
    mimeType: dart.privateName(magic_number, "MagicNumber.mimeType"),
    numbers: dart.privateName(magic_number, "MagicNumber.numbers"),
    mask: dart.privateName(magic_number, "MagicNumber.mask"),
    _hasData: dart.privateName(backpressure, "_hasData"),
    _mainClosed: dart.privateName(backpressure, "_mainClosed"),
    _windowSubscription: dart.privateName(backpressure, "_windowSubscription"),
    _strategy: dart.privateName(backpressure, "_strategy"),
    _windowStreamFactory: dart.privateName(backpressure, "_windowStreamFactory"),
    _onWindowStart: dart.privateName(backpressure, "_onWindowStart"),
    _onWindowEnd: dart.privateName(backpressure, "_onWindowEnd"),
    _startBufferEvery: dart.privateName(backpressure, "_startBufferEvery"),
    _closeWindowWhen: dart.privateName(backpressure, "_closeWindowWhen"),
    _ignoreEmptyWindows: dart.privateName(backpressure, "_ignoreEmptyWindows"),
    _dispatchOnClose: dart.privateName(backpressure, "_dispatchOnClose"),
    _offset: dart.privateName(binary_reader_impl, "_offset"),
    _buffer$1: dart.privateName(binary_reader_impl, "_buffer"),
    _byteData: dart.privateName(binary_reader_impl, "_byteData"),
    _bufferLength: dart.privateName(binary_reader_impl, "_bufferLength"),
    _bufferLimit: dart.privateName(binary_reader_impl, "_bufferLimit"),
    _typeRegistry: dart.privateName(binary_reader_impl, "_typeRegistry"),
    _requireBytes: dart.privateName(binary_reader_impl, "_requireBytes"),
    _limitAvailableBytes: dart.privateName(binary_reader_impl, "_limitAvailableBytes"),
    _resetLimit: dart.privateName(binary_reader_impl, "_resetLimit"),
    $getInt32: dartx.getInt32,
    $toInt: dartx.toInt,
    $getFloat64: dartx.getFloat64,
    _head$3: dart.privateName(indexable_skip_list, "_head"),
    _height: dart.privateName(indexable_skip_list, "_height"),
    _length: dart.privateName(indexable_skip_list, "_length"),
    _comparator: dart.privateName(indexable_skip_list, "_comparator"),
    _random: dart.privateName(indexable_skip_list, "_random"),
    _getNode: dart.privateName(indexable_skip_list, "_getNode"),
    _getNodeAt: dart.privateName(indexable_skip_list, "_getNodeAt"),
    value$7: dart.privateName(indexable_skip_list, "_Node.value"),
    node: dart.privateName(indexable_skip_list, "_Iterator.node"),
    $createObjectStore: dartx.createObjectStore,
    _buffer$2: dart.privateName(typed_buffer, "_buffer"),
    _length$1: dart.privateName(typed_buffer, "_length"),
    _typedBuffer: dart.privateName(typed_buffer, "_typedBuffer"),
    _defaultValue$2: dart.privateName(typed_buffer, "_defaultValue"),
    _createBuffer$1: dart.privateName(typed_buffer, "_createBuffer"),
    _createBiggerBuffer: dart.privateName(typed_buffer, "_createBiggerBuffer"),
    _grow$2: dart.privateName(typed_buffer, "_grow"),
    _add$4: dart.privateName(typed_buffer, "_add"),
    _addAll: dart.privateName(typed_buffer, "_addAll"),
    _insertKnownLength: dart.privateName(typed_buffer, "_insertKnownLength"),
    _ensureCapacity: dart.privateName(typed_buffer, "_ensureCapacity"),
    _setRange: dart.privateName(typed_buffer, "_setRange"),
    $elementSizeInBytes: dartx.elementSizeInBytes,
    objectStoreName: dart.privateName(storage_backend_js, "StorageBackendJs.objectStoreName"),
    supportsCompaction$1: dart.privateName(storage_backend_js, "StorageBackendJs.supportsCompaction"),
    _db$1: dart.privateName(storage_backend_js, "_db"),
    _cipher$2: dart.privateName(storage_backend_js, "_cipher"),
    _registry: dart.privateName(storage_backend_js, "_registry"),
    _isEncoded: dart.privateName(storage_backend_js, "_isEncoded"),
    $getAll: dartx.getAll,
    _buffer$3: dart.privateName(binary_writer_impl, "_buffer"),
    _byteDataInstance: dart.privateName(binary_writer_impl, "_byteDataInstance"),
    _offset$1: dart.privateName(binary_writer_impl, "_offset"),
    _typeRegistry$1: dart.privateName(binary_writer_impl, "_typeRegistry"),
    _byteData$1: dart.privateName(binary_writer_impl, "_byteData"),
    _increaseBufferSize: dart.privateName(binary_writer_impl, "_increaseBufferSize"),
    _reserveBytes: dart.privateName(binary_writer_impl, "_reserveBytes"),
    _addBytes: dart.privateName(binary_writer_impl, "_addBytes"),
    $setInt32: dartx.setInt32,
    $toDouble: dartx.toDouble,
    $setFloat64: dartx.setFloat64,
    _writeList: dart.privateName(binary_writer_impl, "_writeList")
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: main.ItemsPage.prototype,
        [S$.Widget_key]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [S$._Enum__name]: "material",
        [S$._Enum_index]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: progress_indicator.CircularProgressIndicator.prototype,
        [S$.Widget_key]: null,
        [S$.ProgressIndicator_semanticsValue]: null,
        [S$.ProgressIndicator_semanticsLabel]: null,
        [S$.ProgressIndicator_valueColor]: null,
        [S$.ProgressIndicator_color]: null,
        [S$.ProgressIndicator_backgroundColor]: null,
        [S$.ProgressIndicator_value]: null,
        [S$.CircularProgressIndicator_strokeWidth]: 4,
        [S$.CircularProgressIndicator__indicatorType]: C[4] || CT.C4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [S$.Alignment_y]: 0,
        [S$.Alignment_x]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: basic.Center.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: C[3] || CT.C3,
        [S$.Align_heightFactor]: null,
        [S$.Align_widthFactor]: null,
        [S$.Align_alignment]: C[5] || CT.C5
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 12,
        [S$.EdgeInsets_right]: 12,
        [S$.EdgeInsets_top]: 12,
        [S$.EdgeInsets_left]: 12
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: divider.Divider.prototype,
        [S$.Widget_key]: null,
        [S$.Divider_color]: null,
        [S$.Divider_endIndent]: null,
        [S$.Divider_indent]: null,
        [S$.Divider_thickness]: null,
        [S$.Divider_height]: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text.Text.prototype,
        [S$.Widget_key]: null,
        [S$.Text_selectionColor]: null,
        [S$.Text_textHeightBehavior]: null,
        [S$.Text_textWidthBasis]: null,
        [S$.Text_semanticsLabel]: null,
        [S$.Text_maxLines]: null,
        [S$.Text_textScaleFactor]: null,
        [S$.Text_overflow]: null,
        [S$.Text_softWrap]: null,
        [S$.Text_locale]: null,
        [S$.Text_textDirection]: null,
        [S$.Text_textAlign]: null,
        [S$.Text_strutStyle]: null,
        [S$.Text_style]: null,
        [S$.Text_textSpan]: null,
        [S$.Text_data]: "Items"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [S$.IconData_matchTextDirection]: false,
        [S$.IconData_fontPackage]: null,
        [S$.IconData_fontFamily]: "MaterialIcons",
        [S$.IconData_codePoint]: 58644
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: icon.Icon.prototype,
        [S$.Widget_key]: null,
        [S$.Icon_textDirection]: null,
        [S$.Icon_semanticLabel]: null,
        [S$.Icon_shadows]: null,
        [S$.Icon_color]: null,
        [S$.Icon_opticalSize]: null,
        [S$.Icon_grade]: null,
        [S$.Icon_weight]: null,
        [S$.Icon_fill]: null,
        [S$.Icon_size]: null,
        [S$.Icon_icon]: C[10] || CT.C10
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [S$.IconData_matchTextDirection]: false,
        [S$.IconData_fontPackage]: null,
        [S$.IconData_fontFamily]: "MaterialIcons",
        [S$.IconData_codePoint]: 57415
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: icon.Icon.prototype,
        [S$.Widget_key]: null,
        [S$.Icon_textDirection]: null,
        [S$.Icon_semanticLabel]: null,
        [S$.Icon_shadows]: null,
        [S$.Icon_color]: null,
        [S$.Icon_opticalSize]: null,
        [S$.Icon_grade]: null,
        [S$.Icon_weight]: null,
        [S$.Icon_fill]: null,
        [S$.Icon_size]: null,
        [S$.Icon_icon]: C[12] || CT.C12
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: text.Text.prototype,
        [S$.Widget_key]: null,
        [S$.Text_selectionColor]: null,
        [S$.Text_textHeightBehavior]: null,
        [S$.Text_textWidthBasis]: null,
        [S$.Text_semanticsLabel]: null,
        [S$.Text_maxLines]: null,
        [S$.Text_textScaleFactor]: null,
        [S$.Text_overflow]: null,
        [S$.Text_softWrap]: null,
        [S$.Text_locale]: null,
        [S$.Text_textDirection]: null,
        [S$.Text_textAlign]: null,
        [S$.Text_strutStyle]: null,
        [S$.Text_style]: null,
        [S$.Text_textSpan]: null,
        [S$.Text_data]: "Добавить"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: main.MyApp.prototype,
        [S$.Widget_key]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C16() {
      return C[16] = dart.constMap(core.String, core.String, []);
    },
    get C17() {
      return C[17] = dart.constSet(core.String, ["mailto", "tel", "sms"]);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: link.LinkTarget.prototype,
        [S$.debugLabel]: "defaultTarget"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: link.LinkTarget.prototype,
        [S$.debugLabel]: "self"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: link.LinkTarget.prototype,
        [S$.debugLabel]: "blank"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: message_codecs.JSONMethodCodec.prototype
      });
    },
    get C22() {
      return C[22] = dart.constSet(T$.FactoryOfOneSequenceGestureRecognizer(), []);
    },
    get C23() {
      return C[23] = dart.fn(link$.LinkViewController._onGlobalClick, T$.MouseEventTovoid());
    },
    get C24() {
      return C[24] = dart.fn(link$.LinkViewController._viewFactory, T$.intToElement());
    },
    get C25() {
      return C[25] = dart.fn(local_storage.EmptyLocalStorage._initialize, T$.VoidToFutureOfvoid());
    },
    get C26() {
      return C[26] = dart.fn(local_storage.EmptyLocalStorage._hasAccessToken, T$.VoidToFutureOfbool());
    },
    get C27() {
      return C[27] = dart.fn(local_storage.EmptyLocalStorage._accessToken, T$.VoidToFutureOfStringN());
    },
    get C28() {
      return C[28] = dart.fn(local_storage.EmptyLocalStorage._removePersistedSession, T$.VoidToFutureOfvoid());
    },
    get C29() {
      return C[29] = dart.fn(local_storage.EmptyLocalStorage._persistSession, T$.dynamicToFutureOfvoid());
    },
    get C30() {
      return C[30] = dart.fn(local_storage.HiveLocalStorage._initialize, T$.VoidToFutureOfvoid());
    },
    get C31() {
      return C[31] = dart.fn(local_storage.HiveLocalStorage._hasAccessToken, T$.VoidToFutureOfbool());
    },
    get C32() {
      return C[32] = dart.fn(local_storage.HiveLocalStorage._accessToken, T$.VoidToFutureOfStringN());
    },
    get C33() {
      return C[33] = dart.fn(local_storage.HiveLocalStorage._removePersistedSession, T$.VoidToFutureOfvoid());
    },
    get C34() {
      return C[34] = dart.fn(local_storage.HiveLocalStorage._persistSession, T$.StringToFutureOfvoid());
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: realtime_client_options.RealtimeClientOptions.prototype,
        [S$.RealtimeClientOptions_logLevel]: null,
        [S$.RealtimeClientOptions_eventsPerSecond]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: oauth_flow_type.AuthFlowType.prototype,
        [S$._Enum__name]: "implicit",
        [S$._Enum_index]: 0
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: local_storage.HiveLocalStorage.prototype,
        [S$.persistSession]: C[34] || CT.C34,
        [S$.removePersistedSession]: C[33] || CT.C33,
        [S$.accessToken]: C[32] || CT.C32,
        [S$.hasAccessToken]: C[31] || CT.C31,
        [S$.initialize]: C[30] || CT.C30
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "resumed",
        [S$._Enum_index]: 0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "inactive",
        [S$._Enum_index]: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "paused",
        [S$._Enum_index]: 2
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "detached",
        [S$._Enum_index]: 3
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [S$._Enum__name]: "adaptive",
        [S$._Enum_index]: 1
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: progress_indicator.CircularProgressIndicator.prototype,
        [S$.Widget_key]: null,
        [S$.ProgressIndicator_semanticsValue]: null,
        [S$.ProgressIndicator_semanticsLabel]: null,
        [S$.ProgressIndicator_valueColor]: null,
        [S$.ProgressIndicator_color]: null,
        [S$.ProgressIndicator_backgroundColor]: null,
        [S$.ProgressIndicator_value]: null,
        [S$.CircularProgressIndicator_strokeWidth]: 4,
        [S$.CircularProgressIndicator__indicatorType]: C[44] || CT.C44
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: basic.Center.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: C[43] || CT.C43,
        [S$.Align_heightFactor]: null,
        [S$.Align_widthFactor]: null,
        [S$.Align_alignment]: C[5] || CT.C5
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: types$0.LaunchMode.prototype,
        [S$._Enum__name]: "externalApplication",
        [S$._Enum_index]: 2
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [S$.StandardMethodCodec_messageCodec]: C[48] || CT.C48
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[47] || CT.C47,
        [S$.MethodChannel_name]: "com.llfbandit.app_links/messages"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: platform_channel.EventChannel.prototype,
        [S$.EventChannel__binaryMessenger]: null,
        [S$.EventChannel_codec]: C[47] || CT.C47,
        [S$.EventChannel_name]: "com.llfbandit.app_links/events"
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[47] || CT.C47,
        [S$.MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: exceptions.AuthorizationErrorCode.prototype,
        [S$._Enum__name]: "invalidResponse",
        [S$._Enum_index]: 2
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: exceptions.SignInWithAppleAuthorizationException.prototype,
        [S$.SignInWithAppleAuthorizationException_message]: "parseAuthorizationCredentialAppleID: `authorizationCode` field was `null`",
        [S$.SignInWithAppleAuthorizationException_code]: C[52] || CT.C52
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: exceptions.AuthorizationErrorCode.prototype,
        [S$._Enum__name]: "canceled",
        [S$._Enum_index]: 0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: exceptions.SignInWithAppleAuthorizationException.prototype,
        [S$.SignInWithAppleAuthorizationException_message]: "User canceled authorization",
        [S$.SignInWithAppleAuthorizationException_code]: C[54] || CT.C54
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: exceptions.SignInWithAppleAuthorizationException.prototype,
        [S$.SignInWithAppleAuthorizationException_message]: "parseAuthorizationCredentialAppleIDFromDeeplink: No `code` query parameter set)",
        [S$.SignInWithAppleAuthorizationException_code]: C[52] || CT.C52
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: authorization_request.AppleIDAuthorizationScopes.prototype,
        [S$._Enum__name]: "email",
        [S$._Enum_index]: 0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: authorization_request.AppleIDAuthorizationScopes.prototype,
        [S$._Enum__name]: "fullName",
        [S$._Enum_index]: 1
      });
    },
    get C56() {
      return C[56] = dart.constList([C[57] || CT.C57, C[58] || CT.C58], authorization_request.AppleIDAuthorizationScopes);
    },
    get C59() {
      return C[59] = dart.constList([], authorization_request.AppleIDAuthorizationScopes);
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: credential_state.CredentialState.prototype,
        [S$._Enum__name]: "authorized",
        [S$._Enum_index]: 0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: credential_state.CredentialState.prototype,
        [S$._Enum__name]: "revoked",
        [S$._Enum_index]: 1
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: credential_state.CredentialState.prototype,
        [S$._Enum__name]: "notFound",
        [S$._Enum_index]: 2
      });
    },
    get C60() {
      return C[60] = dart.constList([C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63], credential_state.CredentialState);
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: exceptions.AuthorizationErrorCode.prototype,
        [S$._Enum__name]: "failed",
        [S$._Enum_index]: 1
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: exceptions.AuthorizationErrorCode.prototype,
        [S$._Enum__name]: "notHandled",
        [S$._Enum_index]: 3
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: exceptions.AuthorizationErrorCode.prototype,
        [S$._Enum__name]: "notInteractive",
        [S$._Enum_index]: 4
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: exceptions.AuthorizationErrorCode.prototype,
        [S$._Enum__name]: "unknown",
        [S$._Enum_index]: 5
      });
    },
    get C64() {
      return C[64] = dart.constList([C[54] || CT.C54, C[65] || CT.C65, C[52] || CT.C52, C[66] || CT.C66, C[67] || CT.C67, C[68] || CT.C68], exceptions.AuthorizationErrorCode);
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: exceptions.SignInWithAppleNotSupportedException.prototype,
        [S$.message]: "The current platform is not supported"
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: authorization_request.PasswordAuthorizationRequest.prototype
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: exceptions.SignInWithAppleAuthorizationException.prototype,
        [S$.SignInWithAppleAuthorizationException_message]: "Did receive `null` URL from performAuthorizationRequest",
        [S$.SignInWithAppleAuthorizationException_code]: C[52] || CT.C52
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[47] || CT.C47,
        [S$.MethodChannel_name]: "com.aboutyou.dart_packages.sign_in_with_apple"
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: types$.PreferredLaunchMode.prototype,
        [S$._Enum__name]: "platformDefault",
        [S$._Enum_index]: 0
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: types$.PreferredLaunchMode.prototype,
        [S$._Enum__name]: "inAppWebView",
        [S$._Enum_index]: 1
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: types$.PreferredLaunchMode.prototype,
        [S$._Enum__name]: "inAppBrowserView",
        [S$._Enum_index]: 2
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: types$.PreferredLaunchMode.prototype,
        [S$._Enum__name]: "externalApplication",
        [S$._Enum_index]: 3
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: types$.PreferredLaunchMode.prototype,
        [S$._Enum__name]: "externalNonBrowserApplication",
        [S$._Enum_index]: 4
      });
    },
    get C73() {
      return C[73] = dart.constList([C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78], types$.PreferredLaunchMode);
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: types$.InAppWebViewConfiguration.prototype,
        [S$.headers]: C[16] || CT.C16,
        [S$.enableDomStorage]: true,
        [S$.enableJavaScript]: true
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [S$.DeepCollectionEquality__unordered]: false,
        [S$.DeepCollectionEquality__base]: C[81] || CT.C81
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: types$2.FetchOptions.prototype,
        [S$.FetchOptions_forceResponse]: false,
        [S$.FetchOptions_count]: null,
        [S$.FetchOptions_head]: false
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: realtime_channel.RealtimeChannelConfig.prototype,
        [S$.RealtimeChannelConfig_key]: "",
        [S$.RealtimeChannelConfig_self]: false,
        [S$.RealtimeChannelConfig_ack]: false
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: supabase_event_types.SupabaseEventTypes.prototype,
        [S$._Enum__name]: "insert",
        [S$._Enum_index]: 0
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: supabase_event_types.SupabaseEventTypes.prototype,
        [S$._Enum__name]: "update",
        [S$._Enum_index]: 1
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: supabase_event_types.SupabaseEventTypes.prototype,
        [S$._Enum__name]: "delete",
        [S$._Enum_index]: 2
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: supabase_event_types.SupabaseEventTypes.prototype,
        [S$._Enum__name]: "all",
        [S$._Enum_index]: 3
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: supabase_event_types.SupabaseEventTypes.prototype,
        [S$._Enum__name]: "broadcast",
        [S$._Enum_index]: 4
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: supabase_event_types.SupabaseEventTypes.prototype,
        [S$._Enum__name]: "presence",
        [S$._Enum_index]: 5
      });
    },
    get C84() {
      return C[84] = dart.constList([C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90], supabase_event_types.SupabaseEventTypes);
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: types$2.ReturningOption.prototype,
        [S$._Enum__name]: "representation",
        [S$._Enum_index]: 1
      });
    },
    get C92() {
      return C[92] = dart.fn(http.get, T$.Uri__ToFutureOfResponse());
    },
    get C93() {
      return C[93] = dart.fn(http.post, T$.Uri__ToFutureOfResponse$1());
    },
    get C94() {
      return C[94] = dart.fn(http.put, T$.Uri__ToFutureOfResponse$1());
    },
    get C95() {
      return C[95] = dart.fn(http.patch, T$.Uri__ToFutureOfResponse$1());
    },
    get C96() {
      return C[96] = dart.fn(http.delete, T$.Uri__ToFutureOfResponse$1());
    },
    get C97() {
      return C[97] = dart.fn(http.head, T$.Uri__ToFutureOfResponse());
    },
    get C98() {
      return C[98] = dart.constMap(core.String, core.String, ["X-Client-Info", "supabase-flutter/1.10.25"]);
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: types$0.LaunchMode.prototype,
        [S$._Enum__name]: "platformDefault",
        [S$._Enum_index]: 0
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: types$0.LaunchMode.prototype,
        [S$._Enum__name]: "inAppWebView",
        [S$._Enum_index]: 1
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: types$0.LaunchMode.prototype,
        [S$._Enum__name]: "externalNonBrowserApplication",
        [S$._Enum_index]: 3
      });
    },
    get C99() {
      return C[99] = dart.constList([C[100] || CT.C100, C[101] || CT.C101, C[45] || CT.C45, C[102] || CT.C102], types$0.LaunchMode);
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: types$0.WebViewConfiguration.prototype,
        [S$.headers$1]: C[16] || CT.C16,
        [S$.enableDomStorage$1]: true,
        [S$.enableJavaScript$1]: true
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[47] || CT.C47,
        [S$.MethodChannel_name]: "plugins.flutter.io/url_launcher"
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: types$1.HttpMethod.prototype,
        [S$._Enum__name]: "post",
        [S$._Enum_index]: 1
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: types$1.ResponseType.prototype,
        [S$._Enum__name]: "json",
        [S$._Enum_index]: 0
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: types$1.HttpMethod.prototype,
        [S$._Enum__name]: "get",
        [S$._Enum_index]: 0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: types$1.HttpMethod.prototype,
        [S$._Enum__name]: "put",
        [S$._Enum_index]: 2
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: types$1.HttpMethod.prototype,
        [S$._Enum__name]: "delete",
        [S$._Enum_index]: 3
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: types$1.HttpMethod.prototype,
        [S$._Enum__name]: "patch",
        [S$._Enum_index]: 4
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: types$1.ResponseType.prototype,
        [S$._Enum__name]: "text",
        [S$._Enum_index]: 1
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: types$1.ResponseType.prototype,
        [S$._Enum__name]: "arraybuffer",
        [S$._Enum_index]: 2
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: types$1.ResponseType.prototype,
        [S$._Enum__name]: "blob",
        [S$._Enum_index]: 3
      });
    },
    get C111() {
      return C[111] = dart.constList([C[106] || CT.C106, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114], types$1.ResponseType);
    },
    get C115() {
      return C[115] = dart.constList([C[107] || CT.C107, C[105] || CT.C105, C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110], types$1.HttpMethod);
    },
    get C116() {
      return C[116] = dart.constMap(core.String, core.String, ["X-Client-Info", "gotrue-dart/1.12.6"]);
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 10000000
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 200000
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "passwordRecovery",
        [S$._Enum_index]: 0
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "signedIn",
        [S$._Enum_index]: 1
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "signedOut",
        [S$._Enum_index]: 2
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "tokenRefreshed",
        [S$._Enum_index]: 3
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "userUpdated",
        [S$._Enum_index]: 4
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "userDeleted",
        [S$._Enum_index]: 5
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: constants$.AuthChangeEvent.prototype,
        [S$._Enum__name]: "mfaChallengeVerified",
        [S$._Enum_index]: 6
      });
    },
    get C119() {
      return C[119] = dart.constList([C[120] || CT.C120, C[121] || CT.C121, C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126], constants$.AuthChangeEvent);
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "signup",
        [S$._Enum_index]: 0
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "invite",
        [S$._Enum_index]: 1
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "magiclink",
        [S$._Enum_index]: 2
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "recovery",
        [S$._Enum_index]: 3
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "emailChangeCurrent",
        [S$._Enum_index]: 4
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "emailChangeNew",
        [S$._Enum_index]: 5
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: constants$.GenerateLinkType.prototype,
        [S$._Enum__name]: "unknown",
        [S$._Enum_index]: 6
      });
    },
    get C127() {
      return C[127] = dart.constList([C[128] || CT.C128, C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134], constants$.GenerateLinkType);
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "sms",
        [S$._Enum_index]: 0
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "phoneChange",
        [S$._Enum_index]: 1
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "signup",
        [S$._Enum_index]: 2
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "invite",
        [S$._Enum_index]: 3
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "magiclink",
        [S$._Enum_index]: 4
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "recovery",
        [S$._Enum_index]: 5
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "emailChange",
        [S$._Enum_index]: 6
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: constants$.OtpType.prototype,
        [S$._Enum__name]: "email",
        [S$._Enum_index]: 7
      });
    },
    get C135() {
      return C[135] = dart.constList([C[136] || CT.C136, C[137] || CT.C137, C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141, C[142] || CT.C142, C[143] || CT.C143], constants$.OtpType);
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: constants$.OtpChannel.prototype,
        [S$._Enum__name]: "sms",
        [S$._Enum_index]: 0
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: constants$.OtpChannel.prototype,
        [S$._Enum__name]: "whatsapp",
        [S$._Enum_index]: 1
      });
    },
    get C144() {
      return C[144] = dart.constList([C[145] || CT.C145, C[146] || CT.C146], constants$.OtpChannel);
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: constants$.SignOutScope.prototype,
        [S$._Enum__name]: "global",
        [S$._Enum_index]: 0
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: constants$.SignOutScope.prototype,
        [S$._Enum__name]: "local",
        [S$._Enum_index]: 1
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: constants$.SignOutScope.prototype,
        [S$._Enum__name]: "others",
        [S$._Enum_index]: 2
      });
    },
    get C147() {
      return C[147] = dart.constList([C[148] || CT.C148, C[149] || CT.C149, C[150] || CT.C150], constants$.SignOutScope);
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: mfa.FactorType.prototype,
        [S$._Enum__name]: "totp",
        [S$._Enum_index]: 0
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: mfa.FactorStatus.prototype,
        [S$._Enum__name]: "verified",
        [S$._Enum_index]: 0
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: mfa.FactorStatus.prototype,
        [S$._Enum__name]: "unverified",
        [S$._Enum_index]: 1
      });
    },
    get C152() {
      return C[152] = dart.constList([C[153] || CT.C153, C[154] || CT.C154], mfa.FactorStatus);
    },
    get C155() {
      return C[155] = dart.constList([C[151] || CT.C151], mfa.FactorType);
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: mfa.AuthenticatorAssuranceLevels.prototype,
        [S$._Enum__name]: "aal1",
        [S$._Enum_index]: 0
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: mfa.AuthenticatorAssuranceLevels.prototype,
        [S$._Enum__name]: "aal2",
        [S$._Enum_index]: 1
      });
    },
    get C156() {
      return C[156] = dart.constList([C[157] || CT.C157, C[158] || CT.C158], mfa.AuthenticatorAssuranceLevels);
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: mfa.AMRMethod.prototype,
        [S$._Enum__name]: "password",
        [S$._Enum_index]: 0
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: mfa.AMRMethod.prototype,
        [S$._Enum__name]: "otp",
        [S$._Enum_index]: 1
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: mfa.AMRMethod.prototype,
        [S$._Enum__name]: "oauth",
        [S$._Enum_index]: 2
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: mfa.AMRMethod.prototype,
        [S$._Enum__name]: "totp",
        [S$._Enum_index]: 3
      });
    },
    get C159() {
      return C[159] = dart.constList([C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163], mfa.AMRMethod);
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: oauth_flow_type.AuthFlowType.prototype,
        [S$._Enum__name]: "pkce",
        [S$._Enum_index]: 1
      });
    },
    get C164() {
      return C[164] = dart.constList([C[36] || CT.C36, C[165] || CT.C165], oauth_flow_type.AuthFlowType);
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "apple",
        [S$._Enum_index]: 0
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "azure",
        [S$._Enum_index]: 1
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "bitbucket",
        [S$._Enum_index]: 2
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "discord",
        [S$._Enum_index]: 3
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "facebook",
        [S$._Enum_index]: 4
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "github",
        [S$._Enum_index]: 5
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "gitlab",
        [S$._Enum_index]: 6
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "google",
        [S$._Enum_index]: 7
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "kakao",
        [S$._Enum_index]: 8
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "keycloak",
        [S$._Enum_index]: 9
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "linkedin",
        [S$._Enum_index]: 10
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "notion",
        [S$._Enum_index]: 11
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "slack",
        [S$._Enum_index]: 12
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "spotify",
        [S$._Enum_index]: 13
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "twitch",
        [S$._Enum_index]: 14
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "twitter",
        [S$._Enum_index]: 15
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: provider$.Provider.prototype,
        [S$._Enum__name]: "workos",
        [S$._Enum_index]: 16
      });
    },
    get C166() {
      return C[166] = dart.constList([C[167] || CT.C167, C[168] || CT.C168, C[169] || CT.C169, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173, C[174] || CT.C174, C[175] || CT.C175, C[176] || CT.C176, C[177] || CT.C177, C[178] || CT.C178, C[179] || CT.C179, C[180] || CT.C180, C[181] || CT.C181, C[182] || CT.C182, C[183] || CT.C183], provider$.Provider);
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: types$2.CountOption.prototype,
        [S$._Enum__name]: "exact",
        [S$._Enum_index]: 0
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: types$2.CountOption.prototype,
        [S$._Enum__name]: "planned",
        [S$._Enum_index]: 1
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: types$2.CountOption.prototype,
        [S$._Enum__name]: "estimated",
        [S$._Enum_index]: 2
      });
    },
    get C184() {
      return C[184] = dart.constList([C[185] || CT.C185, C[186] || CT.C186, C[187] || CT.C187], types$2.CountOption);
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: types$2.ReturningOption.prototype,
        [S$._Enum__name]: "minimal",
        [S$._Enum_index]: 0
      });
    },
    get C188() {
      return C[188] = dart.constList([C[189] || CT.C189, C[91] || CT.C91], types$2.ReturningOption);
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: types$2.TextSearchType.prototype,
        [S$._Enum__name]: "plain",
        [S$._Enum_index]: 0
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: types$2.TextSearchType.prototype,
        [S$._Enum__name]: "phrase",
        [S$._Enum_index]: 1
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: types$2.TextSearchType.prototype,
        [S$._Enum__name]: "websearch",
        [S$._Enum_index]: 2
      });
    },
    get C190() {
      return C[190] = dart.constList([C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193], types$2.TextSearchType);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: realtime_channel.ChannelResponse.prototype,
        [S$._Enum__name]: "ok",
        [S$._Enum_index]: 0
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: realtime_channel.ChannelResponse.prototype,
        [S$._Enum__name]: "timedOut",
        [S$._Enum_index]: 1
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: realtime_channel.ChannelResponse.prototype,
        [S$._Enum__name]: "rateLimited",
        [S$._Enum_index]: 2
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: realtime_channel.ChannelResponse.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 3
      });
    },
    get C194() {
      return C[194] = dart.constList([C[195] || CT.C195, C[196] || CT.C196, C[197] || CT.C197, C[198] || CT.C198], realtime_channel.ChannelResponse);
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: realtime_channel.RealtimeListenTypes.prototype,
        [S$._Enum__name]: "postgresChanges",
        [S$._Enum_index]: 0
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: realtime_channel.RealtimeListenTypes.prototype,
        [S$._Enum__name]: "broadcast",
        [S$._Enum_index]: 1
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: realtime_channel.RealtimeListenTypes.prototype,
        [S$._Enum__name]: "presence",
        [S$._Enum_index]: 2
      });
    },
    get C199() {
      return C[199] = dart.constList([C[200] || CT.C200, C[201] || CT.C201, C[202] || CT.C202], realtime_channel.RealtimeListenTypes);
    },
    get C203() {
      return C[203] = dart.constMap(core.String, dart.dynamic, []);
    },
    get C204() {
      return C[204] = dart.fn(websocket_web.createWebSocketClient, T$.StringAndMapOfString$StringToWebSocketChannel());
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: constants$0.SocketStates.prototype,
        [S$._Enum__name]: "connecting",
        [S$._Enum_index]: 0
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: constants$0.SocketStates.prototype,
        [S$._Enum__name]: "open",
        [S$._Enum_index]: 1
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: constants$0.SocketStates.prototype,
        [S$._Enum__name]: "closing",
        [S$._Enum_index]: 2
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: constants$0.SocketStates.prototype,
        [S$._Enum__name]: "disconnected",
        [S$._Enum_index]: 4
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: constants$0.SocketStates.prototype,
        [S$._Enum__name]: "closed",
        [S$._Enum_index]: 3
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "abstime",
        [S$._Enum_index]: 0
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "bool",
        [S$._Enum_index]: 1
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "date",
        [S$._Enum_index]: 2
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "daterange",
        [S$._Enum_index]: 3
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "float4",
        [S$._Enum_index]: 4
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "float8",
        [S$._Enum_index]: 5
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "int2",
        [S$._Enum_index]: 6
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "int4",
        [S$._Enum_index]: 7
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "int4range",
        [S$._Enum_index]: 8
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "int8",
        [S$._Enum_index]: 9
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "int8range",
        [S$._Enum_index]: 10
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "json",
        [S$._Enum_index]: 11
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "jsonb",
        [S$._Enum_index]: 12
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "money",
        [S$._Enum_index]: 13
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "numeric",
        [S$._Enum_index]: 14
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "oid",
        [S$._Enum_index]: 15
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "reltime",
        [S$._Enum_index]: 16
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "time",
        [S$._Enum_index]: 17
      });
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "text",
        [S$._Enum_index]: 18
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "timestamp",
        [S$._Enum_index]: 19
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "timestamptz",
        [S$._Enum_index]: 20
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "timetz",
        [S$._Enum_index]: 21
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "tsrange",
        [S$._Enum_index]: 22
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: transformers.PostgresTypes.prototype,
        [S$._Enum__name]: "tstzrange",
        [S$._Enum_index]: 23
      });
    },
    get C210() {
      return C[210] = dart.constList([C[211] || CT.C211, C[212] || CT.C212, C[213] || CT.C213, C[214] || CT.C214, C[215] || CT.C215, C[216] || CT.C216, C[217] || CT.C217, C[218] || CT.C218, C[219] || CT.C219, C[220] || CT.C220, C[221] || CT.C221, C[222] || CT.C222, C[223] || CT.C223, C[224] || CT.C224, C[225] || CT.C225, C[226] || CT.C226, C[227] || CT.C227, C[228] || CT.C228, C[229] || CT.C229, C[230] || CT.C230, C[231] || CT.C231, C[232] || CT.C232, C[233] || CT.C233, C[234] || CT.C234], transformers.PostgresTypes);
    },
    get C235() {
      return C[235] = dart.constList([], core.String);
    },
    get C236() {
      return C[236] = dart.constMap(core.String, core.String, ["X-Client-Info", "realtime-dart/1.4.0"]);
    },
    get C237() {
      return C[237] = dart.constList([C[205] || CT.C205, C[206] || CT.C206, C[207] || CT.C207, C[209] || CT.C209, C[208] || CT.C208], constants$0.SocketStates);
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: constants$0.ChannelStates.prototype,
        [S$._Enum__name]: "closed",
        [S$._Enum_index]: 0
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: constants$0.ChannelStates.prototype,
        [S$._Enum__name]: "errored",
        [S$._Enum_index]: 1
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: constants$0.ChannelStates.prototype,
        [S$._Enum__name]: "joined",
        [S$._Enum_index]: 2
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: constants$0.ChannelStates.prototype,
        [S$._Enum__name]: "joining",
        [S$._Enum_index]: 3
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: constants$0.ChannelStates.prototype,
        [S$._Enum__name]: "leaving",
        [S$._Enum_index]: 4
      });
    },
    get C238() {
      return C[238] = dart.constList([C[239] || CT.C239, C[240] || CT.C240, C[241] || CT.C241, C[242] || CT.C242, C[243] || CT.C243], constants$0.ChannelStates);
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "close",
        [S$._Enum_index]: 0
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 1
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "join",
        [S$._Enum_index]: 2
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "reply",
        [S$._Enum_index]: 3
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "leave",
        [S$._Enum_index]: 4
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "heartbeat",
        [S$._Enum_index]: 5
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "accessToken",
        [S$._Enum_index]: 6
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "broadcast",
        [S$._Enum_index]: 7
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "presence",
        [S$._Enum_index]: 8
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: constants$0.ChannelEvents.prototype,
        [S$._Enum__name]: "postgresChanges",
        [S$._Enum_index]: 9
      });
    },
    get C244() {
      return C[244] = dart.constList([C[245] || CT.C245, C[246] || CT.C246, C[247] || CT.C247, C[248] || CT.C248, C[249] || CT.C249, C[250] || CT.C250, C[251] || CT.C251, C[252] || CT.C252, C[253] || CT.C253, C[254] || CT.C254], constants$0.ChannelEvents);
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: constants$0.RealtimeLogLevel.prototype,
        [S$._Enum__name]: "info",
        [S$._Enum_index]: 0
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: constants$0.RealtimeLogLevel.prototype,
        [S$._Enum__name]: "debug",
        [S$._Enum_index]: 1
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: constants$0.RealtimeLogLevel.prototype,
        [S$._Enum__name]: "warn",
        [S$._Enum_index]: 2
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: constants$0.RealtimeLogLevel.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 3
      });
    },
    get C255() {
      return C[255] = dart.constList([C[256] || CT.C256, C[257] || CT.C257, C[258] || CT.C258, C[259] || CT.C259], constants$0.RealtimeLogLevel);
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: types$3.BucketOptions.prototype,
        [S$0.BucketOptions_allowedMimeTypes]: null,
        [S$0.BucketOptions_fileSizeLimit]: null,
        [S$0.BucketOptions_public]: false
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: types$3.FileOptions.prototype,
        [S$0.FileOptions_contentType]: null,
        [S$0.FileOptions_upsert]: false,
        [S$0.FileOptions_cacheControl]: "3600"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: types$3.SortBy.prototype,
        [S$0.SortBy_order]: "asc",
        [S$0.SortBy_column]: "name"
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: types$3.SearchOptions.prototype,
        [S$0.SearchOptions_search]: null,
        [S$0.SearchOptions_sortBy]: C[263] || CT.C263,
        [S$0.SearchOptions_offset]: 0,
        [S$0.SearchOptions_limit]: 100
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: types$3.ResizeMode.prototype,
        [S$._Enum__name]: "cover",
        [S$._Enum_index]: 0
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: types$3.ResizeMode.prototype,
        [S$._Enum__name]: "contain",
        [S$._Enum_index]: 1
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: types$3.ResizeMode.prototype,
        [S$._Enum__name]: "fill",
        [S$._Enum_index]: 2
      });
    },
    get C264() {
      return C[264] = dart.constList([C[265] || CT.C265, C[266] || CT.C266, C[267] || CT.C267], types$3.ResizeMode);
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: types$3.RequestImageFormat.prototype,
        [S$._Enum__name]: "origin",
        [S$._Enum_index]: 0
      });
    },
    get C268() {
      return C[268] = dart.constList([C[269] || CT.C269], types$3.RequestImageFormat);
    },
    get C270() {
      return C[270] = dart.constMap(core.String, core.String, ["X-Client-Info", "supabase-dart/1.11.11"]);
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "eq",
        [S$._Enum_index]: 0
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "neq",
        [S$._Enum_index]: 1
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "lt",
        [S$._Enum_index]: 2
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "lte",
        [S$._Enum_index]: 3
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "gt",
        [S$._Enum_index]: 4
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "gte",
        [S$._Enum_index]: 5
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: supabase_stream_builder._FilterType.prototype,
        [S$._Enum__name]: "inFilter",
        [S$._Enum_index]: 6
      });
    },
    get C271() {
      return C[271] = dart.constList([C[272] || CT.C272, C[273] || CT.C273, C[274] || CT.C274, C[275] || CT.C275, C[276] || CT.C276, C[277] || CT.C277, C[278] || CT.C278], supabase_stream_builder._FilterType);
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [S$0.Utf8Decoder__allowMalformed]: false
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: hive.HiveStorageBackendPreference.prototype,
        [S$._Enum__name]: "native",
        [S$._Enum_index]: 0
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: hive.HiveStorageBackendPreference.prototype,
        [S$._Enum__name]: "webWorker",
        [S$._Enum_index]: 1
      });
    },
    get C281() {
      return C[281] = dart.constList([C[282] || CT.C282, C[283] || CT.C283], hive.HiveStorageBackendPreference);
    },
    get C284() {
      return C[284] = dart.const(new _js_helper.PrivateSymbol.new('_clientToken', S$0._clientToken));
    },
    get C286() {
      return C[286] = dart.const({
        __proto__: T$._EmptyStreamOfListOfint().prototype
      });
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: byte_stream.ByteStream.prototype,
        [S$0.StreamView__stream]: C[286] || CT.C286
      });
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [S$0.Utf8Codec__allowMalformed]: false
      });
    },
    get C288() {
      return C[288] = dart.constList([13, 10], core.int);
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: typed_data.Endian.prototype,
        [S$0.Endian__littleEndian]: false
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: md5._MD5.prototype,
        [S$0.blockSize]: 64
      });
    },
    get C291() {
      return C[291] = dart.constList([3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745], core.int);
    },
    get C292() {
      return C[292] = dart.constList([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], core.int);
    },
    get C293() {
      return C[293] = dart.const({
        __proto__: sha1._Sha1.prototype,
        [S$0.blockSize$1]: 64
      });
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: sha256._Sha256.prototype,
        [S$0.blockSize$2]: 64
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: sha256._Sha224.prototype,
        [S$0.blockSize$3]: 64
      });
    },
    get C296() {
      return C[296] = dart.constList([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], core.int);
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: sha512._Sha384.prototype,
        [S$0.blockSize$4]: 128
      });
    },
    get C298() {
      return C[298] = dart.const({
        __proto__: sha512._Sha512.prototype,
        [S$0.blockSize$5]: 128
      });
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: sha512._Sha512224.prototype,
        [S$0.blockSize$6]: 128
      });
    },
    get C300() {
      return C[300] = dart.const({
        __proto__: sha512._Sha512256.prototype,
        [S$0.blockSize$7]: 128
      });
    },
    get C301() {
      return C[301] = dart.fn(sign_in_with_apple_builder._fallbackBuilder, T$.BuildContextToWidget());
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: null,
        [S$0.SizedBox_height]: 0,
        [S$0.SizedBox_width]: 0
      });
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: sign_in_with_apple_button.SignInWithAppleButtonStyle.prototype,
        [S$._Enum__name]: "black",
        [S$._Enum_index]: 0
      });
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: ui.Radius.prototype,
        [S$0.Radius_y]: 8,
        [S$0.Radius_x]: 8
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [S$0.BorderRadius_bottomRight]: C[305] || CT.C305,
        [S$0.BorderRadius_bottomLeft]: C[305] || CT.C305,
        [S$0.BorderRadius_topRight]: C[305] || CT.C305,
        [S$0.BorderRadius_topLeft]: C[305] || CT.C305
      });
    },
    get C306() {
      return C[306] = dart.const({
        __proto__: sign_in_with_apple_button.IconAlignment.prototype,
        [S$._Enum__name]: "center",
        [S$._Enum_index]: 0
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: sign_in_with_apple_button.SignInWithAppleButtonStyle.prototype,
        [S$._Enum__name]: "white",
        [S$._Enum_index]: 1
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: sign_in_with_apple_button.SignInWithAppleButtonStyle.prototype,
        [S$._Enum__name]: "whiteOutlined",
        [S$._Enum_index]: 2
      });
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: sign_in_with_apple_button.IconAlignment.prototype,
        [S$._Enum__name]: "left",
        [S$._Enum_index]: 1
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 0,
        [S$.EdgeInsets_right]: 16,
        [S$.EdgeInsets_top]: 0,
        [S$.EdgeInsets_left]: 16
      });
    },
    get C311() {
      return C[311] = dart.constList([C[303] || CT.C303, C[307] || CT.C307, C[308] || CT.C308], sign_in_with_apple_button.SignInWithAppleButtonStyle);
    },
    get C312() {
      return C[312] = dart.constList([C[306] || CT.C306, C[309] || CT.C309], sign_in_with_apple_button.IconAlignment);
    },
    get C313() {
      return C[313] = dart.const({
        __proto__: platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams.prototype
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams.prototype
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: load_request_params.LoadRequestMethod.prototype,
        [S$._Enum__name]: "get",
        [S$._Enum_index]: 0
      });
    },
    get C316() {
      return C[316] = dart.const({
        __proto__: platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams.prototype
      });
    },
    get C317() {
      return C[317] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [S$._Enum__name]: "ltr",
        [S$._Enum_index]: 1
      });
    },
    get C318() {
      return C[318] = dart.constMap(core.String, core.String, ["Content-Type", "application/json", "X-Client-Info", "functions-dart/1.3.2"]);
    },
    get C320() {
      return C[320] = dart.const({
        __proto__: fetch.RequestMethodType.prototype,
        [S$._Enum__name]: "get",
        [S$._Enum_index]: 0
      });
    },
    get C321() {
      return C[321] = dart.const({
        __proto__: fetch.RequestMethodType.prototype,
        [S$._Enum__name]: "post",
        [S$._Enum_index]: 1
      });
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: fetch.RequestMethodType.prototype,
        [S$._Enum__name]: "put",
        [S$._Enum_index]: 2
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: fetch.RequestMethodType.prototype,
        [S$._Enum__name]: "delete",
        [S$._Enum_index]: 3
      });
    },
    get C319() {
      return C[319] = dart.constList([C[320] || CT.C320, C[321] || CT.C321, C[322] || CT.C322, C[323] || CT.C323], fetch.RequestMethodType);
    },
    get C324() {
      return C[324] = dart.constMap(core.String, core.String, ["X-Client-Info", "postgrest-dart/1.5.2"]);
    },
    get C325() {
      return C[325] = dart.constMap(core.String, core.String, ["X-Client-Info", "storage-dart/1.5.4"]);
    },
    get C326() {
      return C[326] = dart.constList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117], core.int);
    },
    get C327() {
      return C[327] = dart.fn(default_key_comparator.defaultKeyComparator, T$.dynamicAnddynamicToint());
    },
    get C328() {
      return C[328] = dart.fn(default_compaction_strategy.defaultCompactionStrategy, T$.intAndintTobool());
    },
    get C329() {
      return C[329] = dart.const({
        __proto__: type_registry_impl._NullTypeRegistry.prototype
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [S$0.Latin1Codec__allowInvalid]: false
      });
    },
    get C331() {
      return C[331] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);
    },
    get C332() {
      return C[332] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 30000000
      });
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: chunked_coding.ChunkedCodingCodec.prototype
      });
    },
    get C334() {
      return C[334] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C335() {
      return C[335] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: javascript_log_level.JavaScriptLogLevel.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 0
      });
    },
    get C338() {
      return C[338] = dart.const({
        __proto__: javascript_log_level.JavaScriptLogLevel.prototype,
        [S$._Enum__name]: "warning",
        [S$._Enum_index]: 1
      });
    },
    get C339() {
      return C[339] = dart.const({
        __proto__: javascript_log_level.JavaScriptLogLevel.prototype,
        [S$._Enum__name]: "debug",
        [S$._Enum_index]: 2
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: javascript_log_level.JavaScriptLogLevel.prototype,
        [S$._Enum__name]: "info",
        [S$._Enum_index]: 3
      });
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: javascript_log_level.JavaScriptLogLevel.prototype,
        [S$._Enum__name]: "log",
        [S$._Enum_index]: 4
      });
    },
    get C336() {
      return C[336] = dart.constList([C[337] || CT.C337, C[338] || CT.C338, C[339] || CT.C339, C[340] || CT.C340, C[341] || CT.C341], javascript_log_level.JavaScriptLogLevel);
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: javascript_mode.JavaScriptMode.prototype,
        [S$._Enum__name]: "disabled",
        [S$._Enum_index]: 0
      });
    },
    get C344() {
      return C[344] = dart.const({
        __proto__: javascript_mode.JavaScriptMode.prototype,
        [S$._Enum__name]: "unrestricted",
        [S$._Enum_index]: 1
      });
    },
    get C342() {
      return C[342] = dart.constList([C[343] || CT.C343, C[344] || CT.C344], javascript_mode.JavaScriptMode);
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: load_request_params.LoadRequestMethod.prototype,
        [S$._Enum__name]: "post",
        [S$._Enum_index]: 1
      });
    },
    get C345() {
      return C[345] = dart.constList([C[315] || CT.C315, C[346] || CT.C346], load_request_params.LoadRequestMethod);
    },
    get C348() {
      return C[348] = dart.const({
        __proto__: navigation_decision.NavigationDecision.prototype,
        [S$._Enum__name]: "prevent",
        [S$._Enum_index]: 0
      });
    },
    get C349() {
      return C[349] = dart.const({
        __proto__: navigation_decision.NavigationDecision.prototype,
        [S$._Enum__name]: "navigate",
        [S$._Enum_index]: 1
      });
    },
    get C347() {
      return C[347] = dart.constList([C[348] || CT.C348, C[349] || CT.C349], navigation_decision.NavigationDecision);
    },
    get C350() {
      return C[350] = dart.const({
        __proto__: platform_webview_permission_request.WebViewPermissionResourceType.prototype,
        [S$0.name$6]: "camera"
      });
    },
    get C351() {
      return C[351] = dart.const({
        __proto__: platform_webview_permission_request.WebViewPermissionResourceType.prototype,
        [S$0.name$6]: "microphone"
      });
    },
    get C353() {
      return C[353] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "authentication",
        [S$._Enum_index]: 0
      });
    },
    get C354() {
      return C[354] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "badUrl",
        [S$._Enum_index]: 1
      });
    },
    get C355() {
      return C[355] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "connect",
        [S$._Enum_index]: 2
      });
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "failedSslHandshake",
        [S$._Enum_index]: 3
      });
    },
    get C357() {
      return C[357] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "file",
        [S$._Enum_index]: 4
      });
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "fileNotFound",
        [S$._Enum_index]: 5
      });
    },
    get C359() {
      return C[359] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "hostLookup",
        [S$._Enum_index]: 6
      });
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "io",
        [S$._Enum_index]: 7
      });
    },
    get C361() {
      return C[361] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "proxyAuthentication",
        [S$._Enum_index]: 8
      });
    },
    get C362() {
      return C[362] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "redirectLoop",
        [S$._Enum_index]: 9
      });
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "timeout",
        [S$._Enum_index]: 10
      });
    },
    get C364() {
      return C[364] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "tooManyRequests",
        [S$._Enum_index]: 11
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "unknown",
        [S$._Enum_index]: 12
      });
    },
    get C366() {
      return C[366] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "unsafeResource",
        [S$._Enum_index]: 13
      });
    },
    get C367() {
      return C[367] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "unsupportedAuthScheme",
        [S$._Enum_index]: 14
      });
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "unsupportedScheme",
        [S$._Enum_index]: 15
      });
    },
    get C369() {
      return C[369] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "webContentProcessTerminated",
        [S$._Enum_index]: 16
      });
    },
    get C370() {
      return C[370] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "webViewInvalidated",
        [S$._Enum_index]: 17
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "javaScriptExceptionOccurred",
        [S$._Enum_index]: 18
      });
    },
    get C372() {
      return C[372] = dart.const({
        __proto__: web_resource_error.WebResourceErrorType.prototype,
        [S$._Enum__name]: "javaScriptResultTypeIsUnsupported",
        [S$._Enum_index]: 19
      });
    },
    get C352() {
      return C[352] = dart.constList([C[353] || CT.C353, C[354] || CT.C354, C[355] || CT.C355, C[356] || CT.C356, C[357] || CT.C357, C[358] || CT.C358, C[359] || CT.C359, C[360] || CT.C360, C[361] || CT.C361, C[362] || CT.C362, C[363] || CT.C363, C[364] || CT.C364, C[365] || CT.C365, C[366] || CT.C366, C[367] || CT.C367, C[368] || CT.C368, C[369] || CT.C369, C[370] || CT.C370, C[371] || CT.C371, C[372] || CT.C372], web_resource_error.WebResourceErrorType);
    },
    get C374() {
      return C[374] = dart.const({
        __proto__: value_stream._MissingCase.prototype,
        [S$._Enum__name]: "value",
        [S$._Enum_index]: 0
      });
    },
    get C375() {
      return C[375] = dart.const({
        __proto__: value_stream._MissingCase.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 1
      });
    },
    get C373() {
      return C[373] = dart.constList([C[374] || CT.C374, C[375] || CT.C375], value_stream._MissingCase);
    },
    get C376() {
      return C[376] = dart.const({
        __proto__: empty._Empty.prototype
      });
    },
    get C377() {
      return C[377] = dart.const(new _js_helper.PrivateSymbol.new('_webSocket', S$1._webSocket$1));
    },
    get C378() {
      return C[378] = dart.const({
        __proto__: html$.BinaryType.prototype,
        [S$1.value$2]: "blob",
        [S$1.name$8]: "blob"
      });
    },
    get C379() {
      return C[379] = dart.const({
        __proto__: html$.BinaryType.prototype,
        [S$1.value$2]: "arraybuffer",
        [S$1.name$8]: "list"
      });
    },
    get C380() {
      return C[380] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 5000000
      });
    },
    get C382() {
      return C[382] = dart.const({
        __proto__: connectable_stream._ConnectableStreamUse.prototype,
        [S$._Enum__name]: "autoConnect",
        [S$._Enum_index]: 0
      });
    },
    get C383() {
      return C[383] = dart.const({
        __proto__: connectable_stream._ConnectableStreamUse.prototype,
        [S$._Enum__name]: "connect",
        [S$._Enum_index]: 1
      });
    },
    get C384() {
      return C[384] = dart.const({
        __proto__: connectable_stream._ConnectableStreamUse.prototype,
        [S$._Enum__name]: "refCount",
        [S$._Enum_index]: 2
      });
    },
    get C381() {
      return C[381] = dart.constList([C[382] || CT.C382, C[383] || CT.C383, C[384] || CT.C384], connectable_stream._ConnectableStreamUse);
    },
    get C385() {
      return C[385] = dart.const({
        __proto__: notification.Kind.prototype,
        [S$._Enum__name]: "onData",
        [S$._Enum_index]: 0
      });
    },
    get C386() {
      return C[386] = dart.const({
        __proto__: notification.Kind.prototype,
        [S$._Enum__name]: "onDone",
        [S$._Enum_index]: 1
      });
    },
    get C387() {
      return C[387] = dart.const({
        __proto__: notification.Kind.prototype,
        [S$._Enum__name]: "onError",
        [S$._Enum_index]: 2
      });
    },
    get C388() {
      return C[388] = dart.const({
        __proto__: T$.NotificationOfNever().prototype,
        [S$1.errorAndStackTrace]: null,
        [S$1._value$1]: C[376] || CT.C376,
        [S$1.kind]: C[386] || CT.C386
      });
    },
    get C389() {
      return C[389] = dart.constList([C[385] || CT.C385, C[386] || CT.C386, C[387] || CT.C387], notification.Kind);
    },
    get C390() {
      return C[390] = dart.constList([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], core.int);
    },
    get C391() {
      return C[391] = dart.constList([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], core.int);
    },
    get C392() {
      return C[392] = dart.constList([1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145], core.int);
    },
    get C393() {
      return C[393] = dart.constList([2774754246, 2222750968, 2574743534, 2373680118, 234025727, 3177933782, 2976870366, 1422247313, 1345335392, 50397442, 2842126286, 2099981142, 436141799, 1658312629, 3870010189, 2591454956, 1170918031, 2642575903, 1086966153, 2273148410, 368769775, 3948501426, 3376891790, 200339707, 3970805057, 1742001331, 4255294047, 3937382213, 3214711843, 4154762323, 2524082916, 1539358875, 3266819957, 486407649, 2928907069, 1780885068, 1513502316, 1094664062, 49805301, 1338821763, 1546925160, 4104496465, 887481809, 150073849, 2473685474, 1943591083, 1395732834, 1058346282, 201589768, 1388824469, 1696801606, 1589887901, 672667696, 2711000631, 251987210, 3046808111, 151455502, 907153956, 2608889883, 1038279391, 652995533, 1764173646, 3451040383, 2675275242, 453576978, 2659418909, 1949051992, 773462580, 756751158, 2993581788, 3998898868, 4221608027, 4132590244, 1295727478, 1641469623, 3467883389, 2066295122, 1055122397, 1898917726, 2542044179, 4115878822, 1758581177, 0, 753790401, 1612718144, 536673507, 3367088505, 3982187446, 3194645204, 1187761037, 3653156455, 1262041458, 3729410708, 3561770136, 3898103984, 1255133061, 1808847035, 720367557, 3853167183, 385612781, 3309519750, 3612167578, 1429418854, 2491778321, 3477423498, 284817897, 100794884, 2172616702, 4031795360, 1144798328, 3131023141, 3819481163, 4082192802, 4272137053, 3225436288, 2324664069, 2912064063, 3164445985, 1211644016, 83228145, 3753688163, 3249976951, 1977277103, 1663115586, 806359072, 452984805, 250868733, 1842533055, 1288555905, 336333848, 890442534, 804056259, 3781124030, 2727843637, 3427026056, 957814574, 1472513171, 4071073621, 2189328124, 1195195770, 2892260552, 3881655738, 723065138, 2507371494, 2690670784, 2558624025, 3511635870, 2145180835, 1713513028, 2116692564, 2878378043, 2206763019, 3393603212, 703524551, 3552098411, 1007948840, 2044649127, 3797835452, 487262998, 1994120109, 1004593371, 1446130276, 1312438900, 503974420, 3679013266, 168166924, 1814307912, 3831258296, 1573044895, 1859376061, 4021070915, 2791465668, 2828112185, 2761266481, 937747667, 2339994098, 854058965, 1137232011, 1496790894, 3077402074, 2358086913, 1691735473, 3528347292, 3769215305, 3027004632, 4199962284, 133494003, 636152527, 2942657994, 2390391540, 3920539207, 403179536, 3585784431, 2289596656, 1864705354, 1915629148, 605822008, 4054230615, 3350508659, 1371981463, 602466507, 2094914977, 2624877800, 555687742, 3712699286, 3703422305, 2257292045, 2240449039, 2423288032, 1111375484, 3300242801, 2858837708, 3628615824, 84083462, 32962295, 302911004, 2741068226, 1597322602, 4183250862, 3501832553, 2441512471, 1489093017, 656219450, 3114180135, 954327513, 335083755, 3013122091, 856756514, 3144247762, 1893325225, 2307821063, 2811532339, 3063651117, 572399164, 2458355477, 552200649, 1238290055, 4283782570, 2015897680, 2061492133, 2408352771, 4171342169, 2156497161, 386731290, 3669999461, 837215959, 3326231172, 3093850320, 3275833730, 2962856233, 1999449434, 286199582, 3417354363, 4233385128, 3602627437, 974525996], core.int);
    },
    get C394() {
      return C[394] = dart.constList([1667483301, 2088564868, 2004348569, 2071721613, 4076011277, 1802229437, 1869602481, 3318059348, 808476752, 16843267, 1734856361, 724260477, 4278118169, 3621238114, 2880130534, 1987505306, 3402272581, 2189565853, 3385428288, 2105408135, 4210749205, 1499050731, 1195871945, 4042324747, 2913812972, 3570709351, 2728550397, 2947499498, 2627478463, 2762232823, 1920132246, 3233848155, 3082253762, 4261273884, 2475900334, 640044138, 909536346, 1061125697, 4160222466, 3435955023, 875849820, 2779075060, 3857043764, 4059166984, 1903288979, 3638078323, 825320019, 353708607, 67373068, 3351745874, 589514341, 3284376926, 404238376, 2526427041, 84216335, 2593796021, 117902857, 303178806, 2155879323, 3806519101, 3958099238, 656887401, 2998042573, 1970662047, 151589403, 2206408094, 741103732, 437924910, 454768173, 1852759218, 1515893998, 2694863867, 1381147894, 993752653, 3604395873, 3014884814, 690573947, 3823361342, 791633521, 2223248279, 1397991157, 3520182632, 0, 3991781676, 538984544, 4244431647, 2981198280, 1532737261, 1785386174, 3419114822, 3200149465, 960066123, 1246401758, 1280088276, 1482207464, 3486483786, 3503340395, 4025468202, 2863288293, 4227591446, 1128498885, 1296931543, 859006549, 2240090516, 1162185423, 4193904912, 33686534, 2139094657, 1347461360, 1010595908, 2678007226, 2829601763, 1364304627, 2745392638, 1077969088, 2408514954, 2459058093, 2644320700, 943222856, 4126535940, 3166462943, 3065411521, 3671764853, 555827811, 269492272, 4294960410, 4092853518, 3537026925, 3452797260, 202119188, 320022069, 3974939439, 1600110305, 2543269282, 1145342156, 387395129, 3301217111, 2812761586, 2122251394, 1027439175, 1684326572, 1566423783, 421081643, 1936975509, 1616953504, 2172721560, 1330618065, 3705447295, 572671078, 707417214, 2425371563, 2290617219, 1179028682, 4008625961, 3099093971, 336865340, 3739133817, 1583267042, 185275933, 3688607094, 3772832571, 842163286, 976909390, 168432670, 1229558491, 101059594, 606357612, 1549580516, 3267534685, 3553869166, 2896970735, 1650640038, 2442213800, 2509582756, 3840201527, 2038035083, 3890730290, 3368586051, 926379609, 1835915959, 2374828428, 3587551588, 1313774802, 2846444000, 1819072692, 1448520954, 4109693703, 3941256997, 1701169839, 2054878350, 2930657257, 134746136, 3132780501, 2021191816, 623200879, 774790258, 471611428, 2795919345, 3031724999, 3334903633, 3907570467, 3722289532, 1953818780, 522141217, 1263245021, 3183305180, 2341145990, 2324303749, 1886445712, 1044282434, 3048567236, 1718013098, 1212715224, 50529797, 4143380225, 235805714, 1633796771, 892693087, 1465364217, 3115936208, 2256934801, 3250690392, 488454695, 2661164985, 3789674808, 4177062675, 2560109491, 286335539, 1768542907, 3654920560, 2391672713, 2492740519, 2610638262, 505297954, 2273777042, 3924412704, 3469641545, 1431677695, 673730680, 3755976058, 2357986191, 2711706104, 2307459456, 218962455, 3216991706, 3873888049, 1111655622, 1751699640, 1094812355, 2576951728, 757946999, 252648977, 2964356043, 1414834428, 3149622742, 370551866], core.int);
    },
    get C395() {
      return C[395] = dart.constList([1673962851, 2096661628, 2012125559, 2079755643, 4076801522, 1809235307, 1876865391, 3314635973, 811618352, 16909057, 1741597031, 727088427, 4276558334, 3618988759, 2874009259, 1995217526, 3398387146, 2183110018, 3381215433, 2113570685, 4209972730, 1504897881, 1200539975, 4042984432, 2906778797, 3568527316, 2724199842, 2940594863, 2619588508, 2756966308, 1927583346, 3231407040, 3077948087, 4259388669, 2470293139, 642542118, 913070646, 1065238847, 4160029431, 3431157708, 879254580, 2773611685, 3855693029, 4059629809, 1910674289, 3635114968, 828527409, 355090197, 67636228, 3348452039, 591815971, 3281870531, 405809176, 2520228246, 84545285, 2586817946, 118360327, 304363026, 2149292928, 3806281186, 3956090603, 659450151, 2994720178, 1978310517, 152181513, 2199756419, 743994412, 439627290, 456535323, 1859957358, 1521806938, 2690382752, 1386542674, 997608763, 3602342358, 3011366579, 693271337, 3822927587, 794718511, 2215876484, 1403450707, 3518589137, 0, 3988860141, 541089824, 4242743292, 2977548465, 1538714971, 1792327274, 3415033547, 3194476990, 963791673, 1251270218, 1285084236, 1487988824, 3481619151, 3501943760, 4022676207, 2857362858, 4226619131, 1132905795, 1301993293, 862344499, 2232521861, 1166724933, 4192801017, 33818114, 2147385727, 1352724560, 1014514748, 2670049951, 2823545768, 1369633617, 2740846243, 1082179648, 2399505039, 2453646738, 2636233885, 946882616, 4126213365, 3160661948, 3061301686, 3668932058, 557998881, 270544912, 4293204735, 4093447923, 3535760850, 3447803085, 202904588, 321271059, 3972214764, 1606345055, 2536874647, 1149815876, 388905239, 3297990596, 2807427751, 2130477694, 1031423805, 1690872932, 1572530013, 422718233, 1944491379, 1623236704, 2165938305, 1335808335, 3701702620, 574907938, 710180394, 2419829648, 2282455944, 1183631942, 4006029806, 3094074296, 338181140, 3735517662, 1589437022, 185998603, 3685578459, 3772464096, 845436466, 980700730, 169090570, 1234361161, 101452294, 608726052, 1555620956, 3265224130, 3552407251, 2890133420, 1657054818, 2436475025, 2503058581, 3839047652, 2045938553, 3889509095, 3364570056, 929978679, 1843050349, 2365688973, 3585172693, 1318900302, 2840191145, 1826141292, 1454176854, 4109567988, 3939444202, 1707781989, 2062847610, 2923948462, 135272456, 3127891386, 2029029496, 625635109, 777810478, 473441308, 2790781350, 3027486644, 3331805638, 3905627112, 3718347997, 1961401460, 524165407, 1268178251, 3177307325, 2332919435, 2316273034, 1893765232, 1048330814, 3044132021, 1724688998, 1217452104, 50726147, 4143383030, 236720654, 1640145761, 896163637, 1471084887, 3110719673, 2249691526, 3248052417, 490350365, 2653403550, 3789109473, 4176155640, 2553000856, 287453969, 1775418217, 3651760345, 2382858638, 2486413204, 2603464347, 507257374, 2266337927, 3922272489, 3464972750, 1437269845, 676362280, 3752164063, 2349043596, 2707028129, 2299101321, 219813645, 3211123391, 3872862694, 1115997762, 1758509160, 1099088705, 2569646233, 760903469, 253628687, 2960903088, 1420360788, 3144537787, 371997206], core.int);
    },
    get C396() {
      return C[396] = dart.constList([3332727651, 4169432188, 4003034999, 4136467323, 4279104242, 3602738027, 3736170351, 2438251973, 1615867952, 33751297, 3467208551, 1451043627, 3877240574, 3043153879, 1306962859, 3969545846, 2403715786, 530416258, 2302724553, 4203183485, 4011195130, 3001768281, 2395555655, 4211863792, 1106029997, 3009926356, 1610457762, 1173008303, 599760028, 1408738468, 3835064946, 2606481600, 1975695287, 3776773629, 1034851219, 1282024998, 1817851446, 2118205247, 4110612471, 2203045068, 1750873140, 1374987685, 3509904869, 4178113009, 3801313649, 2876496088, 1649619249, 708777237, 135005188, 2505230279, 1181033251, 2640233411, 807933976, 933336726, 168756485, 800430746, 235472647, 607523346, 463175808, 3745374946, 3441880043, 1315514151, 2144187058, 3936318837, 303761673, 496927619, 1484008492, 875436570, 908925723, 3702681198, 3035519578, 1543217312, 2767606354, 1984772923, 3076642518, 2110698419, 1383803177, 3711886307, 1584475951, 328696964, 2801095507, 3110654417, 0, 3240947181, 1080041504, 3810524412, 2043195825, 3069008731, 3569248874, 2370227147, 1742323390, 1917532473, 2497595978, 2564049996, 2968016984, 2236272591, 3144405200, 3307925487, 1340451498, 3977706491, 2261074755, 2597801293, 1716859699, 294946181, 2328839493, 3910203897, 67502594, 4269899647, 2700103760, 2017737788, 632987551, 1273211048, 2733855057, 1576969123, 2160083008, 92966799, 1068339858, 566009245, 1883781176, 4043634165, 1675607228, 2009183926, 2943736538, 1113792801, 540020752, 3843751935, 4245615603, 3211645650, 2169294285, 403966988, 641012499, 3274697964, 3202441055, 899848087, 2295088196, 775493399, 2472002756, 1441965991, 4236410494, 2051489085, 3366741092, 3135724893, 841685273, 3868554099, 3231735904, 429425025, 2664517455, 2743065820, 1147544098, 1417554474, 1001099408, 193169544, 2362066502, 3341414126, 1809037496, 675025940, 2809781982, 3168951902, 371002123, 2910247899, 3678134496, 1683370546, 1951283770, 337512970, 2463844681, 201983494, 1215046692, 3101973596, 2673722050, 3178157011, 1139780780, 3299238498, 967348625, 832869781, 3543655652, 4069226873, 3576883175, 2336475336, 1851340599, 3669454189, 25988493, 2976175573, 2631028302, 1239460265, 3635702892, 2902087254, 4077384948, 3475368682, 3400492389, 4102978170, 1206496942, 270010376, 1876277946, 4035475576, 1248797989, 1550986798, 941890588, 1475454630, 1942467764, 2538718918, 3408128232, 2709315037, 3902567540, 1042358047, 2531085131, 1641856445, 226921355, 260409994, 3767562352, 2084716094, 1908716981, 3433719398, 2430093384, 100991747, 4144101110, 470945294, 3265487201, 1784624437, 2935576407, 1775286713, 395413126, 2572730817, 975641885, 666476190, 3644383713, 3943954680, 733190296, 573772049, 3535497577, 2842745305, 126455438, 866620564, 766942107, 1008868894, 361924487, 3374377449, 2269761230, 2868860245, 1350051880, 2776293343, 59739276, 1509466529, 159418761, 437718285, 1708834751, 3610371814, 2227585602, 3501746280, 2193834305, 699439513, 1517759789, 504434447, 2076946608, 2835108948, 1842789307, 742004246], core.int);
    },
    get C397() {
      return C[397] = dart.constList([1353184337, 1399144830, 3282310938, 2522752826, 3412831035, 4047871263, 2874735276, 2466505547, 1442459680, 4134368941, 2440481928, 625738485, 4242007375, 3620416197, 2151953702, 2409849525, 1230680542, 1729870373, 2551114309, 3787521629, 41234371, 317738113, 2744600205, 3338261355, 3881799427, 2510066197, 3950669247, 3663286933, 763608788, 3542185048, 694804553, 1154009486, 1787413109, 2021232372, 1799248025, 3715217703, 3058688446, 397248752, 1722556617, 3023752829, 407560035, 2184256229, 1613975959, 1165972322, 3765920945, 2226023355, 480281086, 2485848313, 1483229296, 436028815, 2272059028, 3086515026, 601060267, 3791801202, 1468997603, 715871590, 120122290, 63092015, 2591802758, 2768779219, 4068943920, 2997206819, 3127509762, 1552029421, 723308426, 2461301159, 4042393587, 2715969870, 3455375973, 3586000134, 526529745, 2331944644, 2639474228, 2689987490, 853641733, 1978398372, 971801355, 2867814464, 111112542, 1360031421, 4186579262, 1023860118, 2919579357, 1186850381, 3045938321, 90031217, 1876166148, 4279586912, 620468249, 2548678102, 3426959497, 2006899047, 3175278768, 2290845959, 945494503, 3689859193, 1191869601, 3910091388, 3374220536, 0, 2206629897, 1223502642, 2893025566, 1316117100, 4227796733, 1446544655, 517320253, 658058550, 1691946762, 564550760, 3511966619, 976107044, 2976320012, 266819475, 3533106868, 2660342555, 1338359936, 2720062561, 1766553434, 370807324, 179999714, 3844776128, 1138762300, 488053522, 185403662, 2915535858, 3114841645, 3366526484, 2233069911, 1275557295, 3151862254, 4250959779, 2670068215, 3170202204, 3309004356, 880737115, 1982415755, 3703972811, 1761406390, 1676797112, 3403428311, 277177154, 1076008723, 538035844, 2099530373, 4164795346, 288553390, 1839278535, 1261411869, 4080055004, 3964831245, 3504587127, 1813426987, 2579067049, 4199060497, 577038663, 3297574056, 440397984, 3626794326, 4019204898, 3343796615, 3251714265, 4272081548, 906744984, 3481400742, 685669029, 646887386, 2764025151, 3835509292, 227702864, 2613862250, 1648787028, 3256061430, 3904428176, 1593260334, 4121936770, 3196083615, 2090061929, 2838353263, 3004310991, 999926984, 2809993232, 1852021992, 2075868123, 158869197, 4095236462, 28809964, 2828685187, 1701746150, 2129067946, 147831841, 3873969647, 3650873274, 3459673930, 3557400554, 3598495785, 2947720241, 824393514, 815048134, 3227951669, 935087732, 2798289660, 2966458592, 366520115, 1251476721, 4158319681, 240176511, 804688151, 2379631990, 1303441219, 1414376140, 3741619940, 3820343710, 461924940, 3089050817, 2136040774, 82468509, 1563790337, 1937016826, 776014843, 1511876531, 1389550482, 861278441, 323475053, 2355222426, 2047648055, 2383738969, 2302415851, 3995576782, 902390199, 3991215329, 1018251130, 1507840668, 1064563285, 2043548696, 3208103795, 3939366739, 1537932639, 342834655, 2262516856, 2180231114, 1053059257, 741614648, 1598071746, 1925389590, 203809468, 2336832552, 1100287487, 1895934009, 3736275976, 2632234200, 2428589668, 1636092795, 1890988757, 1952214088, 1113045200], core.int);
    },
    get C398() {
      return C[398] = dart.constList([2817806672, 1698790995, 2752977603, 1579629206, 1806384075, 1167925233, 1492823211, 65227667, 4197458005, 1836494326, 1993115793, 1275262245, 3622129660, 3408578007, 1144333952, 2741155215, 1521606217, 465184103, 250234264, 3237895649, 1966064386, 4031545618, 2537983395, 4191382470, 1603208167, 2626819477, 2054012907, 1498584538, 2210321453, 561273043, 1776306473, 3368652356, 2311222634, 2039411832, 1045993835, 1907959773, 1340194486, 2911432727, 2887829862, 986611124, 1256153880, 823846274, 860985184, 2136171077, 2003087840, 2926295940, 2692873756, 722008468, 1749577816, 4249194265, 1826526343, 4168831671, 3547573027, 38499042, 2401231703, 2874500650, 686535175, 3266653955, 2076542618, 137876389, 2267558130, 2780767154, 1778582202, 2182540636, 483363371, 3027871634, 4060607472, 3798552225, 4107953613, 3188000469, 1647628575, 4272342154, 1395537053, 1442030240, 3783918898, 3958809717, 3968011065, 4016062634, 2675006982, 275692881, 2317434617, 115185213, 88006062, 3185986886, 2371129781, 1573155077, 3557164143, 357589247, 4221049124, 3921532567, 1128303052, 2665047927, 1122545853, 2341013384, 1528424248, 4006115803, 175939911, 256015593, 512030921, 0, 2256537987, 3979031112, 1880170156, 1918528590, 4279172603, 948244310, 3584965918, 959264295, 3641641572, 2791073825, 1415289809, 775300154, 1728711857, 3881276175, 2532226258, 2442861470, 3317727311, 551313826, 1266113129, 437394454, 3130253834, 715178213, 3760340035, 387650077, 218697227, 3347837613, 2830511545, 2837320904, 435246981, 125153100, 3717852859, 1618977789, 637663135, 4117912764, 996558021, 2130402100, 692292470, 3324234716, 4243437160, 4058298467, 3694254026, 2237874704, 580326208, 298222624, 608863613, 1035719416, 855223825, 2703869805, 798891339, 817028339, 1384517100, 3821107152, 380840812, 3111168409, 1217663482, 1693009698, 2365368516, 1072734234, 746411736, 2419270383, 1313441735, 3510163905, 2731183358, 198481974, 2180359887, 3732579624, 2394413606, 3215802276, 2637835492, 2457358349, 3428805275, 1182684258, 328070850, 3101200616, 4147719774, 2948825845, 2153619390, 2479909244, 768962473, 304467891, 2578237499, 2098729127, 1671227502, 3141262203, 2015808777, 408514292, 3080383489, 2588902312, 1855317605, 3875515006, 3485212936, 3893751782, 2615655129, 913263310, 161475284, 2091919830, 2997105071, 591342129, 2493892144, 1721906624, 3159258167, 3397581990, 3499155632, 3634836245, 2550460746, 3672916471, 1355644686, 4136703791, 3595400845, 2968470349, 1303039060, 76997855, 3050413795, 2288667675, 523026872, 1365591679, 3932069124, 898367837, 1955068531, 1091304238, 493335386, 3537605202, 1443948851, 1205234963, 1641519756, 211892090, 351820174, 1007938441, 665439982, 3378624309, 3843875309, 2974251580, 3755121753, 1945261375, 3457423481, 935818175, 3455538154, 2868731739, 1866325780, 3678697606, 4088384129, 3295197502, 874788908, 1084473951, 3273463410, 635616268, 1228679307, 2500722497, 27801969, 3003910366, 3837057180, 3243664528, 2227927905, 3056784752, 1550600308, 1471729730], core.int);
    },
    get C399() {
      return C[399] = dart.constList([4098969767, 1098797925, 387629988, 658151006, 2872822635, 2636116293, 4205620056, 3813380867, 807425530, 1991112301, 3431502198, 49620300, 3847224535, 717608907, 891715652, 1656065955, 2984135002, 3123013403, 3930429454, 4267565504, 801309301, 1283527408, 1183687575, 3547055865, 2399397727, 2450888092, 1841294202, 1385552473, 3201576323, 1951978273, 3762891113, 3381544136, 3262474889, 2398386297, 1486449470, 3106397553, 3787372111, 2297436077, 550069932, 3464344634, 3747813450, 451248689, 1368875059, 1398949247, 1689378935, 1807451310, 2180914336, 150574123, 1215322216, 1167006205, 3734275948, 2069018616, 1940595667, 1265820162, 534992783, 1432758955, 3954313000, 3039757250, 3313932923, 936617224, 674296455, 3206787749, 50510442, 384654466, 3481938716, 2041025204, 133427442, 1766760930, 3664104948, 84334014, 886120290, 2797898494, 775200083, 4087521365, 2315596513, 4137973227, 2198551020, 1614850799, 1901987487, 1857900816, 557775242, 3717610758, 1054715397, 3863824061, 1418835341, 3295741277, 100954068, 1348534037, 2551784699, 3184957417, 1082772547, 3647436702, 3903896898, 2298972299, 434583643, 3363429358, 2090944266, 1115482383, 2230896926, 0, 2148107142, 724715757, 287222896, 1517047410, 251526143, 2232374840, 2923241173, 758523705, 252339417, 1550328230, 1536938324, 908343854, 168604007, 1469255655, 4004827798, 2602278545, 3229634501, 3697386016, 2002413899, 303830554, 2481064634, 2696996138, 574374880, 454171927, 151915277, 2347937223, 3056449960, 504678569, 4049044761, 1974422535, 2582559709, 2141453664, 33005350, 1918680309, 1715782971, 4217058430, 1133213225, 600562886, 3988154620, 3837289457, 836225756, 1665273989, 2534621218, 3330547729, 1250262308, 3151165501, 4188934450, 700935585, 2652719919, 3000824624, 2249059410, 3245854947, 3005967382, 1890163129, 2484206152, 3913753188, 4238918796, 4037024319, 2102843436, 857927568, 1233635150, 953795025, 3398237858, 3566745099, 4121350017, 2057644254, 3084527246, 2906629311, 976020637, 2018512274, 1600822220, 2119459398, 2381758995, 3633375416, 959340279, 3280139695, 1570750080, 3496574099, 3580864813, 634368786, 2898803609, 403744637, 2632478307, 1004239803, 650971512, 1500443672, 2599158199, 1334028442, 2514904430, 4289363686, 3156281551, 368043752, 3887782299, 1867173430, 2682967049, 2955531900, 2754719666, 1059729699, 2781229204, 2721431654, 1316239292, 2197595850, 2430644432, 2805143000, 82922136, 3963746266, 3447656016, 2434215926, 1299615190, 4014165424, 2865517645, 2531581700, 3516851125, 1783372680, 750893087, 1699118929, 1587348714, 2348899637, 2281337716, 201010753, 1739807261, 3683799762, 283718486, 3597472583, 3617229921, 2704767500, 4166618644, 334203196, 2848910887, 1639396809, 484568549, 1199193265, 3533461983, 4065673075, 337148366, 3346251575, 4149471949, 4250885034, 1038029935, 1148749531, 2949284339, 1756970692, 607661108, 2747424576, 488010435, 3803974693, 1009290057, 234832277, 2822336769, 201907891, 3034094820, 1449431233, 3413860740, 852848822, 1816687708, 3100656215], core.int);
    },
    get C400() {
      return C[400] = dart.constList([1364240372, 2119394625, 449029143, 982933031, 1003187115, 535905693, 2896910586, 1267925987, 542505520, 2918608246, 2291234508, 4112862210, 1341970405, 3319253802, 645940277, 3046089570, 3729349297, 627514298, 1167593194, 1575076094, 3271718191, 2165502028, 2376308550, 1808202195, 65494927, 362126482, 3219880557, 2514114898, 3559752638, 1490231668, 1227450848, 2386872521, 1969916354, 4101536142, 2573942360, 668823993, 3199619041, 4028083592, 3378949152, 2108963534, 1662536415, 3850514714, 2539664209, 1648721747, 2984277860, 3146034795, 4263288961, 4187237128, 1884842056, 2400845125, 2491903198, 1387788411, 2871251827, 1927414347, 3814166303, 1714072405, 2986813675, 788775605, 2258271173, 3550808119, 821200680, 598910399, 45771267, 3982262806, 2318081231, 2811409529, 4092654087, 1319232105, 1707996378, 114671109, 3508494900, 3297443494, 882725678, 2728416755, 87220618, 2759191542, 188345475, 1084944224, 1577492337, 3176206446, 1056541217, 2520581853, 3719169342, 1296481766, 2444594516, 1896177092, 74437638, 1627329872, 421854104, 3600279997, 2311865152, 1735892697, 2965193448, 126389129, 3879230233, 2044456648, 2705787516, 2095648578, 4173930116, 0, 159614592, 843640107, 514617361, 1817080410, 4261150478, 257308805, 1025430958, 908540205, 174381327, 1747035740, 2614187099, 607792694, 212952842, 2467293015, 3033700078, 463376795, 2152711616, 1638015196, 1516850039, 471210514, 3792353939, 3236244128, 1011081250, 303896347, 235605257, 4071475083, 767142070, 348694814, 1468340721, 2940995445, 4005289369, 2751291519, 4154402305, 1555887474, 1153776486, 1530167035, 2339776835, 3420243491, 3060333805, 3093557732, 3620396081, 1108378979, 322970263, 2216694214, 2239571018, 3539484091, 2920362745, 3345850665, 491466654, 3706925234, 233591430, 2010178497, 728503987, 2845423984, 301615252, 1193436393, 2831453436, 2686074864, 1457007741, 586125363, 2277985865, 3653357880, 2365498058, 2553678804, 2798617077, 2770919034, 3659959991, 1067761581, 753179962, 1343066744, 1788595295, 1415726718, 4139914125, 2431170776, 777975609, 2197139395, 2680062045, 1769771984, 1873358293, 3484619301, 3359349164, 279411992, 3899548572, 3682319163, 3439949862, 1861490777, 3959535514, 2208864847, 3865407125, 2860443391, 554225596, 4024887317, 3134823399, 1255028335, 3939764639, 701922480, 833598116, 707863359, 3325072549, 901801634, 1949809742, 4238789250, 3769684112, 857069735, 4048197636, 1106762476, 2131644621, 389019281, 1989006925, 1129165039, 3428076970, 3839820950, 2665723345, 1276872810, 3250069292, 1182749029, 2634345054, 22885772, 4201870471, 4214112523, 3009027431, 2454901467, 3912455696, 1829980118, 2592891351, 930745505, 1502483704, 3951639571, 3471714217, 3073755489, 3790464284, 2050797895, 2623135698, 1430221810, 410635796, 1941911495, 1407897079, 1599843069, 3742658365, 2022103876, 3397514159, 3107898472, 942421028, 3261022371, 376619805, 3154912738, 680216892, 4282488077, 963707304, 148812556, 3634160820, 1687208278, 2069988555, 3580933682, 1215585388, 3494008760], core.int);
    },
    get C401() {
      return C[401] = dart.constList([], frame$.Frame);
    },
    get C402() {
      return C[402] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "boundary"
      });
    },
    get C403() {
      return C[403] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "size"
      });
    },
    get C404() {
      return C[404] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "size before LF"
      });
    },
    get C405() {
      return C[405] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "body"
      });
    },
    get C406() {
      return C[406] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "body before CR"
      });
    },
    get C407() {
      return C[407] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "body before LF"
      });
    },
    get C408() {
      return C[408] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "end before CR"
      });
    },
    get C409() {
      return C[409] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "end before LF"
      });
    },
    get C410() {
      return C[410] = dart.const({
        __proto__: decoder._State.prototype,
        [S$1._State__name]: "end"
      });
    },
    get C411() {
      return C[411] = dart.const({
        __proto__: decoder.ChunkedCodingDecoder.prototype
      });
    },
    get C412() {
      return C[412] = dart.constList([], core.int);
    },
    get C413() {
      return C[413] = dart.const({
        __proto__: encoder.ChunkedCodingEncoder.prototype
      });
    },
    get C414() {
      return C[414] = dart.const(new _js_helper.PrivateSymbol.new('_add', S$1._add$2));
    },
    get C415() {
      return C[415] = dart.const(new _js_helper.PrivateSymbol.new('_head', S$1._head$1));
    },
    get C416() {
      return C[416] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', S$1._writeToList));
    },
    get C417() {
      return C[417] = dart.const(new _js_helper.PrivateSymbol.new('_grow', S$1._grow));
    },
    get C418() {
      return C[418] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', S$1._preGrow));
    },
    get C419() {
      return C[419] = dart.const(new _js_helper.PrivateSymbol.new('_table', S$1._table$3));
    },
    get C420() {
      return C[420] = dart.const(new _js_helper.PrivateSymbol.new('_tail', S$1._tail$1));
    },
    get C421() {
      return C[421] = dart.const(new _js_helper.PrivateSymbol.new('_head=', S$1._head_));
    },
    get C422() {
      return C[422] = dart.const(new _js_helper.PrivateSymbol.new('_table=', S$1._table_));
    },
    get C423() {
      return C[423] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', S$1._tail_));
    },
    get C424() {
      return C[424] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [S$1.message$12]: "Bad multipart ending"
      });
    },
    get C425() {
      return C[425] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [S$1.message$12]: "Invalid header field name"
      });
    },
    get C426() {
      return C[426] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [S$1.message$12]: "Failed to parse multipart mime 1"
      });
    },
    get C427() {
      return C[427] = dart.const({
        __proto__: mime_shared.MimeMultipartException.prototype,
        [S$1.message$12]: "Failed to parse multipart mime 2"
      });
    },
    get C428() {
      return C[428] = dart.constSet(core.int, [40, 41, 60, 62, 64, 44, 59, 58, 92, 34, 47, 91, 93, 63, 61, 123, 125, 32, 9]);
    },
    get C429() {
      return C[429] = dart.constMap(core.String, core.String, ["123", "application/vnd.lotus-1-2-3", "3dml", "text/vnd.in3d.3dml", "3ds", "image/x-3ds", "3g2", "video/3gpp2", "3gp", "video/3gpp", "7z", "application/x-7z-compressed", "aab", "application/x-authorware-bin", "aac", "audio/aac", "aam", "application/x-authorware-map", "aas", "application/x-authorware-seg", "abw", "application/x-abiword", "ac", "application/pkix-attr-cert", "acc", "application/vnd.americandynamics.acc", "ace", "application/x-ace-compressed", "acu", "application/vnd.acucobol", "acutc", "application/vnd.acucorp", "adp", "audio/adpcm", "aep", "application/vnd.audiograph", "afm", "application/x-font-type1", "afp", "application/vnd.ibm.modcap", "ahead", "application/vnd.ahead.space", "ai", "application/postscript", "aif", "audio/x-aiff", "aifc", "audio/x-aiff", "aiff", "audio/x-aiff", "air", "application/vnd.adobe.air-application-installer-package+zip", "ait", "application/vnd.dvb.ait", "ami", "application/vnd.amiga.ami", "apk", "application/vnd.android.package-archive", "appcache", "text/cache-manifest", "application", "application/x-ms-application", "apr", "application/vnd.lotus-approach", "arc", "application/x-freearc", "asc", "application/pgp-signature", "asf", "video/x-ms-asf", "asm", "text/x-asm", "aso", "application/vnd.accpac.simply.aso", "asx", "video/x-ms-asf", "atc", "application/vnd.acucorp", "atom", "application/atom+xml", "atomcat", "application/atomcat+xml", "atomsvc", "application/atomsvc+xml", "atx", "application/vnd.antix.game-component", "au", "audio/basic", "avi", "video/x-msvideo", "avif", "image/avif", "aw", "application/applixware", "azf", "application/vnd.airzip.filesecure.azf", "azs", "application/vnd.airzip.filesecure.azs", "azw", "application/vnd.amazon.ebook", "bat", "application/x-msdownload", "bcpio", "application/x-bcpio", "bdf", "application/x-font-bdf", "bdm", "application/vnd.syncml.dm+wbxml", "bed", "application/vnd.realvnc.bed", "bh2", "application/vnd.fujitsu.oasysprs", "bin", "application/octet-stream", "blb", "application/x-blorb", "blorb", "application/x-blorb", "bmi", "application/vnd.bmi", "bmp", "image/bmp", "book", "application/vnd.framemaker", "box", "application/vnd.previewsystems.box", "boz", "application/x-bzip2", "bpk", "application/octet-stream", "btif", "image/prs.btif", "bz", "application/x-bzip", "bz2", "application/x-bzip2", "c", "text/x-c", "c11amc", "application/vnd.cluetrust.cartomobile-config", "c11amz", "application/vnd.cluetrust.cartomobile-config-pkg", "c4d", "application/vnd.clonk.c4group", "c4f", "application/vnd.clonk.c4group", "c4g", "application/vnd.clonk.c4group", "c4p", "application/vnd.clonk.c4group", "c4u", "application/vnd.clonk.c4group", "cab", "application/vnd.ms-cab-compressed", "caf", "audio/x-caf", "cap", "application/vnd.tcpdump.pcap", "car", "application/vnd.curl.car", "cat", "application/vnd.ms-pki.seccat", "cb7", "application/x-cbr", "cba", "application/x-cbr", "cbr", "application/x-cbr", "cbt", "application/x-cbr", "cbz", "application/x-cbr", "cc", "text/x-c", "cct", "application/x-director", "ccxml", "application/ccxml+xml", "cdbcmsg", "application/vnd.contact.cmsg", "cdf", "application/x-netcdf", "cdkey", "application/vnd.mediastation.cdkey", "cdmia", "application/cdmi-capability", "cdmic", "application/cdmi-container", "cdmid", "application/cdmi-domain", "cdmio", "application/cdmi-object", "cdmiq", "application/cdmi-queue", "cdx", "chemical/x-cdx", "cdxml", "application/vnd.chemdraw+xml", "cdy", "application/vnd.cinderella", "cer", "application/pkix-cert", "cfs", "application/x-cfs-compressed", "cgm", "image/cgm", "chat", "application/x-chat", "chm", "application/vnd.ms-htmlhelp", "chrt", "application/vnd.kde.kchart", "cif", "chemical/x-cif", "cii", "application/vnd.anser-web-certificate-issue-initiation", "cil", "application/vnd.ms-artgalry", "cla", "application/vnd.claymore", "class", "application/java-vm", "clkk", "application/vnd.crick.clicker.keyboard", "clkp", "application/vnd.crick.clicker.palette", "clkt", "application/vnd.crick.clicker.template", "clkw", "application/vnd.crick.clicker.wordbank", "clkx", "application/vnd.crick.clicker", "clp", "application/x-msclip", "cmc", "application/vnd.cosmocaller", "cmdf", "chemical/x-cmdf", "cml", "chemical/x-cml", "cmp", "application/vnd.yellowriver-custom-menu", "cmx", "image/x-cmx", "cod", "application/vnd.rim.cod", "com", "application/x-msdownload", "conf", "text/plain", "cpio", "application/x-cpio", "cpp", "text/x-c", "cpt", "application/mac-compactpro", "crd", "application/x-mscardfile", "crl", "application/pkix-crl", "crt", "application/x-x509-ca-cert", "cryptonote", "application/vnd.rig.cryptonote", "csh", "application/x-csh", "csml", "chemical/x-csml", "csp", "application/vnd.commonspace", "css", "text/css", "cst", "application/x-director", "csv", "text/csv", "cu", "application/cu-seeme", "curl", "text/vnd.curl", "cww", "application/prs.cww", "cxt", "application/x-director", "cxx", "text/x-c", "dae", "model/vnd.collada+xml", "daf", "application/vnd.mobius.daf", "dart", "text/x-dart", "dataless", "application/vnd.fdsn.seed", "davmount", "application/davmount+xml", "dbk", "application/docbook+xml", "dcm", "application/dicom", "dcr", "application/x-director", "dcurl", "text/vnd.curl.dcurl", "dd2", "application/vnd.oma.dd2+xml", "ddd", "application/vnd.fujixerox.ddd", "deb", "application/x-debian-package", "def", "text/plain", "deploy", "application/octet-stream", "der", "application/x-x509-ca-cert", "dfac", "application/vnd.dreamfactory", "dgc", "application/x-dgc-compressed", "dic", "text/x-c", "dir", "application/x-director", "dis", "application/vnd.mobius.dis", "dist", "application/octet-stream", "distz", "application/octet-stream", "djv", "image/vnd.djvu", "djvu", "image/vnd.djvu", "dll", "application/x-msdownload", "dmg", "application/x-apple-diskimage", "dmp", "application/vnd.tcpdump.pcap", "dms", "application/octet-stream", "dna", "application/vnd.dna", "doc", "application/msword", "docm", "application/vnd.ms-word.document.macroenabled.12", "docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "dot", "application/msword", "dotm", "application/vnd.ms-word.template.macroenabled.12", "dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template", "dp", "application/vnd.osgi.dp", "dpg", "application/vnd.dpgraph", "dra", "audio/vnd.dra", "dsc", "text/prs.lines.tag", "dssc", "application/dssc+der", "dtb", "application/x-dtbook+xml", "dtd", "application/xml-dtd", "dts", "audio/vnd.dts", "dtshd", "audio/vnd.dts.hd", "dump", "application/octet-stream", "dvb", "video/vnd.dvb.file", "dvi", "application/x-dvi", "dwf", "model/vnd.dwf", "dwg", "image/vnd.dwg", "dxf", "image/vnd.dxf", "dxp", "application/vnd.spotfire.dxp", "dxr", "application/x-director", "ecelp4800", "audio/vnd.nuera.ecelp4800", "ecelp7470", "audio/vnd.nuera.ecelp7470", "ecelp9600", "audio/vnd.nuera.ecelp9600", "ecma", "application/ecmascript", "edm", "application/vnd.novadigm.edm", "edx", "application/vnd.novadigm.edx", "efif", "application/vnd.picsel", "ei6", "application/vnd.pg.osasli", "elc", "application/octet-stream", "emf", "application/x-msmetafile", "eml", "message/rfc822", "emma", "application/emma+xml", "emz", "application/x-msmetafile", "eol", "audio/vnd.digital-winds", "eot", "application/vnd.ms-fontobject", "eps", "application/postscript", "epub", "application/epub+zip", "es3", "application/vnd.eszigno3+xml", "esa", "application/vnd.osgi.subsystem", "esf", "application/vnd.epson.esf", "et3", "application/vnd.eszigno3+xml", "etx", "text/x-setext", "eva", "application/x-eva", "evy", "application/x-envoy", "exe", "application/x-msdownload", "exi", "application/exi", "ext", "application/vnd.novadigm.ext", "ez", "application/andrew-inset", "ez2", "application/vnd.ezpix-album", "ez3", "application/vnd.ezpix-package", "f", "text/x-fortran", "f4v", "video/x-f4v", "f77", "text/x-fortran", "f90", "text/x-fortran", "fbs", "image/vnd.fastbidsheet", "fcdt", "application/vnd.adobe.formscentral.fcdt", "fcs", "application/vnd.isac.fcs", "fdf", "application/vnd.fdf", "fe_launch", "application/vnd.denovo.fcselayout-link", "fg5", "application/vnd.fujitsu.oasysgp", "fgd", "application/x-director", "fh", "image/x-freehand", "fh4", "image/x-freehand", "fh5", "image/x-freehand", "fh7", "image/x-freehand", "fhc", "image/x-freehand", "fig", "application/x-xfig", "flac", "audio/x-flac", "fli", "video/x-fli", "flo", "application/vnd.micrografx.flo", "flv", "video/x-flv", "flw", "application/vnd.kde.kivio", "flx", "text/vnd.fmi.flexstor", "fly", "text/vnd.fly", "fm", "application/vnd.framemaker", "fnc", "application/vnd.frogans.fnc", "for", "text/x-fortran", "fpx", "image/vnd.fpx", "frame", "application/vnd.framemaker", "fsc", "application/vnd.fsc.weblaunch", "fst", "image/vnd.fst", "ftc", "application/vnd.fluxtime.clip", "fti", "application/vnd.anser-web-funds-transfer-initiation", "fvt", "video/vnd.fvt", "fxp", "application/vnd.adobe.fxp", "fxpl", "application/vnd.adobe.fxp", "fzs", "application/vnd.fuzzysheet", "g2w", "application/vnd.geoplan", "g3", "image/g3fax", "g3w", "application/vnd.geospace", "gac", "application/vnd.groove-account", "gam", "application/x-tads", "gbr", "application/rpki-ghostbusters", "gca", "application/x-gca-compressed", "gdl", "model/vnd.gdl", "geo", "application/vnd.dynageo", "gex", "application/vnd.geometry-explorer", "ggb", "application/vnd.geogebra.file", "ggt", "application/vnd.geogebra.tool", "ghf", "application/vnd.groove-help", "gif", "image/gif", "gim", "application/vnd.groove-identity-message", "glb", "model/gltf-binary", "gltf", "model/gltf+json", "gml", "application/gml+xml", "gmx", "application/vnd.gmx", "gnumeric", "application/x-gnumeric", "gph", "application/vnd.flographit", "gpx", "application/gpx+xml", "gqf", "application/vnd.grafeq", "gqs", "application/vnd.grafeq", "gram", "application/srgs", "gramps", "application/x-gramps-xml", "gre", "application/vnd.geometry-explorer", "grv", "application/vnd.groove-injector", "grxml", "application/srgs+xml", "gsf", "application/x-font-ghostscript", "gtar", "application/x-gtar", "gtm", "application/vnd.groove-tool-message", "gtw", "model/vnd.gtw", "gv", "text/vnd.graphviz", "gxf", "application/gxf", "gxt", "application/vnd.geonext", "h", "text/x-c", "h261", "video/h261", "h263", "video/h263", "h264", "video/h264", "hal", "application/vnd.hal+xml", "hbci", "application/vnd.hbci", "hdf", "application/x-hdf", "heic", "image/heic", "heif", "image/heif", "hh", "text/x-c", "hlp", "application/winhlp", "hpgl", "application/vnd.hp-hpgl", "hpid", "application/vnd.hp-hpid", "hps", "application/vnd.hp-hps", "hqx", "application/mac-binhex40", "htke", "application/vnd.kenameaapp", "htm", "text/html", "html", "text/html", "hvd", "application/vnd.yamaha.hv-dic", "hvp", "application/vnd.yamaha.hv-voice", "hvs", "application/vnd.yamaha.hv-script", "i2g", "application/vnd.intergeo", "icc", "application/vnd.iccprofile", "ice", "x-conference/x-cooltalk", "icm", "application/vnd.iccprofile", "ico", "image/x-icon", "ics", "text/calendar", "ief", "image/ief", "ifb", "text/calendar", "ifm", "application/vnd.shana.informed.formdata", "iges", "model/iges", "igl", "application/vnd.igloader", "igm", "application/vnd.insors.igm", "igs", "model/iges", "igx", "application/vnd.micrografx.igx", "iif", "application/vnd.shana.informed.interchange", "imp", "application/vnd.accpac.simply.imp", "ims", "application/vnd.ms-ims", "in", "text/plain", "ink", "application/inkml+xml", "inkml", "application/inkml+xml", "install", "application/x-install-instructions", "iota", "application/vnd.astraea-software.iota", "ipfix", "application/ipfix", "ipk", "application/vnd.shana.informed.package", "irm", "application/vnd.ibm.rights-management", "irp", "application/vnd.irepository.package+xml", "iso", "application/x-iso9660-image", "itp", "application/vnd.shana.informed.formtemplate", "ivp", "application/vnd.immervision-ivp", "ivu", "application/vnd.immervision-ivu", "jad", "text/vnd.sun.j2me.app-descriptor", "jam", "application/vnd.jam", "jar", "application/java-archive", "java", "text/x-java-source", "jisp", "application/vnd.jisp", "jlt", "application/vnd.hp-jlyt", "jnlp", "application/x-java-jnlp-file", "joda", "application/vnd.joost.joda-archive", "jpe", "image/jpeg", "jpeg", "image/jpeg", "jpg", "image/jpeg", "jpgm", "video/jpm", "jpgv", "video/jpeg", "jpm", "video/jpm", "js", "text/javascript", "json", "application/json", "jsonml", "application/jsonml+json", "kar", "audio/midi", "karbon", "application/vnd.kde.karbon", "kfo", "application/vnd.kde.kformula", "kia", "application/vnd.kidspiration", "kml", "application/vnd.google-earth.kml+xml", "kmz", "application/vnd.google-earth.kmz", "kne", "application/vnd.kinar", "knp", "application/vnd.kinar", "kon", "application/vnd.kde.kontour", "kpr", "application/vnd.kde.kpresenter", "kpt", "application/vnd.kde.kpresenter", "kpxx", "application/vnd.ds-keypoint", "ksp", "application/vnd.kde.kspread", "ktr", "application/vnd.kahootz", "ktx", "image/ktx", "ktz", "application/vnd.kahootz", "kwd", "application/vnd.kde.kword", "kwt", "application/vnd.kde.kword", "lasxml", "application/vnd.las.las+xml", "latex", "application/x-latex", "lbd", "application/vnd.llamagraphics.life-balance.desktop", "lbe", "application/vnd.llamagraphics.life-balance.exchange+xml", "les", "application/vnd.hhe.lesson-player", "lha", "application/x-lzh-compressed", "link66", "application/vnd.route66.link66+xml", "list", "text/plain", "list3820", "application/vnd.ibm.modcap", "listafp", "application/vnd.ibm.modcap", "lnk", "application/x-ms-shortcut", "log", "text/plain", "lostxml", "application/lost+xml", "lrf", "application/octet-stream", "lrm", "application/vnd.ms-lrm", "ltf", "application/vnd.frogans.ltf", "lvp", "audio/vnd.lucent.voice", "lwp", "application/vnd.lotus-wordpro", "lzh", "application/x-lzh-compressed", "m13", "application/x-msmediaview", "m14", "application/x-msmediaview", "m1v", "video/mpeg", "m21", "application/mp21", "m2a", "audio/mpeg", "m2v", "video/mpeg", "m3a", "audio/mpeg", "m3u", "audio/x-mpegurl", "m3u8", "application/vnd.apple.mpegurl", "m4a", "audio/mp4", "m4u", "video/vnd.mpegurl", "m4v", "video/x-m4v", "ma", "application/mathematica", "mads", "application/mads+xml", "mag", "application/vnd.ecowin.chart", "maker", "application/vnd.framemaker", "man", "text/troff", "mar", "application/octet-stream", "mathml", "application/mathml+xml", "mb", "application/mathematica", "mbk", "application/vnd.mobius.mbk", "mbox", "application/mbox", "mc1", "application/vnd.medcalcdata", "mcd", "application/vnd.mcd", "mcurl", "text/vnd.curl.mcurl", "mdb", "application/x-msaccess", "mdi", "image/vnd.ms-modi", "me", "text/troff", "mesh", "model/mesh", "meta4", "application/metalink4+xml", "metalink", "application/metalink+xml", "mets", "application/mets+xml", "mfm", "application/vnd.mfmp", "mft", "application/rpki-manifest", "mgp", "application/vnd.osgeo.mapguide.package", "mgz", "application/vnd.proteus.magazine", "mid", "audio/midi", "midi", "audio/midi", "mie", "application/x-mie", "mif", "application/vnd.mif", "mime", "message/rfc822", "mj2", "video/mj2", "mjp2", "video/mj2", "mjs", "text/javascript", "mk3d", "video/x-matroska", "mka", "audio/x-matroska", "mks", "video/x-matroska", "mkv", "video/x-matroska", "mlp", "application/vnd.dolby.mlp", "mmd", "application/vnd.chipnuts.karaoke-mmd", "mmf", "application/vnd.smaf", "mmr", "image/vnd.fujixerox.edmics-mmr", "mng", "video/x-mng", "mny", "application/x-msmoney", "mobi", "application/x-mobipocket-ebook", "mods", "application/mods+xml", "mov", "video/quicktime", "movie", "video/x-sgi-movie", "mp2", "audio/mpeg", "mp21", "application/mp21", "mp2a", "audio/mpeg", "mp3", "audio/mpeg", "mp4", "video/mp4", "mp4a", "audio/mp4", "mp4s", "application/mp4", "mp4v", "video/mp4", "mpc", "application/vnd.mophun.certificate", "mpe", "video/mpeg", "mpeg", "video/mpeg", "mpg", "video/mpeg", "mpg4", "video/mp4", "mpga", "audio/mpeg", "mpkg", "application/vnd.apple.installer+xml", "mpm", "application/vnd.blueice.multipass", "mpn", "application/vnd.mophun.application", "mpp", "application/vnd.ms-project", "mpt", "application/vnd.ms-project", "mpy", "application/vnd.ibm.minipay", "mqy", "application/vnd.mobius.mqy", "mrc", "application/marc", "mrcx", "application/marcxml+xml", "ms", "text/troff", "mscml", "application/mediaservercontrol+xml", "mseed", "application/vnd.fdsn.mseed", "mseq", "application/vnd.mseq", "msf", "application/vnd.epson.msf", "msh", "model/mesh", "msi", "application/x-msdownload", "msl", "application/vnd.mobius.msl", "msty", "application/vnd.muvee.style", "mts", "model/vnd.mts", "mus", "application/vnd.musician", "musicxml", "application/vnd.recordare.musicxml+xml", "mvb", "application/x-msmediaview", "mwf", "application/vnd.mfer", "mxf", "application/mxf", "mxl", "application/vnd.recordare.musicxml", "mxml", "application/xv+xml", "mxs", "application/vnd.triscape.mxs", "mxu", "video/vnd.mpegurl", "n-gage", "application/vnd.nokia.n-gage.symbian.install", "n3", "text/n3", "nb", "application/mathematica", "nbp", "application/vnd.wolfram.player", "nc", "application/x-netcdf", "ncx", "application/x-dtbncx+xml", "nfo", "text/x-nfo", "ngdat", "application/vnd.nokia.n-gage.data", "nitf", "application/vnd.nitf", "nlu", "application/vnd.neurolanguage.nlu", "nml", "application/vnd.enliven", "nnd", "application/vnd.noblenet-directory", "nns", "application/vnd.noblenet-sealer", "nnw", "application/vnd.noblenet-web", "npx", "image/vnd.net-fpx", "nsc", "application/x-conference", "nsf", "application/vnd.lotus-notes", "ntf", "application/vnd.nitf", "nzb", "application/x-nzb", "oa2", "application/vnd.fujitsu.oasys2", "oa3", "application/vnd.fujitsu.oasys3", "oas", "application/vnd.fujitsu.oasys", "obd", "application/x-msbinder", "obj", "application/x-tgif", "oda", "application/oda", "odb", "application/vnd.oasis.opendocument.database", "odc", "application/vnd.oasis.opendocument.chart", "odf", "application/vnd.oasis.opendocument.formula", "odft", "application/vnd.oasis.opendocument.formula-template", "odg", "application/vnd.oasis.opendocument.graphics", "odi", "application/vnd.oasis.opendocument.image", "odm", "application/vnd.oasis.opendocument.text-master", "odp", "application/vnd.oasis.opendocument.presentation", "ods", "application/vnd.oasis.opendocument.spreadsheet", "odt", "application/vnd.oasis.opendocument.text", "oga", "audio/ogg", "ogg", "audio/ogg", "ogv", "video/ogg", "ogx", "application/ogg", "omdoc", "application/omdoc+xml", "onepkg", "application/onenote", "onetmp", "application/onenote", "onetoc", "application/onenote", "onetoc2", "application/onenote", "opf", "application/oebps-package+xml", "opml", "text/x-opml", "oprc", "application/vnd.palm", "org", "application/vnd.lotus-organizer", "osf", "application/vnd.yamaha.openscoreformat", "osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml", "otc", "application/vnd.oasis.opendocument.chart-template", "otf", "application/x-font-otf", "otg", "application/vnd.oasis.opendocument.graphics-template", "oth", "application/vnd.oasis.opendocument.text-web", "oti", "application/vnd.oasis.opendocument.image-template", "otp", "application/vnd.oasis.opendocument.presentation-template", "ots", "application/vnd.oasis.opendocument.spreadsheet-template", "ott", "application/vnd.oasis.opendocument.text-template", "oxps", "application/oxps", "oxt", "application/vnd.openofficeorg.extension", "p", "text/x-pascal", "p10", "application/pkcs10", "p12", "application/x-pkcs12", "p7b", "application/x-pkcs7-certificates", "p7c", "application/pkcs7-mime", "p7m", "application/pkcs7-mime", "p7r", "application/x-pkcs7-certreqresp", "p7s", "application/pkcs7-signature", "p8", "application/pkcs8", "pas", "text/x-pascal", "paw", "application/vnd.pawaafile", "pbd", "application/vnd.powerbuilder6", "pbm", "image/x-portable-bitmap", "pcap", "application/vnd.tcpdump.pcap", "pcf", "application/x-font-pcf", "pcl", "application/vnd.hp-pcl", "pclxl", "application/vnd.hp-pclxl", "pct", "image/x-pict", "pcurl", "application/vnd.curl.pcurl", "pcx", "image/x-pcx", "pdb", "application/vnd.palm", "pdf", "application/pdf", "pfa", "application/x-font-type1", "pfb", "application/x-font-type1", "pfm", "application/x-font-type1", "pfr", "application/font-tdpfr", "pfx", "application/x-pkcs12", "pgm", "image/x-portable-graymap", "pgn", "application/x-chess-pgn", "pgp", "application/pgp-encrypted", "pic", "image/x-pict", "pkg", "application/octet-stream", "pki", "application/pkixcmp", "pkipath", "application/pkix-pkipath", "plb", "application/vnd.3gpp.pic-bw-large", "plc", "application/vnd.mobius.plc", "plf", "application/vnd.pocketlearn", "pls", "application/pls+xml", "pml", "application/vnd.ctc-posml", "png", "image/png", "pnm", "image/x-portable-anymap", "portpkg", "application/vnd.macports.portpkg", "pot", "application/vnd.ms-powerpoint", "potm", "application/vnd.ms-powerpoint.template.macroenabled.12", "potx", "application/vnd.openxmlformats-officedocument.presentationml.template", "ppam", "application/vnd.ms-powerpoint.addin.macroenabled.12", "ppd", "application/vnd.cups-ppd", "ppm", "image/x-portable-pixmap", "pps", "application/vnd.ms-powerpoint", "ppsm", "application/vnd.ms-powerpoint.slideshow.macroenabled.12", "ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow", "ppt", "application/vnd.ms-powerpoint", "pptm", "application/vnd.ms-powerpoint.presentation.macroenabled.12", "pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "pqa", "application/vnd.palm", "prc", "application/x-mobipocket-ebook", "pre", "application/vnd.lotus-freelance", "prf", "application/pics-rules", "ps", "application/postscript", "psb", "application/vnd.3gpp.pic-bw-small", "psd", "image/vnd.adobe.photoshop", "psf", "application/x-font-linux-psf", "pskcxml", "application/pskc+xml", "ptid", "application/vnd.pvi.ptid1", "pub", "application/x-mspublisher", "pvb", "application/vnd.3gpp.pic-bw-var", "pwn", "application/vnd.3m.post-it-notes", "pya", "audio/vnd.ms-playready.media.pya", "pyv", "video/vnd.ms-playready.media.pyv", "qam", "application/vnd.epson.quickanime", "qbo", "application/vnd.intu.qbo", "qfx", "application/vnd.intu.qfx", "qps", "application/vnd.publishare-delta-tree", "qt", "video/quicktime", "qwd", "application/vnd.quark.quarkxpress", "qwt", "application/vnd.quark.quarkxpress", "qxb", "application/vnd.quark.quarkxpress", "qxd", "application/vnd.quark.quarkxpress", "qxl", "application/vnd.quark.quarkxpress", "qxt", "application/vnd.quark.quarkxpress", "ra", "audio/x-pn-realaudio", "ram", "audio/x-pn-realaudio", "rar", "application/x-rar-compressed", "ras", "image/x-cmu-raster", "rcprofile", "application/vnd.ipunplugged.rcprofile", "rdf", "application/rdf+xml", "rdz", "application/vnd.data-vision.rdz", "rep", "application/vnd.businessobjects", "res", "application/x-dtbresource+xml", "rgb", "image/x-rgb", "rif", "application/reginfo+xml", "rip", "audio/vnd.rip", "ris", "application/x-research-info-systems", "rl", "application/resource-lists+xml", "rlc", "image/vnd.fujixerox.edmics-rlc", "rld", "application/resource-lists-diff+xml", "rm", "application/vnd.rn-realmedia", "rmi", "audio/midi", "rmp", "audio/x-pn-realaudio-plugin", "rms", "application/vnd.jcp.javame.midlet-rms", "rmvb", "application/vnd.rn-realmedia-vbr", "rnc", "application/relax-ng-compact-syntax", "roa", "application/rpki-roa", "roff", "text/troff", "rp9", "application/vnd.cloanto.rp9", "rpss", "application/vnd.nokia.radio-presets", "rpst", "application/vnd.nokia.radio-preset", "rq", "application/sparql-query", "rs", "application/rls-services+xml", "rsd", "application/rsd+xml", "rss", "application/rss+xml", "rtf", "application/rtf", "rtx", "text/richtext", "s", "text/x-asm", "s3m", "audio/s3m", "saf", "application/vnd.yamaha.smaf-audio", "sbml", "application/sbml+xml", "sc", "application/vnd.ibm.secure-container", "scd", "application/x-msschedule", "scm", "application/vnd.lotus-screencam", "scq", "application/scvp-cv-request", "scs", "application/scvp-cv-response", "scurl", "text/vnd.curl.scurl", "sda", "application/vnd.stardivision.draw", "sdc", "application/vnd.stardivision.calc", "sdd", "application/vnd.stardivision.impress", "sdkd", "application/vnd.solent.sdkm+xml", "sdkm", "application/vnd.solent.sdkm+xml", "sdp", "application/sdp", "sdw", "application/vnd.stardivision.writer", "see", "application/vnd.seemail", "seed", "application/vnd.fdsn.seed", "sema", "application/vnd.sema", "semd", "application/vnd.semd", "semf", "application/vnd.semf", "ser", "application/java-serialized-object", "setpay", "application/set-payment-initiation", "setreg", "application/set-registration-initiation", "sfd-hdstx", "application/vnd.hydrostatix.sof-data", "sfs", "application/vnd.spotfire.sfs", "sfv", "text/x-sfv", "sgi", "image/sgi", "sgl", "application/vnd.stardivision.writer-global", "sgm", "text/sgml", "sgml", "text/sgml", "sh", "application/x-sh", "shar", "application/x-shar", "shf", "application/shf+xml", "sid", "image/x-mrsid-image", "sig", "application/pgp-signature", "sil", "audio/silk", "silo", "model/mesh", "sis", "application/vnd.symbian.install", "sisx", "application/vnd.symbian.install", "sit", "application/x-stuffit", "sitx", "application/x-stuffitx", "skd", "application/vnd.koan", "skm", "application/vnd.koan", "skp", "application/vnd.koan", "skt", "application/vnd.koan", "sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12", "sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide", "slt", "application/vnd.epson.salt", "sm", "application/vnd.stepmania.stepchart", "smf", "application/vnd.stardivision.math", "smi", "application/smil+xml", "smil", "application/smil+xml", "smv", "video/x-smv", "smzip", "application/vnd.stepmania.package", "snd", "audio/basic", "snf", "application/x-font-snf", "so", "application/octet-stream", "spc", "application/x-pkcs7-certificates", "spf", "application/vnd.yamaha.smaf-phrase", "spl", "application/x-futuresplash", "spot", "text/vnd.in3d.spot", "spp", "application/scvp-vp-response", "spq", "application/scvp-vp-request", "spx", "audio/ogg", "sql", "application/x-sql", "src", "application/x-wais-source", "srt", "application/x-subrip", "sru", "application/sru+xml", "srx", "application/sparql-results+xml", "ssdl", "application/ssdl+xml", "sse", "application/vnd.kodak-descriptor", "ssf", "application/vnd.epson.ssf", "ssml", "application/ssml+xml", "st", "application/vnd.sailingtracker.track", "stc", "application/vnd.sun.xml.calc.template", "std", "application/vnd.sun.xml.draw.template", "stf", "application/vnd.wt.stf", "sti", "application/vnd.sun.xml.impress.template", "stk", "application/hyperstudio", "stl", "application/vnd.ms-pki.stl", "str", "application/vnd.pg.format", "stw", "application/vnd.sun.xml.writer.template", "sub", "text/vnd.dvb.subtitle", "sus", "application/vnd.sus-calendar", "susp", "application/vnd.sus-calendar", "sv4cpio", "application/x-sv4cpio", "sv4crc", "application/x-sv4crc", "svc", "application/vnd.dvb.service", "svd", "application/vnd.svd", "svg", "image/svg+xml", "svgz", "image/svg+xml", "swa", "application/x-director", "swf", "application/x-shockwave-flash", "swi", "application/vnd.aristanetworks.swi", "sxc", "application/vnd.sun.xml.calc", "sxd", "application/vnd.sun.xml.draw", "sxg", "application/vnd.sun.xml.writer.global", "sxi", "application/vnd.sun.xml.impress", "sxm", "application/vnd.sun.xml.math", "sxw", "application/vnd.sun.xml.writer", "t", "text/troff", "t3", "application/x-t3vm-image", "taglet", "application/vnd.mynfc", "tao", "application/vnd.tao.intent-module-archive", "tar", "application/x-tar", "tcap", "application/vnd.3gpp2.tcap", "tcl", "application/x-tcl", "teacher", "application/vnd.smart.teacher", "tei", "application/tei+xml", "teicorpus", "application/tei+xml", "tex", "application/x-tex", "texi", "application/x-texinfo", "texinfo", "application/x-texinfo", "text", "text/plain", "tfi", "application/thraud+xml", "tfm", "application/x-tex-tfm", "tga", "image/x-tga", "thmx", "application/vnd.ms-officetheme", "tif", "image/tiff", "tiff", "image/tiff", "tmo", "application/vnd.tmobile-livetv", "toml", "application/toml", "torrent", "application/x-bittorrent", "tpl", "application/vnd.groove-tool-template", "tpt", "application/vnd.trid.tpt", "tr", "text/troff", "tra", "application/vnd.trueapp", "trm", "application/x-msterminal", "tsd", "application/timestamped-data", "tsv", "text/tab-separated-values", "ttc", "application/x-font-ttf", "ttf", "application/x-font-ttf", "ttl", "text/turtle", "twd", "application/vnd.simtech-mindmapper", "twds", "application/vnd.simtech-mindmapper", "txd", "application/vnd.genomatix.tuxedo", "txf", "application/vnd.mobius.txf", "txt", "text/plain", "u32", "application/x-authorware-bin", "udeb", "application/x-debian-package", "ufd", "application/vnd.ufdl", "ufdl", "application/vnd.ufdl", "ulx", "application/x-glulx", "umj", "application/vnd.umajin", "unityweb", "application/vnd.unity", "uoml", "application/vnd.uoml+xml", "uri", "text/uri-list", "uris", "text/uri-list", "urls", "text/uri-list", "ustar", "application/x-ustar", "utz", "application/vnd.uiq.theme", "uu", "text/x-uuencode", "uva", "audio/vnd.dece.audio", "uvd", "application/vnd.dece.data", "uvf", "application/vnd.dece.data", "uvg", "image/vnd.dece.graphic", "uvh", "video/vnd.dece.hd", "uvi", "image/vnd.dece.graphic", "uvm", "video/vnd.dece.mobile", "uvp", "video/vnd.dece.pd", "uvs", "video/vnd.dece.sd", "uvt", "application/vnd.dece.ttml+xml", "uvu", "video/vnd.uvvu.mp4", "uvv", "video/vnd.dece.video", "uvva", "audio/vnd.dece.audio", "uvvd", "application/vnd.dece.data", "uvvf", "application/vnd.dece.data", "uvvg", "image/vnd.dece.graphic", "uvvh", "video/vnd.dece.hd", "uvvi", "image/vnd.dece.graphic", "uvvm", "video/vnd.dece.mobile", "uvvp", "video/vnd.dece.pd", "uvvs", "video/vnd.dece.sd", "uvvt", "application/vnd.dece.ttml+xml", "uvvu", "video/vnd.uvvu.mp4", "uvvv", "video/vnd.dece.video", "uvvx", "application/vnd.dece.unspecified", "uvvz", "application/vnd.dece.zip", "uvx", "application/vnd.dece.unspecified", "uvz", "application/vnd.dece.zip", "vcard", "text/vcard", "vcd", "application/x-cdlink", "vcf", "text/x-vcard", "vcg", "application/vnd.groove-vcard", "vcs", "text/x-vcalendar", "vcx", "application/vnd.vcx", "vis", "application/vnd.visionary", "viv", "video/vnd.vivo", "vob", "video/x-ms-vob", "vor", "application/vnd.stardivision.writer", "vox", "application/x-authorware-bin", "vrml", "model/vrml", "vsd", "application/vnd.visio", "vsf", "application/vnd.vsf", "vss", "application/vnd.visio", "vst", "application/vnd.visio", "vsw", "application/vnd.visio", "vtu", "model/vnd.vtu", "vxml", "application/voicexml+xml", "w3d", "application/x-director", "wad", "application/x-doom", "wasm", "application/wasm", "wav", "audio/x-wav", "wax", "audio/x-ms-wax", "wbmp", "image/vnd.wap.wbmp", "wbs", "application/vnd.criticaltools.wbs+xml", "wbxml", "application/vnd.wap.wbxml", "wcm", "application/vnd.ms-works", "wdb", "application/vnd.ms-works", "wdp", "image/vnd.ms-photo", "weba", "audio/webm", "webm", "video/webm", "webmanifest", "application/manifest+json", "webp", "image/webp", "wg", "application/vnd.pmi.widget", "wgt", "application/widget", "wks", "application/vnd.ms-works", "wm", "video/x-ms-wm", "wma", "audio/x-ms-wma", "wmd", "application/x-ms-wmd", "wmf", "application/x-msmetafile", "wml", "text/vnd.wap.wml", "wmlc", "application/vnd.wap.wmlc", "wmls", "text/vnd.wap.wmlscript", "wmlsc", "application/vnd.wap.wmlscriptc", "wmv", "video/x-ms-wmv", "wmx", "video/x-ms-wmx", "wmz", "application/x-ms-wmz", "woff", "application/x-font-woff", "woff2", "font/woff2", "wpd", "application/vnd.wordperfect", "wpl", "application/vnd.ms-wpl", "wps", "application/vnd.ms-works", "wqd", "application/vnd.wqd", "wri", "application/x-mswrite", "wrl", "model/vrml", "wsdl", "application/wsdl+xml", "wspolicy", "application/wspolicy+xml", "wtb", "application/vnd.webturbo", "wvx", "video/x-ms-wvx", "x32", "application/x-authorware-bin", "x3d", "model/x3d+xml", "x3db", "model/x3d+binary", "x3dbz", "model/x3d+binary", "x3dv", "model/x3d+vrml", "x3dvz", "model/x3d+vrml", "x3dz", "model/x3d+xml", "xaml", "application/xaml+xml", "xap", "application/x-silverlight-app", "xar", "application/vnd.xara", "xbap", "application/x-ms-xbap", "xbd", "application/vnd.fujixerox.docuworks.binder", "xbm", "image/x-xbitmap", "xdf", "application/xcap-diff+xml", "xdm", "application/vnd.syncml.dm+xml", "xdp", "application/vnd.adobe.xdp+xml", "xdssc", "application/dssc+xml", "xdw", "application/vnd.fujixerox.docuworks", "xenc", "application/xenc+xml", "xer", "application/patch-ops-error+xml", "xfdf", "application/vnd.adobe.xfdf", "xfdl", "application/vnd.xfdl", "xht", "application/xhtml+xml", "xhtml", "application/xhtml+xml", "xhvml", "application/xv+xml", "xif", "image/vnd.xiff", "xla", "application/vnd.ms-excel", "xlam", "application/vnd.ms-excel.addin.macroenabled.12", "xlc", "application/vnd.ms-excel", "xlf", "application/x-xliff+xml", "xlm", "application/vnd.ms-excel", "xls", "application/vnd.ms-excel", "xlsb", "application/vnd.ms-excel.sheet.binary.macroenabled.12", "xlsm", "application/vnd.ms-excel.sheet.macroenabled.12", "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "xlt", "application/vnd.ms-excel", "xltm", "application/vnd.ms-excel.template.macroenabled.12", "xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template", "xlw", "application/vnd.ms-excel", "xm", "audio/xm", "xml", "application/xml", "xo", "application/vnd.olpc-sugar", "xop", "application/xop+xml", "xpi", "application/x-xpinstall", "xpl", "application/xproc+xml", "xpm", "image/x-xpixmap", "xpr", "application/vnd.is-xpr", "xps", "application/vnd.ms-xpsdocument", "xpw", "application/vnd.intercon.formnet", "xpx", "application/vnd.intercon.formnet", "xsl", "application/xml", "xslt", "application/xslt+xml", "xsm", "application/vnd.syncml+xml", "xspf", "application/xspf+xml", "xul", "application/vnd.mozilla.xul+xml", "xvm", "application/xv+xml", "xvml", "application/xv+xml", "xwd", "image/x-xwindowdump", "xyz", "chemical/x-xyz", "xz", "application/x-xz", "yang", "application/yang", "yin", "application/yin+xml", "z1", "application/x-zmachine", "z2", "application/x-zmachine", "z3", "application/x-zmachine", "z4", "application/x-zmachine", "z5", "application/x-zmachine", "z6", "application/x-zmachine", "z7", "application/x-zmachine", "z8", "application/x-zmachine", "zaz", "application/vnd.zzazz.deck+xml", "zip", "application/zip", "zir", "application/vnd.zul", "zirz", "application/vnd.zul", "zmm", "application/vnd.handheld-entertainment+xml"]);
    },
    get C432() {
      return C[432] = dart.constList([37, 80, 68, 70], core.int);
    },
    get C431() {
      return C[431] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[432] || CT.C432,
        [S$1.mimeType]: "application/pdf"
      });
    },
    get C434() {
      return C[434] = dart.constList([37, 81], core.int);
    },
    get C433() {
      return C[433] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[434] || CT.C434,
        [S$1.mimeType]: "application/postscript"
      });
    },
    get C436() {
      return C[436] = dart.constList([255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255], core.int);
    },
    get C437() {
      return C[437] = dart.constList([70, 79, 82, 77, 0, 0, 0, 0, 65, 73, 70, 70], core.int);
    },
    get C435() {
      return C[435] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: C[436] || CT.C436,
        [S$1.numbers]: C[437] || CT.C437,
        [S$1.mimeType]: "audio/x-aiff"
      });
    },
    get C439() {
      return C[439] = dart.constList([102, 76, 97, 67], core.int);
    },
    get C438() {
      return C[438] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[439] || CT.C439,
        [S$1.mimeType]: "audio/x-flac"
      });
    },
    get C441() {
      return C[441] = dart.constList([82, 73, 70, 70, 0, 0, 0, 0, 87, 65, 86, 69], core.int);
    },
    get C440() {
      return C[440] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: C[436] || CT.C436,
        [S$1.numbers]: C[441] || CT.C441,
        [S$1.mimeType]: "audio/x-wav"
      });
    },
    get C443() {
      return C[443] = dart.constList([71, 73, 70, 56, 55, 97], core.int);
    },
    get C442() {
      return C[442] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[443] || CT.C443,
        [S$1.mimeType]: "image/gif"
      });
    },
    get C445() {
      return C[445] = dart.constList([71, 73, 70, 56, 57, 97], core.int);
    },
    get C444() {
      return C[444] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[445] || CT.C445,
        [S$1.mimeType]: "image/gif"
      });
    },
    get C447() {
      return C[447] = dart.constList([255, 216], core.int);
    },
    get C446() {
      return C[446] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[447] || CT.C447,
        [S$1.mimeType]: "image/jpeg"
      });
    },
    get C449() {
      return C[449] = dart.constList([137, 80, 78, 71, 13, 10, 26, 10], core.int);
    },
    get C448() {
      return C[448] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[449] || CT.C449,
        [S$1.mimeType]: "image/png"
      });
    },
    get C451() {
      return C[451] = dart.constList([73, 73, 42, 0], core.int);
    },
    get C450() {
      return C[450] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[451] || CT.C451,
        [S$1.mimeType]: "image/tiff"
      });
    },
    get C453() {
      return C[453] = dart.constList([77, 77, 0, 42], core.int);
    },
    get C452() {
      return C[452] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[453] || CT.C453,
        [S$1.mimeType]: "image/tiff"
      });
    },
    get C455() {
      return C[455] = dart.constList([255, 241], core.int);
    },
    get C454() {
      return C[454] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[455] || CT.C455,
        [S$1.mimeType]: "audio/aac"
      });
    },
    get C457() {
      return C[457] = dart.constList([255, 249], core.int);
    },
    get C456() {
      return C[456] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[457] || CT.C457,
        [S$1.mimeType]: "audio/aac"
      });
    },
    get C459() {
      return C[459] = dart.constList([26, 69, 223, 163], core.int);
    },
    get C458() {
      return C[458] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[459] || CT.C459,
        [S$1.mimeType]: "audio/weba"
      });
    },
    get C461() {
      return C[461] = dart.constList([73, 68, 51], core.int);
    },
    get C460() {
      return C[460] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[461] || CT.C461,
        [S$1.mimeType]: "audio/mpeg"
      });
    },
    get C463() {
      return C[463] = dart.constList([255, 251], core.int);
    },
    get C462() {
      return C[462] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[463] || CT.C463,
        [S$1.mimeType]: "audio/mpeg"
      });
    },
    get C465() {
      return C[465] = dart.constList([79, 112, 117], core.int);
    },
    get C464() {
      return C[464] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[465] || CT.C465,
        [S$1.mimeType]: "audio/ogg"
      });
    },
    get C467() {
      return C[467] = dart.constList([255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255], core.int);
    },
    get C468() {
      return C[468] = dart.constList([0, 0, 0, 0, 102, 116, 121, 112, 51, 103, 112, 53], core.int);
    },
    get C466() {
      return C[466] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: C[467] || CT.C467,
        [S$1.numbers]: C[468] || CT.C468,
        [S$1.mimeType]: "video/mp4"
      });
    },
    get C470() {
      return C[470] = dart.constList([70, 84, 108, 103], core.int);
    },
    get C469() {
      return C[469] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[470] || CT.C470,
        [S$1.mimeType]: "model/gltf-binary"
      });
    },
    get C472() {
      return C[472] = dart.constList([82, 73, 70, 70, 0, 0, 0, 0, 87, 69, 66, 80], core.int);
    },
    get C471() {
      return C[471] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: C[436] || CT.C436,
        [S$1.numbers]: C[472] || CT.C472,
        [S$1.mimeType]: "image/webp"
      });
    },
    get C474() {
      return C[474] = dart.constList([119, 79, 70, 50], core.int);
    },
    get C473() {
      return C[473] = dart.const({
        __proto__: magic_number.MagicNumber.prototype,
        [S$1.mask]: null,
        [S$1.numbers]: C[474] || CT.C474,
        [S$1.mimeType]: "font/woff2"
      });
    },
    get C430() {
      return C[430] = dart.constList([C[431] || CT.C431, C[433] || CT.C433, C[435] || CT.C435, C[438] || CT.C438, C[440] || CT.C440, C[442] || CT.C442, C[444] || CT.C444, C[446] || CT.C446, C[448] || CT.C448, C[450] || CT.C450, C[452] || CT.C452, C[454] || CT.C454, C[456] || CT.C456, C[458] || CT.C458, C[460] || CT.C460, C[462] || CT.C462, C[464] || CT.C464, C[466] || CT.C466, C[469] || CT.C469, C[471] || CT.C471, C[473] || CT.C473], magic_number.MagicNumber);
    },
    get C475() {
      return C[475] = dart.fn(future$._ignore, T$0.ObjectNTovoid());
    },
    get C477() {
      return C[477] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [S$._Enum__name]: "everyEvent",
        [S$._Enum_index]: 0
      });
    },
    get C478() {
      return C[478] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [S$._Enum__name]: "eventAfterLastWindow",
        [S$._Enum_index]: 1
      });
    },
    get C479() {
      return C[479] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [S$._Enum__name]: "firstEventOnly",
        [S$._Enum_index]: 2
      });
    },
    get C480() {
      return C[480] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [S$._Enum__name]: "onHandler",
        [S$._Enum_index]: 3
      });
    },
    get C476() {
      return C[476] = dart.constList([C[477] || CT.C477, C[478] || CT.C478, C[479] || CT.C479, C[480] || CT.C480], backpressure.WindowStrategy);
    },
    get C481() {
      return C[481] = dart.fn(core.Comparable.compare, T$0.ComparableAndComparableToint());
    },
    get C482() {
      return C[482] = dart.constList([144, 169], core.int);
    }
  }, false);
  var C = Array(483).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/supabase_client.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:app_links/src/app_links_platform_interface.dart",
    "package:app_links/src/app_links_web.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:sign_in_with_apple_platform_interface/sign_in_with_apple_platform_interface.dart",
    "package:sign_in_with_apple_web/sign_in_with_apple_web.dart",
    "package:url_launcher_platform_interface/src/url_launcher_platform.dart",
    "package:url_launcher_web/url_launcher_web.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "package:url_launcher_platform_interface/link.dart",
    "package:url_launcher_web/src/link.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_web-2.0.19/lib/src/link.dart",
    "package:supabase_flutter/src/local_storage.dart",
    "package:gotrue/src/types/gotrue_async_storage.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/supabase.dart",
    "package:supabase_flutter/src/supabase.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/supabase_auth.dart",
    "package:supabase_flutter/src/supabase_auth.dart",
    "package:app_links/src/app_links_method_channel.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart",
    "package:sign_in_with_apple_platform_interface/authorization_credential.dart",
    "package:sign_in_with_apple_platform_interface/authorization_request.dart",
    "package:sign_in_with_apple_platform_interface/credential_state.dart",
    "package:sign_in_with_apple_platform_interface/web_authentication_options.dart",
    "package:sign_in_with_apple_platform_interface/exceptions.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/method_channel_sign_in_with_apple.dart",
    "package:sign_in_with_apple_platform_interface/method_channel_sign_in_with_apple.dart",
    "package:url_launcher_platform_interface/src/types.dart",
    "package:gotrue/src/types/user.dart",
    "package:supabase/src/auth_user.dart",
    "package:supabase/src/realtime_client_options.dart",
    "package:supabase/src/remove_subscription_result.dart",
    "package:supabase/src/supabase_client.dart",
    "package:supabase/src/supabase_event_types.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_query_builder.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest_builder.dart",
    "package:postgrest/src/postgrest_builder.dart",
    "package:supabase/src/supabase_query_builder.dart",
    "package:supabase/src/supabase_realtime_error.dart",
    "package:hive_flutter/hive_flutter.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "package:supabase_flutter/src/constants.dart",
    "package:url_launcher/src/types.dart",
    "package:url_launcher_platform_interface/method_channel_url_launcher.dart",
    "package:functions_client/src/functions_client.dart",
    "package:functions_client/src/types.dart",
    "package:gotrue/src/constants.dart",
    "package:gotrue/src/gotrue_admin_api.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/gotrue_client.dart",
    "package:gotrue/src/gotrue_client.dart",
    "package:gotrue/src/types/auth_exception.dart",
    "package:gotrue/src/types/auth_response.dart",
    "package:gotrue/src/types/auth_state.dart",
    "package:gotrue/src/types/mfa.dart",
    "package:gotrue/src/types/oauth_flow_type.dart",
    "package:gotrue/src/types/provider.dart",
    "package:gotrue/src/types/session.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/user_attributes.dart",
    "package:gotrue/src/types/user_attributes.dart",
    "package:postgrest/src/postgrest.dart",
    "package:postgrest/src/types.dart",
    "package:realtime_client/src/realtime_channel.dart",
    "package:realtime_client/src/realtime_client.dart",
    "package:realtime_client/src/realtime_presence.dart",
    "package:realtime_client/src/transformers.dart",
    "package:realtime_client/src/constants.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/storage_client.dart",
    "package:storage_client/src/storage_bucket_api.dart",
    "package:storage_client/src/storage_client.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/storage_file_api.dart",
    "package:storage_client/src/storage_file_api.dart",
    "package:storage_client/src/types.dart",
    "package:supabase/src/constants.dart",
    "package:http/src/base_client.dart",
    "package:supabase/src/auth_http_client.dart",
    "package:supabase/src/supabase_stream_builder.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_stream_builder.dart",
    "package:hive/hive.dart",
    "package:hive_flutter/src/stub/path_provider.dart",
    "package:http/src/client.dart",
    "package:http/src/exception.dart",
    "package:http/src/base_request.dart",
    "package:http/src/request.dart",
    "package:http/src/base_response.dart",
    "package:http/src/response.dart",
    "package:http/src/streamed_request.dart",
    "package:http/src/byte_stream.dart",
    "package:http/src/multipart_file.dart",
    "package:http/src/multipart_request.dart",
    "package:http/src/streamed_response.dart",
    "package:app_links/src/app_links.dart",
    "package:crypto/src/digest.dart",
    "package:crypto/src/hash.dart",
    "package:crypto/src/hmac.dart",
    "package:crypto/src/md5.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/md5.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hash_sink.dart",
    "package:crypto/src/hash_sink.dart",
    "package:crypto/src/sha1.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha1.dart",
    "package:crypto/src/sha256.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha256.dart",
    "package:crypto/src/sha512.dart",
    "package:sign_in_with_apple/src/sign_in_with_apple.dart",
    "package:sign_in_with_apple/src/widgets/apple_logo_painter.dart",
    "package:sign_in_with_apple/src/widgets/sign_in_with_apple_builder.dart",
    "package:sign_in_with_apple/src/widgets/sign_in_with_apple_button.dart",
    "package:webview_flutter/src/navigation_delegate.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter-4.4.2/lib/src/webview_controller.dart",
    "package:webview_flutter/src/webview_controller.dart",
    "package:webview_flutter/src/webview_cookie_manager.dart",
    "package:webview_flutter/src/webview_widget.dart",
    "package:functions_client/src/constants.dart",
    "package:gotrue/src/fetch.dart",
    "package:gotrue/src/types/fetch_options.dart",
    "package:gotrue/src/gotrue_admin_mfa_api.dart",
    "package:jwt_decode/jwt_decode.dart",
    "package:realtime_client/src/push.dart",
    "package:realtime_client/src/retry_timer.dart",
    "package:realtime_client/src/message.dart",
    "package:storage_client/src/constants.dart",
    "package:storage_client/src/fetch.dart",
    "package:storage_client/src/file_stub.dart",
    "package:yet_another_json_isolate/src/_isolates_web.dart",
    "package:hive/src/crypto/aes_cbc_pkcs7.dart",
    "package:hive/src/crypto/crc32.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive_impl.dart",
    "package:hive/src/registry/type_registry_impl.dart",
    "package:hive/src/hive_impl.dart",
    "package:hive/src/object/hive_collection_mixin.dart",
    "package:hive/src/util/delegating_list_view_mixin.dart",
    "package:hive/src/object/hive_list_impl.dart",
    "package:hive/src/object/hive_object.dart",
    "package:hive/src/box_collection/box_collection_indexed_db.dart",
    "package:http/src/browser_client.dart",
    "package:crypto/src/digest_sink.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha512_slowsinks.dart",
    "package:crypto/src/sha512_slowsinks.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_navigation_delegate.dart",
    "package:webview_flutter_platform_interface/src/platform_navigation_delegate.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_webview_controller.dart",
    "package:webview_flutter_platform_interface/src/platform_webview_controller.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_webview_cookie_manager.dart",
    "package:webview_flutter_platform_interface/src/platform_webview_cookie_manager.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_webview_widget.dart",
    "package:webview_flutter_platform_interface/src/platform_webview_widget.dart",
    "package:webview_flutter_platform_interface/src/webview_platform.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/subjects/subject.dart",
    "package:rxdart/src/subjects/subject.dart",
    "package:rxdart/src/subjects/behavior_subject.dart",
    "package:rxdart/src/subjects/publish_subject.dart",
    "package:rxdart/src/subjects/replay_subject.dart",
    "package:web_socket_channel/src/channel.dart",
    "package:web_socket_channel/src/exception.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/retry-3.1.1/lib/retry.dart",
    "package:retry/retry.dart",
    "package:rxdart/src/rx.dart",
    "package:hive/src/crypto/aes_engine.dart",
    "package:hive/src/adapters/big_int_adapter.dart",
    "package:hive/src/adapters/date_time_adapter.dart",
    "package:hive/src/backend/storage_backend.dart",
    "package:hive/src/backend/storage_backend_memory.dart",
    "package:hive/src/box/box_base_impl.dart",
    "package:hive/src/box/box_impl.dart",
    "package:hive/src/box/lazy_box_impl.dart",
    "package:hive/src/box_collection/box_collection_stub.dart",
    "package:http_parser/src/authentication_challenge.dart",
    "package:http_parser/src/case_insensitive_map.dart",
    "package:http_parser/src/chunked_coding.dart",
    "package:http_parser/src/media_type.dart",
    "package:webview_flutter_platform_interface/src/types/http_response_error.dart",
    "package:webview_flutter_platform_interface/src/types/javascript_console_message.dart",
    "package:webview_flutter_platform_interface/src/types/javascript_log_level.dart",
    "package:webview_flutter_platform_interface/src/types/javascript_message.dart",
    "package:webview_flutter_platform_interface/src/types/javascript_mode.dart",
    "package:webview_flutter_platform_interface/src/types/load_request_params.dart",
    "package:webview_flutter_platform_interface/src/types/navigation_decision.dart",
    "package:webview_flutter_platform_interface/src/types/navigation_request.dart",
    "package:webview_flutter_platform_interface/src/types/platform_navigation_delegate_creation_params.dart",
    "package:webview_flutter_platform_interface/src/types/platform_webview_controller_creation_params.dart",
    "package:webview_flutter_platform_interface/src/types/platform_webview_cookie_manager_creation_params.dart",
    "package:webview_flutter_platform_interface/src/types/platform_webview_permission_request.dart",
    "package:webview_flutter_platform_interface/src/types/platform_webview_widget_creation_params.dart",
    "package:webview_flutter_platform_interface/src/types/url_change.dart",
    "package:webview_flutter_platform_interface/src/types/web_resource_error.dart",
    "package:webview_flutter_platform_interface/src/types/webview_cookie.dart",
    "package:rxdart/src/streams/value_stream.dart",
    "package:rxdart/src/utils/forwarding_sink.dart",
    "package:rxdart/src/transformers/start_with.dart",
    "package:rxdart/src/transformers/start_with_error.dart",
    "package:rxdart/src/utils/empty.dart",
    "package:rxdart/src/utils/error_and_stacktrace.dart",
    "package:rxdart/src/streams/replay_stream.dart",
    "package:web_socket_channel/html.dart",
    "package:web_socket_channel/src/copy/web_socket_impl.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/copy/web_socket_impl.dart",
    "package:mime/src/mime_shared.dart",
    "package:mime/src/mime_multipart_transformer.dart",
    "package:mime/src/mime_type.dart",
    "package:rxdart/src/streams/combine_latest.dart",
    "package:rxdart/src/streams/concat.dart",
    "package:rxdart/src/streams/concat_eager.dart",
    "package:rxdart/src/streams/connectable_stream.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/connectable_stream.dart",
    "package:rxdart/src/streams/defer.dart",
    "package:rxdart/src/streams/fork_join.dart",
    "package:rxdart/src/streams/from_callable.dart",
    "package:rxdart/src/streams/merge.dart",
    "package:rxdart/src/streams/never.dart",
    "package:rxdart/src/streams/race.dart",
    "package:rxdart/src/streams/range.dart",
    "package:rxdart/src/streams/repeat.dart",
    "package:rxdart/src/streams/retry.dart",
    "package:rxdart/src/streams/retry_when.dart",
    "package:rxdart/src/streams/sequence_equal.dart",
    "package:rxdart/src/streams/switch_latest.dart",
    "package:rxdart/src/streams/timer.dart",
    "package:rxdart/src/streams/using.dart",
    "package:rxdart/src/streams/zip.dart",
    "package:rxdart/src/transformers/backpressure/backpressure.dart",
    "package:rxdart/src/transformers/backpressure/buffer.dart",
    "package:rxdart/src/transformers/backpressure/debounce.dart",
    "package:rxdart/src/transformers/backpressure/pairwise.dart",
    "package:rxdart/src/transformers/backpressure/sample.dart",
    "package:rxdart/src/transformers/backpressure/throttle.dart",
    "package:rxdart/src/transformers/backpressure/window.dart",
    "package:rxdart/src/transformers/default_if_empty.dart",
    "package:rxdart/src/transformers/delay.dart",
    "package:rxdart/src/transformers/delay_when.dart",
    "package:rxdart/src/transformers/dematerialize.dart",
    "package:rxdart/src/utils/notification.dart",
    "package:rxdart/src/transformers/distinct_unique.dart",
    "package:rxdart/src/transformers/do.dart",
    "package:rxdart/src/transformers/end_with.dart",
    "package:rxdart/src/transformers/end_with_many.dart",
    "package:rxdart/src/transformers/exhaust_map.dart",
    "package:rxdart/src/transformers/flat_map.dart",
    "package:rxdart/src/transformers/group_by.dart",
    "package:rxdart/src/transformers/ignore_elements.dart",
    "package:rxdart/src/transformers/interval.dart",
    "package:rxdart/src/transformers/map_not_null.dart",
    "package:rxdart/src/transformers/map_to.dart",
    "package:rxdart/src/transformers/materialize.dart",
    "package:rxdart/src/transformers/on_error_resume.dart",
    "package:rxdart/src/transformers/scan.dart",
    "package:rxdart/src/transformers/skip_last.dart",
    "package:rxdart/src/transformers/skip_until.dart",
    "package:rxdart/src/transformers/start_with_many.dart",
    "package:rxdart/src/transformers/switch_if_empty.dart",
    "package:rxdart/src/transformers/switch_map.dart",
    "package:rxdart/src/transformers/take_last.dart",
    "package:rxdart/src/transformers/take_until.dart",
    "package:rxdart/src/transformers/take_while_inclusive.dart",
    "package:rxdart/src/transformers/time_interval.dart",
    "package:rxdart/src/transformers/timestamp.dart",
    "package:rxdart/src/transformers/where_not_null.dart",
    "package:rxdart/src/transformers/where_type.dart",
    "package:rxdart/src/transformers/with_latest_from.dart",
    "package:rxdart/src/utils/composite_subscription.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/frame.dart",
    "package:hive/src/binary/frame.dart",
    "package:hive/src/binary/frame_helper.dart",
    "package:hive/src/box/keystore.dart",
    "package:hive/src/box/change_notifier.dart",
    "package:hive/src/adapters/ignored_type_adapter.dart",
    "package:hive/src/backend/js/backend_manager.dart",
    "package:http_parser/src/chunked_coding/decoder.dart",
    "package:http_parser/src/chunked_coding/encoder.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart",
    "package:typed_data/src/typed_queue.dart",
    "package:rxdart/src/utils/forwarding_stream.dart",
    "package:web_socket_channel/src/copy/io_sink.dart",
    "package:web_socket_channel/src/copy/web_socket.dart",
    "package:mime/src/bound_multipart_stream.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/bound_multipart_stream.dart",
    "package:mime/src/magic_number.dart",
    "package:hive/src/binary/binary_reader_impl.dart",
    "package:hive/src/util/indexable_skip_list.dart",
    "package:hive/src/backend/js/native/backend_manager.dart",
    "package:typed_data/src/typed_buffer.dart",
    "package:hive/src/backend/js/native/storage_backend_js.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_writer_impl.dart",
    "package:hive/src/binary/binary_writer_impl.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[S$.$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      return new main.MyApp.new({key: key});
    }
    build(context) {
      return new app.MaterialApp.new({title: "Supabase Flutter Demo", theme: theme_data.ThemeData.new({colorScheme: color_scheme.ColorScheme.fromSeed({seedColor: colors.Colors.blue}), useMaterial3: true}), home: C[1] || CT.C1});
    }
  };
  (main.MyApp.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    main.MyApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.ItemsPage = class ItemsPage extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      return new main.ItemsPage.new({key: key});
    }
    createState() {
      return new main._ItemsPageState.new();
    }
  };
  (main.ItemsPage.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    main.ItemsPage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.ItemsPage.prototype;
  dart.addTypeTests(main.ItemsPage);
  dart.addTypeCaches(main.ItemsPage);
  dart.setMethodSignature(main.ItemsPage, () => ({
    __proto__: dart.getMethods(main.ItemsPage.__proto__),
    createState: dart.fnType(framework.State$(main.ItemsPage), [])
  }));
  dart.setLibraryUri(main.ItemsPage, I[0]);
  main._ItemsPageState = class _ItemsPageState extends framework.State$(main.ItemsPage) {
    initState() {
      super.initState();
      this[S$._loadItems]();
    }
    [S$._loadItems]() {
      return async.async(dart.void, (function* _loadItems() {
        this.setState(dart.fn(() => {
          this[S$._loading] = true;
          this[S$._error] = null;
        }, T$.VoidTovoid()));
        try {
          let resp = (yield supabase_client.SupabaseConfig.client.from("users").select(dart.dynamic, "id, name, email, created_at").order("created_at", {ascending: false}));
          this.setState(dart.fn(() => {
            this[S$._items] = core.List.as(resp);
          }, T$.VoidTovoid()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this.setState(dart.fn(() => {
              this[S$._error] = "Ошибка загрузки: " + dart.str(e);
            }, T$.VoidTovoid()));
          } else
            throw e$;
        } finally {
          if (this.mounted) {
            this.setState(dart.fn(() => {
              this[S$._loading] = false;
            }, T$.VoidTovoid()));
          }
        }
      }).bind(this));
    }
    [S$._addItem]() {
      return async.async(dart.void, (function* _addItem() {
        try {
          let title = "Item " + dart.str(new core.DateTime.now().millisecondsSinceEpoch);
          yield supabase_client.SupabaseConfig.client.from("users").insert(new (T$.IdentityMapOfString$String()).from(["title", title]));
          yield this[S$._loadItems]();
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            scaffold.ScaffoldMessenger.of(this.context).showSnackBar(new snack_bar.SnackBar.new({content: new text.Text.new("Не удалось добавить: " + dart.str(e))}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    build(context) {
      let body = this[S$._loading] ? C[2] || CT.C2 : this[S$._error] != null ? new basic.Center.new({child: new text.Text.new(dart.nullCheck(this[S$._error]))}) : new refresh_indicator.RefreshIndicator.new({onRefresh: dart.bind(this, S$._loadItems), child: new scroll_view.ListView.separated({padding: C[6] || CT.C6, itemCount: this[S$._items][S$.$length], separatorBuilder: dart.fn((_, __) => C[7] || CT.C7, T$.BuildContextAndintToDivider()), itemBuilder: dart.fn((context, index) => {
            let t2, t2$;
            let item = T$.MapOfString$dynamic().as(this[S$._items][S$.$_get](index));
            let id = item[S$.$_get]("id");
            let title = (t2$ = (t2 = item[S$.$_get]("title"), t2 == null ? null : dart.toString(t2)), t2$ == null ? "(no title)" : t2$);
            return new list_tile.ListTile.new({leading: new circle_avatar.CircleAvatar.new({child: new text.Text.new(dart.str(id))}), title: new text.Text.new(title)});
          }, T$.BuildContextAndintToListTile())})});
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[8] || CT.C8, actions: T$.JSArrayOfWidget().of([new icon_button.IconButton.new({onPressed: dart.bind(this, S$._loadItems), icon: C[9] || CT.C9, tooltip: "Обновить"})])}), body: body, floatingActionButton: new floating_action_button.FloatingActionButton.extended({onPressed: dart.bind(this, S$._addItem), icon: C[11] || CT.C11, label: C[13] || CT.C13})});
    }
    static ['_#new#tearOff']() {
      return new main._ItemsPageState.new();
    }
  };
  (main._ItemsPageState.new = function() {
    this[S$._loading] = false;
    this[S$._error] = null;
    this[S$._items] = [];
    main._ItemsPageState.__proto__.new.call(this);
    ;
  }).prototype = main._ItemsPageState.prototype;
  dart.addTypeTests(main._ItemsPageState);
  dart.addTypeCaches(main._ItemsPageState);
  dart.setMethodSignature(main._ItemsPageState, () => ({
    __proto__: dart.getMethods(main._ItemsPageState.__proto__),
    [S$._loadItems]: dart.fnType(async.Future$(dart.void), []),
    [S$._addItem]: dart.fnType(async.Future$(dart.void), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._ItemsPageState, I[0]);
  dart.setFieldSignature(main._ItemsPageState, () => ({
    __proto__: dart.getFields(main._ItemsPageState.__proto__),
    [S$._loading]: dart.fieldType(core.bool),
    [S$._error]: dart.fieldType(dart.nullable(core.String)),
    [S$._items]: dart.fieldType(core.List)
  }));
  main.main = function main$0() {
    return async.async(dart.void, function* main() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      yield supabase_client.SupabaseConfig.init();
      binding.runApp(C[14] || CT.C14);
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t2;
    let registrar = (t2 = pluginRegistrar, t2 == null ? plugin_registry.webPluginRegistrar : t2);
    app_links_web.AppLinksPluginWeb.registerWith(registrar);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    sign_in_with_apple_web.SignInWithApplePlugin.registerWith(registrar);
    url_launcher_web.UrlLauncherPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  supabase_client.SupabaseConfig = class SupabaseConfig extends core.Object {
    static init() {
      return async.async(dart.void, function* init() {
        yield supabase$.Supabase.initialize({url: supabase_client.SupabaseConfig.supabaseUrl, anonKey: supabase_client.SupabaseConfig.supabaseAnonKey});
      });
    }
    static get client() {
      return supabase$.Supabase.instance.client;
    }
    static ['_#new#tearOff']() {
      return new supabase_client.SupabaseConfig.new();
    }
  };
  (supabase_client.SupabaseConfig.new = function() {
    ;
  }).prototype = supabase_client.SupabaseConfig.prototype;
  dart.addTypeTests(supabase_client.SupabaseConfig);
  dart.addTypeCaches(supabase_client.SupabaseConfig);
  dart.setStaticMethodSignature(supabase_client.SupabaseConfig, () => ['init']);
  dart.setStaticGetterSignature(supabase_client.SupabaseConfig, () => ['client']);
  dart.setLibraryUri(supabase_client.SupabaseConfig, I[1]);
  dart.setStaticFieldSignature(supabase_client.SupabaseConfig, () => ['supabaseUrl', 'supabaseAnonKey']);
  dart.defineLazy(supabase_client.SupabaseConfig, {
    /*supabase_client.SupabaseConfig.supabaseUrl*/get supabaseUrl() {
      return "https://zbptxyjdkybngjnvmygx.supabase.co";
    },
    /*supabase_client.SupabaseConfig.supabaseAnonKey*/get supabaseAnonKey() {
      return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpicHR4eWpka3libmdqbnZteWd4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwOTUxNjYsImV4cCI6MjA3NTY3MTE2Nn0.Z-AGcUCqURdQGNMKLSJCSyD9bDMUrqcPX-eBeuZ2s2w";
    }
  }, false);
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts$) {
      let preventConstObject = opts$ && 'preventConstObject' in opts$ ? opts$.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[15] || CT.C15)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts$) {
    let token = opts$ && 'token' in opts$ ? opts$.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[3]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T$.ExpandoOfObject()).new();
    }
  }, false);
  app_links_platform_interface.AppLinksPlatform = class AppLinksPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return app_links_platform_interface.AppLinksPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, app_links_platform_interface.AppLinksPlatform._token);
      app_links_platform_interface.AppLinksPlatform._instance = instance;
    }
    getInitialAppLink() {
      return dart.throw(new core.UnimplementedError.new("getInitialAppLink() not implemented on the current platform."));
    }
    getInitialAppLinkString() {
      return dart.throw(new core.UnimplementedError.new("getInitialAppLinkString not implemented on the current platform."));
    }
    getLatestAppLink() {
      return dart.throw(new core.UnimplementedError.new("getLatestAppLink not implemented on the current platform."));
    }
    getLatestAppLinkString() {
      dart.throw(new core.UnimplementedError.new("getLatestAppLinkString not implemented on the current platform."));
    }
    get stringLinkStream() {
      return dart.throw(new core.UnimplementedError.new("stringUriStream not implemented on the current platform."));
    }
    get uriLinkStream() {
      return dart.throw(new core.UnimplementedError.new("uriStream not implemented on the current platform."));
    }
    get allUriLinkStream() {
      return dart.throw(new core.UnimplementedError.new("allUriLinkStream not implemented on the current platform."));
    }
    get allStringLinkStream() {
      return dart.throw(new core.UnimplementedError.new("allStringLinkStream not implemented on the current platform."));
    }
  };
  (app_links_platform_interface.AppLinksPlatform.new = function() {
    app_links_platform_interface.AppLinksPlatform.__proto__.new.call(this, {token: app_links_platform_interface.AppLinksPlatform._token});
    ;
  }).prototype = app_links_platform_interface.AppLinksPlatform.prototype;
  dart.addTypeTests(app_links_platform_interface.AppLinksPlatform);
  dart.addTypeCaches(app_links_platform_interface.AppLinksPlatform);
  dart.setMethodSignature(app_links_platform_interface.AppLinksPlatform, () => ({
    __proto__: dart.getMethods(app_links_platform_interface.AppLinksPlatform.__proto__),
    getInitialAppLink: dart.fnType(async.Future$(dart.nullable(core.Uri)), []),
    getInitialAppLinkString: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getLatestAppLink: dart.fnType(async.Future$(dart.nullable(core.Uri)), []),
    getLatestAppLinkString: dart.fnType(async.Future$(dart.nullable(core.String)), [])
  }));
  dart.setGetterSignature(app_links_platform_interface.AppLinksPlatform, () => ({
    __proto__: dart.getGetters(app_links_platform_interface.AppLinksPlatform.__proto__),
    stringLinkStream: async.Stream$(core.String),
    uriLinkStream: async.Stream$(core.Uri),
    allUriLinkStream: async.Stream$(core.Uri),
    allStringLinkStream: async.Stream$(core.String)
  }));
  dart.setStaticGetterSignature(app_links_platform_interface.AppLinksPlatform, () => ['instance']);
  dart.setStaticSetterSignature(app_links_platform_interface.AppLinksPlatform, () => ['instance']);
  dart.setLibraryUri(app_links_platform_interface.AppLinksPlatform, I[4]);
  dart.setStaticFieldSignature(app_links_platform_interface.AppLinksPlatform, () => ['_token', '_instance']);
  dart.defineLazy(app_links_platform_interface.AppLinksPlatform, {
    /*app_links_platform_interface.AppLinksPlatform._token*/get _token() {
      return C[15] || CT.C15;
    },
    /*app_links_platform_interface.AppLinksPlatform._instance*/get _instance() {
      return new app_links_method_channel.AppLinksMethodChannel.new();
    },
    set _instance(value) {}
  }, false);
  app_links_web.AppLinksPluginWeb = class AppLinksPluginWeb extends app_links_platform_interface.AppLinksPlatform {
    static registerWith(registrar) {
      app_links_platform_interface.AppLinksPlatform.instance = new app_links_web.AppLinksPluginWeb.new();
    }
    getInitialAppLink() {
      return async.async(T$.UriN(), (function* getInitialAppLink() {
        return core.Uri.parse(this[S$._initialLink]);
      }).bind(this));
    }
    getInitialAppLinkString() {
      return async.async(T$.StringN(), (function* getInitialAppLinkString() {
        return this[S$._initialLink];
      }).bind(this));
    }
    getLatestAppLink() {
      return async.async(T$.UriN(), (function* getLatestAppLink() {
        return core.Uri.parse(this[S$._initialLink]);
      }).bind(this));
    }
    getLatestAppLinkString() {
      return async.async(T$.StringN(), (function* getLatestAppLinkString() {
        return this[S$._initialLink];
      }).bind(this));
    }
    get stringLinkStream() {
      return new (T$._EmptyStreamOfString()).new();
    }
    get uriLinkStream() {
      return new (T$._EmptyStreamOfUri()).new();
    }
    get allUriLinkStream() {
      return T$.StreamOfUri().value(core.Uri.parse(this[S$._initialLink]));
    }
    get allStringLinkStream() {
      return T$.StreamOfString().value(this[S$._initialLink]);
    }
    static ['_#new#tearOff']() {
      return new app_links_web.AppLinksPluginWeb.new();
    }
  };
  (app_links_web.AppLinksPluginWeb.new = function() {
    this[S$._initialLink] = html.window[S$.$location][S$.$href];
    app_links_web.AppLinksPluginWeb.__proto__.new.call(this);
    ;
  }).prototype = app_links_web.AppLinksPluginWeb.prototype;
  dart.addTypeTests(app_links_web.AppLinksPluginWeb);
  dart.addTypeCaches(app_links_web.AppLinksPluginWeb);
  dart.setStaticMethodSignature(app_links_web.AppLinksPluginWeb, () => ['registerWith']);
  dart.setLibraryUri(app_links_web.AppLinksPluginWeb, I[5]);
  dart.setFieldSignature(app_links_web.AppLinksPluginWeb, () => ({
    __proto__: dart.getFields(app_links_web.AppLinksPluginWeb.__proto__),
    [S$._initialLink]: dart.finalFieldType(core.String)
  }));
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[6]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[S$._getFilteredKeys](filter.prefix, {allowList: filter.allowList})[S$.$forEach](dart.bind(html.window[S$.$localStorage], S$.$remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T$.IdentityMapOfString$Object()).new();
        for (let key of this[S$._getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[S$.$_set](key, this[S$._decodeValue](dart.nullCheck(html.window[S$.$localStorage][S$.$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[S$.$localStorage][S$.$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[S$.$localStorage][S$.$_set](key, this[S$._encodeValue](value));
        return true;
      }).bind(this));
    }
    [S$._getFilteredKeys](prefix, opts$) {
      let allowList = opts$ && 'allowList' in opts$ ? opts$.allowList : null;
      return html.window[S$.$localStorage][S$.$keys][S$.$where](dart.fn(key => {
        let t2, t2$;
        return key[S$.$startsWith](prefix) && dart.test((t2$ = (t2 = allowList, t2 == null ? null : t2.contains(key)), t2$ == null ? true : t2$));
      }, T$.StringTobool()));
    }
    [S$._encodeValue](value) {
      return convert.json.encode(value);
    }
    [S$._decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[S$.$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [S$._getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [S$._encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [S$._decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[7]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  sign_in_with_apple_platform_interface.SignInWithApplePlatform = class SignInWithApplePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return sign_in_with_apple_platform_interface.SignInWithApplePlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, sign_in_with_apple_platform_interface.SignInWithApplePlatform._token);
      sign_in_with_apple_platform_interface.SignInWithApplePlatform._instance = instance;
    }
    isAvailable() {
      return async.async(core.bool, function* isAvailable() {
        dart.throw(new core.UnimplementedError.new("isAvailable() has not been implemented."));
      });
    }
    getAppleIDCredential(opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let webAuthenticationOptions = opts$ && 'webAuthenticationOptions' in opts$ ? opts$.webAuthenticationOptions : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return async.async(authorization_credential.AuthorizationCredentialAppleID, function* getAppleIDCredential() {
        dart.throw(new core.UnimplementedError.new("getAppleIDCredential() has not been implemented."));
      });
    }
    getCredentialState(userIdentifier) {
      return async.async(credential_state.CredentialState, function* getCredentialState() {
        dart.throw(new core.UnimplementedError.new("getCredentialState() has not been implemented."));
      });
    }
    getKeychainCredential() {
      return async.async(authorization_credential.AuthorizationCredentialPassword, function* getKeychainCredential() {
        dart.throw(new core.UnimplementedError.new("getKeychainCredential() has not been implemented."));
      });
    }
  };
  (sign_in_with_apple_platform_interface.SignInWithApplePlatform.new = function() {
    sign_in_with_apple_platform_interface.SignInWithApplePlatform.__proto__.new.call(this, {token: sign_in_with_apple_platform_interface.SignInWithApplePlatform._token});
    ;
  }).prototype = sign_in_with_apple_platform_interface.SignInWithApplePlatform.prototype;
  dart.addTypeTests(sign_in_with_apple_platform_interface.SignInWithApplePlatform);
  dart.addTypeCaches(sign_in_with_apple_platform_interface.SignInWithApplePlatform);
  dart.setMethodSignature(sign_in_with_apple_platform_interface.SignInWithApplePlatform, () => ({
    __proto__: dart.getMethods(sign_in_with_apple_platform_interface.SignInWithApplePlatform.__proto__),
    isAvailable: dart.fnType(async.Future$(core.bool), []),
    getAppleIDCredential: dart.fnType(async.Future$(authorization_credential.AuthorizationCredentialAppleID), [], {nonce: dart.nullable(core.String), state: dart.nullable(core.String), webAuthenticationOptions: dart.nullable(web_authentication_options.WebAuthenticationOptions)}, {scopes: core.List$(authorization_request.AppleIDAuthorizationScopes)}),
    getCredentialState: dart.fnType(async.Future$(credential_state.CredentialState), [core.String]),
    getKeychainCredential: dart.fnType(async.Future$(authorization_credential.AuthorizationCredentialPassword), [])
  }));
  dart.setStaticGetterSignature(sign_in_with_apple_platform_interface.SignInWithApplePlatform, () => ['instance']);
  dart.setStaticSetterSignature(sign_in_with_apple_platform_interface.SignInWithApplePlatform, () => ['instance']);
  dart.setLibraryUri(sign_in_with_apple_platform_interface.SignInWithApplePlatform, I[8]);
  dart.setStaticFieldSignature(sign_in_with_apple_platform_interface.SignInWithApplePlatform, () => ['_token', '_instance']);
  dart.defineLazy(sign_in_with_apple_platform_interface.SignInWithApplePlatform, {
    /*sign_in_with_apple_platform_interface.SignInWithApplePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*sign_in_with_apple_platform_interface.SignInWithApplePlatform._instance*/get _instance() {
      return new method_channel_sign_in_with_apple.MethodChannelSignInWithApple.new();
    },
    set _instance(value) {}
  }, false);
  sign_in_with_apple_web.SignInWithApplePlugin = class SignInWithApplePlugin extends sign_in_with_apple_platform_interface.SignInWithApplePlatform {
    static registerWith(registrar) {
      sign_in_with_apple_platform_interface.SignInWithApplePlatform.instance = new sign_in_with_apple_web.SignInWithApplePlugin.new();
    }
    isAvailable() {
      return async.async(core.bool, function* isAvailable() {
        return true;
      });
    }
    getAppleIDCredential(opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let webAuthenticationOptions = opts$ && 'webAuthenticationOptions' in opts$ ? opts$.webAuthenticationOptions : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return async.async(authorization_credential.AuthorizationCredentialAppleID, function* getAppleIDCredential() {
        let t3, t4, t3$, t4$, t3$0;
        try {
          let options = {clientId: dart.nullCheck(webAuthenticationOptions).clientId, redirectURI: webAuthenticationOptions.redirectUri.toString(), scope: (() => {
              let t2 = T$.JSArrayOfString().of([]);
              for (let scope of scopes)
                if (scope === authorization_request.AppleIDAuthorizationScopes.email)
                  t2.push("email");
                else if (scope === authorization_request.AppleIDAuthorizationScopes.fullName) t2.push("name");
              return t2;
            })()[S$.$join](" "), state: state, nonce: nonce, usePopup: true};
          dart.global.AppleID.auth.init(options);
          let response = (yield js_util.promiseToFuture(dart.packageJSType("SignInResponseI", false), dart.global.AppleID.auth.signIn()));
          return new authorization_credential.AuthorizationCredentialAppleID.new({authorizationCode: response.authorization.code, identityToken: response.authorization.id_token, state: response.authorization.state, email: (t3 = response.user, t3 == null ? null : t3.email), givenName: (t3$ = response.user, t3$ == null ? null : (t4 = t3$.name, t4 == null ? null : t4.firstName)), familyName: (t3$0 = response.user, t3$0 == null ? null : (t4$ = t3$0.name, t4$ == null ? null : t4$.lastName)), userIdentifier: null});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            let errorProp = js_util.getProperty(dart.dynamic, e, "error");
            let errorCode = typeof errorProp == 'string' ? errorProp : "UNKNOWN_SIWA_ERROR";
            dart.throw(new exceptions.SignInWithAppleCredentialsException.new({message: "Authentication failed with " + errorCode}));
          } else
            throw e$;
        }
      });
    }
    static ['_#new#tearOff']() {
      return new sign_in_with_apple_web.SignInWithApplePlugin.new();
    }
  };
  (sign_in_with_apple_web.SignInWithApplePlugin.new = function() {
    sign_in_with_apple_web.SignInWithApplePlugin.__proto__.new.call(this);
    ;
  }).prototype = sign_in_with_apple_web.SignInWithApplePlugin.prototype;
  dart.addTypeTests(sign_in_with_apple_web.SignInWithApplePlugin);
  dart.addTypeCaches(sign_in_with_apple_web.SignInWithApplePlugin);
  dart.setStaticMethodSignature(sign_in_with_apple_web.SignInWithApplePlugin, () => ['registerWith']);
  dart.setLibraryUri(sign_in_with_apple_web.SignInWithApplePlugin, I[9]);
  url_launcher_platform.UrlLauncherPlatform = class UrlLauncherPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return url_launcher_platform.UrlLauncherPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verify(instance, url_launcher_platform.UrlLauncherPlatform._token);
      url_launcher_platform.UrlLauncherPlatform._instance = instance;
    }
    canLaunch(url) {
      dart.throw(new core.UnimplementedError.new("canLaunch() has not been implemented."));
    }
    launch(url, opts$) {
      let useSafariVC = opts$ && 'useSafariVC' in opts$ ? opts$.useSafariVC : null;
      let useWebView = opts$ && 'useWebView' in opts$ ? opts$.useWebView : null;
      let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : null;
      let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : null;
      let universalLinksOnly = opts$ && 'universalLinksOnly' in opts$ ? opts$.universalLinksOnly : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
      dart.throw(new core.UnimplementedError.new("launch() has not been implemented."));
    }
    launchUrl(url, options) {
      let isWebURL = url[S$.$startsWith]("http:") || url[S$.$startsWith]("https:");
      let useWebView = options.mode === types$.PreferredLaunchMode.inAppWebView || options.mode === types$.PreferredLaunchMode.inAppBrowserView || isWebURL && options.mode === types$.PreferredLaunchMode.platformDefault;
      return this.launch(url, {useSafariVC: useWebView, useWebView: useWebView, enableJavaScript: options.webViewConfiguration.enableJavaScript, enableDomStorage: options.webViewConfiguration.enableDomStorage, universalLinksOnly: options.mode === types$.PreferredLaunchMode.externalNonBrowserApplication, headers: options.webViewConfiguration.headers, webOnlyWindowName: options.webOnlyWindowName});
    }
    closeWebView() {
      dart.throw(new core.UnimplementedError.new("closeWebView() has not been implemented."));
    }
    supportsMode(mode) {
      return T$.FutureOfbool().value(mode === types$.PreferredLaunchMode.platformDefault);
    }
    supportsCloseForMode(mode) {
      return T$.FutureOfbool().value(mode === types$.PreferredLaunchMode.inAppWebView);
    }
  };
  (url_launcher_platform.UrlLauncherPlatform.new = function() {
    url_launcher_platform.UrlLauncherPlatform.__proto__.new.call(this, {token: url_launcher_platform.UrlLauncherPlatform._token});
    ;
  }).prototype = url_launcher_platform.UrlLauncherPlatform.prototype;
  dart.addTypeTests(url_launcher_platform.UrlLauncherPlatform);
  dart.addTypeCaches(url_launcher_platform.UrlLauncherPlatform);
  dart.setMethodSignature(url_launcher_platform.UrlLauncherPlatform, () => ({
    __proto__: dart.getMethods(url_launcher_platform.UrlLauncherPlatform.__proto__),
    canLaunch: dart.fnType(async.Future$(core.bool), [core.String]),
    launch: dart.fnType(async.Future$(core.bool), [core.String], {webOnlyWindowName: dart.nullable(core.String)}, {enableDomStorage: core.bool, enableJavaScript: core.bool, headers: core.Map$(core.String, core.String), universalLinksOnly: core.bool, useSafariVC: core.bool, useWebView: core.bool}),
    launchUrl: dart.fnType(async.Future$(core.bool), [core.String, types$.LaunchOptions]),
    closeWebView: dart.fnType(async.Future$(dart.void), []),
    supportsMode: dart.fnType(async.Future$(core.bool), [types$.PreferredLaunchMode]),
    supportsCloseForMode: dart.fnType(async.Future$(core.bool), [types$.PreferredLaunchMode])
  }));
  dart.setStaticGetterSignature(url_launcher_platform.UrlLauncherPlatform, () => ['instance']);
  dart.setStaticSetterSignature(url_launcher_platform.UrlLauncherPlatform, () => ['instance']);
  dart.setLibraryUri(url_launcher_platform.UrlLauncherPlatform, I[10]);
  dart.setStaticFieldSignature(url_launcher_platform.UrlLauncherPlatform, () => ['_token', '_instance']);
  dart.defineLazy(url_launcher_platform.UrlLauncherPlatform, {
    /*url_launcher_platform.UrlLauncherPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*url_launcher_platform.UrlLauncherPlatform._instance*/get _instance() {
      return new method_channel_url_launcher.MethodChannelUrlLauncher.new();
    },
    set _instance(value) {}
  }, false);
  url_launcher_web.UrlLauncherPlugin = class UrlLauncherPlugin extends url_launcher_platform.UrlLauncherPlatform {
    static ['_#new#tearOff'](opts$) {
      let debugWindow = opts$ && 'debugWindow' in opts$ ? opts$.debugWindow : null;
      return new url_launcher_web.UrlLauncherPlugin.new({debugWindow: debugWindow});
    }
    static registerWith(registrar) {
      url_launcher_platform.UrlLauncherPlatform.instance = new url_launcher_web.UrlLauncherPlugin.new();
      ui.platformViewRegistry.registerViewFactory("__url_launcher::link", link$.linkViewFactory, {isVisible: false});
    }
    get linkDelegate() {
      return dart.fn(linkInfo => new link$.WebLinkDelegate.new(linkInfo), T$.LinkInfoToWebLinkDelegate());
    }
    openNewWindow(url, opts$) {
      let t4;
      let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
      let target = (t4 = webOnlyWindowName, t4 == null ? this[S$._isSafari] && url_launcher_web._isSafariTargetTopScheme(url) ? "_top" : "" : t4);
      return this[S$._window][S$.$open](url, target);
    }
    canLaunch(url) {
      return T$.FutureOfbool().value(url_launcher_web.UrlLauncherPlugin._supportedSchemes.contains(url_launcher_web._getUrlScheme(url)));
    }
    launch(url, opts$) {
      let useSafariVC = opts$ && 'useSafariVC' in opts$ ? opts$.useSafariVC : false;
      let useWebView = opts$ && 'useWebView' in opts$ ? opts$.useWebView : false;
      let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : false;
      let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : false;
      let universalLinksOnly = opts$ && 'universalLinksOnly' in opts$ ? opts$.universalLinksOnly : false;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
      return async.async(core.bool, (function* launch() {
        this.openNewWindow(url, {webOnlyWindowName: webOnlyWindowName});
        return true;
      }).bind(this));
    }
  };
  (url_launcher_web.UrlLauncherPlugin.new = function(opts$) {
    let t4;
    let debugWindow = opts$ && 'debugWindow' in opts$ ? opts$.debugWindow : null;
    this[S$._isSafari] = false;
    this[S$._window] = (t4 = debugWindow, t4 == null ? html.window : t4);
    url_launcher_web.UrlLauncherPlugin.__proto__.new.call(this);
    this[S$._isSafari] = url_launcher_web._navigatorIsSafari(this[S$._window][S$.$navigator]);
  }).prototype = url_launcher_web.UrlLauncherPlugin.prototype;
  dart.addTypeTests(url_launcher_web.UrlLauncherPlugin);
  dart.addTypeCaches(url_launcher_web.UrlLauncherPlugin);
  dart.setMethodSignature(url_launcher_web.UrlLauncherPlugin, () => ({
    __proto__: dart.getMethods(url_launcher_web.UrlLauncherPlugin.__proto__),
    openNewWindow: dart.fnType(html.WindowBase, [core.String], {webOnlyWindowName: dart.nullable(core.String)}, {}),
    launch: dart.fnType(async.Future$(core.bool), [core.String], {enableDomStorage: core.bool, enableJavaScript: core.bool, headers: core.Map$(core.String, core.String), universalLinksOnly: core.bool, useSafariVC: core.bool, useWebView: core.bool, webOnlyWindowName: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(url_launcher_web.UrlLauncherPlugin, () => ['registerWith']);
  dart.setGetterSignature(url_launcher_web.UrlLauncherPlugin, () => ({
    __proto__: dart.getGetters(url_launcher_web.UrlLauncherPlugin.__proto__),
    linkDelegate: dart.fnType(framework.Widget, [link.LinkInfo])
  }));
  dart.setLibraryUri(url_launcher_web.UrlLauncherPlugin, I[11]);
  dart.setFieldSignature(url_launcher_web.UrlLauncherPlugin, () => ({
    __proto__: dart.getFields(url_launcher_web.UrlLauncherPlugin.__proto__),
    [S$._window]: dart.finalFieldType(html.Window),
    [S$._isSafari]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(url_launcher_web.UrlLauncherPlugin, () => ['_supportedSchemes']);
  dart.defineLazy(url_launcher_web.UrlLauncherPlugin, {
    /*url_launcher_web.UrlLauncherPlugin._supportedSchemes*/get _supportedSchemes() {
      return T$.LinkedHashSetOfString().from(["http", "https"]).union(url_launcher_web._safariTargetTopSchemes);
    }
  }, false);
  url_launcher_web._getUrlScheme = function _getUrlScheme(url) {
    let t4;
    t4 = core.Uri.tryParse(url);
    return t4 == null ? null : t4.scheme;
  };
  url_launcher_web._isSafariTargetTopScheme = function _isSafariTargetTopScheme(url) {
    return url_launcher_web._safariTargetTopSchemes.contains(url_launcher_web._getUrlScheme(url));
  };
  url_launcher_web._navigatorIsSafari = function _navigatorIsSafari(navigator) {
    return navigator[S$.$userAgent][S$.$contains]("Safari") && !navigator[S$.$userAgent][S$.$contains]("Chrome");
  };
  dart.defineLazy(url_launcher_web, {
    /*url_launcher_web._safariTargetTopSchemes*/get _safariTargetTopSchemes() {
      return C[17] || CT.C17;
    }
  }, false);
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[S$._data][S$.$removeWhere](dart.fn((key, _) => key[S$.$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T$.StringAndObjectTobool()));
        } else {
          this[S$._data][S$.$removeWhere](dart.fn((key, _) => key[S$.$startsWith](filter.prefix), T$.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T$.LinkedHashMapOfString$Object().from(this[S$._data]);
        preferences[S$.$removeWhere](dart.fn((key, _) => !key[S$.$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T$.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[S$._data][S$.$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[S$._data][S$.$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[S$._data] = new (T$.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[S$._data] = T$.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[6]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [S$._data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[S$.prefix];
    }
    set prefix(value) {
      this[S$.prefix] = value;
    }
    get allowList() {
      return this[S$.allowList];
    }
    set allowList(value) {
      this[S$.allowList] = value;
    }
    static ['_#new#tearOff'](opts$) {
      let prefix = opts$ && 'prefix' in opts$ ? opts$.prefix : null;
      let allowList = opts$ && 'allowList' in opts$ ? opts$.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts$) {
    let prefix = opts$ && 'prefix' in opts$ ? opts$.prefix : null;
    let allowList = opts$ && 'allowList' in opts$ ? opts$.allowList : null;
    this[S$.prefix] = prefix;
    this[S$.allowList] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[12]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[S$.filter];
    }
    set filter(value) {
      this[S$.filter] = value;
    }
    static ['_#new#tearOff'](opts$) {
      let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts$) {
    let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
    this[S$.filter] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[12]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[S$.filter$1];
    }
    set filter(value) {
      this[S$.filter$1] = value;
    }
    static ['_#new#tearOff'](opts$) {
      let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts$) {
    let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
    this[S$.filter$1] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[12]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  link.LinkTarget = class LinkTarget extends core.Object {
    get debugLabel() {
      return this[S$.debugLabel];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#_#tearOff'](opts$) {
      let debugLabel = opts$ && 'debugLabel' in opts$ ? opts$.debugLabel : null;
      return new link.LinkTarget.__({debugLabel: debugLabel});
    }
  };
  (link.LinkTarget.__ = function(opts$) {
    let debugLabel = opts$ && 'debugLabel' in opts$ ? opts$.debugLabel : null;
    this[S$.debugLabel] = debugLabel;
    ;
  }).prototype = link.LinkTarget.prototype;
  dart.addTypeTests(link.LinkTarget);
  dart.addTypeCaches(link.LinkTarget);
  dart.setLibraryUri(link.LinkTarget, I[13]);
  dart.setFieldSignature(link.LinkTarget, () => ({
    __proto__: dart.getFields(link.LinkTarget.__proto__),
    debugLabel: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(link.LinkTarget, () => ['defaultTarget', 'self', 'blank']);
  dart.defineLazy(link.LinkTarget, {
    /*link.LinkTarget.defaultTarget*/get defaultTarget() {
      return C[18] || CT.C18;
    },
    /*link.LinkTarget.self*/get self() {
      return C[19] || CT.C19;
    },
    /*link.LinkTarget.blank*/get blank() {
      return C[20] || CT.C20;
    }
  }, false);
  link.LinkInfo = class LinkInfo extends core.Object {};
  (link.LinkInfo.new = function() {
    ;
  }).prototype = link.LinkInfo.prototype;
  dart.addTypeTests(link.LinkInfo);
  dart.addTypeCaches(link.LinkInfo);
  dart.setLibraryUri(link.LinkInfo, I[13]);
  link.pushRouteNameToFramework = function pushRouteNameToFramework(_, routeName) {
    let completer = T$.CompleterOfByteData().new();
    system_navigator.SystemNavigator.routeInformationUpdated({location: routeName});
    ui.channelBuffers.push("flutter/navigation", link._codec.encodeMethodCall(new message_codec.MethodCall.new("pushRouteInformation", new _js_helper.LinkedMap.from(["location", routeName, "state", null]))), T$.FutureOrNOfByteDataTovoid().as(dart.bind(completer, 'complete')));
    return completer.future;
  };
  dart.defineLazy(link, {
    /*link._codec*/get _codec() {
      return C[21] || CT.C21;
    }
  }, false);
  link$.WebLinkDelegate = class WebLinkDelegate extends framework.StatefulWidget {
    get link() {
      return this[S$.link];
    }
    set link(value) {
      super.link = value;
    }
    static ['_#new#tearOff'](link, opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      return new link$.WebLinkDelegate.new(link, {key: key});
    }
    createState() {
      return new link$.WebLinkDelegateState.new();
    }
  };
  (link$.WebLinkDelegate.new = function(link, opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    this[S$.link] = link;
    link$.WebLinkDelegate.__proto__.new.call(this, {key: key});
    ;
  }).prototype = link$.WebLinkDelegate.prototype;
  dart.addTypeTests(link$.WebLinkDelegate);
  dart.addTypeCaches(link$.WebLinkDelegate);
  dart.setMethodSignature(link$.WebLinkDelegate, () => ({
    __proto__: dart.getMethods(link$.WebLinkDelegate.__proto__),
    createState: dart.fnType(link$.WebLinkDelegateState, [])
  }));
  dart.setLibraryUri(link$.WebLinkDelegate, I[14]);
  dart.setFieldSignature(link$.WebLinkDelegate, () => ({
    __proto__: dart.getFields(link$.WebLinkDelegate.__proto__),
    link: dart.finalFieldType(link.LinkInfo)
  }));
  link$.WebLinkDelegateState = class WebLinkDelegateState extends framework.State$(link$.WebLinkDelegate) {
    get [S$._controller]() {
      let t4;
      t4 = this[S$.__WebLinkDelegateState__controller];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t4;
    }
    set [S$._controller](_controller$35param) {
      this[S$.__WebLinkDelegateState__controller] = _controller$35param;
    }
    didUpdateWidget(oldWidget) {
      link$.WebLinkDelegate.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.link.uri, oldWidget.link.uri)) {
        this[S$._controller].setUri(this.widget.link.uri);
      }
      if (!this.widget.link.target[S$.$_equals](oldWidget.link.target)) {
        this[S$._controller].setTarget(this.widget.link.target);
      }
    }
    [S$._followLink]() {
      link$.LinkViewController.registerHitTest(this[S$._controller]);
      return T$.FutureOfvoid().value();
    }
    build(context) {
      let t6, t5, t4;
      return new basic.Stack.new({fit: stack.StackFit.passthrough, children: T$.JSArrayOfWidget().of([(t4 = this.widget.link, t5 = context, t6 = this.widget.link.isDisabled ? null : dart.bind(this, S$._followLink), t4.builder(t5, t6)), new basic.Positioned.fill({child: new platform_view.PlatformViewLink.new({viewType: "__url_launcher::link", onCreatePlatformView: dart.fn(params => {
                let t4;
                this[S$._controller] = link$.LinkViewController.fromParams(params);
                t4 = this[S$._controller];
                return (() => {
                  t4.setUri(this.widget.link.uri);
                  t4.setTarget(this.widget.link.target);
                  return t4;
                })();
              }, T$.PlatformViewCreationParamsToLinkViewController()), surfaceFactory: dart.fn((context, controller) => new platform_view.PlatformViewSurface.new({controller: controller, gestureRecognizers: C[22] || CT.C22, hitTestBehavior: platform_view$.PlatformViewHitTestBehavior.transparent}), T$.BuildContextAndPlatformViewControllerToPlatformViewSurface())})})])});
    }
    static ['_#new#tearOff']() {
      return new link$.WebLinkDelegateState.new();
    }
  };
  (link$.WebLinkDelegateState.new = function() {
    this[S$.__WebLinkDelegateState__controller] = null;
    link$.WebLinkDelegateState.__proto__.new.call(this);
    ;
  }).prototype = link$.WebLinkDelegateState.prototype;
  dart.addTypeTests(link$.WebLinkDelegateState);
  dart.addTypeCaches(link$.WebLinkDelegateState);
  dart.setMethodSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getMethods(link$.WebLinkDelegateState.__proto__),
    [S$._followLink]: dart.fnType(async.Future$(dart.void), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getGetters(link$.WebLinkDelegateState.__proto__),
    [S$._controller]: link$.LinkViewController
  }));
  dart.setSetterSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getSetters(link$.WebLinkDelegateState.__proto__),
    [S$._controller]: link$.LinkViewController
  }));
  dart.setLibraryUri(link$.WebLinkDelegateState, I[14]);
  dart.setFieldSignature(link$.WebLinkDelegateState, () => ({
    __proto__: dart.getFields(link$.WebLinkDelegateState.__proto__),
    [S$.__WebLinkDelegateState__controller]: dart.fieldType(dart.nullable(link$.LinkViewController))
  }));
  link$.LinkViewController = class LinkViewController extends platform_views.PlatformViewController {
    get viewId() {
      return this[S$.viewId];
    }
    set viewId(value) {
      super.viewId = value;
    }
    static ['_#new#tearOff'](viewId) {
      return new link$.LinkViewController.new(viewId);
    }
    static fromParams(params) {
      let viewId = params.id;
      let controller = new link$.LinkViewController.new(viewId);
      controller[S$._initialize]().then(core.Null, dart.fn(_ => {
        let t5, t4;
        if (dart.equals(link$.LinkViewController._instances[S$.$_get](viewId), controller)) {
          t4 = params;
          t5 = viewId;
          t4.onPlatformViewCreated(t5);
        }
      }, T$.voidToNull()));
      return controller;
    }
    static ['_#fromParams#tearOff'](params) {
      return link$.LinkViewController.fromParams(params);
    }
    static _viewFactory(viewId) {
      return dart.nullCheck(link$.LinkViewController._instances[S$.$_get](viewId))[S$._element];
    }
    static get _clickSubscription() {
      let t4;
      t4 = link$.LinkViewController['_#_clickSubscription'];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_clickSubscription")) : t4;
    }
    static set _clickSubscription(_clickSubscription$35param) {
      link$.LinkViewController['_#_clickSubscription'] = _clickSubscription$35param;
    }
    static _onGlobalClick(event) {
      let t4;
      let viewId = link$.getViewIdFromTarget(event);
      t4 = link$.LinkViewController._instances[S$.$_get](viewId);
      t4 == null ? null : t4[S$._onDomClick](event);
      link$.LinkViewController.unregisterHitTest();
    }
    static registerHitTest(controller) {
      link$.LinkViewController._hitTestedViewId = controller.viewId;
    }
    static unregisterHitTest() {
      link$.LinkViewController._hitTestedViewId = null;
    }
    get [S$._element]() {
      let t4;
      t4 = this[S$.__LinkViewController__element];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_element")) : t4;
    }
    set [S$._element](_element$35param) {
      this[S$.__LinkViewController__element] = _element$35param;
    }
    [S$._initialize]() {
      return async.async(dart.void, (function* _initialize() {
        let t4;
        this[S$._element] = html.Element.tag("a");
        js_util._setPropertyUnchecked(core.int, this[S$._element], "__url_launcher::link::viewId", this.viewId);
        t4 = this[S$._element][S$.$style];
        (() => {
          t4[S$.$opacity] = "0";
          t4[S$.$display] = "block";
          t4[S$.$width] = "100%";
          t4[S$.$height] = "100%";
          t4[S$.$cursor] = "unset";
          return t4;
        })();
        this[S$._element][S$.$setAttribute]("rel", "noreferrer noopener");
        let args = new (T$.IdentityMapOfString$dynamic()).from(["id", this.viewId, "viewType", "__url_launcher::link"]);
        yield system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "create", args);
      }).bind(this));
    }
    [S$._onDomClick](event) {
      let isHitTested = link$.LinkViewController._hitTestedViewId === this.viewId;
      if (!isHitTested) {
        event.preventDefault();
        return;
      }
      if (this[S$._uri] != null && dart.nullCheck(this[S$._uri]).hasScheme) {
        return;
      }
      event.preventDefault();
      let routeName = dart.toString(this[S$._uri]);
      link.pushRouteNameToFramework(null, routeName);
    }
    setUri(uri) {
      let t4, t4$;
      this[S$._uri] = uri;
      if (uri == null) {
        this[S$._element][S$.$removeAttribute]("href");
      } else {
        let href = dart.toString(uri);
        if (!uri.hasScheme) {
          href = (t4$ = (t4 = url_strategy.urlStrategy, t4 == null ? null : t4.prepareExternalUrl(href)), t4$ == null ? href : t4$);
        }
        this[S$._element][S$.$setAttribute]("href", href);
      }
    }
    setTarget(target) {
      this[S$._element][S$.$setAttribute]("target", this[S$._getHtmlTarget](target));
    }
    [S$._getHtmlTarget](target) {
      switch (target) {
        case C[18] || CT.C18:
        case C[19] || CT.C19:
          {
            return "_self";
          }
        case C[20] || CT.C20:
          {
            return "_blank";
          }
      }
      return "_self";
    }
    clearFocus() {
      return async.async(dart.void, function* clearFocus() {
      });
    }
    dispatchPointerEvent(event) {
      return async.async(dart.void, function* dispatchPointerEvent() {
      });
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (!dart.equals(link$.LinkViewController._instances[S$.$_get](this.viewId), this)) dart.assertFailed(null, I[15], 269, 12, "_instances[viewId] == this");
        link$.LinkViewController._instances[S$.$remove](this.viewId);
        if (link$.LinkViewController._instances[S$.$isEmpty]) {
          yield link$.LinkViewController._clickSubscription.cancel();
        }
        yield system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "dispose", this.viewId);
      }).bind(this));
    }
  };
  (link$.LinkViewController.new = function(viewId) {
    this[S$.__LinkViewController__element] = null;
    this[S$._uri] = null;
    this[S$.viewId] = viewId;
    if (link$.LinkViewController._instances[S$.$isEmpty]) {
      link$.LinkViewController._clickSubscription = html.window[S$.$onClick].listen(C[23] || CT.C23);
    }
    link$.LinkViewController._instances[S$.$_set](this.viewId, this);
  }).prototype = link$.LinkViewController.prototype;
  dart.addTypeTests(link$.LinkViewController);
  dart.addTypeCaches(link$.LinkViewController);
  dart.setMethodSignature(link$.LinkViewController, () => ({
    __proto__: dart.getMethods(link$.LinkViewController.__proto__),
    [S$._initialize]: dart.fnType(async.Future$(dart.void), []),
    [S$._onDomClick]: dart.fnType(dart.void, [html.MouseEvent]),
    setUri: dart.fnType(dart.void, [dart.nullable(core.Uri)]),
    setTarget: dart.fnType(dart.void, [link.LinkTarget]),
    [S$._getHtmlTarget]: dart.fnType(core.String, [link.LinkTarget]),
    clearFocus: dart.fnType(async.Future$(dart.void), []),
    dispatchPointerEvent: dart.fnType(async.Future$(dart.void), [events.PointerEvent]),
    dispose: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(link$.LinkViewController, () => ['fromParams', '_viewFactory', '_onGlobalClick', 'registerHitTest', 'unregisterHitTest']);
  dart.setGetterSignature(link$.LinkViewController, () => ({
    __proto__: dart.getGetters(link$.LinkViewController.__proto__),
    [S$._element]: html.Element
  }));
  dart.setSetterSignature(link$.LinkViewController, () => ({
    __proto__: dart.getSetters(link$.LinkViewController.__proto__),
    [S$._element]: html.Element
  }));
  dart.setStaticGetterSignature(link$.LinkViewController, () => ['_clickSubscription']);
  dart.setStaticSetterSignature(link$.LinkViewController, () => ['_clickSubscription']);
  dart.setLibraryUri(link$.LinkViewController, I[14]);
  dart.setFieldSignature(link$.LinkViewController, () => ({
    __proto__: dart.getFields(link$.LinkViewController.__proto__),
    viewId: dart.finalFieldType(core.int),
    [S$.__LinkViewController__element]: dart.fieldType(dart.nullable(html.Element)),
    [S$._uri]: dart.fieldType(dart.nullable(core.Uri))
  }));
  dart.setStaticFieldSignature(link$.LinkViewController, () => ['_instances', '_hitTestedViewId', '_#_clickSubscription']);
  dart.defineLazy(link$.LinkViewController, {
    /*link$.LinkViewController._instances*/get _instances() {
      return new (T$.IdentityMapOfint$LinkViewController()).new();
    },
    /*link$.LinkViewController._hitTestedViewId*/get _hitTestedViewId() {
      return null;
    },
    set _hitTestedViewId(value) {},
    /*link$.LinkViewController['_#_clickSubscription']*/get ['_#_clickSubscription']() {
      return null;
    },
    set ['_#_clickSubscription'](value) {}
  }, false);
  link$.getViewIdFromTarget = function getViewIdFromTarget(event) {
    let linkElement = link$.getLinkElementFromTarget(event);
    if (linkElement != null) {
      return js_util.getProperty(T$.intN(), linkElement, "__url_launcher::link::viewId");
    }
    return null;
  };
  link$.getLinkElementFromTarget = function getLinkElementFromTarget(event) {
    let target = event[S$.$target];
    if (target != null && html.Element.is(target)) {
      if (link$.isLinkElement(target)) {
        return target;
      }
      if (target[S$.$shadowRoot] != null) {
        let child = dart.nullCheck(target[S$.$shadowRoot]).lastChild;
        if (child != null && html.Element.is(child) && link$.isLinkElement(child)) {
          return child;
        }
      }
    }
    return null;
  };
  link$.isLinkElement = function isLinkElement(element) {
    return element != null && element[S$.$tagName] === "A" && js_util.hasProperty(element, "__url_launcher::link::viewId");
  };
  dart.copyProperties(link$, {
    get linkViewFactory() {
      return C[24] || CT.C24;
    }
  });
  dart.defineLazy(link$, {
    /*link$.linkViewType*/get linkViewType() {
      return "__url_launcher::link";
    },
    /*link$.linkViewIdProperty*/get linkViewIdProperty() {
      return "__url_launcher::link::viewId";
    }
  }, false);
  local_storage.LocalStorage = class LocalStorage extends core.Object {
    get initialize() {
      return this[S$.initialize];
    }
    set initialize(value) {
      super.initialize = value;
    }
    get hasAccessToken() {
      return this[S$.hasAccessToken];
    }
    set hasAccessToken(value) {
      super.hasAccessToken = value;
    }
    get accessToken() {
      return this[S$.accessToken];
    }
    set accessToken(value) {
      super.accessToken = value;
    }
    get removePersistedSession() {
      return this[S$.removePersistedSession];
    }
    set removePersistedSession(value) {
      super.removePersistedSession = value;
    }
    get persistSession() {
      return this[S$.persistSession];
    }
    set persistSession(value) {
      super.persistSession = value;
    }
  };
  (local_storage.LocalStorage.new = function(opts$) {
    let initialize = opts$ && 'initialize' in opts$ ? opts$.initialize : null;
    let hasAccessToken = opts$ && 'hasAccessToken' in opts$ ? opts$.hasAccessToken : null;
    let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
    let persistSession = opts$ && 'persistSession' in opts$ ? opts$.persistSession : null;
    let removePersistedSession = opts$ && 'removePersistedSession' in opts$ ? opts$.removePersistedSession : null;
    this[S$.initialize] = initialize;
    this[S$.hasAccessToken] = hasAccessToken;
    this[S$.accessToken] = accessToken;
    this[S$.persistSession] = persistSession;
    this[S$.removePersistedSession] = removePersistedSession;
    ;
  }).prototype = local_storage.LocalStorage.prototype;
  dart.addTypeTests(local_storage.LocalStorage);
  dart.addTypeCaches(local_storage.LocalStorage);
  dart.setLibraryUri(local_storage.LocalStorage, I[16]);
  dart.setFieldSignature(local_storage.LocalStorage, () => ({
    __proto__: dart.getFields(local_storage.LocalStorage.__proto__),
    initialize: dart.finalFieldType(dart.fnType(async.Future$(dart.void), [])),
    hasAccessToken: dart.finalFieldType(dart.fnType(async.Future$(core.bool), [])),
    accessToken: dart.finalFieldType(dart.fnType(async.Future$(dart.nullable(core.String)), [])),
    removePersistedSession: dart.finalFieldType(dart.fnType(async.Future$(dart.void), [])),
    persistSession: dart.finalFieldType(dart.fnType(async.Future$(dart.void), [core.String]))
  }));
  local_storage.EmptyLocalStorage = class EmptyLocalStorage extends local_storage.LocalStorage {
    static ['_#new#tearOff']() {
      return new local_storage.EmptyLocalStorage.new();
    }
    static _initialize() {
      return async.async(dart.void, function* _initialize() {
      });
    }
    static _hasAccessToken() {
      return T$.FutureOfbool().value(false);
    }
    static _accessToken() {
      return T$.FutureOfStringN().value();
    }
    static _removePersistedSession() {
      return async.async(dart.void, function* _removePersistedSession() {
      });
    }
    static _persistSession(_) {
      return async.async(dart.void, function* _persistSession() {
      });
    }
  };
  (local_storage.EmptyLocalStorage.new = function() {
    local_storage.EmptyLocalStorage.__proto__.new.call(this, {initialize: C[25] || CT.C25, hasAccessToken: C[26] || CT.C26, accessToken: C[27] || CT.C27, removePersistedSession: C[28] || CT.C28, persistSession: C[29] || CT.C29});
    ;
  }).prototype = local_storage.EmptyLocalStorage.prototype;
  dart.addTypeTests(local_storage.EmptyLocalStorage);
  dart.addTypeCaches(local_storage.EmptyLocalStorage);
  dart.setStaticMethodSignature(local_storage.EmptyLocalStorage, () => ['_initialize', '_hasAccessToken', '_accessToken', '_removePersistedSession', '_persistSession']);
  dart.setLibraryUri(local_storage.EmptyLocalStorage, I[16]);
  local_storage.HiveLocalStorage = class HiveLocalStorage extends local_storage.LocalStorage {
    static ['_#new#tearOff']() {
      return new local_storage.HiveLocalStorage.new();
    }
    static _initialize() {
      return async.async(dart.void, function* _initialize() {
        let encryptionCipher = null;
        if (local_storage.HiveLocalStorage.encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(convert.base64Url.decode(dart.nullCheck(local_storage.HiveLocalStorage.encryptionKey)));
        }
        yield hive_flutter['HiveX|initFlutter'](hive.Hive, "auth");
        yield hive.Hive.openBox(dart.dynamic, "supabase_authentication", {encryptionCipher: encryptionCipher});
      });
    }
    static _hasAccessToken() {
      return T$.FutureOfbool().value(hive.Hive.box(dart.dynamic, "supabase_authentication").containsKey("SUPABASE_PERSIST_SESSION_KEY"));
    }
    static _accessToken() {
      return T$.FutureOfStringN().value(T$.StringN().as(hive.Hive.box(dart.dynamic, "supabase_authentication").get("SUPABASE_PERSIST_SESSION_KEY")));
    }
    static _removePersistedSession() {
      return hive.Hive.box(dart.dynamic, "supabase_authentication").delete("SUPABASE_PERSIST_SESSION_KEY");
    }
    static _persistSession(persistSessionString) {
      return hive.Hive.box(dart.dynamic, "supabase_authentication").put("SUPABASE_PERSIST_SESSION_KEY", persistSessionString);
    }
  };
  (local_storage.HiveLocalStorage.new = function() {
    local_storage.HiveLocalStorage.__proto__.new.call(this, {initialize: C[30] || CT.C30, hasAccessToken: C[31] || CT.C31, accessToken: C[32] || CT.C32, removePersistedSession: C[33] || CT.C33, persistSession: C[34] || CT.C34});
    ;
  }).prototype = local_storage.HiveLocalStorage.prototype;
  dart.addTypeTests(local_storage.HiveLocalStorage);
  dart.addTypeCaches(local_storage.HiveLocalStorage);
  dart.setStaticMethodSignature(local_storage.HiveLocalStorage, () => ['_initialize', '_hasAccessToken', '_accessToken', '_removePersistedSession', '_persistSession']);
  dart.setLibraryUri(local_storage.HiveLocalStorage, I[16]);
  dart.setStaticFieldSignature(local_storage.HiveLocalStorage, () => ['encryptionKey']);
  dart.defineLazy(local_storage.HiveLocalStorage, {
    /*local_storage.HiveLocalStorage.encryptionKey*/get encryptionKey() {
      return null;
    },
    set encryptionKey(value) {}
  }, false);
  gotrue_async_storage.GotrueAsyncStorage = class GotrueAsyncStorage extends core.Object {};
  (gotrue_async_storage.GotrueAsyncStorage.new = function() {
    ;
  }).prototype = gotrue_async_storage.GotrueAsyncStorage.prototype;
  dart.addTypeTests(gotrue_async_storage.GotrueAsyncStorage);
  dart.addTypeCaches(gotrue_async_storage.GotrueAsyncStorage);
  dart.setLibraryUri(gotrue_async_storage.GotrueAsyncStorage, I[17]);
  local_storage.SharedPreferencesGotrueAsyncStorage = class SharedPreferencesGotrueAsyncStorage extends gotrue_async_storage.GotrueAsyncStorage {
    static ['_#new#tearOff']() {
      return new local_storage.SharedPreferencesGotrueAsyncStorage.new();
    }
    get [S$._prefs]() {
      let t4;
      t4 = this[S$.__SharedPreferencesGotrueAsyncStorage__prefs];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_prefs")) : t4;
    }
    set [S$._prefs](_prefs$35param) {
      if (this[S$.__SharedPreferencesGotrueAsyncStorage__prefs] == null)
        this[S$.__SharedPreferencesGotrueAsyncStorage__prefs] = _prefs$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_prefs"));
    }
    [S$._initialize$1]() {
      return async.async(dart.void, (function* _initialize() {
        binding.WidgetsFlutterBinding.ensureInitialized();
        this[S$._prefs] = (yield shared_preferences.SharedPreferences.getInstance());
        this[S$._initializationCompleter].complete();
      }).bind(this));
    }
    getItem(opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      return async.async(T$.StringN(), (function* getItem() {
        yield this[S$._initializationCompleter].future;
        return this[S$._prefs].getString(key);
      }).bind(this));
    }
    removeItem(opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      return async.async(dart.void, (function* removeItem() {
        yield this[S$._initializationCompleter].future;
        yield this[S$._prefs].remove(key);
      }).bind(this));
    }
    setItem(opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let value = opts$ && 'value' in opts$ ? opts$.value : null;
      return async.async(dart.void, (function* setItem() {
        yield this[S$._initializationCompleter].future;
        yield this[S$._prefs].setString(key, value);
      }).bind(this));
    }
  };
  (local_storage.SharedPreferencesGotrueAsyncStorage.new = function() {
    this[S$._initializationCompleter] = T$.CompleterOfvoid().new();
    this[S$.__SharedPreferencesGotrueAsyncStorage__prefs] = null;
    local_storage.SharedPreferencesGotrueAsyncStorage.__proto__.new.call(this);
    this[S$._initialize$1]();
  }).prototype = local_storage.SharedPreferencesGotrueAsyncStorage.prototype;
  dart.addTypeTests(local_storage.SharedPreferencesGotrueAsyncStorage);
  dart.addTypeCaches(local_storage.SharedPreferencesGotrueAsyncStorage);
  dart.setMethodSignature(local_storage.SharedPreferencesGotrueAsyncStorage, () => ({
    __proto__: dart.getMethods(local_storage.SharedPreferencesGotrueAsyncStorage.__proto__),
    [S$._initialize$1]: dart.fnType(async.Future$(dart.void), []),
    getItem: dart.fnType(async.Future$(dart.nullable(core.String)), [], {}, {key: core.String}),
    removeItem: dart.fnType(async.Future$(dart.void), [], {}, {key: core.String}),
    setItem: dart.fnType(async.Future$(dart.void), [], {}, {key: core.String, value: core.String})
  }));
  dart.setGetterSignature(local_storage.SharedPreferencesGotrueAsyncStorage, () => ({
    __proto__: dart.getGetters(local_storage.SharedPreferencesGotrueAsyncStorage.__proto__),
    [S$._prefs]: shared_preferences.SharedPreferences
  }));
  dart.setSetterSignature(local_storage.SharedPreferencesGotrueAsyncStorage, () => ({
    __proto__: dart.getSetters(local_storage.SharedPreferencesGotrueAsyncStorage.__proto__),
    [S$._prefs]: shared_preferences.SharedPreferences
  }));
  dart.setLibraryUri(local_storage.SharedPreferencesGotrueAsyncStorage, I[16]);
  dart.setFieldSignature(local_storage.SharedPreferencesGotrueAsyncStorage, () => ({
    __proto__: dart.getFields(local_storage.SharedPreferencesGotrueAsyncStorage.__proto__),
    [S$._initializationCompleter]: dart.finalFieldType(async.Completer$(dart.void)),
    [S$.__SharedPreferencesGotrueAsyncStorage__prefs]: dart.fieldType(dart.nullable(shared_preferences.SharedPreferences))
  }));
  dart.defineLazy(local_storage, {
    /*local_storage._hiveBoxName*/get _hiveBoxName() {
      return "supabase_authentication";
    },
    /*local_storage.supabasePersistSessionKey*/get supabasePersistSessionKey() {
      return "SUPABASE_PERSIST_SESSION_KEY";
    }
  }, false);
  supabase$.Supabase = class Supabase extends core.Object {
    static get instance() {
      if (!supabase$.Supabase._instance[S$._initialized]) dart.assertFailed("You must initialize the supabase instance before calling Supabase.instance", I[18], 32, 7, "_instance._initialized");
      return supabase$.Supabase._instance;
    }
    static initialize(opts$) {
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      let anonKey = opts$ && 'anonKey' in opts$ ? opts$.anonKey : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let authCallbackUrlHostname = opts$ && 'authCallbackUrlHostname' in opts$ ? opts$.authCallbackUrlHostname : null;
      let localStorage = opts$ && 'localStorage' in opts$ ? opts$.localStorage : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let storageRetryAttempts = opts$ && 'storageRetryAttempts' in opts$ ? opts$.storageRetryAttempts : 0;
      let realtimeClientOptions = opts$ && 'realtimeClientOptions' in opts$ ? opts$.realtimeClientOptions : C[35] || CT.C35;
      let authFlowType = opts$ && 'authFlowType' in opts$ ? opts$.authFlowType : C[36] || CT.C36;
      let pkceAsyncStorage = opts$ && 'pkceAsyncStorage' in opts$ ? opts$.pkceAsyncStorage : null;
      let debug = opts$ && 'debug' in opts$ ? opts$.debug : null;
      return async.async(supabase$.Supabase, function* initialize() {
        let t4, t4$, t4$0;
        if (!!supabase$.Supabase._instance[S$._initialized]) dart.assertFailed("This instance is already initialized", I[18], 84, 7, "!_instance._initialized");
        supabase$.Supabase._instance[S$._init](url, anonKey, {httpClient: httpClient, customHeaders: headers, schema: schema, storageRetryAttempts: storageRetryAttempts, realtimeClientOptions: realtimeClientOptions, gotrueAsyncStorage: (t4 = pkceAsyncStorage, t4 == null ? new local_storage.SharedPreferencesGotrueAsyncStorage.new() : t4), authFlowType: authFlowType});
        supabase$.Supabase._instance[S$._debugEnable] = (t4$ = debug, t4$ == null ? true : t4$);
        supabase$.Supabase._instance.log("***** Supabase init completed " + dart.str(supabase$.Supabase._instance));
        yield supabase_auth.SupabaseAuth.initialize({localStorage: (t4$0 = localStorage, t4$0 == null ? C[37] || CT.C37 : t4$0), authCallbackUrlHostname: authCallbackUrlHostname, authFlowType: authFlowType});
        return supabase$.Supabase._instance;
      });
    }
    static ['_#_#tearOff']() {
      return new supabase$.Supabase.__();
    }
    get client() {
      let t4;
      t4 = this[S$.__Supabase_client];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("client")) : t4;
    }
    set client(client$35param) {
      this[S$.__Supabase_client] = client$35param;
    }
    dispose() {
      this.client.dispose();
      supabase_auth.SupabaseAuth.instance.dispose();
      this[S$._initialized] = false;
    }
    [S$._init](supabaseUrl, supabaseAnonKey, opts$) {
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let customHeaders = opts$ && 'customHeaders' in opts$ ? opts$.customHeaders : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let storageRetryAttempts = opts$ && 'storageRetryAttempts' in opts$ ? opts$.storageRetryAttempts : null;
      let realtimeClientOptions = opts$ && 'realtimeClientOptions' in opts$ ? opts$.realtimeClientOptions : null;
      let gotrueAsyncStorage = opts$ && 'gotrueAsyncStorage' in opts$ ? opts$.gotrueAsyncStorage : null;
      let authFlowType = opts$ && 'authFlowType' in opts$ ? opts$.authFlowType : null;
      let headers = (() => {
        let t4 = T$.LinkedHashMapOfString$String().of(constants.Constants.defaultHeaders);
        if (customHeaders != null) t4[S$.$addAll](customHeaders);
        return t4;
      })();
      this.client = new supabase_client$.SupabaseClient.new(supabaseUrl, supabaseAnonKey, {httpClient: httpClient, headers: headers, schema: schema, storageRetryAttempts: storageRetryAttempts, realtimeClientOptions: realtimeClientOptions, gotrueAsyncStorage: gotrueAsyncStorage, authFlowType: authFlowType});
      this[S$._initialized] = true;
    }
    log(msg, stackTrace = null) {
      if (this[S$._debugEnable]) {
        print.debugPrint(msg);
        if (stackTrace != null) {
          assertions.debugPrintStack({stackTrace: stackTrace});
        }
      }
    }
  };
  (supabase$.Supabase.__ = function() {
    this[S$._initialized] = false;
    this[S$.__Supabase_client] = null;
    this[S$._debugEnable] = false;
    ;
  }).prototype = supabase$.Supabase.prototype;
  dart.addTypeTests(supabase$.Supabase);
  dart.addTypeCaches(supabase$.Supabase);
  dart.setMethodSignature(supabase$.Supabase, () => ({
    __proto__: dart.getMethods(supabase$.Supabase.__proto__),
    dispose: dart.fnType(dart.void, []),
    [S$._init]: dart.fnType(dart.void, [core.String, core.String], {customHeaders: dart.nullable(core.Map$(core.String, core.String)), httpClient: dart.nullable(client$.Client), schema: dart.nullable(core.String)}, {authFlowType: oauth_flow_type.AuthFlowType, gotrueAsyncStorage: gotrue_async_storage.GotrueAsyncStorage, realtimeClientOptions: realtime_client_options.RealtimeClientOptions, storageRetryAttempts: core.int}),
    log: dart.fnType(dart.void, [core.String], [dart.nullable(core.StackTrace)])
  }));
  dart.setStaticMethodSignature(supabase$.Supabase, () => ['initialize']);
  dart.setGetterSignature(supabase$.Supabase, () => ({
    __proto__: dart.getGetters(supabase$.Supabase.__proto__),
    client: supabase_client$.SupabaseClient
  }));
  dart.setSetterSignature(supabase$.Supabase, () => ({
    __proto__: dart.getSetters(supabase$.Supabase.__proto__),
    client: supabase_client$.SupabaseClient
  }));
  dart.setStaticGetterSignature(supabase$.Supabase, () => ['instance']);
  dart.setLibraryUri(supabase$.Supabase, I[19]);
  dart.setFieldSignature(supabase$.Supabase, () => ({
    __proto__: dart.getFields(supabase$.Supabase.__proto__),
    [S$._initialized]: dart.fieldType(core.bool),
    [S$.__Supabase_client]: dart.fieldType(dart.nullable(supabase_client$.SupabaseClient)),
    [S$._debugEnable]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(supabase$.Supabase, () => ['_instance']);
  dart.defineLazy(supabase$.Supabase, {
    /*supabase$.Supabase._instance*/get _instance() {
      return new supabase$.Supabase.__();
    }
  }, false);
  const Object_WidgetsBindingObserver$36 = class Object_WidgetsBindingObserver extends core.Object {};
  (Object_WidgetsBindingObserver$36.new = function() {
  }).prototype = Object_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(Object_WidgetsBindingObserver$36, binding.WidgetsBindingObserver);
  supabase_auth.SupabaseAuth = class SupabaseAuth extends Object_WidgetsBindingObserver$36 {
    static ['_#_#tearOff']() {
      return new supabase_auth.SupabaseAuth.__();
    }
    static get _widgetsBindingInstance() {
      return binding.WidgetsBinding.instance;
    }
    get [S$._localStorage]() {
      let t5;
      t5 = this[S$.__SupabaseAuth__localStorage];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_localStorage")) : t5;
    }
    set [S$._localStorage](_localStorage$35param) {
      this[S$.__SupabaseAuth__localStorage] = _localStorage$35param;
    }
    get [S$._authFlowType]() {
      let t5;
      t5 = this[S$.__SupabaseAuth__authFlowType];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_authFlowType")) : t5;
    }
    set [S$._authFlowType](_authFlowType$35param) {
      this[S$.__SupabaseAuth__authFlowType] = _authFlowType$35param;
    }
    get localStorage() {
      return this[S$._localStorage];
    }
    get hasAccessToken() {
      return this[S$._localStorage].hasAccessToken();
    }
    get accessToken() {
      return this[S$._localStorage].accessToken();
    }
    get initialSession() {
      return this[S$._initialSessionCompleter].future;
    }
    get [S$._initialSessionCompleter]() {
      let t5;
      t5 = this[S$.__SupabaseAuth__initialSessionCompleter];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_initialSessionCompleter")) : t5;
    }
    set [S$._initialSessionCompleter](_initialSessionCompleter$35param) {
      this[S$.__SupabaseAuth__initialSessionCompleter] = _initialSessionCompleter$35param;
    }
    static get instance() {
      if (!supabase_auth.SupabaseAuth._instance[S$._initialized$1]) dart.assertFailed("You must initialize the supabase instance before calling Supabase.instance", I[20], 64, 7, "_instance._initialized");
      return supabase_auth.SupabaseAuth._instance;
    }
    static initialize(opts$) {
      let localStorage = opts$ && 'localStorage' in opts$ ? opts$.localStorage : C[37] || CT.C37;
      let authCallbackUrlHostname = opts$ && 'authCallbackUrlHostname' in opts$ ? opts$.authCallbackUrlHostname : null;
      let authFlowType = opts$ && 'authFlowType' in opts$ ? opts$.authFlowType : null;
      return async.async(supabase_auth.SupabaseAuth, function* initialize() {
        let t5, t8;
        try {
          supabase_auth.SupabaseAuth._instance[S$._initialized$1] = true;
          supabase_auth.SupabaseAuth._instance[S$._localStorage] = localStorage;
          supabase_auth.SupabaseAuth._instance[S$._authCallbackUrlHostname] = authCallbackUrlHostname;
          supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter] = T$.CompleterOfSessionN().new();
          supabase_auth.SupabaseAuth._instance[S$._authFlowType] = authFlowType;
          supabase_auth.SupabaseAuth._instance.initialSession.catchError(dart.fn((e, d) => null, T$.dynamicAnddynamicToNull()));
          supabase_auth.SupabaseAuth._instance[S$._authSubscription] = (t5 = supabase$.Supabase.instance.client.auth.onAuthStateChange.listen(dart.fn(data => {
            supabase_auth.SupabaseAuth._instance[S$._onAuthStateChange](data.event, data.session);
          }, T$.AuthStateTovoid())), (() => {
            t5.onError(dart.fn((error, stackTrace) => {
              supabase$.Supabase.instance.log(dart.toString(error), T$.StackTraceN().as(stackTrace));
            }, T$.dynamicAnddynamicToNull()));
            return t5;
          })());
          yield supabase_auth.SupabaseAuth._instance[S$._localStorage].initialize();
          let hasPersistedSession = (yield supabase_auth.SupabaseAuth._instance[S$._localStorage].hasAccessToken());
          if (hasPersistedSession) {
            let persistedSession = (yield supabase_auth.SupabaseAuth._instance[S$._localStorage].accessToken());
            if (persistedSession != null) {
              try {
                let response = (yield supabase$.Supabase.instance.client.auth.recoverSession(persistedSession));
                if (!supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].isCompleted) {
                  supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].complete(response.session);
                }
              } catch (e) {
                let ex = dart.getThrown(e);
                let st = dart.stackTrace(e);
                if (auth_exception.AuthException.is(ex)) {
                  let error = ex;
                  let stackTrace = st;
                  supabase$.Supabase.instance.log(error.message, stackTrace);
                  if (!supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].isCompleted) {
                    supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].completeError(error, stackTrace);
                  }
                } else if (core.Object.is(ex)) {
                  let error = ex;
                  let stackTrace = st;
                  supabase$.Supabase.instance.log(error[S$.$toString](), stackTrace);
                  if (!supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].isCompleted) {
                    supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].completeError(error, stackTrace);
                  }
                } else
                  throw e;
              }
            }
          }
          t8 = supabase_auth.SupabaseAuth._widgetsBindingInstance;
          t8 == null ? null : t8.addObserver(supabase_auth.SupabaseAuth._instance);
          if (true || io.Platform.isAndroid || io.Platform.isIOS || io.Platform.isMacOS || io.Platform.isWindows || io.Platform.environment[S$.$containsKey]("FLUTTER_TEST")) {
            yield supabase_auth.SupabaseAuth._instance[S$._startDeeplinkObserver]();
          }
          if (!supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].isCompleted) {
            supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].complete(null);
          }
          return supabase_auth.SupabaseAuth._instance;
        } catch (e$) {
          let error = dart.getThrown(e$);
          let stacktrace = dart.stackTrace(e$);
          if (core.Object.is(error)) {
            if (!supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].isCompleted) {
              supabase_auth.SupabaseAuth._instance[S$._initialSessionCompleter].completeError(error, stacktrace);
            }
            dart.rethrow(e$);
          } else
            throw e$;
        }
      });
    }
    dispose() {
      let t9, t9$;
      if (false && io.Platform.environment[S$.$containsKey]("FLUTTER_TEST")) {
        this[S$._initialDeeplinkIsHandled] = false;
      }
      t9 = this[S$._authSubscription];
      t9 == null ? null : t9.cancel();
      this[S$._stopDeeplinkObserver]();
      t9$ = supabase_auth.SupabaseAuth._widgetsBindingInstance;
      t9$ == null ? null : t9$.removeObserver(this);
    }
    didChangeAppLifecycleState(state) {
      switch (state) {
        case C[38] || CT.C38:
          {
            this[S$._recoverSupabaseSession]();
            break;
          }
        case C[39] || CT.C39:
          {
            break;
          }
        case C[40] || CT.C40:
          {
            break;
          }
        case C[41] || CT.C41:
          {
            break;
          }
      }
    }
    [S$._recoverSupabaseSession]() {
      return async.async(core.bool, function* _recoverSupabaseSession() {
        let exist = (yield supabase_auth.SupabaseAuth.instance.localStorage.hasAccessToken());
        if (!exist) {
          return false;
        }
        let jsonStr = (yield supabase_auth.SupabaseAuth.instance.localStorage.accessToken());
        if (jsonStr == null) {
          return false;
        }
        try {
          yield supabase$.Supabase.instance.client.auth.recoverSession(jsonStr);
          return true;
        } catch (e) {
          let error = dart.getThrown(e);
          if (core.Object.is(error)) {
            supabase_auth.SupabaseAuth.instance.localStorage.removePersistedSession();
            return false;
          } else
            throw e;
        }
      });
    }
    [S$._onAuthStateChange](event, session) {
      let t11, t10;
      supabase$.Supabase.instance.log("**** onAuthStateChange: " + dart.str(event));
      if (session != null) {
        supabase$.Supabase.instance.log(session.persistSessionString);
        t10 = this[S$._localStorage];
        t11 = session.persistSessionString;
        t10.persistSession(t11);
      } else if (event === constants$.AuthChangeEvent.signedOut) {
        this[S$._localStorage].removePersistedSession();
      }
    }
    [S$._isAuthCallbackDeeplink](uri) {
      if (this[S$._authCallbackUrlHostname] == null) {
        return uri.fragment[S$.$contains]("access_token") && this[S$._authFlowType] === oauth_flow_type.AuthFlowType.implicit || uri.queryParameters[S$.$containsKey]("code") && this[S$._authFlowType] === oauth_flow_type.AuthFlowType.pkce;
      } else {
        return this[S$._authCallbackUrlHostname] === uri.host;
      }
    }
    [S$._startDeeplinkObserver]() {
      return async.async(dart.void, (function* _startDeeplinkObserver() {
        supabase$.Supabase.instance.log("***** SupabaseDeepLinkingMixin startAuthObserver");
        this[S$._handleIncomingLinks]();
        yield this[S$._handleInitialUri]();
      }).bind(this));
    }
    [S$._stopDeeplinkObserver]() {
      let t10;
      supabase$.Supabase.instance.log("***** SupabaseDeepLinkingMixin stopAuthObserver");
      t10 = this[S$._deeplinkSubscription];
      t10 == null ? null : t10.cancel();
    }
    [S$._handleIncomingLinks]() {
      ;
    }
    [S$._handleInitialUri]() {
      return async.async(dart.void, (function* _handleInitialUri() {
        let t13;
        if (this[S$._initialDeeplinkIsHandled]) return;
        this[S$._initialDeeplinkIsHandled] = true;
        try {
          let uri = (yield this[S$._appLinks].getInitialAppLink());
          if (uri != null) {
            yield this[S$._handleDeeplink](uri);
          }
        } catch (e) {
          let ex = dart.getThrown(e);
          let st = dart.stackTrace(e);
          if (message_codec.PlatformException.is(ex)) {
            let err = ex;
            let stackTrace = st;
            this[S$._onErrorReceivingDeeplink]((t13 = err.message, t13 == null ? err.toString() : t13), stackTrace);
          } else if (core.FormatException.is(ex)) {
            let err = ex;
            let stackTrace = st;
            this[S$._onErrorReceivingDeeplink](err.message, stackTrace);
          } else if (core.Object.is(ex)) {
            let err = ex;
            let stackTrace = st;
            this[S$._onErrorReceivingDeeplink](err[S$.$toString](), stackTrace);
          } else
            throw e;
        }
      }).bind(this));
    }
    [S$._handleDeeplink](uri) {
      return async.async(dart.void, function* _handleDeeplink() {
        if (!supabase_auth.SupabaseAuth._instance[S$._isAuthCallbackDeeplink](uri)) return;
        supabase$.Supabase.instance.log("***** SupabaseAuthState handleDeeplink " + dart.str(uri));
        supabase$.Supabase.instance.log("onReceivedAuthDeeplink uri: " + dart.str(uri));
        try {
          yield supabase$.Supabase.instance.client.auth.getSessionFromUrl(uri);
        } catch (e) {
          let ex = dart.getThrown(e);
          let st = dart.stackTrace(e);
          if (auth_exception.AuthException.is(ex)) {
            let error = ex;
            let stackTrace = st;
            supabase$.Supabase.instance.log(error.toString(), stackTrace);
          } else if (core.Object.is(ex)) {
            let error = ex;
            let stackTrace = st;
            supabase$.Supabase.instance.log(error[S$.$toString](), stackTrace);
          } else
            throw e;
        }
      });
    }
    [S$._onErrorReceivingDeeplink](message, stackTrace) {
      supabase$.Supabase.instance.log("onErrorReceivingDeepLink message: " + message, stackTrace);
    }
  };
  (supabase_auth.SupabaseAuth.__ = function() {
    this[S$._initialized$1] = false;
    this[S$.__SupabaseAuth__localStorage] = null;
    this[S$.__SupabaseAuth__authFlowType] = null;
    this[S$.__SupabaseAuth__initialSessionCompleter] = null;
    this[S$._initialDeeplinkIsHandled] = false;
    this[S$._authCallbackUrlHostname] = null;
    this[S$._authSubscription] = null;
    this[S$._deeplinkSubscription] = null;
    this[S$._appLinks] = new app_links$.AppLinks.new();
    ;
  }).prototype = supabase_auth.SupabaseAuth.prototype;
  dart.addTypeTests(supabase_auth.SupabaseAuth);
  dart.addTypeCaches(supabase_auth.SupabaseAuth);
  dart.setMethodSignature(supabase_auth.SupabaseAuth, () => ({
    __proto__: dart.getMethods(supabase_auth.SupabaseAuth.__proto__),
    dispose: dart.fnType(dart.void, []),
    [S$._recoverSupabaseSession]: dart.fnType(async.Future$(core.bool), []),
    [S$._onAuthStateChange]: dart.fnType(dart.void, [constants$.AuthChangeEvent, dart.nullable(session$.Session)]),
    [S$._isAuthCallbackDeeplink]: dart.fnType(core.bool, [core.Uri]),
    [S$._startDeeplinkObserver]: dart.fnType(async.Future$(dart.void), []),
    [S$._stopDeeplinkObserver]: dart.fnType(dart.void, []),
    [S$._handleIncomingLinks]: dart.fnType(dart.void, []),
    [S$._handleInitialUri]: dart.fnType(async.Future$(dart.void), []),
    [S$._handleDeeplink]: dart.fnType(async.Future$(dart.void), [core.Uri]),
    [S$._onErrorReceivingDeeplink]: dart.fnType(dart.void, [core.String, core.StackTrace])
  }));
  dart.setStaticMethodSignature(supabase_auth.SupabaseAuth, () => ['initialize']);
  dart.setGetterSignature(supabase_auth.SupabaseAuth, () => ({
    __proto__: dart.getGetters(supabase_auth.SupabaseAuth.__proto__),
    [S$._localStorage]: local_storage.LocalStorage,
    [S$._authFlowType]: oauth_flow_type.AuthFlowType,
    localStorage: local_storage.LocalStorage,
    hasAccessToken: async.Future$(core.bool),
    accessToken: async.Future$(dart.nullable(core.String)),
    initialSession: async.Future$(dart.nullable(session$.Session)),
    [S$._initialSessionCompleter]: async.Completer$(dart.nullable(session$.Session))
  }));
  dart.setSetterSignature(supabase_auth.SupabaseAuth, () => ({
    __proto__: dart.getSetters(supabase_auth.SupabaseAuth.__proto__),
    [S$._localStorage]: local_storage.LocalStorage,
    [S$._authFlowType]: oauth_flow_type.AuthFlowType,
    [S$._initialSessionCompleter]: async.Completer$(dart.nullable(session$.Session))
  }));
  dart.setStaticGetterSignature(supabase_auth.SupabaseAuth, () => ['_widgetsBindingInstance', 'instance']);
  dart.setLibraryUri(supabase_auth.SupabaseAuth, I[21]);
  dart.setFieldSignature(supabase_auth.SupabaseAuth, () => ({
    __proto__: dart.getFields(supabase_auth.SupabaseAuth.__proto__),
    [S$._initialized$1]: dart.fieldType(core.bool),
    [S$.__SupabaseAuth__localStorage]: dart.fieldType(dart.nullable(local_storage.LocalStorage)),
    [S$.__SupabaseAuth__authFlowType]: dart.fieldType(dart.nullable(oauth_flow_type.AuthFlowType)),
    [S$.__SupabaseAuth__initialSessionCompleter]: dart.fieldType(dart.nullable(async.Completer$(dart.nullable(session$.Session)))),
    [S$._initialDeeplinkIsHandled]: dart.fieldType(core.bool),
    [S$._authCallbackUrlHostname]: dart.fieldType(dart.nullable(core.String)),
    [S$._authSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(auth_state.AuthState))),
    [S$._deeplinkSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(dart.nullable(core.Uri)))),
    [S$._appLinks]: dart.finalFieldType(app_links$.AppLinks)
  }));
  dart.setStaticFieldSignature(supabase_auth.SupabaseAuth, () => ['_instance']);
  dart.defineLazy(supabase_auth.SupabaseAuth, {
    /*supabase_auth.SupabaseAuth._instance*/get _instance() {
      return new supabase_auth.SupabaseAuth.__();
    }
  }, false);
  supabase_auth._OAuthSignInWebView = class _OAuthSignInWebView extends framework.StatefulWidget {
    get oAuthUri() {
      return this[S$.oAuthUri];
    }
    set oAuthUri(value) {
      super.oAuthUri = value;
    }
    get redirectTo() {
      return this[S$.redirectTo];
    }
    set redirectTo(value) {
      super.redirectTo = value;
    }
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let oAuthUri = opts$ && 'oAuthUri' in opts$ ? opts$.oAuthUri : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      return new supabase_auth._OAuthSignInWebView.new({key: key, oAuthUri: oAuthUri, redirectTo: redirectTo});
    }
    createState() {
      return new supabase_auth._OAuthSignInWebViewState.new();
    }
  };
  (supabase_auth._OAuthSignInWebView.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let oAuthUri = opts$ && 'oAuthUri' in opts$ ? opts$.oAuthUri : null;
    let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
    this[S$.oAuthUri] = oAuthUri;
    this[S$.redirectTo] = redirectTo;
    supabase_auth._OAuthSignInWebView.__proto__.new.call(this, {key: key});
    ;
  }).prototype = supabase_auth._OAuthSignInWebView.prototype;
  dart.addTypeTests(supabase_auth._OAuthSignInWebView);
  dart.addTypeCaches(supabase_auth._OAuthSignInWebView);
  dart.setMethodSignature(supabase_auth._OAuthSignInWebView, () => ({
    __proto__: dart.getMethods(supabase_auth._OAuthSignInWebView.__proto__),
    createState: dart.fnType(framework.State$(supabase_auth._OAuthSignInWebView), [])
  }));
  dart.setLibraryUri(supabase_auth._OAuthSignInWebView, I[21]);
  dart.setFieldSignature(supabase_auth._OAuthSignInWebView, () => ({
    __proto__: dart.getFields(supabase_auth._OAuthSignInWebView.__proto__),
    oAuthUri: dart.finalFieldType(core.Uri),
    redirectTo: dart.finalFieldType(dart.nullable(core.String))
  }));
  supabase_auth._OAuthSignInWebViewState = class _OAuthSignInWebViewState extends framework.State$(supabase_auth._OAuthSignInWebView) {
    get [S$._controller$1]() {
      let t16;
      t16 = this[S$.___OAuthSignInWebViewState__controller];
      return t16 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t16;
    }
    set [S$._controller$1](_controller$35param) {
      if (this[S$.___OAuthSignInWebViewState__controller] == null)
        this[S$.___OAuthSignInWebViewState__controller] = _controller$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_controller"));
    }
    [S$._handleWebResourceError](error) {
      if (navigator.Navigator.canPop(this.context)) {
        navigator.Navigator.of(this.context).pop(core.bool, false);
      }
    }
    [S$._handleNavigationRequest](request) {
      return async.async(navigation_decision.NavigationDecision, (function* _handleNavigationRequest() {
        if (this.widget.redirectTo != null && request.url[S$.$startsWith](dart.nullCheck(this.widget.redirectTo))) {
          yield url_launcher_string$.launchUrlString(request.url);
        }
        return navigation_decision.NavigationDecision.navigate;
      }).bind(this));
    }
    initState() {
      let t16;
      super.initState();
      this[S$._controller$1] = (t16 = new webview_controller.WebViewController.new(), (() => {
        t16.setUserAgent("Supabase OAuth");
        t16.loadRequest(this.widget.oAuthUri);
        t16.setJavaScriptMode(javascript_mode.JavaScriptMode.unrestricted);
        t16.setNavigationDelegate(new navigation_delegate.NavigationDelegate.new({onPageStarted: dart.fn(_ => this.setState(dart.fn(() => this.isLoading = true, T$.VoidTovoid())), T$.StringTovoid()), onPageFinished: dart.fn(_ => this.setState(dart.fn(() => this.isLoading = false, T$.VoidTovoid())), T$.StringTovoid()), onWebResourceError: dart.bind(this, S$._handleWebResourceError), onNavigationRequest: dart.bind(this, S$._handleNavigationRequest)}));
        return t16;
      })());
    }
    build(context) {
      return new material.Material.new({child: new safe_area.SafeArea.new({child: new basic.Stack.new({alignment: alignment.Alignment.topCenter, children: (() => {
              let t16 = T$.JSArrayOfWidget().of([new webview_widget.WebViewWidget.new({controller: this[S$._controller$1]})]);
              if (this.isLoading) t16.push(C[42] || CT.C42);
              return t16;
            })()})})});
    }
    static ['_#new#tearOff']() {
      return new supabase_auth._OAuthSignInWebViewState.new();
    }
  };
  (supabase_auth._OAuthSignInWebViewState.new = function() {
    this.isLoading = true;
    this[S$.___OAuthSignInWebViewState__controller] = null;
    supabase_auth._OAuthSignInWebViewState.__proto__.new.call(this);
    ;
  }).prototype = supabase_auth._OAuthSignInWebViewState.prototype;
  dart.addTypeTests(supabase_auth._OAuthSignInWebViewState);
  dart.addTypeCaches(supabase_auth._OAuthSignInWebViewState);
  dart.setMethodSignature(supabase_auth._OAuthSignInWebViewState, () => ({
    __proto__: dart.getMethods(supabase_auth._OAuthSignInWebViewState.__proto__),
    [S$._handleWebResourceError]: dart.fnType(dart.void, [web_resource_error.WebResourceError]),
    [S$._handleNavigationRequest]: dart.fnType(async.FutureOr$(navigation_decision.NavigationDecision), [navigation_request.NavigationRequest]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(supabase_auth._OAuthSignInWebViewState, () => ({
    __proto__: dart.getGetters(supabase_auth._OAuthSignInWebViewState.__proto__),
    [S$._controller$1]: webview_controller.WebViewController
  }));
  dart.setSetterSignature(supabase_auth._OAuthSignInWebViewState, () => ({
    __proto__: dart.getSetters(supabase_auth._OAuthSignInWebViewState.__proto__),
    [S$._controller$1]: webview_controller.WebViewController
  }));
  dart.setLibraryUri(supabase_auth._OAuthSignInWebViewState, I[21]);
  dart.setFieldSignature(supabase_auth._OAuthSignInWebViewState, () => ({
    __proto__: dart.getFields(supabase_auth._OAuthSignInWebViewState.__proto__),
    isLoading: dart.fieldType(core.bool),
    [S$.___OAuthSignInWebViewState__controller]: dart.fieldType(dart.nullable(webview_controller.WebViewController))
  }));
  supabase_auth['GoTrueClientSignInProvider|signInWithOAuth'] = function GoTrueClientSignInProvider$124signInWithOAuth($this, provider, opts$) {
    let context = opts$ && 'context' in opts$ ? opts$.context : null;
    let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
    let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
    let authScreenLaunchMode = opts$ && 'authScreenLaunchMode' in opts$ ? opts$.authScreenLaunchMode : C[45] || CT.C45;
    let queryParams = opts$ && 'queryParams' in opts$ ? opts$.queryParams : null;
    return async.async(core.bool, function* GoTrueClientSignInProvider$124signInWithOAuth() {
      let res = (yield $this.getOAuthSignInUrl({provider: provider, redirectTo: redirectTo, scopes: scopes, queryParams: queryParams}));
      let uri = core.Uri.parse(dart.nullCheck(res.url));
      let willOpenWebview = (authScreenLaunchMode === types$0.LaunchMode.inAppWebView || authScreenLaunchMode === types$0.LaunchMode.platformDefault) && context != null && false && io.Platform.isIOS;
      if (willOpenWebview) {
        navigator.Navigator.of(context).push(dart.dynamic, new pages.PageRouteBuilder.new({pageBuilder: dart.fn((context, animation, secondaryAnimation) => new supabase_auth._OAuthSignInWebView.new({oAuthUri: uri, redirectTo: redirectTo}), T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleTo_OAuthSignInWebView())}));
        return true;
      } else {
        let launchMode = authScreenLaunchMode;
        let isAndroid = false && io.Platform.isAndroid;
        if (provider === provider$.Provider.google && isAndroid) {
          launchMode = types$0.LaunchMode.externalApplication;
        }
        let result = (yield url_launcher_uri.launchUrl(uri, {mode: launchMode, webOnlyWindowName: "_self"}));
        return result;
      }
    });
  };
  supabase_auth['GoTrueClientSignInProvider|get#signInWithOAuth'] = function GoTrueClientSignInProvider$124get$35signInWithOAuth($this) {
    return dart.fn((provider, opts$) => {
      let context = opts$ && 'context' in opts$ ? opts$.context : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let authScreenLaunchMode = opts$ && 'authScreenLaunchMode' in opts$ ? opts$.authScreenLaunchMode : C[45] || CT.C45;
      let queryParams = opts$ && 'queryParams' in opts$ ? opts$.queryParams : null;
      return supabase_auth['GoTrueClientSignInProvider|signInWithOAuth']($this, provider, {context: context, redirectTo: redirectTo, scopes: scopes, authScreenLaunchMode: authScreenLaunchMode, queryParams: queryParams});
    }, T$.Provider__ToFutureOfbool());
  };
  supabase_auth['GoTrueClientSignInProvider|signInWithApple'] = function GoTrueClientSignInProvider$124signInWithApple($this) {
    return async.async(auth_response.AuthResponse, function* GoTrueClientSignInProvider$124signInWithApple() {
      if (!(false && (io.Platform.isIOS || io.Platform.isMacOS))) dart.assertFailed("Please use signInWithOAuth for non-iOS platforms", I[20], 385, 12, "!kIsWeb && (Platform.isIOS || Platform.isMacOS)");
      let rawNonce = supabase_auth['GoTrueClientSignInProvider|_generateRandomString']($this);
      let hashedNonce = sha256.sha256.convert(convert.utf8.encode(rawNonce)).toString();
      let credential = (yield sign_in_with_apple$.SignInWithApple.getAppleIDCredential({scopes: T$.JSArrayOfAppleIDAuthorizationScopes().of([authorization_request.AppleIDAuthorizationScopes.email, authorization_request.AppleIDAuthorizationScopes.fullName]), nonce: hashedNonce}));
      let idToken = credential.identityToken;
      if (idToken == null) {
        dart.throw(new auth_exception.AuthException.new("Could not find ID Token from generated credential."));
      }
      return $this.signInWithIdToken({provider: provider$.Provider.apple, idToken: idToken, nonce: rawNonce});
    });
  };
  supabase_auth['GoTrueClientSignInProvider|get#signInWithApple'] = function GoTrueClientSignInProvider$124get$35signInWithApple($this) {
    return dart.fn(() => supabase_auth['GoTrueClientSignInProvider|signInWithApple']($this), T$.VoidToFutureOfAuthResponse());
  };
  supabase_auth['GoTrueClientSignInProvider|_generateRandomString'] = function GoTrueClientSignInProvider$124_generateRandomString($this) {
    let random = math.Random.secure();
    return convert.base64Url.encode(T$.ListOfint().generate(16, dart.fn(_ => random.nextInt(256), T$.intToint())));
  };
  supabase_auth['GoTrueClientSignInProvider|get#_generateRandomString'] = function GoTrueClientSignInProvider$124get$35_generateRandomString($this) {
    return dart.fn(() => supabase_auth['GoTrueClientSignInProvider|_generateRandomString']($this), T$.VoidToString());
  };
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[3]);
  app_links_method_channel.AppLinksMethodChannel = class AppLinksMethodChannel extends app_links_platform_interface.AppLinksPlatform {
    getInitialAppLink() {
      return async.async(T$.UriN(), (function* getInitialAppLink() {
        let result = (yield this.getInitialAppLinkString());
        return result != null ? core.Uri.tryParse(result) : null;
      }).bind(this));
    }
    getInitialAppLinkString() {
      return async.async(T$.StringN(), function* getInitialAppLinkString() {
        let link = (yield app_links_method_channel.AppLinksMethodChannel._method.invokeMethod(T$.StringN(), "getInitialAppLink"));
        return link != null && link[S$.$isNotEmpty] ? link : null;
      });
    }
    getLatestAppLink() {
      return async.async(T$.UriN(), (function* getLatestAppLink() {
        let result = (yield this.getLatestAppLinkString());
        return result != null ? core.Uri.tryParse(result) : null;
      }).bind(this));
    }
    getLatestAppLinkString() {
      return async.async(T$.StringN(), function* getLatestAppLinkString() {
        let link = (yield app_links_method_channel.AppLinksMethodChannel._method.invokeMethod(T$.StringN(), "getLatestAppLink"));
        return link != null && link[S$.$isNotEmpty] ? link : null;
      });
    }
    get stringLinkStream() {
      return app_links_method_channel.AppLinksMethodChannel._event.receiveBroadcastStream().where(dart.fn(link => link != null && dart.dtest(dart.dload(link, 'isNotEmpty')), T$.dynamicTobool())).map(core.String, dart.fn(link => core.String.as(link), T$.dynamicToString()));
    }
    get uriLinkStream() {
      return this.stringLinkStream.transform(core.Uri, new (T$._StreamHandlerTransformerOfString$Uri()).new({handleData: dart.fn((uri, sink) => {
          sink.add(core.Uri.parse(uri));
        }, T$.StringAndEventSinkOfUriTovoid())}));
    }
    get allUriLinkStream() {
      return new (T$._AsyncStarImplOfUri()).new((function* allUriLinkStream(stream) {
        let initial = (yield this.getInitialAppLink());
        if (initial != null) {
          if (stream.add(initial)) return;
          yield;
        }
        if (stream.addStream(this.uriLinkStream)) return;
        yield;
      }).bind(this)).stream;
    }
    get allStringLinkStream() {
      return new (T$._AsyncStarImplOfString()).new((function* allStringLinkStream(stream) {
        let initial = (yield this.getInitialAppLinkString());
        if (initial != null) {
          if (stream.add(initial)) return;
          yield;
        }
        if (stream.addStream(this.stringLinkStream)) return;
        yield;
      }).bind(this)).stream;
    }
    static ['_#new#tearOff']() {
      return new app_links_method_channel.AppLinksMethodChannel.new();
    }
  };
  (app_links_method_channel.AppLinksMethodChannel.new = function() {
    app_links_method_channel.AppLinksMethodChannel.__proto__.new.call(this);
    ;
  }).prototype = app_links_method_channel.AppLinksMethodChannel.prototype;
  dart.addTypeTests(app_links_method_channel.AppLinksMethodChannel);
  dart.addTypeCaches(app_links_method_channel.AppLinksMethodChannel);
  dart.setLibraryUri(app_links_method_channel.AppLinksMethodChannel, I[22]);
  dart.setStaticFieldSignature(app_links_method_channel.AppLinksMethodChannel, () => ['_messagesChannel', '_eventsChannel', '_method', '_event', '_getInitialAppLinkMethod', '_getLatestAppLinkMethod']);
  dart.defineLazy(app_links_method_channel.AppLinksMethodChannel, {
    /*app_links_method_channel.AppLinksMethodChannel._messagesChannel*/get _messagesChannel() {
      return "com.llfbandit.app_links/messages";
    },
    /*app_links_method_channel.AppLinksMethodChannel._eventsChannel*/get _eventsChannel() {
      return "com.llfbandit.app_links/events";
    },
    /*app_links_method_channel.AppLinksMethodChannel._method*/get _method() {
      return C[46] || CT.C46;
    },
    /*app_links_method_channel.AppLinksMethodChannel._event*/get _event() {
      return C[49] || CT.C49;
    },
    /*app_links_method_channel.AppLinksMethodChannel._getInitialAppLinkMethod*/get _getInitialAppLinkMethod() {
      return "getInitialAppLink";
    },
    /*app_links_method_channel.AppLinksMethodChannel._getLatestAppLinkMethod*/get _getLatestAppLinkMethod() {
      return "getLatestAppLink";
    }
  }, false);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T$.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T$.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t23;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T$.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t23 = filter.allowList, t23 == null ? null : t23[S$.$toList]())])));
      });
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), function* getAll() {
        let t23;
        t23 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t23 == null ? new (T$.IdentityMapOfString$Object()).new() : t23;
      });
    }
    getAllWithPrefix(prefix, opts$) {
      let allowList = opts$ && 'allowList' in opts$ ? opts$.allowList : null;
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), function* getAllWithParameters() {
        let t23, t23$;
        let filter = parameters.filter;
        let allowListAsList = (t23 = filter.allowList, t23 == null ? null : t23[S$.$toList]());
        t23$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T$.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t23$ == null ? new (T$.IdentityMapOfString$Object()).new() : t23$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[23]);
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[50] || CT.C50;
    }
  }, false);
  authorization_credential.AuthorizationCredentialAppleID = class AuthorizationCredentialAppleID extends core.Object {
    get userIdentifier() {
      return this[S$.userIdentifier];
    }
    set userIdentifier(value) {
      super.userIdentifier = value;
    }
    get givenName() {
      return this[S$.givenName];
    }
    set givenName(value) {
      super.givenName = value;
    }
    get familyName() {
      return this[S$.familyName];
    }
    set familyName(value) {
      super.familyName = value;
    }
    get email() {
      return this[S$.email];
    }
    set email(value) {
      super.email = value;
    }
    get authorizationCode() {
      return this[S$.authorizationCode];
    }
    set authorizationCode(value) {
      super.authorizationCode = value;
    }
    get identityToken() {
      return this[S$.identityToken];
    }
    set identityToken(value) {
      super.identityToken = value;
    }
    get state() {
      return this[S$.state];
    }
    set state(value) {
      super.state = value;
    }
    static ['_#new#tearOff'](opts$) {
      let userIdentifier = opts$ && 'userIdentifier' in opts$ ? opts$.userIdentifier : null;
      let givenName = opts$ && 'givenName' in opts$ ? opts$.givenName : null;
      let familyName = opts$ && 'familyName' in opts$ ? opts$.familyName : null;
      let authorizationCode = opts$ && 'authorizationCode' in opts$ ? opts$.authorizationCode : null;
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let identityToken = opts$ && 'identityToken' in opts$ ? opts$.identityToken : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return new authorization_credential.AuthorizationCredentialAppleID.new({userIdentifier: userIdentifier, givenName: givenName, familyName: familyName, authorizationCode: authorizationCode, email: email, identityToken: identityToken, state: state});
    }
    toString() {
      return "AuthorizationAppleID(" + dart.str(this.userIdentifier) + ", " + dart.str(this.givenName) + ", " + dart.str(this.familyName) + ", " + dart.str(this.email) + ", " + dart.str(this.state) + ")";
    }
  };
  (authorization_credential.AuthorizationCredentialAppleID.new = function(opts$) {
    let userIdentifier = opts$ && 'userIdentifier' in opts$ ? opts$.userIdentifier : null;
    let givenName = opts$ && 'givenName' in opts$ ? opts$.givenName : null;
    let familyName = opts$ && 'familyName' in opts$ ? opts$.familyName : null;
    let authorizationCode = opts$ && 'authorizationCode' in opts$ ? opts$.authorizationCode : null;
    let email = opts$ && 'email' in opts$ ? opts$.email : null;
    let identityToken = opts$ && 'identityToken' in opts$ ? opts$.identityToken : null;
    let state = opts$ && 'state' in opts$ ? opts$.state : null;
    this[S$.userIdentifier] = userIdentifier;
    this[S$.givenName] = givenName;
    this[S$.familyName] = familyName;
    this[S$.authorizationCode] = authorizationCode;
    this[S$.email] = email;
    this[S$.identityToken] = identityToken;
    this[S$.state] = state;
    ;
  }).prototype = authorization_credential.AuthorizationCredentialAppleID.prototype;
  dart.addTypeTests(authorization_credential.AuthorizationCredentialAppleID);
  dart.addTypeCaches(authorization_credential.AuthorizationCredentialAppleID);
  dart.setLibraryUri(authorization_credential.AuthorizationCredentialAppleID, I[24]);
  dart.setFieldSignature(authorization_credential.AuthorizationCredentialAppleID, () => ({
    __proto__: dart.getFields(authorization_credential.AuthorizationCredentialAppleID.__proto__),
    userIdentifier: dart.finalFieldType(dart.nullable(core.String)),
    givenName: dart.finalFieldType(dart.nullable(core.String)),
    familyName: dart.finalFieldType(dart.nullable(core.String)),
    email: dart.finalFieldType(dart.nullable(core.String)),
    authorizationCode: dart.finalFieldType(core.String),
    identityToken: dart.finalFieldType(dart.nullable(core.String)),
    state: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(authorization_credential.AuthorizationCredentialAppleID, ['toString']);
  authorization_credential.AuthorizationCredentialPassword = class AuthorizationCredentialPassword extends core.Object {
    get username() {
      return this[S$.username];
    }
    set username(value) {
      super.username = value;
    }
    get password() {
      return this[S$.password];
    }
    set password(value) {
      super.password = value;
    }
    static ['_#new#tearOff'](opts$) {
      let username = opts$ && 'username' in opts$ ? opts$.username : null;
      let password = opts$ && 'password' in opts$ ? opts$.password : null;
      return new authorization_credential.AuthorizationCredentialPassword.new({username: username, password: password});
    }
    toString() {
      return "AuthorizationCredential(" + this.username + ", [REDACTED PASSWORD])";
    }
  };
  (authorization_credential.AuthorizationCredentialPassword.new = function(opts$) {
    let username = opts$ && 'username' in opts$ ? opts$.username : null;
    let password = opts$ && 'password' in opts$ ? opts$.password : null;
    this[S$.username] = username;
    this[S$.password] = password;
    ;
  }).prototype = authorization_credential.AuthorizationCredentialPassword.prototype;
  dart.addTypeTests(authorization_credential.AuthorizationCredentialPassword);
  dart.addTypeCaches(authorization_credential.AuthorizationCredentialPassword);
  dart.setLibraryUri(authorization_credential.AuthorizationCredentialPassword, I[24]);
  dart.setFieldSignature(authorization_credential.AuthorizationCredentialPassword, () => ({
    __proto__: dart.getFields(authorization_credential.AuthorizationCredentialPassword.__proto__),
    username: dart.finalFieldType(core.String),
    password: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(authorization_credential.AuthorizationCredentialPassword, ['toString']);
  authorization_credential.parseAuthorizationCredentialAppleID = function parseAuthorizationCredentialAppleID(response) {
    if (dart.equals(response[S$.$_get]("type"), "appleid")) {
      let authorizationCode = T$.StringN().as(response[S$.$_get]("authorizationCode"));
      if (authorizationCode == null) {
        dart.throw(C[51] || CT.C51);
      }
      return new authorization_credential.AuthorizationCredentialAppleID.new({userIdentifier: T$.StringN().as(response[S$.$_get]("userIdentifier")), givenName: T$.StringN().as(response[S$.$_get]("givenName")), familyName: T$.StringN().as(response[S$.$_get]("familyName")), email: T$.StringN().as(response[S$.$_get]("email")), authorizationCode: authorizationCode, identityToken: T$.StringN().as(response[S$.$_get]("identityToken")), state: T$.StringN().as(response[S$.$_get]("state"))});
    } else {
      dart.throw(core.Exception.new("Unsupported result type " + dart.str(response[S$.$_get]("type"))));
    }
  };
  authorization_credential.parseAuthorizationCredentialPassword = function parseAuthorizationCredentialPassword(response) {
    if (dart.equals(response[S$.$_get]("type"), "password")) {
      return new authorization_credential.AuthorizationCredentialPassword.new({username: core.String.as(response[S$.$_get]("username")), password: core.String.as(response[S$.$_get]("password"))});
    } else {
      dart.throw(core.Exception.new("Unsupported result type " + dart.str(response[S$.$_get]("type"))));
    }
  };
  authorization_credential.parseAuthorizationCredentialAppleIDFromDeeplink = function parseAuthorizationCredentialAppleIDFromDeeplink(deeplink) {
    let t23, t23$, t23$0;
    if (deeplink.queryParameters[S$.$containsKey]("error")) {
      if (deeplink.queryParameters[S$.$_get]("error") === "user_cancelled_authorize") {
        dart.throw(C[53] || CT.C53);
      }
    }
    let user = deeplink.queryParameters[S$.$containsKey]("user") ? T$.MapOfString$dynamic().as(convert.json.decode(dart.nullCast(deeplink.queryParameters[S$.$_get]("user"), core.String))) : null;
    let name = user != null ? T$.MapNOfString$dynamic().as(user[S$.$_get]("name")) : null;
    let authorizationCode = deeplink.queryParameters[S$.$_get]("code");
    if (authorizationCode == null) {
      dart.throw(C[55] || CT.C55);
    }
    return new authorization_credential.AuthorizationCredentialAppleID.new({authorizationCode: authorizationCode, email: T$.StringN().as((t23 = user, t23 == null ? null : t23[S$.$_get]("email"))), givenName: T$.StringN().as((t23$ = name, t23$ == null ? null : t23$[S$.$_get]("firstName"))), familyName: T$.StringN().as((t23$0 = name, t23$0 == null ? null : t23$0[S$.$_get]("lastName"))), userIdentifier: null, identityToken: deeplink.queryParameters[S$.$_get]("id_token"), state: deeplink.queryParameters[S$.$_get]("state")});
  };
  authorization_request.AuthorizationRequest = class AuthorizationRequest extends core.Object {};
  (authorization_request.AuthorizationRequest.new = function() {
    ;
  }).prototype = authorization_request.AuthorizationRequest.prototype;
  dart.addTypeTests(authorization_request.AuthorizationRequest);
  dart.addTypeCaches(authorization_request.AuthorizationRequest);
  dart.setLibraryUri(authorization_request.AuthorizationRequest, I[25]);
  authorization_request.AppleIDAuthorizationScopes = class AppleIDAuthorizationScopes extends core._Enum {
    [S$._enumToString]() {
      return "AppleIDAuthorizationScopes." + this[S$._name];
    }
  };
  (authorization_request.AppleIDAuthorizationScopes.new = function(index, name) {
    authorization_request.AppleIDAuthorizationScopes.__proto__.new.call(this, index, name);
    ;
  }).prototype = authorization_request.AppleIDAuthorizationScopes.prototype;
  dart.addTypeTests(authorization_request.AppleIDAuthorizationScopes);
  dart.addTypeCaches(authorization_request.AppleIDAuthorizationScopes);
  dart.setMethodSignature(authorization_request.AppleIDAuthorizationScopes, () => ({
    __proto__: dart.getMethods(authorization_request.AppleIDAuthorizationScopes.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(authorization_request.AppleIDAuthorizationScopes, I[25]);
  dart.setStaticFieldSignature(authorization_request.AppleIDAuthorizationScopes, () => ['values', 'email', 'fullName']);
  dart.defineLazy(authorization_request.AppleIDAuthorizationScopes, {
    /*authorization_request.AppleIDAuthorizationScopes.values*/get values() {
      return C[56] || CT.C56;
    },
    /*authorization_request.AppleIDAuthorizationScopes.email*/get email() {
      return C[57] || CT.C57;
    },
    /*authorization_request.AppleIDAuthorizationScopes.fullName*/get fullName() {
      return C[58] || CT.C58;
    }
  }, false);
  authorization_request.AppleIDAuthorizationRequest = class AppleIDAuthorizationRequest extends core.Object {
    get scopes() {
      return this[S$.scopes];
    }
    set scopes(value) {
      super.scopes = value;
    }
    get nonce() {
      return this[S$.nonce];
    }
    set nonce(value) {
      super.nonce = value;
    }
    get state() {
      return this[S$.state$1];
    }
    set state(value) {
      super.state = value;
    }
    static ['_#new#tearOff'](opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : C[59] || CT.C59;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return new authorization_request.AppleIDAuthorizationRequest.new({scopes: scopes, nonce: nonce, state: state});
    }
    toString() {
      return "AppleIDAuthorizationRequest(scopes: " + dart.str(this.scopes) + ")";
    }
    toJson() {
      return (() => {
        let t25 = new (T$.IdentityMapOfString$dynamic()).new();
        t25[S$.$_set]("type", "appleid");
        if (this.nonce != null) t25[S$.$_set]("nonce", this.nonce);
        if (this.state != null) t25[S$.$_set]("state", this.state);
        t25[S$.$_set]("scopes", (() => {
          let t26 = T$.JSArrayOfString().of([]);
          for (let scope of this.scopes)
            if (scope === authorization_request.AppleIDAuthorizationScopes.email)
              t26.push("email");
            else if (scope === authorization_request.AppleIDAuthorizationScopes.fullName) t26.push("fullName");
          return t26;
        })());
        return t25;
      })();
    }
  };
  (authorization_request.AppleIDAuthorizationRequest.new = function(opts$) {
    let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : C[59] || CT.C59;
    let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
    let state = opts$ && 'state' in opts$ ? opts$.state : null;
    this[S$.scopes] = scopes;
    this[S$.nonce] = nonce;
    this[S$.state$1] = state;
    ;
  }).prototype = authorization_request.AppleIDAuthorizationRequest.prototype;
  dart.addTypeTests(authorization_request.AppleIDAuthorizationRequest);
  dart.addTypeCaches(authorization_request.AppleIDAuthorizationRequest);
  authorization_request.AppleIDAuthorizationRequest[dart.implements] = () => [authorization_request.AuthorizationRequest];
  dart.setMethodSignature(authorization_request.AppleIDAuthorizationRequest, () => ({
    __proto__: dart.getMethods(authorization_request.AppleIDAuthorizationRequest.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(authorization_request.AppleIDAuthorizationRequest, I[25]);
  dart.setFieldSignature(authorization_request.AppleIDAuthorizationRequest, () => ({
    __proto__: dart.getFields(authorization_request.AppleIDAuthorizationRequest.__proto__),
    scopes: dart.finalFieldType(core.List$(authorization_request.AppleIDAuthorizationScopes)),
    nonce: dart.finalFieldType(dart.nullable(core.String)),
    state: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(authorization_request.AppleIDAuthorizationRequest, ['toString']);
  authorization_request.PasswordAuthorizationRequest = class PasswordAuthorizationRequest extends core.Object {
    static ['_#new#tearOff']() {
      return new authorization_request.PasswordAuthorizationRequest.new();
    }
    toString() {
      return "PasswordAuthorizationRequest()";
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from(["type", "password"]);
    }
  };
  (authorization_request.PasswordAuthorizationRequest.new = function() {
    ;
  }).prototype = authorization_request.PasswordAuthorizationRequest.prototype;
  dart.addTypeTests(authorization_request.PasswordAuthorizationRequest);
  dart.addTypeCaches(authorization_request.PasswordAuthorizationRequest);
  authorization_request.PasswordAuthorizationRequest[dart.implements] = () => [authorization_request.AuthorizationRequest];
  dart.setMethodSignature(authorization_request.PasswordAuthorizationRequest, () => ({
    __proto__: dart.getMethods(authorization_request.PasswordAuthorizationRequest.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(authorization_request.PasswordAuthorizationRequest, I[25]);
  dart.defineExtensionMethods(authorization_request.PasswordAuthorizationRequest, ['toString']);
  credential_state.CredentialState = class CredentialState extends core._Enum {
    [S$._enumToString]() {
      return "CredentialState." + this[S$._name];
    }
  };
  (credential_state.CredentialState.new = function(index, name) {
    credential_state.CredentialState.__proto__.new.call(this, index, name);
    ;
  }).prototype = credential_state.CredentialState.prototype;
  dart.addTypeTests(credential_state.CredentialState);
  dart.addTypeCaches(credential_state.CredentialState);
  dart.setMethodSignature(credential_state.CredentialState, () => ({
    __proto__: dart.getMethods(credential_state.CredentialState.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(credential_state.CredentialState, I[26]);
  dart.setStaticFieldSignature(credential_state.CredentialState, () => ['values', 'authorized', 'revoked', 'notFound']);
  dart.defineLazy(credential_state.CredentialState, {
    /*credential_state.CredentialState.values*/get values() {
      return C[60] || CT.C60;
    },
    /*credential_state.CredentialState.authorized*/get authorized() {
      return C[61] || CT.C61;
    },
    /*credential_state.CredentialState.revoked*/get revoked() {
      return C[62] || CT.C62;
    },
    /*credential_state.CredentialState.notFound*/get notFound() {
      return C[63] || CT.C63;
    }
  }, false);
  credential_state.parseCredentialState = function parseCredentialState(credentialState) {
    switch (credentialState) {
      case "authorized":
        {
          return credential_state.CredentialState.authorized;
        }
      case "revoked":
        {
          return credential_state.CredentialState.revoked;
        }
      case "notFound":
        {
          return credential_state.CredentialState.notFound;
        }
      default:
        {
          dart.throw(new message_codec.PlatformException.new({code: "unsupported-value", message: "Unsupported credential state: " + dart.str(credentialState)}));
        }
    }
  };
  web_authentication_options.WebAuthenticationOptions = class WebAuthenticationOptions extends core.Object {
    get clientId() {
      return this[S$.clientId];
    }
    set clientId(value) {
      super.clientId = value;
    }
    get redirectUri() {
      return this[S$.redirectUri];
    }
    set redirectUri(value) {
      super.redirectUri = value;
    }
    static ['_#new#tearOff'](opts$) {
      let clientId = opts$ && 'clientId' in opts$ ? opts$.clientId : null;
      let redirectUri = opts$ && 'redirectUri' in opts$ ? opts$.redirectUri : null;
      return new web_authentication_options.WebAuthenticationOptions.new({clientId: clientId, redirectUri: redirectUri});
    }
  };
  (web_authentication_options.WebAuthenticationOptions.new = function(opts$) {
    let clientId = opts$ && 'clientId' in opts$ ? opts$.clientId : null;
    let redirectUri = opts$ && 'redirectUri' in opts$ ? opts$.redirectUri : null;
    this[S$.clientId] = clientId;
    this[S$.redirectUri] = redirectUri;
    ;
  }).prototype = web_authentication_options.WebAuthenticationOptions.prototype;
  dart.addTypeTests(web_authentication_options.WebAuthenticationOptions);
  dart.addTypeCaches(web_authentication_options.WebAuthenticationOptions);
  dart.setLibraryUri(web_authentication_options.WebAuthenticationOptions, I[27]);
  dart.setFieldSignature(web_authentication_options.WebAuthenticationOptions, () => ({
    __proto__: dart.getFields(web_authentication_options.WebAuthenticationOptions.__proto__),
    clientId: dart.finalFieldType(core.String),
    redirectUri: dart.finalFieldType(core.Uri)
  }));
  exceptions.SignInWithAppleException = class SignInWithAppleException extends core.Object {
    static fromPlatformException(exception) {
      let t29, t29$, t29$0, t29$1, t29$2, t29$3, t29$4, t29$5;
      switch (exception.code) {
        case "not-supported":
          {
            return new exceptions.SignInWithAppleNotSupportedException.new({message: (t29 = exception.message, t29 == null ? "no message provided" : t29)});
          }
        case "authorization-error/unknown":
          {
            return new exceptions.SignInWithAppleAuthorizationException.new({code: exceptions.AuthorizationErrorCode.unknown, message: (t29$ = exception.message, t29$ == null ? "no message provided" : t29$)});
          }
        case "authorization-error/canceled":
          {
            return new exceptions.SignInWithAppleAuthorizationException.new({code: exceptions.AuthorizationErrorCode.canceled, message: (t29$0 = exception.message, t29$0 == null ? "no message provided" : t29$0)});
          }
        case "authorization-error/invalidResponse":
          {
            return new exceptions.SignInWithAppleAuthorizationException.new({code: exceptions.AuthorizationErrorCode.invalidResponse, message: (t29$1 = exception.message, t29$1 == null ? "no message provided" : t29$1)});
          }
        case "authorization-error/notHandled":
          {
            return new exceptions.SignInWithAppleAuthorizationException.new({code: exceptions.AuthorizationErrorCode.notHandled, message: (t29$2 = exception.message, t29$2 == null ? "no message provided" : t29$2)});
          }
        case "authorization-error/notInteractive":
          {
            return new exceptions.SignInWithAppleAuthorizationException.new({code: exceptions.AuthorizationErrorCode.notInteractive, message: (t29$3 = exception.message, t29$3 == null ? "no message provided" : t29$3)});
          }
        case "authorization-error/failed":
          {
            return new exceptions.SignInWithAppleAuthorizationException.new({code: exceptions.AuthorizationErrorCode.failed, message: (t29$4 = exception.message, t29$4 == null ? "no message provided" : t29$4)});
          }
        case "credentials-error":
          {
            return new exceptions.SignInWithAppleCredentialsException.new({message: (t29$5 = exception.message, t29$5 == null ? "no message provided" : t29$5)});
          }
        default:
          {
            return new exceptions.UnknownSignInWithAppleException.new({platformException: exception});
          }
      }
    }
    static ['_#fromPlatformException#tearOff'](exception) {
      return exceptions.SignInWithAppleException.fromPlatformException(exception);
    }
  };
  (exceptions.SignInWithAppleException[dart.mixinNew] = function() {
  }).prototype = exceptions.SignInWithAppleException.prototype;
  dart.addTypeTests(exceptions.SignInWithAppleException);
  dart.addTypeCaches(exceptions.SignInWithAppleException);
  exceptions.SignInWithAppleException[dart.implements] = () => [core.Exception];
  dart.setStaticMethodSignature(exceptions.SignInWithAppleException, () => ['fromPlatformException']);
  dart.setLibraryUri(exceptions.SignInWithAppleException, I[28]);
  exceptions.UnknownSignInWithAppleException = class UnknownSignInWithAppleException extends message_codec.PlatformException {
    static ['_#new#tearOff'](opts$) {
      let platformException = opts$ && 'platformException' in opts$ ? opts$.platformException : null;
      return new exceptions.UnknownSignInWithAppleException.new({platformException: platformException});
    }
    toString() {
      return "UnknownSignInWithAppleException(" + this.code + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ")";
    }
  };
  (exceptions.UnknownSignInWithAppleException.new = function(opts$) {
    let platformException = opts$ && 'platformException' in opts$ ? opts$.platformException : null;
    exceptions.UnknownSignInWithAppleException.__proto__.new.call(this, {code: platformException.code, message: platformException.message, details: platformException.details});
    ;
  }).prototype = exceptions.UnknownSignInWithAppleException.prototype;
  dart.addTypeTests(exceptions.UnknownSignInWithAppleException);
  dart.addTypeCaches(exceptions.UnknownSignInWithAppleException);
  exceptions.UnknownSignInWithAppleException[dart.implements] = () => [exceptions.SignInWithAppleException];
  dart.setLibraryUri(exceptions.UnknownSignInWithAppleException, I[28]);
  dart.defineExtensionMethods(exceptions.UnknownSignInWithAppleException, ['toString']);
  exceptions.SignInWithAppleNotSupportedException = class SignInWithAppleNotSupportedException extends core.Object {
    get message() {
      return this[S$.message];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](opts$) {
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      return new exceptions.SignInWithAppleNotSupportedException.new({message: message});
    }
    toString() {
      return "SignInWithAppleNotSupportedException(" + this.message + ")";
    }
  };
  (exceptions.SignInWithAppleNotSupportedException.new = function(opts$) {
    let message = opts$ && 'message' in opts$ ? opts$.message : null;
    this[S$.message] = message;
    ;
  }).prototype = exceptions.SignInWithAppleNotSupportedException.prototype;
  dart.addTypeTests(exceptions.SignInWithAppleNotSupportedException);
  dart.addTypeCaches(exceptions.SignInWithAppleNotSupportedException);
  exceptions.SignInWithAppleNotSupportedException[dart.implements] = () => [exceptions.SignInWithAppleException];
  dart.setLibraryUri(exceptions.SignInWithAppleNotSupportedException, I[28]);
  dart.setFieldSignature(exceptions.SignInWithAppleNotSupportedException, () => ({
    __proto__: dart.getFields(exceptions.SignInWithAppleNotSupportedException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exceptions.SignInWithAppleNotSupportedException, ['toString']);
  exceptions.AuthorizationErrorCode = class AuthorizationErrorCode extends core._Enum {
    [S$._enumToString]() {
      return "AuthorizationErrorCode." + this[S$._name];
    }
  };
  (exceptions.AuthorizationErrorCode.new = function(index, name) {
    exceptions.AuthorizationErrorCode.__proto__.new.call(this, index, name);
    ;
  }).prototype = exceptions.AuthorizationErrorCode.prototype;
  dart.addTypeTests(exceptions.AuthorizationErrorCode);
  dart.addTypeCaches(exceptions.AuthorizationErrorCode);
  dart.setMethodSignature(exceptions.AuthorizationErrorCode, () => ({
    __proto__: dart.getMethods(exceptions.AuthorizationErrorCode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(exceptions.AuthorizationErrorCode, I[28]);
  dart.setStaticFieldSignature(exceptions.AuthorizationErrorCode, () => ['values', 'canceled', 'failed', 'invalidResponse', 'notHandled', 'notInteractive', 'unknown']);
  dart.defineLazy(exceptions.AuthorizationErrorCode, {
    /*exceptions.AuthorizationErrorCode.values*/get values() {
      return C[64] || CT.C64;
    },
    /*exceptions.AuthorizationErrorCode.canceled*/get canceled() {
      return C[54] || CT.C54;
    },
    /*exceptions.AuthorizationErrorCode.failed*/get failed() {
      return C[65] || CT.C65;
    },
    /*exceptions.AuthorizationErrorCode.invalidResponse*/get invalidResponse() {
      return C[52] || CT.C52;
    },
    /*exceptions.AuthorizationErrorCode.notHandled*/get notHandled() {
      return C[66] || CT.C66;
    },
    /*exceptions.AuthorizationErrorCode.notInteractive*/get notInteractive() {
      return C[67] || CT.C67;
    },
    /*exceptions.AuthorizationErrorCode.unknown*/get unknown() {
      return C[68] || CT.C68;
    }
  }, false);
  exceptions.SignInWithAppleAuthorizationException = class SignInWithAppleAuthorizationException extends core.Object {
    get code() {
      return this[S$.code];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[S$.message$1];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](opts$) {
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      return new exceptions.SignInWithAppleAuthorizationException.new({code: code, message: message});
    }
    toString() {
      return "SignInWithAppleAuthorizationError(" + dart.str(this.code) + ", " + this.message + ")";
    }
  };
  (exceptions.SignInWithAppleAuthorizationException.new = function(opts$) {
    let code = opts$ && 'code' in opts$ ? opts$.code : null;
    let message = opts$ && 'message' in opts$ ? opts$.message : null;
    this[S$.code] = code;
    this[S$.message$1] = message;
    ;
  }).prototype = exceptions.SignInWithAppleAuthorizationException.prototype;
  dart.addTypeTests(exceptions.SignInWithAppleAuthorizationException);
  dart.addTypeCaches(exceptions.SignInWithAppleAuthorizationException);
  exceptions.SignInWithAppleAuthorizationException[dart.implements] = () => [exceptions.SignInWithAppleException];
  dart.setLibraryUri(exceptions.SignInWithAppleAuthorizationException, I[28]);
  dart.setFieldSignature(exceptions.SignInWithAppleAuthorizationException, () => ({
    __proto__: dart.getFields(exceptions.SignInWithAppleAuthorizationException.__proto__),
    code: dart.finalFieldType(exceptions.AuthorizationErrorCode),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exceptions.SignInWithAppleAuthorizationException, ['toString']);
  exceptions.SignInWithAppleCredentialsException = class SignInWithAppleCredentialsException extends core.Object {
    get message() {
      return this[S$.message$2];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](opts$) {
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      return new exceptions.SignInWithAppleCredentialsException.new({message: message});
    }
    toString() {
      return "SignInWithAppleCredentialsException(" + this.message + ")";
    }
  };
  (exceptions.SignInWithAppleCredentialsException.new = function(opts$) {
    let message = opts$ && 'message' in opts$ ? opts$.message : null;
    this[S$.message$2] = message;
    ;
  }).prototype = exceptions.SignInWithAppleCredentialsException.prototype;
  dart.addTypeTests(exceptions.SignInWithAppleCredentialsException);
  dart.addTypeCaches(exceptions.SignInWithAppleCredentialsException);
  exceptions.SignInWithAppleCredentialsException[dart.implements] = () => [exceptions.SignInWithAppleException];
  dart.setLibraryUri(exceptions.SignInWithAppleCredentialsException, I[28]);
  dart.setFieldSignature(exceptions.SignInWithAppleCredentialsException, () => ({
    __proto__: dart.getFields(exceptions.SignInWithAppleCredentialsException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exceptions.SignInWithAppleCredentialsException, ['toString']);
  nonce.generateNonce = function generateNonce(opts$) {
    let length = opts$ && 'length' in opts$ ? opts$.length : 32;
    let random = math.Random.secure();
    return T$.IterableOfString().generate(length, dart.fn(_ => nonce._chars[S$.$_get](random.nextInt(nonce._chars.length)), T$.intToString()))[S$.$join]();
  };
  dart.defineLazy(nonce, {
    /*nonce._chars*/get _chars() {
      return "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._";
    }
  }, false);
  method_channel_sign_in_with_apple.MethodChannelSignInWithApple = class MethodChannelSignInWithApple extends sign_in_with_apple_platform_interface.SignInWithApplePlatform {
    get channel() {
      return method_channel_sign_in_with_apple._channel;
    }
    isAvailable() {
      return async.async(core.bool, function* isAvailable() {
        let t31;
        t31 = (yield method_channel_sign_in_with_apple._channel.invokeMethod(core.bool, "isAvailable"));
        return t31 == null ? false : t31;
      });
    }
    getAppleIDCredential(opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let webAuthenticationOptions = opts$ && 'webAuthenticationOptions' in opts$ ? opts$.webAuthenticationOptions : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return async.async(authorization_credential.AuthorizationCredentialAppleID, (function* getAppleIDCredential() {
        if (io.Platform.isAndroid) {
          if (webAuthenticationOptions == null) {
            dart.throw(core.Exception.new("`webAuthenticationOptions` argument must be provided on Android."));
          }
          return this[S$._signInWithAppleAndroid]({scopes: scopes, webAuthenticationOptions: webAuthenticationOptions, nonce: nonce, state: state});
        }
        try {
          if (!io.Platform.isIOS && !io.Platform.isMacOS && io.Platform.environment[S$.$_get]("FLUTTER_TEST") !== "true") {
            dart.throw(C[69] || CT.C69);
          }
          let response = (yield method_channel_sign_in_with_apple._channel.invokeMethod(core.Map, "performAuthorizationRequest", T$.JSArrayOfMapOfString$dynamic().of([new authorization_request.AppleIDAuthorizationRequest.new({scopes: scopes, nonce: nonce, state: state}).toJson()])));
          if (response == null) {
            dart.throw(core.Exception.new("getKeychainCredential: Received `null` response"));
          }
          return authorization_credential.parseAuthorizationCredentialAppleID(response);
        } catch (e) {
          let exception = dart.getThrown(e);
          if (message_codec.PlatformException.is(exception)) {
            dart.throw(exceptions.SignInWithAppleException.fromPlatformException(exception));
          } else
            throw e;
        }
      }).bind(this));
    }
    getCredentialState(userIdentifier) {
      return async.async(credential_state.CredentialState, function* getCredentialState() {
        if (!io.Platform.isIOS && !io.Platform.isMacOS && io.Platform.environment[S$.$_get]("FLUTTER_TEST") !== "true") {
          dart.throw(C[69] || CT.C69);
        }
        try {
          return credential_state.parseCredentialState(yield method_channel_sign_in_with_apple._channel.invokeMethod(core.String, "getCredentialState", new (T$.IdentityMapOfString$String()).from(["userIdentifier", userIdentifier])));
        } catch (e) {
          let exception = dart.getThrown(e);
          if (message_codec.PlatformException.is(exception)) {
            dart.throw(exceptions.SignInWithAppleException.fromPlatformException(exception));
          } else
            throw e;
        }
      });
    }
    getKeychainCredential() {
      return async.async(authorization_credential.AuthorizationCredentialPassword, function* getKeychainCredential() {
        try {
          if (!io.Platform.isIOS && !io.Platform.isMacOS && io.Platform.environment[S$.$_get]("FLUTTER_TEST") !== "true") {
            dart.throw(C[69] || CT.C69);
          }
          let response = (yield method_channel_sign_in_with_apple._channel.invokeMethod(core.Map, "performAuthorizationRequest", T$.JSArrayOfPasswordAuthorizationRequest().of([C[70] || CT.C70])[S$.$map](T$.MapOfString$dynamic(), dart.fn(request => request.toJson(), T$.PasswordAuthorizationRequestToMapOfString$dynamic()))[S$.$toList]()));
          if (response == null) {
            dart.throw(core.Exception.new("getKeychainCredential: Received `null` response"));
          }
          return authorization_credential.parseAuthorizationCredentialPassword(response);
        } catch (e) {
          let exception = dart.getThrown(e);
          if (message_codec.PlatformException.is(exception)) {
            dart.throw(exceptions.SignInWithAppleException.fromPlatformException(exception));
          } else
            throw e;
        }
      });
    }
    [S$._signInWithAppleAndroid](opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let webAuthenticationOptions = opts$ && 'webAuthenticationOptions' in opts$ ? opts$.webAuthenticationOptions : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return async.async(authorization_credential.AuthorizationCredentialAppleID, function* _signInWithAppleAndroid() {
        if (!io.Platform.isAndroid) dart.assertFailed(null, I[29], 148, 12, "Platform.isAndroid");
        let uri = core._Uri.new({scheme: "https", host: "appleid.apple.com", path: "/auth/authorize", queryParameters: (() => {
            let t34 = new (T$.IdentityMapOfString$String()).new();
            t34[S$.$_set]("client_id", webAuthenticationOptions.clientId);
            t34[S$.$_set]("redirect_uri", webAuthenticationOptions.redirectUri.toString());
            t34[S$.$_set]("scope", scopes[S$.$map](core.String, dart.fn(scope => {
              switch (scope) {
                case C[57] || CT.C57:
                  {
                    return "email";
                  }
                case C[58] || CT.C58:
                  {
                    return "name";
                  }
              }
            }, T$.AppleIDAuthorizationScopesToString()))[S$.$join](" "));
            t34[S$.$_set]("response_type", "code id_token");
            t34[S$.$_set]("response_mode", "form_post");
            if (nonce != null) t34[S$.$_set]("nonce", nonce);
            if (state != null) t34[S$.$_set]("state", state);
            return t34;
          })()}).toString();
        try {
          let result = (yield method_channel_sign_in_with_apple._channel.invokeMethod(core.String, "performAuthorizationRequest", new (T$.IdentityMapOfString$String()).from(["url", uri])));
          if (result == null) {
            dart.throw(C[71] || CT.C71);
          }
          return authorization_credential.parseAuthorizationCredentialAppleIDFromDeeplink(core.Uri.parse(result));
        } catch (e) {
          let exception = dart.getThrown(e);
          if (message_codec.PlatformException.is(exception)) {
            dart.throw(exceptions.SignInWithAppleException.fromPlatformException(exception));
          } else
            throw e;
        }
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_sign_in_with_apple.MethodChannelSignInWithApple.new();
    }
  };
  (method_channel_sign_in_with_apple.MethodChannelSignInWithApple.new = function() {
    method_channel_sign_in_with_apple.MethodChannelSignInWithApple.__proto__.new.call(this);
    ;
  }).prototype = method_channel_sign_in_with_apple.MethodChannelSignInWithApple.prototype;
  dart.addTypeTests(method_channel_sign_in_with_apple.MethodChannelSignInWithApple);
  dart.addTypeCaches(method_channel_sign_in_with_apple.MethodChannelSignInWithApple);
  dart.setMethodSignature(method_channel_sign_in_with_apple.MethodChannelSignInWithApple, () => ({
    __proto__: dart.getMethods(method_channel_sign_in_with_apple.MethodChannelSignInWithApple.__proto__),
    [S$._signInWithAppleAndroid]: dart.fnType(async.Future$(authorization_credential.AuthorizationCredentialAppleID), [], {}, {nonce: dart.nullable(core.String), scopes: core.List$(authorization_request.AppleIDAuthorizationScopes), state: dart.nullable(core.String), webAuthenticationOptions: web_authentication_options.WebAuthenticationOptions})
  }));
  dart.setGetterSignature(method_channel_sign_in_with_apple.MethodChannelSignInWithApple, () => ({
    __proto__: dart.getGetters(method_channel_sign_in_with_apple.MethodChannelSignInWithApple.__proto__),
    channel: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(method_channel_sign_in_with_apple.MethodChannelSignInWithApple, I[30]);
  dart.defineLazy(method_channel_sign_in_with_apple, {
    /*method_channel_sign_in_with_apple._channel*/get _channel() {
      return C[72] || CT.C72;
    }
  }, false);
  types$.PreferredLaunchMode = class PreferredLaunchMode extends core._Enum {
    [S$._enumToString]() {
      return "PreferredLaunchMode." + this[S$._name];
    }
  };
  (types$.PreferredLaunchMode.new = function(index, name) {
    types$.PreferredLaunchMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$.PreferredLaunchMode.prototype;
  dart.addTypeTests(types$.PreferredLaunchMode);
  dart.addTypeCaches(types$.PreferredLaunchMode);
  dart.setMethodSignature(types$.PreferredLaunchMode, () => ({
    __proto__: dart.getMethods(types$.PreferredLaunchMode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$.PreferredLaunchMode, I[31]);
  dart.setStaticFieldSignature(types$.PreferredLaunchMode, () => ['values', 'platformDefault', 'inAppWebView', 'inAppBrowserView', 'externalApplication', 'externalNonBrowserApplication']);
  dart.defineLazy(types$.PreferredLaunchMode, {
    /*types$.PreferredLaunchMode.values*/get values() {
      return C[73] || CT.C73;
    },
    /*types$.PreferredLaunchMode.platformDefault*/get platformDefault() {
      return C[74] || CT.C74;
    },
    /*types$.PreferredLaunchMode.inAppWebView*/get inAppWebView() {
      return C[75] || CT.C75;
    },
    /*types$.PreferredLaunchMode.inAppBrowserView*/get inAppBrowserView() {
      return C[76] || CT.C76;
    },
    /*types$.PreferredLaunchMode.externalApplication*/get externalApplication() {
      return C[77] || CT.C77;
    },
    /*types$.PreferredLaunchMode.externalNonBrowserApplication*/get externalNonBrowserApplication() {
      return C[78] || CT.C78;
    }
  }, false);
  types$.InAppWebViewConfiguration = class InAppWebViewConfiguration extends core.Object {
    get enableJavaScript() {
      return this[S$.enableJavaScript];
    }
    set enableJavaScript(value) {
      super.enableJavaScript = value;
    }
    get enableDomStorage() {
      return this[S$.enableDomStorage];
    }
    set enableDomStorage(value) {
      super.enableDomStorage = value;
    }
    get headers() {
      return this[S$.headers];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](opts$) {
      let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : true;
      let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : true;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      return new types$.InAppWebViewConfiguration.new({enableJavaScript: enableJavaScript, enableDomStorage: enableDomStorage, headers: headers});
    }
  };
  (types$.InAppWebViewConfiguration.new = function(opts$) {
    let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : true;
    let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : true;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    this[S$.enableJavaScript] = enableJavaScript;
    this[S$.enableDomStorage] = enableDomStorage;
    this[S$.headers] = headers;
    ;
  }).prototype = types$.InAppWebViewConfiguration.prototype;
  dart.addTypeTests(types$.InAppWebViewConfiguration);
  dart.addTypeCaches(types$.InAppWebViewConfiguration);
  dart.setLibraryUri(types$.InAppWebViewConfiguration, I[31]);
  dart.setFieldSignature(types$.InAppWebViewConfiguration, () => ({
    __proto__: dart.getFields(types$.InAppWebViewConfiguration.__proto__),
    enableJavaScript: dart.finalFieldType(core.bool),
    enableDomStorage: dart.finalFieldType(core.bool),
    headers: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  types$.LaunchOptions = class LaunchOptions extends core.Object {
    get mode() {
      return this[S$.mode];
    }
    set mode(value) {
      super.mode = value;
    }
    get webViewConfiguration() {
      return this[S$.webViewConfiguration];
    }
    set webViewConfiguration(value) {
      super.webViewConfiguration = value;
    }
    get webOnlyWindowName() {
      return this[S$.webOnlyWindowName];
    }
    set webOnlyWindowName(value) {
      super.webOnlyWindowName = value;
    }
    static ['_#new#tearOff'](opts$) {
      let mode = opts$ && 'mode' in opts$ ? opts$.mode : C[74] || CT.C74;
      let webViewConfiguration = opts$ && 'webViewConfiguration' in opts$ ? opts$.webViewConfiguration : C[79] || CT.C79;
      let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
      return new types$.LaunchOptions.new({mode: mode, webViewConfiguration: webViewConfiguration, webOnlyWindowName: webOnlyWindowName});
    }
  };
  (types$.LaunchOptions.new = function(opts$) {
    let mode = opts$ && 'mode' in opts$ ? opts$.mode : C[74] || CT.C74;
    let webViewConfiguration = opts$ && 'webViewConfiguration' in opts$ ? opts$.webViewConfiguration : C[79] || CT.C79;
    let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
    this[S$.mode] = mode;
    this[S$.webViewConfiguration] = webViewConfiguration;
    this[S$.webOnlyWindowName] = webOnlyWindowName;
    ;
  }).prototype = types$.LaunchOptions.prototype;
  dart.addTypeTests(types$.LaunchOptions);
  dart.addTypeCaches(types$.LaunchOptions);
  dart.setLibraryUri(types$.LaunchOptions, I[31]);
  dart.setFieldSignature(types$.LaunchOptions, () => ({
    __proto__: dart.getFields(types$.LaunchOptions.__proto__),
    mode: dart.finalFieldType(types$.PreferredLaunchMode),
    webViewConfiguration: dart.finalFieldType(types$.InAppWebViewConfiguration),
    webOnlyWindowName: dart.finalFieldType(dart.nullable(core.String))
  }));
  user.User = class User extends core.Object {
    get id() {
      return this[S$.id];
    }
    set id(value) {
      super.id = value;
    }
    get appMetadata() {
      return this[S$.appMetadata];
    }
    set appMetadata(value) {
      super.appMetadata = value;
    }
    get userMetadata() {
      return this[S$.userMetadata];
    }
    set userMetadata(value) {
      super.userMetadata = value;
    }
    get aud() {
      return this[S$.aud];
    }
    set aud(value) {
      super.aud = value;
    }
    get confirmationSentAt() {
      return this[S$.confirmationSentAt];
    }
    set confirmationSentAt(value) {
      super.confirmationSentAt = value;
    }
    get recoverySentAt() {
      return this[S$.recoverySentAt];
    }
    set recoverySentAt(value) {
      super.recoverySentAt = value;
    }
    get emailChangeSentAt() {
      return this[S$.emailChangeSentAt];
    }
    set emailChangeSentAt(value) {
      super.emailChangeSentAt = value;
    }
    get newEmail() {
      return this[S$.newEmail];
    }
    set newEmail(value) {
      super.newEmail = value;
    }
    get invitedAt() {
      return this[S$.invitedAt];
    }
    set invitedAt(value) {
      super.invitedAt = value;
    }
    get actionLink() {
      return this[S$.actionLink];
    }
    set actionLink(value) {
      super.actionLink = value;
    }
    get email() {
      return this[S$.email$1];
    }
    set email(value) {
      super.email = value;
    }
    get phone() {
      return this[S$.phone];
    }
    set phone(value) {
      super.phone = value;
    }
    get createdAt() {
      return this[S$.createdAt];
    }
    set createdAt(value) {
      super.createdAt = value;
    }
    get confirmedAt() {
      return this[S$.confirmedAt];
    }
    set confirmedAt(value) {
      super.confirmedAt = value;
    }
    get emailConfirmedAt() {
      return this[S$.emailConfirmedAt];
    }
    set emailConfirmedAt(value) {
      super.emailConfirmedAt = value;
    }
    get phoneConfirmedAt() {
      return this[S$.phoneConfirmedAt];
    }
    set phoneConfirmedAt(value) {
      super.phoneConfirmedAt = value;
    }
    get lastSignInAt() {
      return this[S$.lastSignInAt];
    }
    set lastSignInAt(value) {
      super.lastSignInAt = value;
    }
    get role() {
      return this[S$.role];
    }
    set role(value) {
      super.role = value;
    }
    get updatedAt() {
      return this[S$.updatedAt];
    }
    set updatedAt(value) {
      super.updatedAt = value;
    }
    get identities() {
      return this[S$.identities];
    }
    set identities(value) {
      super.identities = value;
    }
    get factors() {
      return this[S$.factors];
    }
    set factors(value) {
      super.factors = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let appMetadata = opts$ && 'appMetadata' in opts$ ? opts$.appMetadata : null;
      let userMetadata = opts$ && 'userMetadata' in opts$ ? opts$.userMetadata : null;
      let aud = opts$ && 'aud' in opts$ ? opts$.aud : null;
      let confirmationSentAt = opts$ && 'confirmationSentAt' in opts$ ? opts$.confirmationSentAt : null;
      let recoverySentAt = opts$ && 'recoverySentAt' in opts$ ? opts$.recoverySentAt : null;
      let emailChangeSentAt = opts$ && 'emailChangeSentAt' in opts$ ? opts$.emailChangeSentAt : null;
      let newEmail = opts$ && 'newEmail' in opts$ ? opts$.newEmail : null;
      let invitedAt = opts$ && 'invitedAt' in opts$ ? opts$.invitedAt : null;
      let actionLink = opts$ && 'actionLink' in opts$ ? opts$.actionLink : null;
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let confirmedAt = opts$ && 'confirmedAt' in opts$ ? opts$.confirmedAt : null;
      let emailConfirmedAt = opts$ && 'emailConfirmedAt' in opts$ ? opts$.emailConfirmedAt : null;
      let phoneConfirmedAt = opts$ && 'phoneConfirmedAt' in opts$ ? opts$.phoneConfirmedAt : null;
      let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
      let role = opts$ && 'role' in opts$ ? opts$.role : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      let identities = opts$ && 'identities' in opts$ ? opts$.identities : null;
      let factors = opts$ && 'factors' in opts$ ? opts$.factors : null;
      return new user.User.new({id: id, appMetadata: appMetadata, userMetadata: userMetadata, aud: aud, confirmationSentAt: confirmationSentAt, recoverySentAt: recoverySentAt, emailChangeSentAt: emailChangeSentAt, newEmail: newEmail, invitedAt: invitedAt, actionLink: actionLink, email: email, phone: phone, createdAt: createdAt, confirmedAt: confirmedAt, emailConfirmedAt: emailConfirmedAt, phoneConfirmedAt: phoneConfirmedAt, lastSignInAt: lastSignInAt, role: role, updatedAt: updatedAt, identities: identities, factors: factors});
    }
    static fromJson(json) {
      let t38, t38$, t38$0, t38$1, t38$2, t38$3;
      if (json[S$.$_get]("id") == null) {
        return null;
      }
      return new user.User.new({id: core.String.as((t38 = json[S$.$_get]("id"), t38 == null ? "" : t38)), appMetadata: (t38$ = T$.MapNOfString$dynamic().as(json[S$.$_get]("app_metadata")), t38$ == null ? new (T$.IdentityMapOfString$dynamic()).new() : t38$), userMetadata: T$.MapNOfString$dynamic().as(json[S$.$_get]("user_metadata")), aud: core.String.as((t38$0 = json[S$.$_get]("aud"), t38$0 == null ? "" : t38$0)), confirmationSentAt: T$.StringN().as(json[S$.$_get]("confirmation_sent_at")), recoverySentAt: T$.StringN().as(json[S$.$_get]("recovery_sent_at")), emailChangeSentAt: T$.StringN().as(json[S$.$_get]("email_change_sent_at")), newEmail: T$.StringN().as(json[S$.$_get]("new_email")), invitedAt: T$.StringN().as(json[S$.$_get]("invited_at")), actionLink: T$.StringN().as(json[S$.$_get]("action_link")), email: T$.StringN().as(json[S$.$_get]("email")), phone: T$.StringN().as(json[S$.$_get]("phone")), createdAt: core.String.as((t38$1 = json[S$.$_get]("created_at"), t38$1 == null ? "" : t38$1)), confirmedAt: T$.StringN().as(json[S$.$_get]("confirmed_at")), emailConfirmedAt: T$.StringN().as(json[S$.$_get]("email_confirmed_at")), phoneConfirmedAt: T$.StringN().as(json[S$.$_get]("phone_confirmed_at")), lastSignInAt: T$.StringN().as(json[S$.$_get]("last_sign_in_at")), role: T$.StringN().as(json[S$.$_get]("role")), updatedAt: T$.StringN().as(json[S$.$_get]("updated_at")), identities: json[S$.$_get]("identities") != null ? T$.ListOfUserIdentity().from(core.Iterable.as((t38$2 = json[S$.$_get]("identities"), t38$2 == null ? null : dart.dsend(t38$2, 'map', [dart.fn(x => user.UserIdentity.fromMap(T$.MapOfString$dynamic().as(x)), T$.dynamicToUserIdentity())])))) : null, factors: json[S$.$_get]("factors") != null ? T$.ListOfFactor().from(core.Iterable.as((t38$3 = json[S$.$_get]("factors"), t38$3 == null ? null : dart.dsend(t38$3, 'map', [dart.fn(x => mfa.Factor.fromJson(T$.MapOfString$dynamic().as(x)), T$.dynamicToFactor())])))) : null});
    }
    toJson() {
      let t38, t38$;
      return new (T$.IdentityMapOfString$dynamic()).from(["id", this.id, "app_metadata", this.appMetadata, "user_metadata", this.userMetadata, "aud", this.aud, "confirmation_sent_at", this.confirmationSentAt, "recovery_sent_at", this.recoverySentAt, "email_change_sent_at", this.emailChangeSentAt, "new_email", this.newEmail, "invited_at", this.invitedAt, "action_link", this.actionLink, "email", this.email, "phone", this.phone, "created_at", this.createdAt, "confirmed_at", this.confirmedAt, "email_confirmed_at", this.emailConfirmedAt, "phone_confirmed_at", this.phoneConfirmedAt, "last_sign_in_at", this.lastSignInAt, "role", this.role, "updated_at", this.updatedAt, "identities", (t38 = this.identities, t38 == null ? null : t38[S$.$map](T$.MapOfString$dynamic(), dart.fn(identity => identity.toJson(), T$.UserIdentityToMapOfString$dynamic()))[S$.$toList]()), "factors", (t38$ = this.factors, t38$ == null ? null : t38$[S$.$map](T$.MapOfString$dynamic(), dart.fn(factor => factor.toJson(), T$.FactorToMapOfString$dynamic()))[S$.$toList]())]);
    }
    toString() {
      return "User(id: " + this.id + ", appMetadata: " + dart.str(this.appMetadata) + ", userMetadata: " + dart.str(this.userMetadata) + ", aud: " + this.aud + ", confirmationSentAt: " + dart.str(this.confirmationSentAt) + ", recoverySentAt: " + dart.str(this.recoverySentAt) + ", emailChangeSentAt: " + dart.str(this.emailChangeSentAt) + ", newEmail: " + dart.str(this.newEmail) + ", invitedAt: " + dart.str(this.invitedAt) + ", actionLink: " + dart.str(this.actionLink) + ", email: " + dart.str(this.email) + ", phone: " + dart.str(this.phone) + ", createdAt: " + this.createdAt + ", confirmedAt: " + dart.str(this.confirmedAt) + ", emailConfirmedAt: " + dart.str(this.emailConfirmedAt) + ", phoneConfirmedAt: " + dart.str(this.phoneConfirmedAt) + ", lastSignInAt: " + dart.str(this.lastSignInAt) + ", role: " + dart.str(this.role) + ", updatedAt: " + dart.str(this.updatedAt) + ", identities: " + dart.str(this.identities) + ", factors: " + dart.str(this.factors) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      let collectionEquals = dart.bind(C[80] || CT.C80, 'equals');
      return user.User.is(other) && other.id === this.id && collectionEquals(other.appMetadata, this.appMetadata) && collectionEquals(other.userMetadata, this.userMetadata) && other.aud === this.aud && other.confirmationSentAt == this.confirmationSentAt && other.recoverySentAt == this.recoverySentAt && other.emailChangeSentAt == this.emailChangeSentAt && other.newEmail == this.newEmail && other.invitedAt == this.invitedAt && other.actionLink == this.actionLink && other.email == this.email && other.phone == this.phone && other.createdAt === this.createdAt && other.confirmedAt == this.confirmedAt && other.emailConfirmedAt == this.emailConfirmedAt && other.phoneConfirmedAt == this.phoneConfirmedAt && other.lastSignInAt == this.lastSignInAt && other.role == this.role && other.updatedAt == this.updatedAt && collectionEquals(other.identities, this.identities) && collectionEquals(other.factors, this.factors);
    }
    get hashCode() {
      return (this.id[S$.$hashCode] ^ this.appMetadata[S$.$hashCode] ^ dart.hashCode(this.userMetadata) ^ this.aud[S$.$hashCode] ^ dart.hashCode(this.confirmationSentAt) ^ dart.hashCode(this.recoverySentAt) ^ dart.hashCode(this.emailChangeSentAt) ^ dart.hashCode(this.newEmail) ^ dart.hashCode(this.invitedAt) ^ dart.hashCode(this.actionLink) ^ dart.hashCode(this.email) ^ dart.hashCode(this.phone) ^ this.createdAt[S$.$hashCode] ^ dart.hashCode(this.confirmedAt) ^ dart.hashCode(this.emailConfirmedAt) ^ dart.hashCode(this.phoneConfirmedAt) ^ dart.hashCode(this.lastSignInAt) ^ dart.hashCode(this.role) ^ dart.hashCode(this.updatedAt) ^ dart.hashCode(this.identities) ^ dart.hashCode(this.factors)) >>> 0;
    }
  };
  (user.User.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let appMetadata = opts$ && 'appMetadata' in opts$ ? opts$.appMetadata : null;
    let userMetadata = opts$ && 'userMetadata' in opts$ ? opts$.userMetadata : null;
    let aud = opts$ && 'aud' in opts$ ? opts$.aud : null;
    let confirmationSentAt = opts$ && 'confirmationSentAt' in opts$ ? opts$.confirmationSentAt : null;
    let recoverySentAt = opts$ && 'recoverySentAt' in opts$ ? opts$.recoverySentAt : null;
    let emailChangeSentAt = opts$ && 'emailChangeSentAt' in opts$ ? opts$.emailChangeSentAt : null;
    let newEmail = opts$ && 'newEmail' in opts$ ? opts$.newEmail : null;
    let invitedAt = opts$ && 'invitedAt' in opts$ ? opts$.invitedAt : null;
    let actionLink = opts$ && 'actionLink' in opts$ ? opts$.actionLink : null;
    let email = opts$ && 'email' in opts$ ? opts$.email : null;
    let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
    let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
    let confirmedAt = opts$ && 'confirmedAt' in opts$ ? opts$.confirmedAt : null;
    let emailConfirmedAt = opts$ && 'emailConfirmedAt' in opts$ ? opts$.emailConfirmedAt : null;
    let phoneConfirmedAt = opts$ && 'phoneConfirmedAt' in opts$ ? opts$.phoneConfirmedAt : null;
    let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
    let role = opts$ && 'role' in opts$ ? opts$.role : null;
    let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
    let identities = opts$ && 'identities' in opts$ ? opts$.identities : null;
    let factors = opts$ && 'factors' in opts$ ? opts$.factors : null;
    this[S$.id] = id;
    this[S$.appMetadata] = appMetadata;
    this[S$.userMetadata] = userMetadata;
    this[S$.aud] = aud;
    this[S$.confirmationSentAt] = confirmationSentAt;
    this[S$.recoverySentAt] = recoverySentAt;
    this[S$.emailChangeSentAt] = emailChangeSentAt;
    this[S$.newEmail] = newEmail;
    this[S$.invitedAt] = invitedAt;
    this[S$.actionLink] = actionLink;
    this[S$.email$1] = email;
    this[S$.phone] = phone;
    this[S$.createdAt] = createdAt;
    this[S$.confirmedAt] = confirmedAt;
    this[S$.emailConfirmedAt] = emailConfirmedAt;
    this[S$.phoneConfirmedAt] = phoneConfirmedAt;
    this[S$.lastSignInAt] = lastSignInAt;
    this[S$.role] = role;
    this[S$.updatedAt] = updatedAt;
    this[S$.identities] = identities;
    this[S$.factors] = factors;
    ;
  }).prototype = user.User.prototype;
  dart.addTypeTests(user.User);
  dart.addTypeCaches(user.User);
  dart.setMethodSignature(user.User, () => ({
    __proto__: dart.getMethods(user.User.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(user.User, () => ['fromJson']);
  dart.setLibraryUri(user.User, I[32]);
  dart.setFieldSignature(user.User, () => ({
    __proto__: dart.getFields(user.User.__proto__),
    id: dart.finalFieldType(core.String),
    appMetadata: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
    userMetadata: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    aud: dart.finalFieldType(core.String),
    confirmationSentAt: dart.finalFieldType(dart.nullable(core.String)),
    recoverySentAt: dart.finalFieldType(dart.nullable(core.String)),
    emailChangeSentAt: dart.finalFieldType(dart.nullable(core.String)),
    newEmail: dart.finalFieldType(dart.nullable(core.String)),
    invitedAt: dart.finalFieldType(dart.nullable(core.String)),
    actionLink: dart.finalFieldType(dart.nullable(core.String)),
    email: dart.finalFieldType(dart.nullable(core.String)),
    phone: dart.finalFieldType(dart.nullable(core.String)),
    createdAt: dart.finalFieldType(core.String),
    confirmedAt: dart.finalFieldType(dart.nullable(core.String)),
    emailConfirmedAt: dart.finalFieldType(dart.nullable(core.String)),
    phoneConfirmedAt: dart.finalFieldType(dart.nullable(core.String)),
    lastSignInAt: dart.finalFieldType(dart.nullable(core.String)),
    role: dart.finalFieldType(dart.nullable(core.String)),
    updatedAt: dart.finalFieldType(dart.nullable(core.String)),
    identities: dart.finalFieldType(dart.nullable(core.List$(user.UserIdentity))),
    factors: dart.finalFieldType(dart.nullable(core.List$(mfa.Factor)))
  }));
  dart.defineExtensionMethods(user.User, ['toString', '_equals']);
  dart.defineExtensionAccessors(user.User, ['hashCode']);
  auth_user.AuthUser = class AuthUser extends user.User {
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let appMetadata = opts$ && 'appMetadata' in opts$ ? opts$.appMetadata : null;
      let userMetadata = opts$ && 'userMetadata' in opts$ ? opts$.userMetadata : null;
      let aud = opts$ && 'aud' in opts$ ? opts$.aud : null;
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let confirmedAt = opts$ && 'confirmedAt' in opts$ ? opts$.confirmedAt : null;
      let emailConfirmedAt = opts$ && 'emailConfirmedAt' in opts$ ? opts$.emailConfirmedAt : null;
      let phoneConfirmedAt = opts$ && 'phoneConfirmedAt' in opts$ ? opts$.phoneConfirmedAt : null;
      let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
      let role = opts$ && 'role' in opts$ ? opts$.role : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      return new auth_user.AuthUser.new({id: id, appMetadata: appMetadata, userMetadata: userMetadata, aud: aud, email: email, phone: phone, createdAt: createdAt, confirmedAt: confirmedAt, emailConfirmedAt: emailConfirmedAt, phoneConfirmedAt: phoneConfirmedAt, lastSignInAt: lastSignInAt, role: role, updatedAt: updatedAt});
    }
  };
  (auth_user.AuthUser.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let appMetadata = opts$ && 'appMetadata' in opts$ ? opts$.appMetadata : null;
    let userMetadata = opts$ && 'userMetadata' in opts$ ? opts$.userMetadata : null;
    let aud = opts$ && 'aud' in opts$ ? opts$.aud : null;
    let email = opts$ && 'email' in opts$ ? opts$.email : null;
    let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
    let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
    let confirmedAt = opts$ && 'confirmedAt' in opts$ ? opts$.confirmedAt : null;
    let emailConfirmedAt = opts$ && 'emailConfirmedAt' in opts$ ? opts$.emailConfirmedAt : null;
    let phoneConfirmedAt = opts$ && 'phoneConfirmedAt' in opts$ ? opts$.phoneConfirmedAt : null;
    let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
    let role = opts$ && 'role' in opts$ ? opts$.role : null;
    let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
    auth_user.AuthUser.__proto__.new.call(this, {id: id, appMetadata: appMetadata, userMetadata: userMetadata, aud: aud, email: email, phone: phone, createdAt: createdAt, confirmedAt: confirmedAt, emailConfirmedAt: emailConfirmedAt, phoneConfirmedAt: phoneConfirmedAt, lastSignInAt: lastSignInAt, role: role, updatedAt: updatedAt});
    ;
  }).prototype = auth_user.AuthUser.prototype;
  dart.addTypeTests(auth_user.AuthUser);
  dart.addTypeCaches(auth_user.AuthUser);
  dart.setLibraryUri(auth_user.AuthUser, I[33]);
  realtime_client_options.RealtimeClientOptions = class RealtimeClientOptions extends core.Object {
    get eventsPerSecond() {
      return this[S$.eventsPerSecond];
    }
    set eventsPerSecond(value) {
      super.eventsPerSecond = value;
    }
    get logLevel() {
      return this[S$.logLevel];
    }
    set logLevel(value) {
      super.logLevel = value;
    }
    static ['_#new#tearOff'](opts$) {
      let eventsPerSecond = opts$ && 'eventsPerSecond' in opts$ ? opts$.eventsPerSecond : null;
      let logLevel = opts$ && 'logLevel' in opts$ ? opts$.logLevel : null;
      return new realtime_client_options.RealtimeClientOptions.new({eventsPerSecond: eventsPerSecond, logLevel: logLevel});
    }
  };
  (realtime_client_options.RealtimeClientOptions.new = function(opts$) {
    let eventsPerSecond = opts$ && 'eventsPerSecond' in opts$ ? opts$.eventsPerSecond : null;
    let logLevel = opts$ && 'logLevel' in opts$ ? opts$.logLevel : null;
    this[S$.eventsPerSecond] = eventsPerSecond;
    this[S$.logLevel] = logLevel;
    ;
  }).prototype = realtime_client_options.RealtimeClientOptions.prototype;
  dart.addTypeTests(realtime_client_options.RealtimeClientOptions);
  dart.addTypeCaches(realtime_client_options.RealtimeClientOptions);
  dart.setLibraryUri(realtime_client_options.RealtimeClientOptions, I[34]);
  dart.setFieldSignature(realtime_client_options.RealtimeClientOptions, () => ({
    __proto__: dart.getFields(realtime_client_options.RealtimeClientOptions.__proto__),
    eventsPerSecond: dart.finalFieldType(dart.nullable(core.int)),
    logLevel: dart.finalFieldType(dart.nullable(constants$0.RealtimeLogLevel))
  }));
  remove_subscription_result.RemoveSubscriptionResult = class RemoveSubscriptionResult extends core.Object {
    get openSubscriptions() {
      return this[S$.openSubscriptions];
    }
    set openSubscriptions(value) {
      super.openSubscriptions = value;
    }
    get error() {
      return this[S$.error];
    }
    set error(value) {
      super.error = value;
    }
    static ['_#new#tearOff'](opts$) {
      let openSubscriptions = opts$ && 'openSubscriptions' in opts$ ? opts$.openSubscriptions : null;
      let error = opts$ && 'error' in opts$ ? opts$.error : null;
      return new remove_subscription_result.RemoveSubscriptionResult.new({openSubscriptions: openSubscriptions, error: error});
    }
    toString() {
      return "RemoveSubscriptionResult(openSubscriptions: " + dart.str(this.openSubscriptions) + ", error: " + dart.str(this.error) + ")";
    }
  };
  (remove_subscription_result.RemoveSubscriptionResult.new = function(opts$) {
    let openSubscriptions = opts$ && 'openSubscriptions' in opts$ ? opts$.openSubscriptions : null;
    let error = opts$ && 'error' in opts$ ? opts$.error : null;
    this[S$.openSubscriptions] = openSubscriptions;
    this[S$.error] = error;
    ;
  }).prototype = remove_subscription_result.RemoveSubscriptionResult.prototype;
  dart.addTypeTests(remove_subscription_result.RemoveSubscriptionResult);
  dart.addTypeCaches(remove_subscription_result.RemoveSubscriptionResult);
  dart.setLibraryUri(remove_subscription_result.RemoveSubscriptionResult, I[35]);
  dart.setFieldSignature(remove_subscription_result.RemoveSubscriptionResult, () => ({
    __proto__: dart.getFields(remove_subscription_result.RemoveSubscriptionResult.__proto__),
    openSubscriptions: dart.finalFieldType(core.int),
    error: dart.finalFieldType(dart.nullable(supabase_realtime_error.SupabaseRealtimeError))
  }));
  dart.defineExtensionMethods(remove_subscription_result.RemoveSubscriptionResult, ['toString']);
  supabase_client$.SupabaseClient = class SupabaseClient extends core.Object {
    get supabaseUrl() {
      return this[S$.supabaseUrl];
    }
    set supabaseUrl(value) {
      super.supabaseUrl = value;
    }
    get supabaseKey() {
      return this[S$.supabaseKey];
    }
    set supabaseKey(value) {
      super.supabaseKey = value;
    }
    get schema() {
      return this[S$.schema];
    }
    set schema(value) {
      super.schema = value;
    }
    get restUrl() {
      return this[S$.restUrl];
    }
    set restUrl(value) {
      super.restUrl = value;
    }
    get realtimeUrl() {
      return this[S$.realtimeUrl];
    }
    set realtimeUrl(value) {
      super.realtimeUrl = value;
    }
    get authUrl() {
      return this[S$.authUrl];
    }
    set authUrl(value) {
      super.authUrl = value;
    }
    get storageUrl() {
      return this[S$.storageUrl];
    }
    set storageUrl(value) {
      super.storageUrl = value;
    }
    get functionsUrl() {
      return this[S$.functionsUrl];
    }
    set functionsUrl(value) {
      super.functionsUrl = value;
    }
    get [S$._authHttpClient]() {
      let t39;
      t39 = this[S$.__SupabaseClient__authHttpClient];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("_authHttpClient")) : t39;
    }
    set [S$._authHttpClient](_authHttpClient$35param) {
      if (this[S$.__SupabaseClient__authHttpClient] == null)
        this[S$.__SupabaseClient__authHttpClient] = _authHttpClient$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_authHttpClient"));
    }
    get auth() {
      let t39;
      t39 = this[S$.__SupabaseClient_auth];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("auth")) : t39;
    }
    set auth(auth$35param) {
      if (this[S$.__SupabaseClient_auth] == null)
        this[S$.__SupabaseClient_auth] = auth$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("auth"));
    }
    get functions() {
      let t39;
      t39 = this[S$.__SupabaseClient_functions];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("functions")) : t39;
    }
    set functions(functions$35param) {
      if (this[S$.__SupabaseClient_functions] == null)
        this[S$.__SupabaseClient_functions] = functions$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("functions"));
    }
    get storage() {
      let t39;
      t39 = this[S$.__SupabaseClient_storage];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("storage")) : t39;
    }
    set storage(storage$35param) {
      if (this[S$.__SupabaseClient_storage] == null)
        this[S$.__SupabaseClient_storage] = storage$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("storage"));
    }
    get realtime() {
      let t39;
      t39 = this[S$.__SupabaseClient_realtime];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("realtime")) : t39;
    }
    set realtime(realtime$35param) {
      if (this[S$.__SupabaseClient_realtime] == null)
        this[S$.__SupabaseClient_realtime] = realtime$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("realtime"));
    }
    get rest() {
      let t39;
      t39 = this[S$.__SupabaseClient_rest];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("rest")) : t39;
    }
    set rest(rest$35param) {
      if (this[S$.__SupabaseClient_rest] == null)
        this[S$.__SupabaseClient_rest] = rest$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("rest"));
    }
    get [S$._authStateSubscription]() {
      let t39;
      t39 = this[S$.__SupabaseClient__authStateSubscription];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("_authStateSubscription")) : t39;
    }
    set [S$._authStateSubscription](_authStateSubscription$35param) {
      this[S$.__SupabaseClient__authStateSubscription] = _authStateSubscription$35param;
    }
    get [S$._isolate]() {
      let t39;
      t39 = this[S$.__SupabaseClient__isolate];
      return t39 == null ? dart.throw(new _internal.LateError.fieldNI("_isolate")) : t39;
    }
    set [S$._isolate](_isolate$35param) {
      if (this[S$.__SupabaseClient__isolate] == null)
        this[S$.__SupabaseClient__isolate] = _isolate$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_isolate"));
    }
    get headers() {
      return this[S$._headers];
    }
    set headers(headers) {
      let t40, t40$, t40$0, t40$1, t41;
      this[S$._headers][S$.$clear]();
      this[S$._headers][S$.$addAll]((() => {
        let t39 = T$.LinkedHashMapOfString$String().of(constants$1.Constants.defaultHeaders);
        t39[S$.$addAll](headers);
        return t39;
      })());
      t40 = this.rest.headers;
      (() => {
        t40[S$.$clear]();
        t40[S$.$addAll](this[S$._headers]);
        return t40;
      })();
      t40$ = this.functions.headers;
      (() => {
        t40$[S$.$clear]();
        t40$[S$.$addAll](this[S$._headers]);
        return t40$;
      })();
      t40$0 = this.storage.headers;
      (() => {
        t40$0[S$.$clear]();
        t40$0[S$.$addAll](this[S$._headers]);
        return t40$0;
      })();
      t40$1 = this.auth.headers;
      (() => {
        t40$1[S$.$clear]();
        t40$1[S$.$addAll]((() => {
          let t41 = T$.LinkedHashMapOfString$String().of(constants$1.Constants.defaultHeaders);
          t41[S$.$addAll](this[S$._getAuthHeaders]());
          t41[S$.$addAll](headers);
          return t41;
        })());
        return t40$1;
      })();
      t41 = this.realtime.headers;
      (() => {
        t41[S$.$clear]();
        t41[S$.$addAll](this[S$._headers]);
        return t41;
      })();
    }
    static ['_#new#tearOff'](supabaseUrl, supabaseKey, opts$) {
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let autoRefreshToken = opts$ && 'autoRefreshToken' in opts$ ? opts$.autoRefreshToken : true;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let storageRetryAttempts = opts$ && 'storageRetryAttempts' in opts$ ? opts$.storageRetryAttempts : 0;
      let realtimeClientOptions = opts$ && 'realtimeClientOptions' in opts$ ? opts$.realtimeClientOptions : C[35] || CT.C35;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      let gotrueAsyncStorage = opts$ && 'gotrueAsyncStorage' in opts$ ? opts$.gotrueAsyncStorage : null;
      let authFlowType = opts$ && 'authFlowType' in opts$ ? opts$.authFlowType : C[36] || CT.C36;
      return new supabase_client$.SupabaseClient.new(supabaseUrl, supabaseKey, {schema: schema, autoRefreshToken: autoRefreshToken, headers: headers, httpClient: httpClient, storageRetryAttempts: storageRetryAttempts, realtimeClientOptions: realtimeClientOptions, isolate: isolate, gotrueAsyncStorage: gotrueAsyncStorage, authFlowType: authFlowType});
    }
    from(table) {
      let url = this.restUrl + "/" + table;
      this[S$._incrementId] = this[S$._incrementId] + 1;
      return new supabase_query_builder.SupabaseQueryBuilder.new(url, this.realtime, {headers: (() => {
          let t41 = T$.LinkedHashMapOfString$String().of(this.rest.headers);
          t41[S$.$addAll](this.headers);
          return t41;
        })(), schema: this.schema, table: table, httpClient: this[S$._authHttpClient], incrementId: this[S$._incrementId], isolate: this[S$._isolate]});
    }
    useSchema(schema) {
      return this.rest.useSchema(schema);
    }
    rpc(fn, opts$) {
      let params = opts$ && 'params' in opts$ ? opts$.params : null;
      let options = opts$ && 'options' in opts$ ? opts$.options : C[82] || CT.C82;
      this.rest.headers[S$.$addAll]((() => {
        let t42 = T$.LinkedHashMapOfString$String().of(this.rest.headers);
        t42[S$.$addAll](this.headers);
        return t42;
      })());
      return this.rest.rpc(fn, {params: params, options: options});
    }
    channel(name, opts$) {
      let opts = opts$ && 'opts' in opts$ ? opts$.opts : C[83] || CT.C83;
      return this.realtime.channel(name, opts);
    }
    getChannels() {
      return this.realtime.getChannels();
    }
    removeChannel(channel) {
      return this.realtime.removeChannel(channel);
    }
    removeAllChannels() {
      return this.realtime.removeAllChannels();
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        yield this[S$._authStateSubscription].cancel();
        yield this[S$._isolate].dispose();
      }).bind(this));
    }
    [S$._initSupabaseAuthClient](opts$) {
      let autoRefreshToken = opts$ && 'autoRefreshToken' in opts$ ? opts$.autoRefreshToken : null;
      let gotrueAsyncStorage = opts$ && 'gotrueAsyncStorage' in opts$ ? opts$.gotrueAsyncStorage : null;
      let authFlowType = opts$ && 'authFlowType' in opts$ ? opts$.authFlowType : null;
      let authHeaders = (() => {
        let t43 = T$.LinkedHashMapOfString$String().of(this.headers);
        return t43;
      })();
      authHeaders[S$.$_set]("apikey", this.supabaseKey);
      authHeaders[S$.$_set]("Authorization", "Bearer " + this.supabaseKey);
      return new gotrue_client.GoTrueClient.new({url: this.authUrl, headers: authHeaders, autoRefreshToken: autoRefreshToken, httpClient: this[S$._httpClient], asyncStorage: gotrueAsyncStorage, flowType: authFlowType});
    }
    [S$._initRestClient]() {
      return new postgrest$.PostgrestClient.new(this.restUrl, {headers: (() => {
          let t44 = T$.LinkedHashMapOfString$String().of(this.headers);
          return t44;
        })(), schema: this.schema, httpClient: this[S$._authHttpClient], isolate: this[S$._isolate]});
    }
    [S$._initFunctionsClient]() {
      return new functions_client$.FunctionsClient.new(this.functionsUrl, (() => {
        let t45 = T$.LinkedHashMapOfString$String().of(this.headers);
        return t45;
      })(), {httpClient: this[S$._authHttpClient], isolate: this[S$._isolate]});
    }
    [S$._initStorageClient](storageRetryAttempts) {
      return new storage_client$.SupabaseStorageClient.new(this.storageUrl, (() => {
        let t46 = T$.LinkedHashMapOfString$String().of(this.headers);
        return t46;
      })(), {httpClient: this[S$._authHttpClient], retryAttempts: storageRetryAttempts});
    }
    [S$._initRealtimeClient](opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let eventsPerSecond = options.eventsPerSecond;
      return new realtime_client$.RealtimeClient.new(this.realtimeUrl, {params: (() => {
          let t47 = new (T$.IdentityMapOfString$dynamic()).new();
          t47[S$.$_set]("apikey", this.supabaseKey);
          if (eventsPerSecond != null) t47[S$.$_set]("eventsPerSecond", dart.str(eventsPerSecond));
          return t47;
        })(), headers: this.headers, logLevel: options.logLevel, httpClient: this[S$._authHttpClient]});
    }
    [S$._getAuthHeaders]() {
      let t48, t48$;
      let authBearer = (t48$ = (t48 = this.auth.currentSession, t48 == null ? null : t48.accessToken), t48$ == null ? this.supabaseKey : t48$);
      let defaultHeaders = new (T$.IdentityMapOfString$String()).from(["apikey", this.supabaseKey, "Authorization", "Bearer " + authBearer]);
      let headers = (() => {
        let t48 = T$.LinkedHashMapOfString$String().of(defaultHeaders);
        t48[S$.$addAll](this[S$._headers]);
        return t48;
      })();
      return headers;
    }
    [S$._listenForAuthEvents]() {
      this[S$._authStateSubscription] = this.auth.onAuthStateChangeSync.listen(dart.fn(data => {
        let t49;
        this[S$._handleTokenChanged](data.event, (t49 = data.session, t49 == null ? null : t49.accessToken));
      }, T$.AuthStateTovoid()), {onError: dart.fn((error, stack) => {
        }, T$.dynamicAnddynamicToNull())});
    }
    [S$._handleTokenChanged](event, token) {
      if (event === constants$.AuthChangeEvent.tokenRefreshed || event === constants$.AuthChangeEvent.signedIn && this[S$._changedAccessToken] != token) {
        this[S$._changedAccessToken] = token;
        this.realtime.setAuth(token);
      } else if (event === constants$.AuthChangeEvent.signedOut || event === constants$.AuthChangeEvent.userDeleted) {
        this.realtime.setAuth(this.supabaseKey);
      }
    }
  };
  (supabase_client$.SupabaseClient.new = function(supabaseUrl, supabaseKey, opts$) {
    let t38, t40, t39, t39$;
    let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
    let autoRefreshToken = opts$ && 'autoRefreshToken' in opts$ ? opts$.autoRefreshToken : true;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let storageRetryAttempts = opts$ && 'storageRetryAttempts' in opts$ ? opts$.storageRetryAttempts : 0;
    let realtimeClientOptions = opts$ && 'realtimeClientOptions' in opts$ ? opts$.realtimeClientOptions : C[35] || CT.C35;
    let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
    let gotrueAsyncStorage = opts$ && 'gotrueAsyncStorage' in opts$ ? opts$.gotrueAsyncStorage : null;
    let authFlowType = opts$ && 'authFlowType' in opts$ ? opts$.authFlowType : C[36] || CT.C36;
    this[S$.__SupabaseClient__authHttpClient] = null;
    this[S$.__SupabaseClient_auth] = null;
    this[S$.__SupabaseClient_functions] = null;
    this[S$.__SupabaseClient_storage] = null;
    this[S$.__SupabaseClient_realtime] = null;
    this[S$.__SupabaseClient_rest] = null;
    this[S$._changedAccessToken] = null;
    this[S$.__SupabaseClient__authStateSubscription] = null;
    this[S$.__SupabaseClient__isolate] = null;
    this[S$._incrementId] = 0;
    this[S$.supabaseUrl] = supabaseUrl;
    this[S$.supabaseKey] = supabaseKey;
    this[S$.restUrl] = supabaseUrl + "/rest/v1";
    this[S$.realtimeUrl] = (supabaseUrl + "/realtime/v1")[S$.$replaceAll]("http", "ws");
    this[S$.authUrl] = supabaseUrl + "/auth/v1";
    this[S$.storageUrl] = supabaseUrl + "/storage/v1";
    this[S$.functionsUrl] = supabaseUrl + "/functions/v1";
    this[S$.schema] = (t38 = schema, t38 == null ? "public" : t38);
    this[S$._headers] = (() => {
      let t38 = T$.LinkedHashMapOfString$String().of(constants$1.Constants.defaultHeaders);
      if (headers != null) t38[S$.$addAll](headers);
      return t38;
    })();
    this[S$._httpClient] = httpClient;
    this[S$.__SupabaseClient__isolate] = (t39 = isolate, t39 == null ? (t40 = new _isolates_web.YAJsonIsolate.new(), (() => {
      t40.initialize();
      return t40;
    })()) : t39);
    this.auth = this[S$._initSupabaseAuthClient]({autoRefreshToken: autoRefreshToken, gotrueAsyncStorage: gotrueAsyncStorage, authFlowType: authFlowType});
    this[S$._authHttpClient] = new auth_http_client.AuthHttpClient.new(this.supabaseKey, (t39$ = httpClient, t39$ == null ? client$.Client.new() : t39$), this.auth);
    this.rest = this[S$._initRestClient]();
    this.functions = this[S$._initFunctionsClient]();
    this.storage = this[S$._initStorageClient](storageRetryAttempts);
    this.realtime = this[S$._initRealtimeClient]({options: realtimeClientOptions});
    this[S$._listenForAuthEvents]();
  }).prototype = supabase_client$.SupabaseClient.prototype;
  dart.addTypeTests(supabase_client$.SupabaseClient);
  dart.addTypeCaches(supabase_client$.SupabaseClient);
  dart.setMethodSignature(supabase_client$.SupabaseClient, () => ({
    __proto__: dart.getMethods(supabase_client$.SupabaseClient.__proto__),
    from: dart.fnType(supabase_query_builder.SupabaseQueryBuilder, [core.String]),
    useSchema: dart.fnType(postgrest$.PostgrestClient, [core.String]),
    rpc: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [core.String], {options: types$2.FetchOptions, params: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    channel: dart.fnType(realtime_channel.RealtimeChannel, [core.String], {opts: realtime_channel.RealtimeChannelConfig}, {}),
    getChannels: dart.fnType(core.List$(realtime_channel.RealtimeChannel), []),
    removeChannel: dart.fnType(async.Future$(core.String), [realtime_channel.RealtimeChannel]),
    removeAllChannels: dart.fnType(async.Future$(core.List$(core.String)), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    [S$._initSupabaseAuthClient]: dart.fnType(gotrue_client.GoTrueClient, [], {autoRefreshToken: dart.nullable(core.bool)}, {authFlowType: oauth_flow_type.AuthFlowType, gotrueAsyncStorage: dart.nullable(gotrue_async_storage.GotrueAsyncStorage)}),
    [S$._initRestClient]: dart.fnType(postgrest$.PostgrestClient, []),
    [S$._initFunctionsClient]: dart.fnType(functions_client$.FunctionsClient, []),
    [S$._initStorageClient]: dart.fnType(storage_client$.SupabaseStorageClient, [core.int]),
    [S$._initRealtimeClient]: dart.fnType(realtime_client$.RealtimeClient, [], {}, {options: realtime_client_options.RealtimeClientOptions}),
    [S$._getAuthHeaders]: dart.fnType(core.Map$(core.String, core.String), []),
    [S$._listenForAuthEvents]: dart.fnType(dart.void, []),
    [S$._handleTokenChanged]: dart.fnType(dart.void, [constants$.AuthChangeEvent, dart.nullable(core.String)])
  }));
  dart.setGetterSignature(supabase_client$.SupabaseClient, () => ({
    __proto__: dart.getGetters(supabase_client$.SupabaseClient.__proto__),
    [S$._authHttpClient]: client$.Client,
    auth: gotrue_client.GoTrueClient,
    functions: functions_client$.FunctionsClient,
    storage: storage_client$.SupabaseStorageClient,
    realtime: realtime_client$.RealtimeClient,
    rest: postgrest$.PostgrestClient,
    [S$._authStateSubscription]: async.StreamSubscription$(auth_state.AuthState),
    [S$._isolate]: _isolates_web.YAJsonIsolate,
    headers: core.Map$(core.String, core.String)
  }));
  dart.setSetterSignature(supabase_client$.SupabaseClient, () => ({
    __proto__: dart.getSetters(supabase_client$.SupabaseClient.__proto__),
    [S$._authHttpClient]: client$.Client,
    auth: gotrue_client.GoTrueClient,
    functions: functions_client$.FunctionsClient,
    storage: storage_client$.SupabaseStorageClient,
    realtime: realtime_client$.RealtimeClient,
    rest: postgrest$.PostgrestClient,
    [S$._authStateSubscription]: async.StreamSubscription$(auth_state.AuthState),
    [S$._isolate]: _isolates_web.YAJsonIsolate,
    headers: core.Map$(core.String, core.String)
  }));
  dart.setLibraryUri(supabase_client$.SupabaseClient, I[36]);
  dart.setFieldSignature(supabase_client$.SupabaseClient, () => ({
    __proto__: dart.getFields(supabase_client$.SupabaseClient.__proto__),
    supabaseUrl: dart.finalFieldType(core.String),
    supabaseKey: dart.finalFieldType(core.String),
    schema: dart.finalFieldType(core.String),
    restUrl: dart.finalFieldType(core.String),
    realtimeUrl: dart.finalFieldType(core.String),
    authUrl: dart.finalFieldType(core.String),
    storageUrl: dart.finalFieldType(core.String),
    functionsUrl: dart.finalFieldType(core.String),
    [S$._headers]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$._httpClient]: dart.finalFieldType(dart.nullable(client$.Client)),
    [S$.__SupabaseClient__authHttpClient]: dart.fieldType(dart.nullable(client$.Client)),
    [S$.__SupabaseClient_auth]: dart.fieldType(dart.nullable(gotrue_client.GoTrueClient)),
    [S$.__SupabaseClient_functions]: dart.fieldType(dart.nullable(functions_client$.FunctionsClient)),
    [S$.__SupabaseClient_storage]: dart.fieldType(dart.nullable(storage_client$.SupabaseStorageClient)),
    [S$.__SupabaseClient_realtime]: dart.fieldType(dart.nullable(realtime_client$.RealtimeClient)),
    [S$.__SupabaseClient_rest]: dart.fieldType(dart.nullable(postgrest$.PostgrestClient)),
    [S$._changedAccessToken]: dart.fieldType(dart.nullable(core.String)),
    [S$.__SupabaseClient__authStateSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(auth_state.AuthState))),
    [S$.__SupabaseClient__isolate]: dart.fieldType(dart.nullable(_isolates_web.YAJsonIsolate)),
    [S$._incrementId]: dart.fieldType(core.int)
  }));
  supabase_event_types.SupabaseEventTypes = class SupabaseEventTypes extends core._Enum {
    [S$._enumToString]() {
      return "SupabaseEventTypes." + this[S$._name];
    }
  };
  (supabase_event_types.SupabaseEventTypes.new = function(index, name) {
    supabase_event_types.SupabaseEventTypes.__proto__.new.call(this, index, name);
    ;
  }).prototype = supabase_event_types.SupabaseEventTypes.prototype;
  dart.addTypeTests(supabase_event_types.SupabaseEventTypes);
  dart.addTypeCaches(supabase_event_types.SupabaseEventTypes);
  dart.setMethodSignature(supabase_event_types.SupabaseEventTypes, () => ({
    __proto__: dart.getMethods(supabase_event_types.SupabaseEventTypes.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(supabase_event_types.SupabaseEventTypes, I[37]);
  dart.setStaticFieldSignature(supabase_event_types.SupabaseEventTypes, () => ['values', 'insert', 'update', 'delete', 'all', 'broadcast', 'presence']);
  dart.defineLazy(supabase_event_types.SupabaseEventTypes, {
    /*supabase_event_types.SupabaseEventTypes.values*/get values() {
      return C[84] || CT.C84;
    },
    /*supabase_event_types.SupabaseEventTypes.insert*/get insert() {
      return C[85] || CT.C85;
    },
    /*supabase_event_types.SupabaseEventTypes.update*/get update() {
      return C[86] || CT.C86;
    },
    /*supabase_event_types.SupabaseEventTypes.delete*/get delete() {
      return C[87] || CT.C87;
    },
    /*supabase_event_types.SupabaseEventTypes.all*/get all() {
      return C[88] || CT.C88;
    },
    /*supabase_event_types.SupabaseEventTypes.broadcast*/get broadcast() {
      return C[89] || CT.C89;
    },
    /*supabase_event_types.SupabaseEventTypes.presence*/get presence() {
      return C[90] || CT.C90;
    }
  }, false);
  supabase_event_types['SupabaseEventTypesName|name'] = function SupabaseEventTypesName$124name($this) {
    let name = $this.toString()[S$.$split](".")[S$.$last];
    if (name === "all") {
      return "*";
    } else {
      return name[S$.$toUpperCase]();
    }
  };
  supabase_event_types['SupabaseEventTypesName|get#name'] = function SupabaseEventTypesName$124get$35name($this) {
    return dart.fn(() => supabase_event_types['SupabaseEventTypesName|name']($this), T$.VoidToString());
  };
  const _is_PostgrestBuilder_default = Symbol('_is_PostgrestBuilder_default');
  postgrest_builder.PostgrestBuilder$ = dart.generic((T, S) => {
    var __t$PostgrestResponseOfT = () => (__t$PostgrestResponseOfT = dart.constFn(types$2.PostgrestResponse$(T)))();
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$TToNull = () => (__t$TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    var __t$TToT = () => (__t$TToT = dart.constFn(dart.fnType(T, [T])))();
    var __t$FutureOrOfT = () => (__t$FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var __t$VoidToFutureOrOfT = () => (__t$VoidToFutureOrOfT = dart.constFn(dart.fnType(__t$FutureOrOfT(), [])))();
    var __t$VoidToNFutureOrOfT = () => (__t$VoidToNFutureOrOfT = dart.constFn(dart.nullable(__t$VoidToFutureOrOfT())))();
    var __t$dynamicToT = () => (__t$dynamicToT = dart.constFn(dart.fnType(T, [dart.dynamic])))();
    var __t$TToFutureOrOfT = () => (__t$TToFutureOrOfT = dart.constFn(dart.fnType(__t$FutureOrOfT(), [T])))();
    class PostgrestBuilder extends core.Object {
      get [S$._headers$1]() {
        let t55;
        t55 = this[S$.__PostgrestBuilder__headers];
        return t55 == null ? dart.throw(new _internal.LateError.fieldNI("_headers")) : t55;
      }
      set [S$._headers$1](_headers$35param) {
        if (this[S$.__PostgrestBuilder__headers] == null)
          this[S$.__PostgrestBuilder__headers] = _headers$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("_headers"));
      }
      get [S$._schema$1]() {
        return this[S$.__PostgrestBuilder__schema_isSet] ? this[S$.__PostgrestBuilder__schema] : dart.throw(new _internal.LateError.fieldNI("_schema"));
      }
      set [S$._schema$1](_schema$35param) {
        if (this[S$.__PostgrestBuilder__schema_isSet])
          dart.throw(new _internal.LateError.fieldAI("_schema"));
        else {
          this[S$.__PostgrestBuilder__schema_isSet] = true;
          this[S$.__PostgrestBuilder__schema] = _schema$35param;
        }
      }
      get [S$._url]() {
        let t55;
        t55 = this[S$.__PostgrestBuilder__url];
        return t55 == null ? dart.throw(new _internal.LateError.fieldNI("_url")) : t55;
      }
      set [S$._url](_url$35param) {
        this[S$.__PostgrestBuilder__url] = _url$35param;
      }
      get [S$._httpClient$1]() {
        return this[S$.__PostgrestBuilder__httpClient_isSet] ? this[S$.__PostgrestBuilder__httpClient] : dart.throw(new _internal.LateError.fieldNI("_httpClient"));
      }
      set [S$._httpClient$1](_httpClient$35param) {
        if (this[S$.__PostgrestBuilder__httpClient_isSet])
          dart.throw(new _internal.LateError.fieldAI("_httpClient"));
        else {
          this[S$.__PostgrestBuilder__httpClient_isSet] = true;
          this[S$.__PostgrestBuilder__httpClient] = _httpClient$35param;
        }
      }
      get [S$._isolate$1]() {
        return this[S$.__PostgrestBuilder__isolate_isSet] ? this[S$.__PostgrestBuilder__isolate] : dart.throw(new _internal.LateError.fieldNI("_isolate"));
      }
      set [S$._isolate$1](_isolate$35param) {
        if (this[S$.__PostgrestBuilder__isolate_isSet])
          dart.throw(new _internal.LateError.fieldAI("_isolate"));
        else {
          this[S$.__PostgrestBuilder__isolate_isSet] = true;
          this[S$.__PostgrestBuilder__isolate] = _isolate$35param;
        }
      }
      static ['_#new#tearOff'](T, S, opts$) {
        let url = opts$ && 'url' in opts$ ? opts$.url : null;
        let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
        let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
        let method = opts$ && 'method' in opts$ ? opts$.method : null;
        let body = opts$ && 'body' in opts$ ? opts$.body : null;
        let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
        let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
        let options = opts$ && 'options' in opts$ ? opts$.options : null;
        let maybeSingle = opts$ && 'maybeSingle' in opts$ ? opts$.maybeSingle : false;
        let converter = opts$ && 'converter' in opts$ ? opts$.converter : null;
        return new (postgrest_builder.PostgrestBuilder$(T, S)).new({url: url, headers: headers, schema: schema, method: method, body: body, httpClient: httpClient, isolate: isolate, options: options, maybeSingle: maybeSingle, converter: converter});
      }
      withConverter(R, converter) {
        return new (postgrest_builder.PostgrestBuilder$(R, T)).new({url: this[S$._url], headers: this[S$._headers$1], schema: this[S$._schema$1], method: this[S$._method], body: this[S$._body], isolate: this[S$._isolate$1], httpClient: this[S$._httpClient$1], options: this[S$._options], maybeSingle: this[S$._maybeSingle], converter: converter});
      }
      [S$._assertCorrectGeneric](R) {
        if (!(R._equals(dart.wrapType(T$.ListOfMapOfString$dynamic())) || R._equals(dart.wrapType(T$.MapOfString$dynamic())) || R._equals(dart.wrapType(T$.MapNOfString$dynamic())) || R._equals(dart.wrapType(T$.PostgrestResponseOfListOfMapOfString$dynamic())) || R._equals(dart.wrapType(T$.PostgrestResponseOfMapOfString$dynamic())) || R._equals(dart.wrapType(T$.PostgrestResponseOfMapNOfString$dynamic())) || R._equals(dart.wrapType(types$2.PostgrestResponse)) || R._equals(dart.wrapType(core.List)) || R._equals(dart.wrapType(T$.ListOfMap())) || R._equals(dart.wrapType(core.Map)) || R._equals(dart.wrapType(dart.dynamic)))) dart.assertFailed(dart.str(R) + " is not allowed as generic for `select<R>()`. Allowed types are: `PostgrestList`, `PostgrestMap`, `PostgrestMap?`, `PostgrestListResponse`, `PostgrestMapResponse`, `PostgrestResponse`, `dynamic`.", I[39], 89, 9, "R == PostgrestList ||\n            R == PostgrestMap ||\n            R == (_Nullable<PostgrestMap>) ||\n            R == PostgrestListResponse ||\n            R == PostgrestMapResponse ||\n            R == (PostgrestResponse<PostgrestMap?>) ||\n            R == PostgrestResponse ||\n            R == List ||\n            R == (List<Map>) ||\n            R == Map ||\n            R == dynamic");
      }
      execute(opts$) {
        let head = opts$ && 'head' in opts$ ? opts$.head : false;
        let count = opts$ && 'count' in opts$ ? opts$.count : null;
        return async.async(types$2.PostgrestResponse, (function* execute() {
          let t56, t55;
          this[S$._options] = new types$2.FetchOptions.new({head: head, count: (t55 = count, t55 == null ? (t56 = this[S$._options], t56 == null ? null : t56.count) : t55)});
          return this[S$._execute]();
        }).bind(this));
      }
      [S$._execute]() {
        return async.async(types$2.PostgrestResponse, (function* _execute() {
          let t55, t55$, t55$0, t58, t58$, t58$0, t58$1, t58$2, t58$3, t58$4, t58$5, t58$6, t58$7, t58$8, t58$9;
          if (dart.test((t55$ = (t55 = this[S$._options], t55 == null ? null : t55.head), t55$ == null ? false : t55$))) {
            this[S$._method] = "HEAD";
          }
          if ((t55$0 = this[S$._options], t55$0 == null ? null : t55$0.count) != null) {
            if (this[S$._headers$1][S$.$_get]("Prefer") != null) {
              let oldPreferHeader = this[S$._headers$1][S$.$_get]("Prefer");
              this[S$._headers$1][S$.$_set]("Prefer", dart.str(oldPreferHeader) + ",count=" + types$2['CountOptionName|name'](dart.nullCheck(dart.nullCheck(this[S$._options]).count)));
            } else {
              this[S$._headers$1][S$.$_set]("Prefer", "count=" + types$2['CountOptionName|name'](dart.nullCheck(dart.nullCheck(this[S$._options]).count)));
            }
          }
          try {
            if (this[S$._method] == null) {
              dart.throw(new core.ArgumentError.new("Missing table operation: select, insert, update or delete"));
            }
            let uppercaseMethod = dart.nullCheck(this[S$._method])[S$.$toUpperCase]();
            let response = null;
            function response$35get() {
              let t56;
              t56 = response;
              return t56 == null ? dart.throw(new _internal.LateError.localNI("response")) : t56;
            }
            function response$35set(response$35param) {
              return response = response$35param;
            }
            if (this[S$._schema$1] == null) {
            } else if (T$.JSArrayOfString().of(["GET", "HEAD"])[S$.$contains](this[S$._method])) {
              this[S$._headers$1][S$.$_set]("Accept-Profile", dart.nullCheck(this[S$._schema$1]));
            } else {
              this[S$._headers$1][S$.$_set]("Content-Profile", dart.nullCheck(this[S$._schema$1]));
            }
            if (this[S$._method] !== "GET" && this[S$._method] !== "HEAD") {
              this[S$._headers$1][S$.$_set]("Content-Type", "application/json");
            }
            let bodyStr = convert.jsonEncode(this[S$._body]);
            if (uppercaseMethod === "GET") {
              response$35set(yield (t58$ = (t58 = this[S$._httpClient$1], t58 == null ? null : dart.bind(t58, 'get')), t58$ == null ? C[92] || CT.C92 : t58$)(this[S$._url], {headers: this[S$._headers$1]}));
            } else if (uppercaseMethod === "POST") {
              response$35set(yield (t58$1 = (t58$0 = this[S$._httpClient$1], t58$0 == null ? null : dart.bind(t58$0, 'post')), t58$1 == null ? C[93] || CT.C93 : t58$1)(this[S$._url], {headers: this[S$._headers$1], body: bodyStr}));
            } else if (uppercaseMethod === "PUT") {
              response$35set(yield (t58$3 = (t58$2 = this[S$._httpClient$1], t58$2 == null ? null : dart.bind(t58$2, 'put')), t58$3 == null ? C[94] || CT.C94 : t58$3)(this[S$._url], {headers: this[S$._headers$1], body: bodyStr}));
            } else if (uppercaseMethod === "PATCH") {
              response$35set(yield (t58$5 = (t58$4 = this[S$._httpClient$1], t58$4 == null ? null : dart.bind(t58$4, 'patch')), t58$5 == null ? C[95] || CT.C95 : t58$5)(this[S$._url], {headers: this[S$._headers$1], body: bodyStr}));
            } else if (uppercaseMethod === "DELETE") {
              response$35set(yield (t58$7 = (t58$6 = this[S$._httpClient$1], t58$6 == null ? null : dart.bind(t58$6, 'delete')), t58$7 == null ? C[96] || CT.C96 : t58$7)(this[S$._url], {headers: this[S$._headers$1]}));
            } else if (uppercaseMethod === "HEAD") {
              response$35set(yield (t58$9 = (t58$8 = this[S$._httpClient$1], t58$8 == null ? null : dart.bind(t58$8, 'head')), t58$9 == null ? C[97] || CT.C97 : t58$9)(this[S$._url], {headers: this[S$._headers$1]}));
            }
            return this[S$._parseResponse](response$35get());
          } catch (e) {
            let error = dart.getThrown(e);
            if (core.Object.is(error)) {
              dart.rethrow(e);
            } else
              throw e;
          }
        }).bind(this));
      }
      [S$._parseResponse](response) {
        return async.async(types$2.PostgrestResponse, (function* _parseResponse() {
          let t59, t60;
          if (response.statusCode >= 200 && response.statusCode <= 299) {
            let body = null;
            let count = null;
            if (dart.nullCheck(response.request).method !== "HEAD") {
              if (response.bodyBytes[S$.$isEmpty]) {
                body = null;
              } else if (dart.nullCheck(response.request).headers[S$.$_get]("Accept") === "text/csv") {
                body = response.body;
              } else {
                try {
                  if (dart.notNull((t59 = response.contentLength, t59 == null ? 0 : t59)) > 10000 && this[S$._isolate$1] != null) {
                    body = (yield dart.nullCheck(this[S$._isolate$1]).decode(response.body));
                  } else {
                    body = convert.jsonDecode(response.body);
                  }
                } catch (e) {
                  let _ = dart.getThrown(e);
                  if (core.FormatException.is(_)) {
                    body = null;
                  } else
                    throw e;
                }
              }
            }
            if (this[S$._maybeSingle] && (t60 = this[S$._method], t60 == null ? null : t60[S$.$toUpperCase]()) === "GET" && core.List.is(body)) {
              if (body[S$.$length] > 1) {
                dart.throw(new types$2.PostgrestException.new({code: "406", details: "Results contain " + dart.str(body[S$.$length]) + " rows, application/vnd.pgrst.object+json requires 1 row", hint: null, message: "JSON object requested, multiple (or no) rows returned"}));
              } else if (body[S$.$length] === 1) {
                body = body[S$.$first];
              } else {
                body = null;
              }
            }
            let contentRange = response.headers[S$.$_get]("content-range");
            if (contentRange != null && contentRange.length > 1) {
              count = contentRange[S$.$split]("/")[S$.$last] === "*" ? null : core.int.parse(contentRange[S$.$split]("/")[S$.$last]);
            }
            if (dart.wrapType(S)._equals(dart.wrapType(T$.ListOfMapOfString$dynamic()))) {
              body = S.as(T$.ListOfMapOfString$dynamic().from(core.Iterable.as(body)));
            } else if (dart.wrapType(S)._equals(dart.wrapType(T$.ListOfMap()))) {
              body = S.as(T$.ListOfMap().from(core.Iterable.as(body)));
            } else if (dart.wrapType(S)._equals(dart.wrapType(T$.MapOfString$dynamic()))) {
              body = S.as(T$.LinkedHashMapOfString$dynamic().from(core.Map.as(body)));
            } else if (dart.wrapType(S)._equals(dart.wrapType(T$.MapNOfString$dynamic()))) {
              if (body == null) {
                body = S.as(null);
              } else {
                body = S.as(T$.LinkedHashMapOfString$dynamic().from(core.Map.as(body)));
              }
            } else if (dart.wrapType(S)._equals(dart.wrapType(T$.PostgrestResponseOfListOfMapOfString$dynamic()))) {
              body = T$.ListOfMapOfString$dynamic().from(core.Iterable.as(body));
              if (this[S$._converter] != null) {
                body = dart.nullCheck(this[S$._converter])(S.as(body));
              }
              return new (T$.PostgrestResponseOfListOfMapOfString$dynamic()).new({data: T$.ListNOfMapOfString$dynamic().as(body), status: response.statusCode, count: count});
            } else if (dart.wrapType(S)._equals(dart.wrapType(T$.PostgrestResponseOfMapOfString$dynamic()))) {
              body = T$.LinkedHashMapOfString$dynamic().from(core.Map.as(body));
              if (this[S$._converter] != null) {
                body = dart.nullCheck(this[S$._converter])(S.as(body));
              }
              return new (T$.PostgrestResponseOfMapOfString$dynamic()).new({data: T$.MapNOfString$dynamic().as(body), status: response.statusCode, count: count});
            } else if (dart.wrapType(S)._equals(dart.wrapType(T$.PostgrestResponseOfMapNOfString$dynamic()))) {
              if (body == null) {
                body = null;
              } else {
                body = T$.LinkedHashMapOfString$dynamic().from(core.Map.as(body));
              }
              if (this[S$._converter] != null) {
                body = dart.nullCheck(this[S$._converter])(S.as(body));
              }
              return new (T$.PostgrestResponseOfMapNOfString$dynamic()).new({data: T$.MapNOfString$dynamic().as(body), status: response.statusCode, count: count});
            }
            if (this[S$._converter] != null) {
              body = dart.nullCheck(this[S$._converter])(S.as(body));
            }
            return new types$2.PostgrestResponse.new({data: body, status: response.statusCode, count: count});
          } else {
            let error = null;
            function error$35get() {
              let t61;
              t61 = error;
              return t61 == null ? dart.throw(new _internal.LateError.localNI("error")) : t61;
            }
            function error$35set(error$35param) {
              return error = error$35param;
            }
            if (dart.nullCheck(response.request).method !== "HEAD") {
              try {
                let errorJson = T$.MapOfString$dynamic().as(convert.jsonDecode(response.body));
                error$35set(types$2.PostgrestException.fromJson(errorJson, {message: response.body, code: response.statusCode, details: response.reasonPhrase}));
                if (this[S$._maybeSingle]) {
                  return this[S$._handleMaybeSingleError](response, error$35get());
                }
              } catch (e$) {
                let _ = dart.getThrown(e$);
                if (core.Object.is(_)) {
                  error$35set(new types$2.PostgrestException.new({message: response.body, code: dart.str(response.statusCode), details: response.reasonPhrase}));
                } else
                  throw e$;
              }
            } else {
              error$35set(new types$2.PostgrestException.new({code: dart.str(response.statusCode), message: response.body, details: "Error in Postgrest response for method HEAD", hint: response.reasonPhrase}));
            }
            dart.throw(error$35get());
          }
        }).bind(this));
      }
      [S$._handleMaybeSingleError](response, error) {
        let t64, t64$, t64$0;
        if (typeof error.details == 'string' && dart.toString(error.details)[S$.$contains]("Results contain 0 rows")) {
          return new (__t$PostgrestResponseOfT()).new({data: null, status: 200, count: (t64 = this[S$._options], t64 == null ? null : t64.count) != null || dart.test((t64$0 = (t64$ = this[S$._options], t64$ == null ? null : t64$.forceResponse), t64$0 == null ? false : t64$0)) ? 0 : null});
        } else {
          dart.throw(error);
        }
      }
      appendSearchParams(key, value) {
        let t65;
        let searchParams = T$.LinkedHashMapOfString$dynamic().from(this[S$._url].queryParametersAll);
        searchParams[S$.$_set](key, (() => {
          let t64 = core.List.of(core.Iterable.as((t65 = searchParams[S$.$_get](key), t65 == null ? [] : t65)));
          t64.push(value);
          return t64;
        })());
        this[S$._url] = this[S$._url].replace({queryParameters: searchParams});
      }
      overrideSearchParams(key, value) {
        let searchParams = T$.LinkedHashMapOfString$dynamic().from(this[S$._url].queryParametersAll);
        searchParams[S$.$_set](key, value);
        this[S$._url] = this[S$._url].replace({queryParameters: searchParams});
      }
      asStream() {
        let controller = __t$StreamControllerOfT().broadcast();
        this.then(core.Null, dart.fn(value => {
          controller.add(value);
        }, __t$TToNull())).catchError(dart.fn((error, stack) => {
          controller.addError(error, stack);
        }, T$.ObjectAndStackTraceToNull())).whenComplete(dart.fn(() => {
          controller.close();
        }, T$.VoidToNull()));
        return controller.stream;
      }
      catchError(onError, opts$) {
        let test = opts$ && 'test' in opts$ ? opts$.test : null;
        return this.then(T, dart.fn(value => value, __t$TToT())).catchError(onError, {test: test});
      }
      then(R, onValue, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        return async.async(R, (function* then() {
          let t65, t65$, t65$0, t65$1;
          if (onError != null && !T$.ObjectAndStackTraceTodynamic().is(onError) && !T$.ObjectTodynamic().is(onError)) {
            dart.throw(new core.ArgumentError.value(onError, "onError", "Error handler must accept one Object or one Object and a StackTrace" + " as arguments, and return a value of the returned future's type"));
          }
          try {
            let response = (yield this[S$._execute]());
            let data = response.data;
            if (this[S$._converter] != null) {
              if (!!dart.test((t65$ = (t65 = this[S$._options], t65 == null ? null : t65.forceResponse), t65$ == null ? false : t65$))) dart.assertFailed("converter and forceReponse can not be set at the same time", I[39], 429, 11, "!(_options?.forceResponse ?? false)");
              return onValue(T.as(data));
            } else {
              if (dart.test((t65$1 = (t65$0 = this[S$._options], t65$0 == null ? null : t65$0.forceResponse), t65$1 == null ? false : t65$1)) || response.count != null) {
                return onValue(T.as(response));
              } else {
                return onValue(T.as(data));
              }
            }
          } catch (e) {
            let error = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(error)) {
              let result = null;
              if (onError != null) {
                if (T$.ObjectAndStackTraceTodynamic().is(onError)) {
                  result = onError(error, stack);
                } else if (T$.ObjectTodynamic().is(onError)) {
                  result = onError(error);
                } else {
                  dart.throw(new core.ArgumentError.value(onError, "onError", "Error handler must accept one Object or one Object and a StackTrace" + " as arguments, and return a value of the returned future's type"));
                }
                try {
                  return async.FutureOr$(R).as(result);
                } catch (e$) {
                  let ex = dart.getThrown(e$);
                  if (core.TypeError.is(ex)) {
                    dart.throw(new core.ArgumentError.new("The error handler of Future.then" + " must return a value of the returned future's type", "onError"));
                  } else
                    throw e$;
                }
              }
              dart.rethrow(e);
            } else
              throw e;
          }
        }).bind(this));
      }
      timeout(timeLimit, opts$) {
        let onTimeout = opts$ && 'onTimeout' in opts$ ? opts$.onTimeout : null;
        __t$VoidToNFutureOrOfT().as(onTimeout);
        return this.then(T, dart.fn(value => value, __t$TToT())).timeout(timeLimit, {onTimeout: onTimeout});
      }
      whenComplete(action) {
        return this.then(T, dart.fn(v => {
          let f2 = action();
          if (async.Future.is(f2)) return f2.then(T, dart.fn(_ => v, __t$dynamicToT()));
          return v;
        }, __t$TToFutureOrOfT()), {onError: dart.fn(e => {
            let f2 = action();
            if (async.Future.is(f2)) {
              return f2.then(dart.Never, dart.fn(_ => {
                dart.throw(e);
              }, T$.dynamicToNever()));
            }
            dart.throw(e);
          }, T$.ObjectToFutureOfNever())});
      }
    }
    (PostgrestBuilder.new = function(opts$) {
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let method = opts$ && 'method' in opts$ ? opts$.method : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let maybeSingle = opts$ && 'maybeSingle' in opts$ ? opts$.maybeSingle : false;
      let converter = opts$ && 'converter' in opts$ ? opts$.converter : null;
      this[S$._body] = null;
      this[S$.__PostgrestBuilder__headers] = null;
      this[S$._method] = null;
      this[S$.__PostgrestBuilder__schema] = null;
      this[S$.__PostgrestBuilder__schema_isSet] = false;
      this[S$.__PostgrestBuilder__url] = null;
      this[S$.__PostgrestBuilder__httpClient] = null;
      this[S$.__PostgrestBuilder__httpClient_isSet] = false;
      this[S$.__PostgrestBuilder__isolate] = null;
      this[S$.__PostgrestBuilder__isolate_isSet] = false;
      this[S$._options] = null;
      this[S$._maybeSingle] = maybeSingle;
      this[S$._converter] = converter;
      this[S$._url] = url;
      this[S$._headers$1] = headers;
      this[S$._schema$1] = schema;
      this[S$._method] = method;
      this[S$._body] = body;
      this[S$._httpClient$1] = httpClient;
      this[S$._isolate$1] = isolate;
      this[S$._options] = options;
    }).prototype = PostgrestBuilder.prototype;
    PostgrestBuilder.prototype[dart.isFuture] = true;
    dart.addTypeTests(PostgrestBuilder);
    PostgrestBuilder.prototype[_is_PostgrestBuilder_default] = true;
    dart.addTypeCaches(PostgrestBuilder);
    PostgrestBuilder[dart.implements] = () => [async.Future$(T)];
    dart.setMethodSignature(PostgrestBuilder, () => ({
      __proto__: dart.getMethods(PostgrestBuilder.__proto__),
      withConverter: dart.gFnType(R => [postgrest_builder.PostgrestBuilder$(R, T), [dart.fnType(R, [T])]], R => [dart.nullable(core.Object)]),
      [S$._assertCorrectGeneric]: dart.fnType(dart.void, [core.Type]),
      execute: dart.fnType(async.Future$(types$2.PostgrestResponse), [], {count: dart.nullable(types$2.CountOption), head: core.bool}, {}),
      [S$._execute]: dart.fnType(async.Future$(types$2.PostgrestResponse), []),
      [S$._parseResponse]: dart.fnType(async.Future$(types$2.PostgrestResponse), [response$.Response]),
      [S$._handleMaybeSingleError]: dart.fnType(types$2.PostgrestResponse$(T), [response$.Response, types$2.PostgrestException]),
      appendSearchParams: dart.fnType(dart.void, [core.String, core.String]),
      overrideSearchParams: dart.fnType(dart.void, [core.String, core.String]),
      asStream: dart.fnType(async.Stream$(T), []),
      catchError: dart.fnType(async.Future$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [core.Object]))}, {}),
      then: dart.gFnType(R => [async.Future$(R), [dart.fnType(async.FutureOr$(R), [T])], {onError: dart.nullable(core.Function)}, {}], R => [dart.nullable(core.Object)]),
      timeout: dart.fnType(async.Future$(T), [core.Duration], {onTimeout: dart.nullable(core.Object)}, {}),
      whenComplete: dart.fnType(async.Future$(T), [dart.fnType(dart.void, [])])
    }));
    dart.setGetterSignature(PostgrestBuilder, () => ({
      __proto__: dart.getGetters(PostgrestBuilder.__proto__),
      [S$._headers$1]: core.Map$(core.String, core.String),
      [S$._schema$1]: dart.nullable(core.String),
      [S$._url]: core.Uri,
      [S$._httpClient$1]: dart.nullable(client$.Client),
      [S$._isolate$1]: dart.nullable(_isolates_web.YAJsonIsolate)
    }));
    dart.setSetterSignature(PostgrestBuilder, () => ({
      __proto__: dart.getSetters(PostgrestBuilder.__proto__),
      [S$._headers$1]: core.Map$(core.String, core.String),
      [S$._schema$1]: dart.nullable(core.String),
      [S$._url]: core.Uri,
      [S$._httpClient$1]: dart.nullable(client$.Client),
      [S$._isolate$1]: dart.nullable(_isolates_web.YAJsonIsolate)
    }));
    dart.setLibraryUri(PostgrestBuilder, I[40]);
    dart.setFieldSignature(PostgrestBuilder, () => ({
      __proto__: dart.getFields(PostgrestBuilder.__proto__),
      [S$._body]: dart.fieldType(dart.dynamic),
      [S$.__PostgrestBuilder__headers]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
      [S$._maybeSingle]: dart.fieldType(core.bool),
      [S$._method]: dart.fieldType(dart.nullable(core.String)),
      [S$.__PostgrestBuilder__schema]: dart.fieldType(dart.nullable(core.String)),
      [S$.__PostgrestBuilder__schema_isSet]: dart.fieldType(core.bool),
      [S$.__PostgrestBuilder__url]: dart.fieldType(dart.nullable(core.Uri)),
      [S$._converter]: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      [S$.__PostgrestBuilder__httpClient]: dart.fieldType(dart.nullable(client$.Client)),
      [S$.__PostgrestBuilder__httpClient_isSet]: dart.fieldType(core.bool),
      [S$.__PostgrestBuilder__isolate]: dart.fieldType(dart.nullable(_isolates_web.YAJsonIsolate)),
      [S$.__PostgrestBuilder__isolate_isSet]: dart.fieldType(core.bool),
      [S$._options]: dart.fieldType(dart.nullable(types$2.FetchOptions))
    }));
    return PostgrestBuilder;
  });
  postgrest_builder.PostgrestBuilder = postgrest_builder.PostgrestBuilder$();
  dart.addTypeTests(postgrest_builder.PostgrestBuilder, _is_PostgrestBuilder_default);
  const _is_PostgrestQueryBuilder_default = Symbol('_is_PostgrestQueryBuilder_default');
  postgrest_builder.PostgrestQueryBuilder$ = dart.generic(T => {
    var __t$PostgrestFilterBuilderOfT = () => (__t$PostgrestFilterBuilderOfT = dart.constFn(postgrest_builder.PostgrestFilterBuilder$(T)))();
    class PostgrestQueryBuilder extends postgrest_builder.PostgrestBuilder$(T, T) {
      static ['_#new#tearOff'](T, url, opts$) {
        let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
        let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
        let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
        let options = opts$ && 'options' in opts$ ? opts$.options : null;
        let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
        return new (postgrest_builder.PostgrestQueryBuilder$(T)).new(url, {headers: headers, schema: schema, httpClient: httpClient, options: options, isolate: isolate});
      }
      select(R, columns = "*", options = C[82] || CT.C82) {
        let t53;
        this[S$._assertCorrectGeneric](dart.wrapType(R));
        this[S$._method] = "GET";
        let quoted = false;
        let re = core.RegExp.new("\\s");
        let cleanedColumns = columns[S$.$split]("")[S$.$map](core.String, dart.fn(c => {
          if (re.hasMatch(c) && !quoted) {
            return "";
          }
          if (c === "\"") {
            quoted = !quoted;
          }
          return c;
        }, T$.StringToString()))[S$.$join]();
        this.overrideSearchParams("select", cleanedColumns);
        this[S$._options] = options;
        return new (postgrest_builder.PostgrestFilterBuilder$(R)).new((t53 = new (postgrest_builder.PostgrestQueryBuilder$(R)).new(this[S$._url].toString(), {headers: this[S$._headers$1], schema: this[S$._schema$1], httpClient: this[S$._httpClient$1], isolate: this[S$._isolate$1], options: this[S$._options]}), (() => {
          t53[S$._method] = this[S$._method];
          return t53;
        })()));
      }
      insert(values, opts$) {
        let defaultToNull = opts$ && 'defaultToNull' in opts$ ? opts$.defaultToNull : true;
        this[S$._method] = "POST";
        this[S$._headers$1][S$.$_set]("Prefer", "");
        if (!defaultToNull) {
          this[S$._headers$1][S$.$_set]("Prefer", "missing=default");
        }
        this[S$._body] = values;
        if (core.List.is(values)) {
          this[S$._setColumnsSearchParam](values);
        }
        return new (__t$PostgrestFilterBuilderOfT()).new(this);
      }
      upsert(values, opts$) {
        let onConflict = opts$ && 'onConflict' in opts$ ? opts$.onConflict : null;
        let ignoreDuplicates = opts$ && 'ignoreDuplicates' in opts$ ? opts$.ignoreDuplicates : false;
        let defaultToNull = opts$ && 'defaultToNull' in opts$ ? opts$.defaultToNull : true;
        let options = opts$ && 'options' in opts$ ? opts$.options : C[82] || CT.C82;
        this[S$._method] = "POST";
        this[S$._headers$1][S$.$_set]("Prefer", "resolution=" + (ignoreDuplicates ? "ignore" : "merge") + "-duplicates");
        if (!defaultToNull) {
          this[S$._headers$1][S$.$_set]("Prefer", dart.nullCheck(this[S$._headers$1][S$.$_get]("Prefer")) + ",missing=default");
        }
        if (onConflict != null) {
          this[S$._url] = this[S$._url].replace({queryParameters: (() => {
              let t53 = new (T$.IdentityMapOfString$dynamic()).new();
              t53[S$.$_set]("on_conflict", onConflict);
              t53[S$.$addAll](this[S$._url].queryParameters);
              return t53;
            })()});
        }
        if (core.List.is(values)) {
          this[S$._setColumnsSearchParam](values);
        }
        this[S$._body] = values;
        this[S$._options] = options.ensureNotHead();
        return new (__t$PostgrestFilterBuilderOfT()).new(this);
      }
      update(values, opts$) {
        let options = opts$ && 'options' in opts$ ? opts$.options : C[82] || CT.C82;
        this[S$._method] = "PATCH";
        this[S$._headers$1][S$.$_set]("Prefer", "");
        this[S$._body] = values;
        this[S$._options] = options.ensureNotHead();
        return new (__t$PostgrestFilterBuilderOfT()).new(this);
      }
      delete(opts$) {
        let returning = opts$ && 'returning' in opts$ ? opts$.returning : C[91] || CT.C91;
        let options = opts$ && 'options' in opts$ ? opts$.options : C[82] || CT.C82;
        this[S$._method] = "DELETE";
        this[S$._headers$1][S$.$_set]("Prefer", "");
        this[S$._options] = options.ensureNotHead();
        return new (__t$PostgrestFilterBuilderOfT()).new(this);
      }
      [S$._setColumnsSearchParam](values) {
        let newValues = T$.ListOfMapOfString$dynamic().from(values);
        let columns = newValues[S$.$fold](T$.ListOfString(), T$.JSArrayOfString().of([]), dart.fn((value, element) => {
          let t54;
          t54 = value;
          return (() => {
            t54[S$.$addAll](element[S$.$keys]);
            return t54;
          })();
        }, T$.ListOfStringAndMapOfString$dynamicToListOfString()));
        if (newValues[S$.$isNotEmpty]) {
          let uniqueColumns = (() => {
            let t54 = T$.LinkedHashSetOfString().of(columns);
            return t54;
          })()[S$.$map](core.String, dart.fn(e => "\"" + e + "\"", T$.StringToString()))[S$.$join](",");
          this.appendSearchParams("columns", uniqueColumns);
        }
      }
    }
    (PostgrestQueryBuilder.new = function(url, opts$) {
      let t53;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      PostgrestQueryBuilder.__proto__.new.call(this, {url: core.Uri.parse(url), headers: (t53 = headers, t53 == null ? new (T$.IdentityMapOfString$String()).new() : t53), schema: schema, httpClient: httpClient, options: options, isolate: isolate});
      ;
    }).prototype = PostgrestQueryBuilder.prototype;
    dart.addTypeTests(PostgrestQueryBuilder);
    PostgrestQueryBuilder.prototype[_is_PostgrestQueryBuilder_default] = true;
    dart.addTypeCaches(PostgrestQueryBuilder);
    dart.setMethodSignature(PostgrestQueryBuilder, () => ({
      __proto__: dart.getMethods(PostgrestQueryBuilder.__proto__),
      select: dart.gFnType(R => [postgrest_builder.PostgrestFilterBuilder$(R), [], [core.String, types$2.FetchOptions]], R => [dart.nullable(core.Object)]),
      insert: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [dart.dynamic], {defaultToNull: core.bool}, {}),
      upsert: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [dart.dynamic], {defaultToNull: core.bool, ignoreDuplicates: core.bool, onConflict: dart.nullable(core.String), options: types$2.FetchOptions}, {}),
      update: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.Map], {options: types$2.FetchOptions}, {}),
      delete: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [], {options: types$2.FetchOptions, returning: types$2.ReturningOption}, {}),
      [S$._setColumnsSearchParam]: dart.fnType(dart.void, [core.List])
    }));
    dart.setLibraryUri(PostgrestQueryBuilder, I[40]);
    return PostgrestQueryBuilder;
  });
  postgrest_builder.PostgrestQueryBuilder = postgrest_builder.PostgrestQueryBuilder$();
  dart.addTypeTests(postgrest_builder.PostgrestQueryBuilder, _is_PostgrestQueryBuilder_default);
  supabase_query_builder.SupabaseQueryBuilder = class SupabaseQueryBuilder extends postgrest_builder.PostgrestQueryBuilder {
    static ['_#new#tearOff'](url, realtime, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let table = opts$ && 'table' in opts$ ? opts$.table : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let incrementId = opts$ && 'incrementId' in opts$ ? opts$.incrementId : null;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      return new supabase_query_builder.SupabaseQueryBuilder.new(url, realtime, {headers: headers, schema: schema, table: table, httpClient: httpClient, incrementId: incrementId, isolate: isolate});
    }
    stream(opts$) {
      let primaryKey = opts$ && 'primaryKey' in opts$ ? opts$.primaryKey : null;
      if (!primaryKey[S$.$isNotEmpty]) dart.assertFailed("Please specify primary key column(s).", I[38], 49, 12, "primaryKey.isNotEmpty");
      return new supabase_stream_builder.SupabaseStreamBuilder.new({queryBuilder: this, realtimeClient: this[S$._realtime], realtimeTopic: this[S$._schema] + ":" + this[S$._table] + ":" + dart.str(this[S$._incrementId$1]), schema: this[S$._schema], table: this[S$._table], primaryKey: primaryKey});
    }
  };
  (supabase_query_builder.SupabaseQueryBuilder.new = function(url, realtime, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
    let table = opts$ && 'table' in opts$ ? opts$.table : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let incrementId = opts$ && 'incrementId' in opts$ ? opts$.incrementId : null;
    let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
    this[S$._realtime] = realtime;
    this[S$._schema] = schema;
    this[S$._table] = table;
    this[S$._incrementId$1] = incrementId;
    supabase_query_builder.SupabaseQueryBuilder.__proto__.new.call(this, url, {headers: headers, schema: schema, httpClient: httpClient, isolate: isolate});
    ;
  }).prototype = supabase_query_builder.SupabaseQueryBuilder.prototype;
  dart.addTypeTests(supabase_query_builder.SupabaseQueryBuilder);
  dart.addTypeCaches(supabase_query_builder.SupabaseQueryBuilder);
  dart.setMethodSignature(supabase_query_builder.SupabaseQueryBuilder, () => ({
    __proto__: dart.getMethods(supabase_query_builder.SupabaseQueryBuilder.__proto__),
    stream: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [], {}, {primaryKey: core.List$(core.String)})
  }));
  dart.setLibraryUri(supabase_query_builder.SupabaseQueryBuilder, I[41]);
  dart.setFieldSignature(supabase_query_builder.SupabaseQueryBuilder, () => ({
    __proto__: dart.getFields(supabase_query_builder.SupabaseQueryBuilder.__proto__),
    [S$._realtime]: dart.finalFieldType(realtime_client$.RealtimeClient),
    [S$._schema]: dart.finalFieldType(core.String),
    [S$._table]: dart.finalFieldType(core.String),
    [S$._incrementId$1]: dart.finalFieldType(core.int)
  }));
  supabase_realtime_error.SupabaseRealtimeError = class SupabaseRealtimeError extends core.Error {
    get message() {
      return this[S$.message$3];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message = null) {
      return new supabase_realtime_error.SupabaseRealtimeError.new(message);
    }
    toString() {
      if (this.message != null) {
        return "Unsubscribe failed: " + core.Error.safeToString(this.message);
      }
      return "Unsubscribe failed";
    }
  };
  (supabase_realtime_error.SupabaseRealtimeError.new = function(message = null) {
    this[S$.message$3] = message;
    supabase_realtime_error.SupabaseRealtimeError.__proto__.new.call(this);
    ;
  }).prototype = supabase_realtime_error.SupabaseRealtimeError.prototype;
  dart.addTypeTests(supabase_realtime_error.SupabaseRealtimeError);
  dart.addTypeCaches(supabase_realtime_error.SupabaseRealtimeError);
  dart.setLibraryUri(supabase_realtime_error.SupabaseRealtimeError, I[42]);
  dart.setFieldSignature(supabase_realtime_error.SupabaseRealtimeError, () => ({
    __proto__: dart.getFields(supabase_realtime_error.SupabaseRealtimeError.__proto__),
    message: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(supabase_realtime_error.SupabaseRealtimeError, ['toString']);
  const _is__BoxListenable_default = Symbol('_is__BoxListenable_default');
  hive_flutter._BoxListenable$ = dart.generic((T, B) => {
    class _BoxListenable extends change_notifier.ValueListenable$(B) {
      static ['_#new#tearOff'](T, B, box, keys) {
        return new (hive_flutter._BoxListenable$(T, B)).new(box, keys);
      }
      addListener(listener) {
        if (this[S$._listeners][S$.$isEmpty]) {
          if (this.keys != null) {
            this[S$._subscription] = this.box.watch().listen(dart.fn(event => {
              if (dart.nullCheck(this.keys).contains(event.key)) {
                for (let listener of this[S$._listeners]) {
                  listener();
                }
              }
            }, T$.BoxEventTovoid()));
          } else {
            this[S$._subscription] = this.box.watch().listen(dart.fn(_ => {
              for (let listener of this[S$._listeners]) {
                listener();
              }
            }, T$.BoxEventTovoid()));
          }
        }
        this[S$._listeners][S$.$add](listener);
      }
      removeListener(listener) {
        let t68;
        this[S$._listeners][S$.$remove](listener);
        if (this[S$._listeners][S$.$isEmpty]) {
          t68 = this[S$._subscription];
          t68 == null ? null : t68.cancel();
          this[S$._subscription] = null;
        }
      }
      get value() {
        return this.box;
      }
    }
    (_BoxListenable.new = function(box, keys) {
      this[S$._listeners] = T$.JSArrayOfVoidTovoid().of([]);
      this[S$._subscription] = null;
      this.box = box;
      this.keys = keys;
      _BoxListenable.__proto__.new.call(this);
      ;
    }).prototype = _BoxListenable.prototype;
    dart.addTypeTests(_BoxListenable);
    _BoxListenable.prototype[_is__BoxListenable_default] = true;
    dart.addTypeCaches(_BoxListenable);
    dart.setMethodSignature(_BoxListenable, () => ({
      __proto__: dart.getMethods(_BoxListenable.__proto__),
      addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])])
    }));
    dart.setGetterSignature(_BoxListenable, () => ({
      __proto__: dart.getGetters(_BoxListenable.__proto__),
      value: B
    }));
    dart.setLibraryUri(_BoxListenable, I[43]);
    dart.setFieldSignature(_BoxListenable, () => ({
      __proto__: dart.getFields(_BoxListenable.__proto__),
      box: dart.finalFieldType(B),
      keys: dart.finalFieldType(dart.nullable(core.Set)),
      [S$._listeners]: dart.finalFieldType(core.List$(dart.fnType(dart.void, []))),
      [S$._subscription]: dart.fieldType(dart.nullable(async.StreamSubscription))
    }));
    return _BoxListenable;
  });
  hive_flutter._BoxListenable = hive_flutter._BoxListenable$();
  dart.addTypeTests(hive_flutter._BoxListenable, _is__BoxListenable_default);
  hive_flutter.WatchBoxBuilder = class WatchBoxBuilder extends framework.StatefulWidget {
    get box() {
      return this[S$.box];
    }
    set box(value) {
      super.box = value;
    }
    get builder() {
      return this[S$.builder];
    }
    set builder(value) {
      super.builder = value;
    }
    get watchKeys() {
      return this[S$.watchKeys];
    }
    set watchKeys(value) {
      super.watchKeys = value;
    }
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let box = opts$ && 'box' in opts$ ? opts$.box : null;
      let builder = opts$ && 'builder' in opts$ ? opts$.builder : null;
      let watchKeys = opts$ && 'watchKeys' in opts$ ? opts$.watchKeys : null;
      return new hive_flutter.WatchBoxBuilder.new({key: key, box: box, builder: builder, watchKeys: watchKeys});
    }
    createState() {
      return new hive_flutter._WatchBoxBuilderState.new();
    }
  };
  (hive_flutter.WatchBoxBuilder.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let box = opts$ && 'box' in opts$ ? opts$.box : null;
    let builder = opts$ && 'builder' in opts$ ? opts$.builder : null;
    let watchKeys = opts$ && 'watchKeys' in opts$ ? opts$.watchKeys : null;
    this[S$.box] = box;
    this[S$.builder] = builder;
    this[S$.watchKeys] = watchKeys;
    hive_flutter.WatchBoxBuilder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = hive_flutter.WatchBoxBuilder.prototype;
  dart.addTypeTests(hive_flutter.WatchBoxBuilder);
  dart.addTypeCaches(hive_flutter.WatchBoxBuilder);
  dart.setMethodSignature(hive_flutter.WatchBoxBuilder, () => ({
    __proto__: dart.getMethods(hive_flutter.WatchBoxBuilder.__proto__),
    createState: dart.fnType(hive_flutter._WatchBoxBuilderState, [])
  }));
  dart.setLibraryUri(hive_flutter.WatchBoxBuilder, I[43]);
  dart.setFieldSignature(hive_flutter.WatchBoxBuilder, () => ({
    __proto__: dart.getFields(hive_flutter.WatchBoxBuilder.__proto__),
    box: dart.finalFieldType(hive.Box),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, hive.Box])),
    watchKeys: dart.finalFieldType(dart.nullable(core.List$(core.String)))
  }));
  hive_flutter._WatchBoxBuilderState = class _WatchBoxBuilderState extends framework.State$(hive_flutter.WatchBoxBuilder) {
    initState() {
      super.initState();
      this[S$._subscribe]();
    }
    didUpdateWidget(oldWidget) {
      hive_flutter.WatchBoxBuilder.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!this.widget.box[S$.$_equals](oldWidget.box)) {
        this[S$._unsubscribe]();
        this[S$._subscribe]();
      }
    }
    [S$._subscribe]() {
      this.subscription = this.widget.box.watch().listen(dart.fn(event => {
        if (this.widget.watchKeys != null && !dart.nullCheck(this.widget.watchKeys)[S$.$contains](event.key)) {
          return;
        }
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }, T$.BoxEventTovoid()));
    }
    [S$._unsubscribe]() {
      let t68;
      t68 = this.subscription;
      t68 == null ? null : t68.cancel();
    }
    build(context) {
      let t70, t69, t68;
      t68 = this.widget;
      t69 = context;
      t70 = this.widget.box;
      return t68.builder(t69, t70);
    }
    dispose() {
      this[S$._unsubscribe]();
      super.dispose();
    }
    static ['_#new#tearOff']() {
      return new hive_flutter._WatchBoxBuilderState.new();
    }
  };
  (hive_flutter._WatchBoxBuilderState.new = function() {
    this.subscription = null;
    hive_flutter._WatchBoxBuilderState.__proto__.new.call(this);
    ;
  }).prototype = hive_flutter._WatchBoxBuilderState.prototype;
  dart.addTypeTests(hive_flutter._WatchBoxBuilderState);
  dart.addTypeCaches(hive_flutter._WatchBoxBuilderState);
  dart.setMethodSignature(hive_flutter._WatchBoxBuilderState, () => ({
    __proto__: dart.getMethods(hive_flutter._WatchBoxBuilderState.__proto__),
    [S$._subscribe]: dart.fnType(dart.void, []),
    [S$._unsubscribe]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(hive_flutter._WatchBoxBuilderState, I[43]);
  dart.setFieldSignature(hive_flutter._WatchBoxBuilderState, () => ({
    __proto__: dart.getFields(hive_flutter._WatchBoxBuilderState.__proto__),
    subscription: dart.fieldType(dart.nullable(async.StreamSubscription))
  }));
  hive_flutter['BoxX|listenable'] = function BoxX$124listenable(T, $this, opts$) {
    let t69;
    let keys = opts$ && 'keys' in opts$ ? opts$.keys : null;
    return new (hive_flutter._BoxListenable$(dart.dynamic, hive.Box$(T))).new($this, (t69 = keys, t69 == null ? null : t69[S$.$toSet]()));
  };
  hive_flutter['BoxX|get#listenable'] = function BoxX$124get$35listenable(T, $this) {
    return dart.fn(opts$ => {
      let keys = opts$ && 'keys' in opts$ ? opts$.keys : null;
      return hive_flutter['BoxX|listenable'](T, $this, {keys: keys});
    }, dart.fnType(change_notifier.ValueListenable$(hive.Box$(T)), [], {keys: T$.ListN()}, {}));
  };
  hive_flutter['LazyBoxX|listenable'] = function LazyBoxX$124listenable(T, $this, opts$) {
    let t71;
    let keys = opts$ && 'keys' in opts$ ? opts$.keys : null;
    return new (hive_flutter._BoxListenable$(dart.dynamic, hive.LazyBox$(T))).new($this, (t71 = keys, t71 == null ? null : t71[S$.$toSet]()));
  };
  hive_flutter['LazyBoxX|get#listenable'] = function LazyBoxX$124get$35listenable(T, $this) {
    return dart.fn(opts$ => {
      let keys = opts$ && 'keys' in opts$ ? opts$.keys : null;
      return hive_flutter['LazyBoxX|listenable'](T, $this, {keys: keys});
    }, dart.fnType(change_notifier.ValueListenable$(hive.LazyBox$(T)), [], {keys: T$.ListN()}, {}));
  };
  hive_flutter['HiveX|initFlutter'] = function HiveX$124initFlutter($this, subDir = null) {
    return async.async(dart.void, function* HiveX$124initFlutter() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      return;
      let appDir = (yield path_provider.getApplicationDocumentsDirectory());
      $this.init(path.join(appDir.path, subDir));
    });
  };
  hive_flutter['HiveX|get#initFlutter'] = function HiveX$124get$35initFlutter($this) {
    return dart.fn((subDir = null) => hive_flutter['HiveX|initFlutter']($this, subDir), T$.StringNToFutureOfvoid());
  };
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts$) {
      let allowList = opts$ && 'allowList' in opts$ ? opts$.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T$.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T$.LinkedHashSetOfString().from(this[S$._preferenceCache][S$.$keys]);
    }
    get(key) {
      return this[S$._preferenceCache][S$.$_get](key);
    }
    getBool(key) {
      return T$.boolN().as(this[S$._preferenceCache][S$.$_get](key));
    }
    getInt(key) {
      return T$.intN().as(this[S$._preferenceCache][S$.$_get](key));
    }
    getDouble(key) {
      return T$.doubleN().as(this[S$._preferenceCache][S$.$_get](key));
    }
    getString(key) {
      return T$.StringN().as(this[S$._preferenceCache][S$.$_get](key));
    }
    containsKey(key) {
      return this[S$._preferenceCache][S$.$containsKey](key);
    }
    getStringList(key) {
      let t75;
      let list = T$.ListN().as(this[S$._preferenceCache][S$.$_get](key));
      if (list != null && !T$.ListOfString().is(list)) {
        list = list[S$.$cast](core.String)[S$.$toList]();
        this[S$._preferenceCache][S$.$_set](key, list);
      }
      return T$.ListNOfString().as((t75 = list, t75 == null ? null : t75[S$.$toList]()));
    }
    setBool(key, value) {
      return this[S$._setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[S$._setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[S$._setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[S$._setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[S$._setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[S$._preferenceCache][S$.$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [S$._setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T$.ListOfString().is(value)) {
        this[S$._preferenceCache][S$.$_set](key, value[S$.$toList]());
      } else {
        this[S$._preferenceCache][S$.$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[S$._preferenceCache][S$.$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[S$._preferenceCache][S$.$clear]();
        this[S$._preferenceCache][S$.$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T$.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T$.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[S$.$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[S$.$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[S$.$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T$.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[S$.$keys]) {
          if (!key[S$.$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[44], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[S$.$_set](key[S$.$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[S$.$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[S$.$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[S$.$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T$.MapEntryOfString$Object()).__(newKey, value);
      }, T$.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[S$._preferenceCache] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [S$._setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[45]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [S$._preferenceCache]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  http.head = function head(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.head(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.get = function get(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.get(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.post = function post(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.post(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.put = function put(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.put(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.patch = function patch(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.patch(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.delete = function $delete(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.delete(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.read = function read(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    return http._withClient(core.String, dart.fn(client => client.read(url, {headers: headers}), T$.ClientToFutureOfString()));
  };
  http.readBytes = function readBytes(url, opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    return http._withClient(typed_data.Uint8List, dart.fn(client => client.readBytes(url, {headers: headers}), T$.ClientToFutureOfUint8List()));
  };
  http._withClient = function _withClient(T, fn) {
    return async.async(T, function* _withClient() {
      let client = client$.Client.new();
      try {
        return yield fn(client);
      } finally {
        client.close();
      }
    });
  };
  constants.Constants = class Constants extends core.Object {
    static ['_#new#tearOff']() {
      return new constants.Constants.new();
    }
  };
  (constants.Constants.new = function() {
    ;
  }).prototype = constants.Constants.prototype;
  dart.addTypeTests(constants.Constants);
  dart.addTypeCaches(constants.Constants);
  dart.setLibraryUri(constants.Constants, I[46]);
  dart.setStaticFieldSignature(constants.Constants, () => ['defaultHeaders']);
  dart.defineLazy(constants.Constants, {
    /*constants.Constants.defaultHeaders*/get defaultHeaders() {
      return C[98] || CT.C98;
    }
  }, false);
  legacy_api.launch = function launch(urlString, opts$) {
    let forceSafariVC = opts$ && 'forceSafariVC' in opts$ ? opts$.forceSafariVC : null;
    let forceWebView = opts$ && 'forceWebView' in opts$ ? opts$.forceWebView : false;
    let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : false;
    let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : false;
    let universalLinksOnly = opts$ && 'universalLinksOnly' in opts$ ? opts$.universalLinksOnly : false;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let statusBarBrightness = opts$ && 'statusBarBrightness' in opts$ ? opts$.statusBarBrightness : null;
    let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
    return async.async(core.bool, function* launch() {
      let t77, t77$;
      let url = core.Uri.tryParse(urlString[S$.$trimLeft]());
      let isWebURL = url != null && (url.scheme === "http" || url.scheme === "https");
      if (dart.test((t77 = forceSafariVC, t77 == null ? false || forceWebView : t77)) && !isWebURL) {
        dart.throw(new message_codec.PlatformException.new({code: "NOT_A_WEB_SCHEME", message: "To use webview or safariVC, you need to pass " + "in a web URL. This " + urlString + " is not a web URL."}));
      }
      let previousAutomaticSystemUiAdjustment = true;
      if (statusBarBrightness != null && platform.defaultTargetPlatform === platform.TargetPlatform.iOS && legacy_api._ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance) != null) {
        previousAutomaticSystemUiAdjustment = dart.nullCheck(legacy_api._ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance)).renderView.automaticSystemUiAdjustment;
        dart.nullCheck(legacy_api._ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance)).renderView.automaticSystemUiAdjustment = false;
        system_chrome.SystemChrome.setSystemUIOverlayStyle(statusBarBrightness === ui.Brightness.light ? system_chrome.SystemUiOverlayStyle.dark : system_chrome.SystemUiOverlayStyle.light);
      }
      let result = (yield url_launcher_platform.UrlLauncherPlatform.instance.launch(urlString, {useSafariVC: (t77$ = forceSafariVC, t77$ == null ? isWebURL : t77$), useWebView: forceWebView, enableJavaScript: enableJavaScript, enableDomStorage: enableDomStorage, universalLinksOnly: universalLinksOnly, headers: headers, webOnlyWindowName: webOnlyWindowName}));
      if (statusBarBrightness != null && legacy_api._ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance) != null) {
        dart.nullCheck(legacy_api._ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance)).renderView.automaticSystemUiAdjustment = previousAutomaticSystemUiAdjustment;
      }
      return result;
    });
  };
  legacy_api.canLaunch = function canLaunch(urlString) {
    return async.async(core.bool, function* canLaunch() {
      return url_launcher_platform.UrlLauncherPlatform.instance.canLaunch(urlString);
    });
  };
  legacy_api.closeWebView = function closeWebView() {
    return async.async(dart.void, function* closeWebView() {
      return url_launcher_platform.UrlLauncherPlatform.instance.closeWebView();
    });
  };
  legacy_api._ambiguate = function _ambiguate(T, value) {
    return value;
  };
  types$0.LaunchMode = class LaunchMode extends core._Enum {
    [S$._enumToString]() {
      return "LaunchMode." + this[S$._name];
    }
  };
  (types$0.LaunchMode.new = function(index, name) {
    types$0.LaunchMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$0.LaunchMode.prototype;
  dart.addTypeTests(types$0.LaunchMode);
  dart.addTypeCaches(types$0.LaunchMode);
  dart.setMethodSignature(types$0.LaunchMode, () => ({
    __proto__: dart.getMethods(types$0.LaunchMode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$0.LaunchMode, I[47]);
  dart.setStaticFieldSignature(types$0.LaunchMode, () => ['values', 'platformDefault', 'inAppWebView', 'externalApplication', 'externalNonBrowserApplication']);
  dart.defineLazy(types$0.LaunchMode, {
    /*types$0.LaunchMode.values*/get values() {
      return C[99] || CT.C99;
    },
    /*types$0.LaunchMode.platformDefault*/get platformDefault() {
      return C[100] || CT.C100;
    },
    /*types$0.LaunchMode.inAppWebView*/get inAppWebView() {
      return C[101] || CT.C101;
    },
    /*types$0.LaunchMode.externalApplication*/get externalApplication() {
      return C[45] || CT.C45;
    },
    /*types$0.LaunchMode.externalNonBrowserApplication*/get externalNonBrowserApplication() {
      return C[102] || CT.C102;
    }
  }, false);
  types$0.WebViewConfiguration = class WebViewConfiguration extends core.Object {
    get enableJavaScript() {
      return this[S$.enableJavaScript$1];
    }
    set enableJavaScript(value) {
      super.enableJavaScript = value;
    }
    get enableDomStorage() {
      return this[S$.enableDomStorage$1];
    }
    set enableDomStorage(value) {
      super.enableDomStorage = value;
    }
    get headers() {
      return this[S$.headers$1];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](opts$) {
      let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : true;
      let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : true;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      return new types$0.WebViewConfiguration.new({enableJavaScript: enableJavaScript, enableDomStorage: enableDomStorage, headers: headers});
    }
  };
  (types$0.WebViewConfiguration.new = function(opts$) {
    let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : true;
    let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : true;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    this[S$.enableJavaScript$1] = enableJavaScript;
    this[S$.enableDomStorage$1] = enableDomStorage;
    this[S$.headers$1] = headers;
    ;
  }).prototype = types$0.WebViewConfiguration.prototype;
  dart.addTypeTests(types$0.WebViewConfiguration);
  dart.addTypeCaches(types$0.WebViewConfiguration);
  dart.setLibraryUri(types$0.WebViewConfiguration, I[47]);
  dart.setFieldSignature(types$0.WebViewConfiguration, () => ({
    __proto__: dart.getFields(types$0.WebViewConfiguration.__proto__),
    enableJavaScript: dart.finalFieldType(core.bool),
    enableDomStorage: dart.finalFieldType(core.bool),
    headers: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  url_launcher_uri.launchUrl = function launchUrl(url, opts$) {
    let mode = opts$ && 'mode' in opts$ ? opts$.mode : C[100] || CT.C100;
    let webViewConfiguration = opts$ && 'webViewConfiguration' in opts$ ? opts$.webViewConfiguration : C[103] || CT.C103;
    let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
    return async.async(core.bool, function* launchUrl() {
      if (mode === types$0.LaunchMode.inAppWebView && !(url.scheme === "https" || url.scheme === "http")) {
        dart.throw(new core.ArgumentError.value(url, "url", "To use an in-app web view, you must provide an http(s) URL."));
      }
      return url_launcher_platform.UrlLauncherPlatform.instance.launchUrl(url.toString(), new types$.LaunchOptions.new({mode: type_conversion.convertLaunchMode(mode), webViewConfiguration: type_conversion.convertConfiguration(webViewConfiguration), webOnlyWindowName: webOnlyWindowName}));
    });
  };
  url_launcher_uri.canLaunchUrl = function canLaunchUrl(url) {
    return async.async(core.bool, function* canLaunchUrl() {
      return url_launcher_platform.UrlLauncherPlatform.instance.canLaunch(url.toString());
    });
  };
  url_launcher_uri.closeInAppWebView = function closeInAppWebView() {
    return async.async(dart.void, function* closeInAppWebView() {
      return url_launcher_platform.UrlLauncherPlatform.instance.closeWebView();
    });
  };
  method_channel_url_launcher.MethodChannelUrlLauncher = class MethodChannelUrlLauncher extends url_launcher_platform.UrlLauncherPlatform {
    get linkDelegate() {
      return this[S$.linkDelegate];
    }
    set linkDelegate(value) {
      super.linkDelegate = value;
    }
    canLaunch(url) {
      return method_channel_url_launcher._channel.invokeMethod(core.bool, "canLaunch", new (T$.IdentityMapOfString$Object()).from(["url", url])).then(core.bool, dart.fn(value => {
        let t79;
        t79 = value;
        return t79 == null ? false : t79;
      }, T$.boolNTobool()));
    }
    closeWebView() {
      return method_channel_url_launcher._channel.invokeMethod(dart.void, "closeWebView");
    }
    launch(url, opts$) {
      let useSafariVC = opts$ && 'useSafariVC' in opts$ ? opts$.useSafariVC : null;
      let useWebView = opts$ && 'useWebView' in opts$ ? opts$.useWebView : null;
      let enableJavaScript = opts$ && 'enableJavaScript' in opts$ ? opts$.enableJavaScript : null;
      let enableDomStorage = opts$ && 'enableDomStorage' in opts$ ? opts$.enableDomStorage : null;
      let universalLinksOnly = opts$ && 'universalLinksOnly' in opts$ ? opts$.universalLinksOnly : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
      return method_channel_url_launcher._channel.invokeMethod(core.bool, "launch", new (T$.IdentityMapOfString$Object()).from(["url", url, "useSafariVC", useSafariVC, "useWebView", useWebView, "enableJavaScript", enableJavaScript, "enableDomStorage", enableDomStorage, "universalLinksOnly", universalLinksOnly, "headers", headers])).then(core.bool, dart.fn(value => {
        let t79;
        t79 = value;
        return t79 == null ? false : t79;
      }, T$.boolNTobool()));
    }
    static ['_#new#tearOff']() {
      return new method_channel_url_launcher.MethodChannelUrlLauncher.new();
    }
  };
  (method_channel_url_launcher.MethodChannelUrlLauncher.new = function() {
    this[S$.linkDelegate] = null;
    method_channel_url_launcher.MethodChannelUrlLauncher.__proto__.new.call(this);
    ;
  }).prototype = method_channel_url_launcher.MethodChannelUrlLauncher.prototype;
  dart.addTypeTests(method_channel_url_launcher.MethodChannelUrlLauncher);
  dart.addTypeCaches(method_channel_url_launcher.MethodChannelUrlLauncher);
  dart.setLibraryUri(method_channel_url_launcher.MethodChannelUrlLauncher, I[48]);
  dart.setFieldSignature(method_channel_url_launcher.MethodChannelUrlLauncher, () => ({
    __proto__: dart.getFields(method_channel_url_launcher.MethodChannelUrlLauncher.__proto__),
    linkDelegate: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [link.LinkInfo])))
  }));
  dart.defineLazy(method_channel_url_launcher, {
    /*method_channel_url_launcher._channel*/get _channel() {
      return C[104] || CT.C104;
    }
  }, false);
  functions_client$.FunctionsClient = class FunctionsClient extends core.Object {
    static ['_#new#tearOff'](url, headers, opts$) {
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      return new functions_client$.FunctionsClient.new(url, headers, {httpClient: httpClient, isolate: isolate});
    }
    get headers() {
      return this[S$._headers$2];
    }
    setAuth(token) {
      this[S$._headers$2][S$.$_set]("Authorization", "Bearer " + token);
    }
    invoke(functionName, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let method = opts$ && 'method' in opts$ ? opts$.method : C[105] || CT.C105;
      let responseType = opts$ && 'responseType' in opts$ ? opts$.responseType : C[106] || CT.C106;
      return async.async(types$1.FunctionResponse, (function* invoke() {
        let t84, t84$, t84$0, t84$1, t84$2, t84$3, t84$4, t84$5, t84$6, t84$7;
        let bodyStr = body == null ? null : (yield this[S$._isolate$2].encode(body));
        let response = null;
        function response$35get() {
          let t81;
          t81 = response;
          return t81 == null ? dart.throw(new _internal.LateError.localNI("response")) : t81;
        }
        function response$35set(response$35param) {
          if (response == null)
            return response = response$35param;
          else
            dart.throw(new _internal.LateError.localAI("response"));
        }
        let uri = core.Uri.parse(this[S$._url$1] + "/" + functionName);
        let finalHeaders = (() => {
          let t83 = T$.LinkedHashMapOfString$String().of(this[S$._headers$2]);
          if (headers != null) t83[S$.$addAll](headers);
          return t83;
        })();
        switch (method) {
          case C[105] || CT.C105:
            {
              response$35set(yield (t84$ = (t84 = this[S$._httpClient$2], t84 == null ? null : dart.bind(t84, 'post')), t84$ == null ? C[93] || CT.C93 : t84$)(uri, {headers: finalHeaders, body: bodyStr}));
              break;
            }
          case C[107] || CT.C107:
            {
              response$35set(yield (t84$1 = (t84$0 = this[S$._httpClient$2], t84$0 == null ? null : dart.bind(t84$0, 'get')), t84$1 == null ? C[92] || CT.C92 : t84$1)(uri, {headers: finalHeaders}));
              break;
            }
          case C[108] || CT.C108:
            {
              response$35set(yield (t84$3 = (t84$2 = this[S$._httpClient$2], t84$2 == null ? null : dart.bind(t84$2, 'put')), t84$3 == null ? C[94] || CT.C94 : t84$3)(uri, {headers: finalHeaders, body: bodyStr}));
              break;
            }
          case C[109] || CT.C109:
            {
              response$35set(yield (t84$5 = (t84$4 = this[S$._httpClient$2], t84$4 == null ? null : dart.bind(t84$4, 'delete')), t84$5 == null ? C[96] || CT.C96 : t84$5)(uri, {headers: finalHeaders}));
              break;
            }
          case C[110] || CT.C110:
            {
              response$35set(yield (t84$7 = (t84$6 = this[S$._httpClient$2], t84$6 == null ? null : dart.bind(t84$6, 'patch')), t84$7 == null ? C[95] || CT.C95 : t84$7)(uri, {headers: finalHeaders, body: bodyStr}));
              break;
            }
        }
        let data = null;
        if (responseType === types$1.ResponseType.json) {
          let resBody = response$35get().body;
          data = resBody[S$.$isEmpty] ? resBody : (yield this[S$._isolate$2].decode(resBody));
        } else if (responseType === types$1.ResponseType.blob) {
          data = response$35get().bodyBytes;
        } else if (responseType === types$1.ResponseType.arraybuffer) {
          data = response$35get().bodyBytes;
        } else if (responseType === types$1.ResponseType.text) {
          data = convert.utf8.decode(response$35get().bodyBytes);
        } else {
          data = response$35get().body;
        }
        return new types$1.FunctionResponse.new({data: data, status: response$35get().statusCode});
      }).bind(this));
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (!this[S$._hasCustomIsolate]) {
          return this[S$._isolate$2].dispose();
        }
      }).bind(this));
    }
  };
  (functions_client$.FunctionsClient.new = function(url, headers, opts$) {
    let t81, t80;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
    this[S$._url$1] = url;
    this[S$._headers$2] = (() => {
      let t79 = T$.LinkedHashMapOfString$String().of(constants$2.Constants.defaultHeaders);
      t79[S$.$addAll](headers);
      return t79;
    })();
    this[S$._isolate$2] = (t80 = isolate, t80 == null ? (t81 = new _isolates_web.YAJsonIsolate.new(), (() => {
      t81.initialize();
      return t81;
    })()) : t80);
    this[S$._hasCustomIsolate] = isolate != null;
    this[S$._httpClient$2] = httpClient;
    ;
  }).prototype = functions_client$.FunctionsClient.prototype;
  dart.addTypeTests(functions_client$.FunctionsClient);
  dart.addTypeCaches(functions_client$.FunctionsClient);
  dart.setMethodSignature(functions_client$.FunctionsClient, () => ({
    __proto__: dart.getMethods(functions_client$.FunctionsClient.__proto__),
    setAuth: dart.fnType(dart.void, [core.String]),
    invoke: dart.fnType(async.Future$(types$1.FunctionResponse), [core.String], {body: dart.nullable(core.Map$(core.String, dart.dynamic)), headers: dart.nullable(core.Map$(core.String, core.String)), method: types$1.HttpMethod, responseType: types$1.ResponseType}, {}),
    dispose: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(functions_client$.FunctionsClient, () => ({
    __proto__: dart.getGetters(functions_client$.FunctionsClient.__proto__),
    headers: core.Map$(core.String, core.String)
  }));
  dart.setLibraryUri(functions_client$.FunctionsClient, I[49]);
  dart.setFieldSignature(functions_client$.FunctionsClient, () => ({
    __proto__: dart.getFields(functions_client$.FunctionsClient.__proto__),
    [S$._url$1]: dart.finalFieldType(core.String),
    [S$._headers$2]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$._httpClient$2]: dart.finalFieldType(dart.nullable(client$.Client)),
    [S$._isolate$2]: dart.finalFieldType(_isolates_web.YAJsonIsolate),
    [S$._hasCustomIsolate]: dart.finalFieldType(core.bool)
  }));
  types$1.ResponseType = class ResponseType extends core._Enum {
    [S$._enumToString]() {
      return "ResponseType." + this[S$._name];
    }
  };
  (types$1.ResponseType.new = function(index, name) {
    types$1.ResponseType.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$1.ResponseType.prototype;
  dart.addTypeTests(types$1.ResponseType);
  dart.addTypeCaches(types$1.ResponseType);
  dart.setMethodSignature(types$1.ResponseType, () => ({
    __proto__: dart.getMethods(types$1.ResponseType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$1.ResponseType, I[50]);
  dart.setStaticFieldSignature(types$1.ResponseType, () => ['values', 'json', 'text', 'arraybuffer', 'blob']);
  dart.defineLazy(types$1.ResponseType, {
    /*types$1.ResponseType.values*/get values() {
      return C[111] || CT.C111;
    },
    /*types$1.ResponseType.json*/get json() {
      return C[106] || CT.C106;
    },
    /*types$1.ResponseType.text*/get text() {
      return C[112] || CT.C112;
    },
    /*types$1.ResponseType.arraybuffer*/get arraybuffer() {
      return C[113] || CT.C113;
    },
    /*types$1.ResponseType.blob*/get blob() {
      return C[114] || CT.C114;
    }
  }, false);
  types$1.HttpMethod = class HttpMethod extends core._Enum {
    [S$._enumToString]() {
      return "HttpMethod." + this[S$._name];
    }
  };
  (types$1.HttpMethod.new = function(index, name) {
    types$1.HttpMethod.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$1.HttpMethod.prototype;
  dart.addTypeTests(types$1.HttpMethod);
  dart.addTypeCaches(types$1.HttpMethod);
  dart.setMethodSignature(types$1.HttpMethod, () => ({
    __proto__: dart.getMethods(types$1.HttpMethod.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$1.HttpMethod, I[50]);
  dart.setStaticFieldSignature(types$1.HttpMethod, () => ['values', 'get', 'post', 'put', 'delete', 'patch']);
  dart.defineLazy(types$1.HttpMethod, {
    /*types$1.HttpMethod.values*/get values() {
      return C[115] || CT.C115;
    },
    /*types$1.HttpMethod.get*/get get() {
      return C[107] || CT.C107;
    },
    /*types$1.HttpMethod.post*/get post() {
      return C[105] || CT.C105;
    },
    /*types$1.HttpMethod.put*/get put() {
      return C[108] || CT.C108;
    },
    /*types$1.HttpMethod.delete*/get delete() {
      return C[109] || CT.C109;
    },
    /*types$1.HttpMethod.patch*/get patch() {
      return C[110] || CT.C110;
    }
  }, false);
  types$1.FunctionInvokeOptions = class FunctionInvokeOptions extends core.Object {
    get headers() {
      return this[S$.headers$2];
    }
    set headers(value) {
      super.headers = value;
    }
    get body() {
      return this[S$.body];
    }
    set body(value) {
      super.body = value;
    }
    get responseType() {
      return this[S$.responseType];
    }
    set responseType(value) {
      super.responseType = value;
    }
    static ['_#new#tearOff'](opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let responseType = opts$ && 'responseType' in opts$ ? opts$.responseType : null;
      return new types$1.FunctionInvokeOptions.new({headers: headers, body: body, responseType: responseType});
    }
  };
  (types$1.FunctionInvokeOptions.new = function(opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    let responseType = opts$ && 'responseType' in opts$ ? opts$.responseType : null;
    this[S$.headers$2] = headers;
    this[S$.body] = body;
    this[S$.responseType] = responseType;
    ;
  }).prototype = types$1.FunctionInvokeOptions.prototype;
  dart.addTypeTests(types$1.FunctionInvokeOptions);
  dart.addTypeCaches(types$1.FunctionInvokeOptions);
  dart.setLibraryUri(types$1.FunctionInvokeOptions, I[50]);
  dart.setFieldSignature(types$1.FunctionInvokeOptions, () => ({
    __proto__: dart.getFields(types$1.FunctionInvokeOptions.__proto__),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String))),
    body: dart.finalFieldType(dart.dynamic),
    responseType: dart.finalFieldType(dart.nullable(types$1.ResponseType))
  }));
  types$1.FunctionResponse = class FunctionResponse extends core.Object {
    get data() {
      return this[S$.data];
    }
    set data(value) {
      super.data = value;
    }
    get status() {
      return this[S$.status];
    }
    set status(value) {
      super.status = value;
    }
    static ['_#new#tearOff'](opts$) {
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let status = opts$ && 'status' in opts$ ? opts$.status : null;
      return new types$1.FunctionResponse.new({data: data, status: status});
    }
  };
  (types$1.FunctionResponse.new = function(opts$) {
    let data = opts$ && 'data' in opts$ ? opts$.data : null;
    let status = opts$ && 'status' in opts$ ? opts$.status : null;
    this[S$.data] = data;
    this[S$.status] = status;
    ;
  }).prototype = types$1.FunctionResponse.prototype;
  dart.addTypeTests(types$1.FunctionResponse);
  dart.addTypeCaches(types$1.FunctionResponse);
  dart.setLibraryUri(types$1.FunctionResponse, I[50]);
  dart.setFieldSignature(types$1.FunctionResponse, () => ({
    __proto__: dart.getFields(types$1.FunctionResponse.__proto__),
    data: dart.finalFieldType(dart.dynamic),
    status: dart.finalFieldType(dart.nullable(core.int))
  }));
  constants$.Constants = class Constants extends core.Object {
    static ['_#new#tearOff']() {
      return new constants$.Constants.new();
    }
  };
  (constants$.Constants.new = function() {
    ;
  }).prototype = constants$.Constants.prototype;
  dart.addTypeTests(constants$.Constants);
  dart.addTypeCaches(constants$.Constants);
  dart.setLibraryUri(constants$.Constants, I[51]);
  dart.setStaticFieldSignature(constants$.Constants, () => ['defaultGotrueUrl', 'defaultAudience', 'defaultHeaders', 'defaultExpiryMargin', 'defaultStorageKey', 'expiryMargin', 'maxRetryCount', 'retryInterval']);
  dart.defineLazy(constants$.Constants, {
    /*constants$.Constants.defaultGotrueUrl*/get defaultGotrueUrl() {
      return "http://localhost:9999";
    },
    /*constants$.Constants.defaultAudience*/get defaultAudience() {
      return "";
    },
    /*constants$.Constants.defaultHeaders*/get defaultHeaders() {
      return C[116] || CT.C116;
    },
    /*constants$.Constants.defaultExpiryMargin*/get defaultExpiryMargin() {
      return 60000;
    },
    /*constants$.Constants.defaultStorageKey*/get defaultStorageKey() {
      return "supabase.auth.token";
    },
    /*constants$.Constants.expiryMargin*/get expiryMargin() {
      return C[117] || CT.C117;
    },
    /*constants$.Constants.maxRetryCount*/get maxRetryCount() {
      return 10;
    },
    /*constants$.Constants.retryInterval*/get retryInterval() {
      return C[118] || CT.C118;
    }
  }, false);
  constants$.AuthChangeEvent = class AuthChangeEvent extends core._Enum {
    [S$._enumToString]() {
      return "AuthChangeEvent." + this[S$._name];
    }
  };
  (constants$.AuthChangeEvent.new = function(index, name) {
    constants$.AuthChangeEvent.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$.AuthChangeEvent.prototype;
  dart.addTypeTests(constants$.AuthChangeEvent);
  dart.addTypeCaches(constants$.AuthChangeEvent);
  dart.setMethodSignature(constants$.AuthChangeEvent, () => ({
    __proto__: dart.getMethods(constants$.AuthChangeEvent.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$.AuthChangeEvent, I[51]);
  dart.setStaticFieldSignature(constants$.AuthChangeEvent, () => ['values', 'passwordRecovery', 'signedIn', 'signedOut', 'tokenRefreshed', 'userUpdated', 'userDeleted', 'mfaChallengeVerified']);
  dart.defineLazy(constants$.AuthChangeEvent, {
    /*constants$.AuthChangeEvent.values*/get values() {
      return C[119] || CT.C119;
    },
    /*constants$.AuthChangeEvent.passwordRecovery*/get passwordRecovery() {
      return C[120] || CT.C120;
    },
    /*constants$.AuthChangeEvent.signedIn*/get signedIn() {
      return C[121] || CT.C121;
    },
    /*constants$.AuthChangeEvent.signedOut*/get signedOut() {
      return C[122] || CT.C122;
    },
    /*constants$.AuthChangeEvent.tokenRefreshed*/get tokenRefreshed() {
      return C[123] || CT.C123;
    },
    /*constants$.AuthChangeEvent.userUpdated*/get userUpdated() {
      return C[124] || CT.C124;
    },
    /*constants$.AuthChangeEvent.userDeleted*/get userDeleted() {
      return C[125] || CT.C125;
    },
    /*constants$.AuthChangeEvent.mfaChallengeVerified*/get mfaChallengeVerified() {
      return C[126] || CT.C126;
    }
  }, false);
  constants$.GenerateLinkType = class GenerateLinkType extends core._Enum {
    [S$._enumToString]() {
      return "GenerateLinkType." + this[S$._name];
    }
  };
  (constants$.GenerateLinkType.new = function(index, name) {
    constants$.GenerateLinkType.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$.GenerateLinkType.prototype;
  dart.addTypeTests(constants$.GenerateLinkType);
  dart.addTypeCaches(constants$.GenerateLinkType);
  dart.setMethodSignature(constants$.GenerateLinkType, () => ({
    __proto__: dart.getMethods(constants$.GenerateLinkType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$.GenerateLinkType, I[51]);
  dart.setStaticFieldSignature(constants$.GenerateLinkType, () => ['values', 'signup', 'invite', 'magiclink', 'recovery', 'emailChangeCurrent', 'emailChangeNew', 'unknown']);
  dart.defineLazy(constants$.GenerateLinkType, {
    /*constants$.GenerateLinkType.values*/get values() {
      return C[127] || CT.C127;
    },
    /*constants$.GenerateLinkType.signup*/get signup() {
      return C[128] || CT.C128;
    },
    /*constants$.GenerateLinkType.invite*/get invite() {
      return C[129] || CT.C129;
    },
    /*constants$.GenerateLinkType.magiclink*/get magiclink() {
      return C[130] || CT.C130;
    },
    /*constants$.GenerateLinkType.recovery*/get recovery() {
      return C[131] || CT.C131;
    },
    /*constants$.GenerateLinkType.emailChangeCurrent*/get emailChangeCurrent() {
      return C[132] || CT.C132;
    },
    /*constants$.GenerateLinkType.emailChangeNew*/get emailChangeNew() {
      return C[133] || CT.C133;
    },
    /*constants$.GenerateLinkType.unknown*/get unknown() {
      return C[134] || CT.C134;
    }
  }, false);
  constants$.OtpType = class OtpType extends core._Enum {
    [S$._enumToString]() {
      return "OtpType." + this[S$._name];
    }
  };
  (constants$.OtpType.new = function(index, name) {
    constants$.OtpType.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$.OtpType.prototype;
  dart.addTypeTests(constants$.OtpType);
  dart.addTypeCaches(constants$.OtpType);
  dart.setMethodSignature(constants$.OtpType, () => ({
    __proto__: dart.getMethods(constants$.OtpType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$.OtpType, I[51]);
  dart.setStaticFieldSignature(constants$.OtpType, () => ['values', 'sms', 'phoneChange', 'signup', 'invite', 'magiclink', 'recovery', 'emailChange', 'email']);
  dart.defineLazy(constants$.OtpType, {
    /*constants$.OtpType.values*/get values() {
      return C[135] || CT.C135;
    },
    /*constants$.OtpType.sms*/get sms() {
      return C[136] || CT.C136;
    },
    /*constants$.OtpType.phoneChange*/get phoneChange() {
      return C[137] || CT.C137;
    },
    /*constants$.OtpType.signup*/get signup() {
      return C[138] || CT.C138;
    },
    /*constants$.OtpType.invite*/get invite() {
      return C[139] || CT.C139;
    },
    /*constants$.OtpType.magiclink*/get magiclink() {
      return C[140] || CT.C140;
    },
    /*constants$.OtpType.recovery*/get recovery() {
      return C[141] || CT.C141;
    },
    /*constants$.OtpType.emailChange*/get emailChange() {
      return C[142] || CT.C142;
    },
    /*constants$.OtpType.email*/get email() {
      return C[143] || CT.C143;
    }
  }, false);
  constants$.OtpChannel = class OtpChannel extends core._Enum {
    [S$._enumToString]() {
      return "OtpChannel." + this[S$._name];
    }
  };
  (constants$.OtpChannel.new = function(index, name) {
    constants$.OtpChannel.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$.OtpChannel.prototype;
  dart.addTypeTests(constants$.OtpChannel);
  dart.addTypeCaches(constants$.OtpChannel);
  dart.setMethodSignature(constants$.OtpChannel, () => ({
    __proto__: dart.getMethods(constants$.OtpChannel.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$.OtpChannel, I[51]);
  dart.setStaticFieldSignature(constants$.OtpChannel, () => ['values', 'sms', 'whatsapp']);
  dart.defineLazy(constants$.OtpChannel, {
    /*constants$.OtpChannel.values*/get values() {
      return C[144] || CT.C144;
    },
    /*constants$.OtpChannel.sms*/get sms() {
      return C[145] || CT.C145;
    },
    /*constants$.OtpChannel.whatsapp*/get whatsapp() {
      return C[146] || CT.C146;
    }
  }, false);
  constants$.SignOutScope = class SignOutScope extends core._Enum {
    [S$._enumToString]() {
      return "SignOutScope." + this[S$._name];
    }
  };
  (constants$.SignOutScope.new = function(index, name) {
    constants$.SignOutScope.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$.SignOutScope.prototype;
  dart.addTypeTests(constants$.SignOutScope);
  dart.addTypeCaches(constants$.SignOutScope);
  dart.setMethodSignature(constants$.SignOutScope, () => ({
    __proto__: dart.getMethods(constants$.SignOutScope.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$.SignOutScope, I[51]);
  dart.setStaticFieldSignature(constants$.SignOutScope, () => ['values', 'global', 'local', 'others']);
  dart.defineLazy(constants$.SignOutScope, {
    /*constants$.SignOutScope.values*/get values() {
      return C[147] || CT.C147;
    },
    /*constants$.SignOutScope.global*/get global() {
      return C[148] || CT.C148;
    },
    /*constants$.SignOutScope.local*/get local() {
      return C[149] || CT.C149;
    },
    /*constants$.SignOutScope.others*/get others() {
      return C[150] || CT.C150;
    }
  }, false);
  constants$['GenerateLinkTypeExtended|fromString'] = function GenerateLinkTypeExtended$124fromString(val) {
    for (let type of constants$.GenerateLinkType.values) {
      if (auth_response['ToSnakeCase|get#snakeCase'](type) === val) {
        return type;
      }
    }
    return constants$.GenerateLinkType.unknown;
  };
  gotrue_admin_api.GoTrueAdminApi = class GoTrueAdminApi extends core.Object {
    get [S$._fetch]() {
      let t99, t98;
      t98 = this[S$.__GoTrueAdminApi__fetch];
      return t98 == null ? (t99 = new fetch.GotrueFetch.new(this[S$._httpClient$3]), this[S$.__GoTrueAdminApi__fetch] == null ? this[S$.__GoTrueAdminApi__fetch] = t99 : dart.throw(new _internal.LateError.fieldADI("_fetch"))) : t98;
    }
    get mfa() {
      let t98;
      t98 = this[S$.__GoTrueAdminApi_mfa];
      return t98 == null ? dart.throw(new _internal.LateError.fieldNI("mfa")) : t98;
    }
    set mfa(mfa$35param) {
      if (this[S$.__GoTrueAdminApi_mfa] == null)
        this[S$.__GoTrueAdminApi_mfa] = mfa$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("mfa"));
    }
    static ['_#new#tearOff'](_url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      return new gotrue_admin_api.GoTrueAdminApi.new(_url, {headers: headers, httpClient: httpClient});
    }
    signOut(jwt, opts$) {
      let scope = opts$ && 'scope' in opts$ ? opts$.scope : C[148] || CT.C148;
      return async.async(dart.void, (function* signOut() {
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3], noResolveJson: true, jwt: jwt, query: new (T$.IdentityMapOfString$String()).from(["scope", core['EnumName|get#name'](scope)])});
        yield this[S$._fetch].request(this[S$._url$2] + "/logout", fetch.RequestMethodType.post, {options: options});
      }).bind(this));
    }
    createUser(attributes) {
      return async.async(auth_response.UserResponse, (function* createUser() {
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3], body: attributes.toJson()});
        let response = (yield this[S$._fetch].request(this[S$._url$2] + "/admin/users", fetch.RequestMethodType.post, {options: options}));
        return new auth_response.UserResponse.fromJson(T$.MapOfString$dynamic().as(response));
      }).bind(this));
    }
    deleteUser(id) {
      return async.async(dart.void, (function* deleteUser() {
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3]});
        yield this[S$._fetch].request(this[S$._url$2] + "/admin/users/" + id, fetch.RequestMethodType.delete, {options: options});
      }).bind(this));
    }
    listUsers(opts$) {
      let page = opts$ && 'page' in opts$ ? opts$.page : null;
      let perPage = opts$ && 'perPage' in opts$ ? opts$.perPage : null;
      return async.async(T$.ListOfUser(), (function* listUsers() {
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3], query: (() => {
            let t98 = new (T$.IdentityMapOfString$String()).new();
            if (page != null) t98[S$.$_set]("page", dart.toString(page));
            if (perPage != null) t98[S$.$_set]("per_page", dart.toString(perPage));
            return t98;
          })()});
        let response = (yield this[S$._fetch].request(this[S$._url$2] + "/admin/users", fetch.RequestMethodType.get, {options: options}));
        return core.List.as(dart.dsend(response, '_get', ["users"]))[S$.$map](user.User, dart.fn(e => dart.nullCheck(user.User.fromJson(T$.MapOfString$dynamic().as(e))), T$.dynamicToUser()))[S$.$toList]();
      }).bind(this));
    }
    inviteUserByEmail(email, opts$) {
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      return async.async(auth_response.UserResponse, (function* inviteUserByEmail() {
        let body = new (T$.IdentityMapOfString$String()).from(["email", email]);
        let fetchOptions = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3], body: body, redirectTo: redirectTo});
        let response = (yield this[S$._fetch].request(this[S$._url$2] + "/invite", fetch.RequestMethodType.post, {options: fetchOptions}));
        return new auth_response.UserResponse.fromJson(T$.MapOfString$dynamic().as(response));
      }).bind(this));
    }
    generateLink(opts$) {
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let password = opts$ && 'password' in opts$ ? opts$.password : null;
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      return async.async(auth_response.GenerateLinkResponse, (function* generateLink() {
        let body = (() => {
          let t99 = new (T$.IdentityMapOfString$Object()).new();
          t99[S$.$_set]("email", email);
          t99[S$.$_set]("type", auth_response['ToSnakeCase|get#snakeCase'](type));
          if (data != null) t99[S$.$_set]("data", data);
          if (redirectTo != null) t99[S$.$_set]("redirect_to", redirectTo);
          if (password != null) t99[S$.$_set]("password", password);
          return t99;
        })();
        let fetchOptions = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3], body: body});
        let response = (yield this[S$._fetch].request(this[S$._url$2] + "/admin/generate_link", fetch.RequestMethodType.post, {options: fetchOptions}));
        return new auth_response.GenerateLinkResponse.fromJson(T$.MapOfString$dynamic().as(response));
      }).bind(this));
    }
    getUserById(uid) {
      return async.async(auth_response.UserResponse, (function* getUserById() {
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3]});
        let response = (yield this[S$._fetch].request(this[S$._url$2] + "/admin/users/" + uid, fetch.RequestMethodType.get, {options: options}));
        return new auth_response.UserResponse.fromJson(T$.MapOfString$dynamic().as(response));
      }).bind(this));
    }
    updateUserById(uid, opts$) {
      let attributes = opts$ && 'attributes' in opts$ ? opts$.attributes : null;
      return async.async(auth_response.UserResponse, (function* updateUserById() {
        let body = attributes.toJson();
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$3], body: body});
        let response = (yield this[S$._fetch].request(this[S$._url$2] + "/admin/users/" + uid, fetch.RequestMethodType.put, {options: options}));
        return new auth_response.UserResponse.fromJson(T$.MapOfString$dynamic().as(response));
      }).bind(this));
    }
  };
  (gotrue_admin_api.GoTrueAdminApi.new = function(_url, opts$) {
    let t98;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    this[S$.__GoTrueAdminApi__fetch] = null;
    this[S$.__GoTrueAdminApi_mfa] = null;
    this[S$._url$2] = _url;
    this[S$._headers$3] = (t98 = headers, t98 == null ? new (T$.IdentityMapOfString$String()).new() : t98);
    this[S$._httpClient$3] = httpClient;
    this.mfa = new gotrue_admin_mfa_api.GoTrueAdminMFAApi.new({url: this[S$._url$2], headers: this[S$._headers$3], fetch: this[S$._fetch]});
  }).prototype = gotrue_admin_api.GoTrueAdminApi.prototype;
  dart.addTypeTests(gotrue_admin_api.GoTrueAdminApi);
  dart.addTypeCaches(gotrue_admin_api.GoTrueAdminApi);
  dart.setMethodSignature(gotrue_admin_api.GoTrueAdminApi, () => ({
    __proto__: dart.getMethods(gotrue_admin_api.GoTrueAdminApi.__proto__),
    signOut: dart.fnType(async.Future$(dart.void), [core.String], {scope: constants$.SignOutScope}, {}),
    createUser: dart.fnType(async.Future$(auth_response.UserResponse), [user_attributes.AdminUserAttributes]),
    deleteUser: dart.fnType(async.Future$(dart.void), [core.String]),
    listUsers: dart.fnType(async.Future$(core.List$(user.User)), [], {page: dart.nullable(core.int), perPage: dart.nullable(core.int)}, {}),
    inviteUserByEmail: dart.fnType(async.Future$(auth_response.UserResponse), [core.String], {data: dart.nullable(core.Map$(core.String, dart.dynamic)), redirectTo: dart.nullable(core.String)}, {}),
    generateLink: dart.fnType(async.Future$(auth_response.GenerateLinkResponse), [], {data: dart.nullable(core.Map$(core.String, dart.dynamic)), password: dart.nullable(core.String), redirectTo: dart.nullable(core.String)}, {email: core.String, type: constants$.GenerateLinkType}),
    getUserById: dart.fnType(async.Future$(auth_response.UserResponse), [core.String]),
    updateUserById: dart.fnType(async.Future$(auth_response.UserResponse), [core.String], {}, {attributes: user_attributes.AdminUserAttributes})
  }));
  dart.setGetterSignature(gotrue_admin_api.GoTrueAdminApi, () => ({
    __proto__: dart.getGetters(gotrue_admin_api.GoTrueAdminApi.__proto__),
    [S$._fetch]: fetch.GotrueFetch,
    mfa: gotrue_admin_mfa_api.GoTrueAdminMFAApi
  }));
  dart.setSetterSignature(gotrue_admin_api.GoTrueAdminApi, () => ({
    __proto__: dart.getSetters(gotrue_admin_api.GoTrueAdminApi.__proto__),
    mfa: gotrue_admin_mfa_api.GoTrueAdminMFAApi
  }));
  dart.setLibraryUri(gotrue_admin_api.GoTrueAdminApi, I[52]);
  dart.setFieldSignature(gotrue_admin_api.GoTrueAdminApi, () => ({
    __proto__: dart.getFields(gotrue_admin_api.GoTrueAdminApi.__proto__),
    [S$._url$2]: dart.finalFieldType(core.String),
    [S$._headers$3]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$._httpClient$3]: dart.finalFieldType(dart.nullable(client$.Client)),
    [S$.__GoTrueAdminApi__fetch]: dart.fieldType(dart.nullable(fetch.GotrueFetch)),
    [S$.__GoTrueAdminApi_mfa]: dart.fieldType(dart.nullable(gotrue_admin_mfa_api.GoTrueAdminMFAApi))
  }));
  gotrue_client.GoTrueClient = class GoTrueClient extends core.Object {
    set admin(admin$35param) {
      if (this[S$.__GoTrueClient_admin] == null)
        this[S$.__GoTrueClient_admin] = admin$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("admin"));
    }
    get admin() {
      let t101;
      t101 = this[S$.__GoTrueClient_admin];
      return t101 == null ? dart.throw(new _internal.LateError.fieldNI("admin")) : t101;
    }
    get mfa() {
      let t101;
      t101 = this[S$.__GoTrueClient_mfa];
      return t101 == null ? dart.throw(new _internal.LateError.fieldNI("mfa")) : t101;
    }
    set mfa(mfa$35param) {
      if (this[S$.__GoTrueClient_mfa] == null)
        this[S$.__GoTrueClient_mfa] = mfa$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("mfa"));
    }
    get [S$._fetch$1]() {
      let t102, t101;
      t101 = this[S$.__GoTrueClient__fetch];
      return t101 == null ? (t102 = new fetch.GotrueFetch.new(this[S$._httpClient$4]), this[S$.__GoTrueClient__fetch] == null ? this[S$.__GoTrueClient__fetch] = t102 : dart.throw(new _internal.LateError.fieldADI("_fetch"))) : t101;
    }
    get [S$._autoRefreshToken]() {
      let t101;
      t101 = this[S$.__GoTrueClient__autoRefreshToken];
      return t101 == null ? dart.throw(new _internal.LateError.fieldNI("_autoRefreshToken")) : t101;
    }
    set [S$._autoRefreshToken](_autoRefreshToken$35param) {
      this[S$.__GoTrueClient__autoRefreshToken] = _autoRefreshToken$35param;
    }
    get onAuthStateChange() {
      return this[S$._onAuthStateChangeController].stream;
    }
    get onAuthStateChangeSync() {
      return this[S$._onAuthStateChangeControllerSync].stream;
    }
    static ['_#new#tearOff'](opts$) {
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let autoRefreshToken = opts$ && 'autoRefreshToken' in opts$ ? opts$.autoRefreshToken : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let asyncStorage = opts$ && 'asyncStorage' in opts$ ? opts$.asyncStorage : null;
      let flowType = opts$ && 'flowType' in opts$ ? opts$.flowType : C[36] || CT.C36;
      return new gotrue_client.GoTrueClient.new({url: url, headers: headers, autoRefreshToken: autoRefreshToken, httpClient: httpClient, asyncStorage: asyncStorage, flowType: flowType});
    }
    get headers() {
      return this[S$._headers$4];
    }
    get currentUser() {
      return this[S$._currentUser];
    }
    get currentSession() {
      return this[S$._currentSession];
    }
    signUp(opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let password = opts$ && 'password' in opts$ ? opts$.password : null;
      let emailRedirectTo = opts$ && 'emailRedirectTo' in opts$ ? opts$.emailRedirectTo : null;
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      let channel = opts$ && 'channel' in opts$ ? opts$.channel : C[145] || CT.C145;
      return async.async(auth_response.AuthResponse, (function* signUp() {
        if (!(email != null && phone == null || email == null && phone != null)) dart.assertFailed("You must provide either an email or phone number", I[53], 156, 12, "(email != null && phone == null) || (email == null && phone != null)");
        this[S$._removeSession]();
        let response = null;
        function response$35get() {
          let t102;
          t102 = response;
          return t102 == null ? dart.throw(new _internal.LateError.localNI("response")) : t102;
        }
        function response$35set(response$35param) {
          if (response == null)
            return response = response$35param;
          else
            dart.throw(new _internal.LateError.localAI("response"));
        }
        if (email != null) {
          let codeChallenge = null;
          if (this[S$._flowType] === oauth_flow_type.AuthFlowType.pkce) {
            if (!(this[S$._asyncStorage] != null)) dart.assertFailed("You need to provide asyncStorage to perform pkce flow.", I[53], 167, 16, "_asyncStorage != null");
            let codeVerifier = helper.generatePKCEVerifier();
            yield dart.nullCheck(this[S$._asyncStorage]).setItem({key: "supabase.auth.token" + "-code-verifier", value: codeVerifier});
            codeChallenge = helper.generatePKCEChallenge(codeVerifier);
          }
          response$35set(T$.MapOfString$dynamic().as(yield this[S$._fetch$1].request(this[S$._url$3] + "/signup", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], redirectTo: emailRedirectTo, body: new (T$.IdentityMapOfString$dynamic()).from(["email", email, "password", password, "data", data, "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]), "code_challenge", codeChallenge, "code_challenge_method", codeChallenge != null ? "s256" : null])})})));
        } else if (phone != null) {
          let body = new (T$.IdentityMapOfString$ObjectN()).from(["phone", phone, "password", password, "data", data, "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]), "channel", core['EnumName|get#name'](channel)]);
          let fetchOptions = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body});
          response$35set(T$.MapOfString$dynamic().as(yield this[S$._fetch$1].request(this[S$._url$3] + "/signup", fetch.RequestMethodType.post, {options: fetchOptions})));
        } else {
          dart.throw(new auth_exception.AuthException.new("You must provide either an email or phone number and a password"));
        }
        let authResponse = new auth_response.AuthResponse.fromJson(response$35get());
        let session = authResponse.session;
        if (session != null) {
          this[S$._saveSession](session);
          this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
        }
        return authResponse;
      }).bind(this));
    }
    signInWithPassword(opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let password = opts$ && 'password' in opts$ ? opts$.password : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      return async.async(auth_response.AuthResponse, (function* signInWithPassword() {
        let t107;
        this[S$._removeSession]();
        let response = null;
        function response$35get() {
          let t105;
          t105 = response;
          return t105 == null ? dart.throw(new _internal.LateError.localNI("response")) : t105;
        }
        function response$35set(response$35param) {
          if (response == null)
            return response = response$35param;
          else
            dart.throw(new _internal.LateError.localAI("response"));
        }
        if (email != null) {
          response$35set(T$.MapOfString$dynamic().as(yield this[S$._fetch$1].request(this[S$._url$3] + "/token", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: new (T$.IdentityMapOfString$dynamic()).from(["email", email, "password", password, "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken])]), query: new (T$.IdentityMapOfString$String()).from(["grant_type", "password"])})})));
        } else if (phone != null) {
          response$35set(T$.MapOfString$dynamic().as(yield this[S$._fetch$1].request(this[S$._url$3] + "/token", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: new (T$.IdentityMapOfString$dynamic()).from(["phone", phone, "password", password, "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken])]), query: new (T$.IdentityMapOfString$String()).from(["grant_type", "password"])})})));
        } else {
          dart.throw(new auth_exception.AuthException.new("You must provide either an email, phone number, a third-party provider or OpenID Connect."));
        }
        let authResponse = new auth_response.AuthResponse.fromJson(response$35get());
        if ((t107 = authResponse.session, t107 == null ? null : t107.accessToken) != null) {
          this[S$._saveSession](dart.nullCheck(authResponse.session));
          this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
        }
        return authResponse;
      }).bind(this));
    }
    getOAuthSignInUrl(opts$) {
      let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let queryParams = opts$ && 'queryParams' in opts$ ? opts$.queryParams : null;
      return async.async(auth_response.OAuthResponse, (function* getOAuthSignInUrl() {
        this[S$._removeSession]();
        return this[S$._handleProviderSignIn](provider, {redirectTo: redirectTo, scopes: scopes, queryParams: queryParams});
      }).bind(this));
    }
    exchangeCodeForSession(authCode) {
      return async.async(auth_response.AuthResponse, (function* exchangeCodeForSession() {
        if (!(this[S$._asyncStorage] != null)) dart.assertFailed("You need to provide asyncStorage to perform pkce flow.", I[53], 291, 12, "_asyncStorage != null");
        let codeVerifier = (yield dart.nullCheck(this[S$._asyncStorage]).getItem({key: "supabase.auth.token" + "-code-verifier"}));
        let response = T$.MapOfString$dynamic().as(yield this[S$._fetch$1].request(this[S$._url$3] + "/token", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: new (T$.IdentityMapOfString$dynamic()).from(["auth_code", authCode, "code_verifier", codeVerifier]), query: new (T$.IdentityMapOfString$String()).from(["grant_type", "pkce"])})}));
        yield dart.nullCheck(this[S$._asyncStorage]).removeItem({key: "supabase.auth.token" + "-code-verifier"});
        let authResponse = new auth_response.AuthResponse.fromJson(response);
        let session = authResponse.session;
        if (session != null) {
          this[S$._saveSession](session);
          this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
        }
        return authResponse;
      }).bind(this));
    }
    signInWithIdToken(opts$) {
      let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
      let idToken = opts$ && 'idToken' in opts$ ? opts$.idToken : null;
      let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      return async.async(auth_response.AuthResponse, (function* signInWithIdToken() {
        this[S$._removeSession]();
        if (provider !== provider$.Provider.google && provider !== provider$.Provider.apple) {
          dart.throw(new auth_exception.AuthException.new("Provider must either be " + provider$['ProviderName|get#name'](provider$.Provider.google) + " or " + provider$['ProviderName|get#name'](provider$.Provider.apple) + "."));
        }
        let response = (yield this[S$._fetch$1].request(this[S$._url$3] + "/token", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: new (T$.IdentityMapOfString$dynamic()).from(["provider", provider$['ProviderName|get#name'](provider), "id_token", idToken, "nonce", nonce, "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]), "access_token", accessToken]), query: new (T$.IdentityMapOfString$String()).from(["grant_type", "id_token"])})}));
        let authResponse = new auth_response.AuthResponse.fromJson(T$.MapOfString$dynamic().as(response));
        if (authResponse.session == null) {
          dart.throw(new auth_exception.AuthException.new("An error occurred on token verification."));
        }
        this[S$._saveSession](dart.nullCheck(authResponse.session));
        this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
        return authResponse;
      }).bind(this));
    }
    signInWithOtp(opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let emailRedirectTo = opts$ && 'emailRedirectTo' in opts$ ? opts$.emailRedirectTo : null;
      let shouldCreateUser = opts$ && 'shouldCreateUser' in opts$ ? opts$.shouldCreateUser : null;
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      let channel = opts$ && 'channel' in opts$ ? opts$.channel : C[145] || CT.C145;
      return async.async(dart.void, (function* signInWithOtp() {
        let t107, t107$, t107$0, t107$1;
        this[S$._removeSession]();
        if (email != null) {
          let codeChallenge = null;
          if (this[S$._flowType] === oauth_flow_type.AuthFlowType.pkce) {
            if (!(this[S$._asyncStorage] != null)) dart.assertFailed("You need to provide asyncStorage to perform pkce flow.", I[53], 416, 16, "_asyncStorage != null");
            let codeVerifier = helper.generatePKCEVerifier();
            yield dart.nullCheck(this[S$._asyncStorage]).setItem({key: "supabase.auth.token" + "-code-verifier", value: codeVerifier});
            codeChallenge = helper.generatePKCEChallenge(codeVerifier);
          }
          yield this[S$._fetch$1].request(this[S$._url$3] + "/otp", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], redirectTo: emailRedirectTo, body: new (T$.IdentityMapOfString$dynamic()).from(["email", email, "data", (t107 = data, t107 == null ? new _js_helper.LinkedMap.new() : t107), "create_user", (t107$ = shouldCreateUser, t107$ == null ? true : t107$), "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]), "code_challenge", codeChallenge, "code_challenge_method", codeChallenge != null ? "s256" : null])})});
          return;
        }
        if (phone != null) {
          let body = new (T$.IdentityMapOfString$Object()).from(["phone", phone, "data", (t107$0 = data, t107$0 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t107$0), "create_user", (t107$1 = shouldCreateUser, t107$1 == null ? true : t107$1), "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]), "channel", core['EnumName|get#name'](channel)]);
          let fetchOptions = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body});
          yield this[S$._fetch$1].request(this[S$._url$3] + "/otp", fetch.RequestMethodType.post, {options: fetchOptions});
          return;
        }
        dart.throw(new auth_exception.AuthException.new("You must provide either an email, phone number, a third-party provider or OpenID Connect."));
      }).bind(this));
    }
    verifyOTP(opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let token = opts$ && 'token' in opts$ ? opts$.token : null;
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      return async.async(auth_response.AuthResponse, (function* verifyOTP() {
        if (!(email != null && phone == null || email == null && phone != null)) dart.assertFailed("`email` or `phone` needs to be specified.", I[53], 477, 12, "(email != null && phone == null) || (email == null && phone != null)");
        if (type !== constants$.OtpType.emailChange && type !== constants$.OtpType.phoneChange) {
          this[S$._removeSession]();
        }
        let body = (() => {
          let t107 = new (T$.IdentityMapOfString$ObjectN()).new();
          if (email != null) t107[S$.$_set]("email", email);
          if (phone != null) t107[S$.$_set]("phone", phone);
          t107[S$.$_set]("token", token);
          t107[S$.$_set]("type", auth_response['ToSnakeCase|get#snakeCase'](type));
          t107[S$.$_set]("redirect_to", redirectTo);
          t107[S$.$_set]("gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captchaToken", captchaToken]));
          return t107;
        })();
        let fetchOptions = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body});
        let response = (yield this[S$._fetch$1].request(this[S$._url$3] + "/verify", fetch.RequestMethodType.post, {options: fetchOptions}));
        let authResponse = new auth_response.AuthResponse.fromJson(T$.MapOfString$dynamic().as(response));
        if (authResponse.session != null) {
          this[S$._saveSession](dart.nullCheck(authResponse.session));
          this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
        }
        return authResponse;
      }).bind(this));
    }
    refreshSession() {
      return async.async(auth_response.AuthResponse, (function* refreshSession() {
        let t108;
        if ((t108 = this.currentSession, t108 == null ? null : t108.accessToken) == null) {
          dart.throw(new auth_exception.AuthException.new("Not logged in."));
        }
        return yield this[S$._callRefreshToken]();
      }).bind(this));
    }
    reauthenticate() {
      return async.async(dart.void, (function* reauthenticate() {
        let session = this.currentSession;
        if (session == null) {
          dart.throw(new auth_exception.AuthException.new("Not logged in."));
        }
        let options = new fetch_options.GotrueRequestOptions.new({headers: this.headers, jwt: session.accessToken});
        yield this[S$._fetch$1].request(this[S$._url$3] + "/reauthenticate", fetch.RequestMethodType.get, {options: options});
      }).bind(this));
    }
    resend(opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let emailRedirectTo = opts$ && 'emailRedirectTo' in opts$ ? opts$.emailRedirectTo : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      return async.async(auth_response.ResendResponse, (function* resend() {
        if (!(email != null && phone == null || email == null && phone != null)) dart.assertFailed("`email` or `phone` needs to be specified.", I[53], 547, 12, "(email != null && phone == null) || (email == null && phone != null)");
        if (email != null) {
          if (!T$.JSArrayOfOtpType().of([constants$.OtpType.signup, constants$.OtpType.emailChange])[S$.$contains](type)) dart.assertFailed("email must be provided for type " + core['EnumName|get#name'](type), I[53], 550, 14, "[OtpType.signup, OtpType.emailChange].contains(type)");
        }
        if (phone != null) {
          if (!T$.JSArrayOfOtpType().of([constants$.OtpType.sms, constants$.OtpType.phoneChange])[S$.$contains](type)) dart.assertFailed("phone must be provided for type " + core['EnumName|get#name'](type), I[53], 554, 14, "[OtpType.sms, OtpType.phoneChange].contains(type)");
        }
        if (type !== constants$.OtpType.emailChange && type !== constants$.OtpType.phoneChange) {
          this[S$._removeSession]();
        }
        let body = (() => {
          let t108 = new (T$.IdentityMapOfString$Object()).new();
          if (email != null) t108[S$.$_set]("email", email);
          if (phone != null) t108[S$.$_set]("phone", phone);
          t108[S$.$_set]("type", auth_response['ToSnakeCase|get#snakeCase'](type));
          t108[S$.$_set]("gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]));
          return t108;
        })();
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body, redirectTo: emailRedirectTo});
        let response = (yield this[S$._fetch$1].request(this[S$._url$3] + "/resend", fetch.RequestMethodType.post, {options: options}));
        if (core.Map.as(response)[S$.$containsKey](T$.JSArrayOfString().of(["message_id"]))) {
          return new auth_response.ResendResponse.new({messageId: T$.StringN().as(response[S$.$_get]("message_id"))});
        } else {
          return new auth_response.ResendResponse.new();
        }
      }).bind(this));
    }
    updateUser(attributes, opts$) {
      let emailRedirectTo = opts$ && 'emailRedirectTo' in opts$ ? opts$.emailRedirectTo : null;
      return async.async(auth_response.UserResponse, (function* updateUser() {
        let t109, t109$;
        let accessToken = (t109 = this.currentSession, t109 == null ? null : t109.accessToken);
        if (accessToken == null) {
          dart.throw(new auth_exception.AuthException.new("Not logged in."));
        }
        let body = attributes.toJson();
        let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body, jwt: accessToken, redirectTo: emailRedirectTo});
        let response = (yield this[S$._fetch$1].request(this[S$._url$3] + "/user", fetch.RequestMethodType.put, {options: options}));
        let userResponse = new auth_response.UserResponse.fromJson(T$.MapOfString$dynamic().as(response));
        this[S$._currentUser] = userResponse.user;
        this[S$._currentSession] = (t109$ = this.currentSession, t109$ == null ? null : t109$.copyWith({user: userResponse.user}));
        this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.userUpdated);
        return userResponse;
      }).bind(this));
    }
    setSession(refreshToken) {
      return async.async(auth_response.AuthResponse, (function* setSession() {
        if (refreshToken[S$.$isEmpty]) {
          dart.throw(new auth_exception.AuthException.new("No current session."));
        }
        return yield this[S$._callRefreshToken]({refreshToken: refreshToken});
      }).bind(this));
    }
    getSessionFromUrl(originUrl, opts$) {
      let storeSession = opts$ && 'storeSession' in opts$ ? opts$.storeSession : true;
      return async.async(auth_response.AuthSessionUrlResponse, (function* getSessionFromUrl() {
        if (this[S$._flowType] === oauth_flow_type.AuthFlowType.pkce) {
          let authCode = originUrl.queryParameters[S$.$_get]("code");
          if (authCode == null) {
            dart.throw(new auth_exception.AuthPKCEGrantCodeExchangeError.new("No code detected in query parameters."));
          }
          let data = (yield this.exchangeCodeForSession(authCode));
          let session = data.session;
          if (session == null) {
            dart.throw(new auth_exception.AuthPKCEGrantCodeExchangeError.new("No session found for the auth code."));
          }
          if (storeSession === true) {
            this[S$._saveSession](session);
            this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
          }
          return new auth_response.AuthSessionUrlResponse.new({session: session, redirectType: null});
        }
        let url = originUrl;
        if (originUrl.hasQuery) {
          let decoded = originUrl.toString()[S$.$replaceAll]("#", "&");
          url = core.Uri.parse(decoded);
        } else {
          let decoded = originUrl.toString()[S$.$replaceAll]("#", "?");
          url = core.Uri.parse(decoded);
        }
        let errorDescription = url.queryParameters[S$.$_get]("error_description");
        if (errorDescription != null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new(errorDescription)));
        }
        let accessToken = url.queryParameters[S$.$_get]("access_token");
        let expiresIn = url.queryParameters[S$.$_get]("expires_in");
        let refreshToken = url.queryParameters[S$.$_get]("refresh_token");
        let tokenType = url.queryParameters[S$.$_get]("token_type");
        let providerToken = url.queryParameters[S$.$_get]("provider_token");
        let providerRefreshToken = url.queryParameters[S$.$_get]("provider_refresh_token");
        if (accessToken == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("No access_token detected.")));
        }
        if (expiresIn == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("No expires_in detected.")));
        }
        if (refreshToken == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("No refresh_token detected.")));
        }
        if (tokenType == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("No token_type detected.")));
        }
        let headers = (() => {
          let t109 = T$.LinkedHashMapOfString$String().of(this[S$._headers$4]);
          return t109;
        })();
        headers[S$.$_set]("Authorization", "Bearer " + dart.str(accessToken));
        let options = new fetch_options.GotrueRequestOptions.new({headers: headers});
        let response = (yield this[S$._fetch$1].request(this[S$._url$3] + "/user", fetch.RequestMethodType.get, {options: options}));
        let user = new auth_response.UserResponse.fromJson(T$.MapOfString$dynamic().as(response)).user;
        if (user == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("No user found.")));
        }
        let session = new session$.Session.new({providerToken: providerToken, providerRefreshToken: providerRefreshToken, accessToken: accessToken, expiresIn: core.int.parse(expiresIn), refreshToken: refreshToken, tokenType: tokenType, user: user});
        let redirectType = url.queryParameters[S$.$_get]("type");
        if (storeSession === true) {
          this[S$._saveSession](session);
          if (redirectType === "recovery") {
            this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.passwordRecovery);
          } else {
            this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
          }
        }
        return new auth_response.AuthSessionUrlResponse.new({session: session, redirectType: redirectType});
      }).bind(this));
    }
    signOut(opts$) {
      let scope = opts$ && 'scope' in opts$ ? opts$.scope : C[148] || CT.C148;
      return async.async(dart.void, (function* signOut() {
        let t110, t110$;
        let accessToken = (t110 = this.currentSession, t110 == null ? null : t110.accessToken);
        if (scope !== constants$.SignOutScope.others) {
          this[S$._removeSession]();
          yield (t110$ = this[S$._asyncStorage], t110$ == null ? null : t110$.removeItem({key: "supabase.auth.token" + "-code-verifier"}));
          this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedOut);
        }
        if (accessToken != null) {
          try {
            yield this.admin.signOut(accessToken, {scope: scope});
          } catch (e) {
            let error = dart.getThrown(e);
            if (auth_exception.AuthException.is(error)) {
              if (error.statusCode !== "401" && error.statusCode !== "404") {
                dart.rethrow(e);
              }
            } else
              throw e;
          }
        }
      }).bind(this));
    }
    resetPasswordForEmail(email, opts$) {
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let captchaToken = opts$ && 'captchaToken' in opts$ ? opts$.captchaToken : null;
      return async.async(dart.void, (function* resetPasswordForEmail() {
        let codeChallenge = null;
        if (this[S$._flowType] === oauth_flow_type.AuthFlowType.pkce) {
          if (!(this[S$._asyncStorage] != null)) dart.assertFailed("You need to provide asyncStorage to perform pkce flow.", I[53], 753, 14, "_asyncStorage != null");
          let codeVerifier = helper.generatePKCEVerifier();
          yield dart.nullCheck(this[S$._asyncStorage]).setItem({key: "supabase.auth.token" + "-code-verifier", value: codeVerifier});
          codeChallenge = helper.generatePKCEChallenge(codeVerifier);
        }
        let body = new (T$.IdentityMapOfString$ObjectN()).from(["email", email, "gotrue_meta_security", new (T$.IdentityMapOfString$StringN()).from(["captcha_token", captchaToken]), "code_challenge", codeChallenge, "code_challenge_method", codeChallenge != null ? "s256" : null]);
        let fetchOptions = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body, redirectTo: redirectTo});
        yield this[S$._fetch$1].request(this[S$._url$3] + "/recover", fetch.RequestMethodType.post, {options: fetchOptions});
      }).bind(this));
    }
    recoverSession(jsonStr) {
      return async.async(auth_response.AuthResponse, (function* recoverSession() {
        let t111;
        let persistedData = T$.MapOfString$dynamic().as(convert.json.decode(jsonStr));
        let currentSession = T$.MapNOfString$dynamic().as(persistedData[S$.$_get]("currentSession"));
        let expiresAt = T$.intN().as(persistedData[S$.$_get]("expiresAt"));
        if (currentSession == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("Missing currentSession.")));
        }
        if (expiresAt == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("Missing expiresAt.")));
        }
        let session = session$.Session.fromJson(currentSession);
        if (session == null) {
          dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("Current session is missing data.")));
        }
        let timeNow = (new core.DateTime.now().millisecondsSinceEpoch / 1000)[S$.$round]();
        if (dart.notNull(expiresAt) < timeNow + constants$.Constants.expiryMargin.inSeconds) {
          if (this[S$._autoRefreshToken] && session.refreshToken != null) {
            return yield this[S$._callRefreshToken]({refreshToken: session.refreshToken, accessToken: session.accessToken});
          } else {
            dart.throw(this[S$._notifyException](new auth_exception.AuthException.new("Session expired.")));
          }
        } else {
          let shouldEmitEvent = this[S$._currentSession] == null || (t111 = this[S$._currentSession], t111 == null ? null : t111.user.id) !== session.user.id;
          this[S$._saveSession](session);
          if (shouldEmitEvent) this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.signedIn);
          return new auth_response.AuthResponse.new({session: session});
        }
      }).bind(this));
    }
    [S$._handleProviderSignIn](provider, opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let queryParams = opts$ && 'queryParams' in opts$ ? opts$.queryParams : null;
      return async.async(auth_response.OAuthResponse, (function* _handleProviderSignIn() {
        let urlParams = new (T$.IdentityMapOfString$String()).from(["provider", provider$['ProviderName|get#name'](provider)]);
        if (scopes != null) {
          urlParams[S$.$_set]("scopes", scopes);
        }
        if (redirectTo != null) {
          urlParams[S$.$_set]("redirect_to", redirectTo);
        }
        if (queryParams != null) {
          urlParams[S$.$addAll](queryParams);
        }
        if (this[S$._flowType] === oauth_flow_type.AuthFlowType.pkce) {
          if (!(this[S$._asyncStorage] != null)) dart.assertFailed("You need to provide asyncStorage to perform pkce flow.", I[53], 841, 14, "_asyncStorage != null");
          let codeVerifier = helper.generatePKCEVerifier();
          yield dart.nullCheck(this[S$._asyncStorage]).setItem({key: "supabase.auth.token" + "-code-verifier", value: codeVerifier});
          let codeChallenge = helper.generatePKCEChallenge(codeVerifier);
          let flowParams = new (T$.IdentityMapOfString$String()).from(["flow_type", core['EnumName|get#name'](this[S$._flowType]), "code_challenge", codeChallenge, "code_challenge_method", "s256"]);
          urlParams[S$.$addAll](flowParams);
        }
        let url = this[S$._url$3] + "/authorize?" + core._Uri.new({queryParameters: urlParams}).query;
        return new auth_response.OAuthResponse.new({provider: provider, url: url});
      }).bind(this));
    }
    [S$._saveSession](session) {
      return async.async(dart.void, (function* _saveSession() {
        let t111;
        this[S$._currentSession] = session;
        this[S$._currentUser] = session.user;
        let expiresAt = session.expiresAt;
        if (this[S$._autoRefreshToken] && expiresAt != null) {
          t111 = this[S$._refreshTokenTimer];
          t111 == null ? null : t111.cancel();
          let timeNow = (new core.DateTime.now().millisecondsSinceEpoch / 1000)[S$.$round]();
          let expiresIn = dart.notNull(expiresAt) - timeNow;
          let refreshDurationBeforeExpires = expiresIn > 60 ? 60 : 1;
          let nextDuration = expiresIn - refreshDurationBeforeExpires;
          try {
            if (nextDuration > 0) {
              this[S$._refreshTokenRetryCount] = 0;
              let timerDuration = new core.Duration.new({seconds: nextDuration});
              this[S$._setTokenRefreshTimer](timerDuration);
            } else {
              yield this[S$._callRefreshToken]();
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
            } else
              throw e$;
          }
        }
      }).bind(this));
    }
    [S$._setTokenRefreshTimer](timerDuration, opts$) {
      let t112;
      let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
      let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
      t112 = this[S$._refreshTokenTimer];
      t112 == null ? null : t112.cancel();
      this[S$._refreshTokenRetryCount] = this[S$._refreshTokenRetryCount] + 1;
      if (this[S$._refreshTokenRetryCount] < 10) {
        this[S$._refreshTokenTimer] = async.Timer.new(timerDuration, dart.fn(() => async.async(dart.void, (function*() {
          try {
            yield this[S$._callRefreshToken]({refreshToken: refreshToken, accessToken: accessToken, ignorePendingRequest: true});
          } catch (e) {
            let _ = dart.getThrown(e);
            if (core.Object.is(_)) {
            } else
              throw e;
          }
        }).bind(this)), T$.VoidToFutureOfvoid()));
      } else {
        dart.throw(new auth_exception.AuthException.new("Access token refresh retry limit exceeded."));
      }
    }
    [S$._removeSession]() {
      let t113;
      this[S$._currentSession] = null;
      this[S$._currentUser] = null;
      this[S$._refreshTokenRetryCount] = 0;
      t113 = this[S$._refreshTokenTimer];
      t113 == null ? null : t113.cancel();
    }
    [S$._callRefreshToken](opts$) {
      let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
      let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
      let ignorePendingRequest = opts$ && 'ignorePendingRequest' in opts$ ? opts$.ignorePendingRequest : false;
      return async.async(auth_response.AuthResponse, (function* _callRefreshToken() {
        let t113, t113$, t114, t113$0, t114$, t113$1;
        if (dart.test((t113$ = (t113 = this[S$._refreshTokenCompleter], t113 == null ? null : t113.isCompleted), t113$ == null ? true : t113$))) {
          this[S$._refreshTokenCompleter] = T$.CompleterOfAuthResponse().new();
        } else if (!ignorePendingRequest && this[S$._isRefreshingToken]) {
          return dart.nullCheck(this[S$._refreshTokenCompleter]).future;
        }
        let token = (t113$0 = refreshToken, t113$0 == null ? (t114 = this.currentSession, t114 == null ? null : t114.refreshToken) : t113$0);
        if (token == null) {
          dart.throw(new auth_exception.AuthException.new("No current session."));
        }
        let jwt = (t113$1 = accessToken, t113$1 == null ? (t114$ = this.currentSession, t114$ == null ? null : t114$.accessToken) : t113$1);
        try {
          this[S$._isRefreshingToken] = true;
          let body = new (T$.IdentityMapOfString$String()).from(["refresh_token", token]);
          if (jwt != null) {
            this[S$._headers$4][S$.$_set]("Authorization", "Bearer " + dart.str(jwt));
          }
          let options = new fetch_options.GotrueRequestOptions.new({headers: this[S$._headers$4], body: body, query: new (T$.IdentityMapOfString$String()).from(["grant_type", "refresh_token"])});
          let response = (yield this[S$._fetch$1].request(this[S$._url$3] + "/token", fetch.RequestMethodType.post, {options: options}));
          let authResponse = new auth_response.AuthResponse.fromJson(T$.MapOfString$dynamic().as(response));
          if (authResponse.session == null) {
            dart.throw(new auth_exception.AuthException.new("Invalid session data."));
          }
          this[S$._saveSession](dart.nullCheck(authResponse.session));
          this[S$._notifyAllSubscribers](constants$.AuthChangeEvent.tokenRefreshed);
          dart.nullCheck(this[S$._refreshTokenCompleter]).complete(authResponse);
          return authResponse;
        } catch (e) {
          let ex = dart.getThrown(e);
          let st = dart.stackTrace(e);
          if (exception.ClientException.is(ex)) {
            this[S$._setTokenRefreshTimer](constants$.Constants.retryInterval['*'](math.pow(2, this[S$._refreshTokenRetryCount])), {refreshToken: token, accessToken: accessToken});
            return dart.nullCheck(this[S$._refreshTokenCompleter]).future;
          } else if (core.Object.is(ex)) {
            let error = ex;
            let stack = st;
            if (auth_exception.AuthException.is(error)) {
              if (error.message === "Invalid Refresh Token: Refresh Token Not Found") {
                yield this.signOut();
              }
            }
            this[S$._onAuthStateChangeController].addError(error, stack);
            dart.rethrow(e);
          } else
            throw e;
        } finally {
          this[S$._isRefreshingToken] = false;
        }
      }).bind(this));
    }
    [S$._notifyAllSubscribers](event) {
      let state = new auth_state.AuthState.new(event, this.currentSession);
      this[S$._onAuthStateChangeController].add(state);
      this[S$._onAuthStateChangeControllerSync].add(state);
    }
    [S$._notifyException](exception, stackTrace = null) {
      let t116;
      this[S$._onAuthStateChangeController].addError(exception, (t116 = stackTrace, t116 == null ? core.StackTrace.current : t116));
      return exception;
    }
  };
  (gotrue_client.GoTrueClient.new = function(opts$) {
    let t100, t100$, t100$0, t100$1;
    let url = opts$ && 'url' in opts$ ? opts$.url : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let autoRefreshToken = opts$ && 'autoRefreshToken' in opts$ ? opts$.autoRefreshToken : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let asyncStorage = opts$ && 'asyncStorage' in opts$ ? opts$.asyncStorage : null;
    let flowType = opts$ && 'flowType' in opts$ ? opts$.flowType : C[36] || CT.C36;
    this[S$.__GoTrueClient_admin] = null;
    this[S$.__GoTrueClient_mfa] = null;
    this[S$._currentUser] = null;
    this[S$._currentSession] = null;
    this[S$.__GoTrueClient__fetch] = null;
    this[S$.__GoTrueClient__autoRefreshToken] = null;
    this[S$._refreshTokenTimer] = null;
    this[S$._refreshTokenRetryCount] = 0;
    this[S$._refreshTokenCompleter] = null;
    this[S$._isRefreshingToken] = false;
    this[S$._onAuthStateChangeController] = T$.BehaviorSubjectOfAuthState().new();
    this[S$._onAuthStateChangeControllerSync] = T$.BehaviorSubjectOfAuthState().new({sync: true});
    this[S$._url$3] = (t100 = url, t100 == null ? "http://localhost:9999" : t100);
    this[S$._headers$4] = (t100$ = headers, t100$ == null ? new (T$.IdentityMapOfString$String()).new() : t100$);
    this[S$._httpClient$4] = httpClient;
    this[S$._asyncStorage] = asyncStorage;
    this[S$._flowType] = flowType;
    this[S$._autoRefreshToken] = (t100$0 = autoRefreshToken, t100$0 == null ? true : t100$0);
    let gotrueUrl = (t100$1 = url, t100$1 == null ? "http://localhost:9999" : t100$1);
    let gotrueHeader = (() => {
      let t100 = T$.LinkedHashMapOfString$String().of(constants$.Constants.defaultHeaders);
      if (headers != null) t100[S$.$addAll](headers);
      return t100;
    })();
    this.admin = new gotrue_admin_api.GoTrueAdminApi.new(gotrueUrl, {headers: gotrueHeader, httpClient: httpClient});
    this.mfa = new gotrue_client.GoTrueMFAApi.new({client: this, fetch: this[S$._fetch$1]});
  }).prototype = gotrue_client.GoTrueClient.prototype;
  dart.addTypeTests(gotrue_client.GoTrueClient);
  dart.addTypeCaches(gotrue_client.GoTrueClient);
  dart.setMethodSignature(gotrue_client.GoTrueClient, () => ({
    __proto__: dart.getMethods(gotrue_client.GoTrueClient.__proto__),
    signUp: dart.fnType(async.Future$(auth_response.AuthResponse), [], {captchaToken: dart.nullable(core.String), channel: constants$.OtpChannel, data: dart.nullable(core.Map$(core.String, dart.dynamic)), email: dart.nullable(core.String), emailRedirectTo: dart.nullable(core.String), phone: dart.nullable(core.String)}, {password: core.String}),
    signInWithPassword: dart.fnType(async.Future$(auth_response.AuthResponse), [], {captchaToken: dart.nullable(core.String), email: dart.nullable(core.String), phone: dart.nullable(core.String)}, {password: core.String}),
    getOAuthSignInUrl: dart.fnType(async.Future$(auth_response.OAuthResponse), [], {queryParams: dart.nullable(core.Map$(core.String, core.String)), redirectTo: dart.nullable(core.String), scopes: dart.nullable(core.String)}, {provider: provider$.Provider}),
    exchangeCodeForSession: dart.fnType(async.Future$(auth_response.AuthResponse), [core.String]),
    signInWithIdToken: dart.fnType(async.Future$(auth_response.AuthResponse), [], {accessToken: dart.nullable(core.String), captchaToken: dart.nullable(core.String), nonce: dart.nullable(core.String)}, {idToken: core.String, provider: provider$.Provider}),
    signInWithOtp: dart.fnType(async.Future$(dart.void), [], {captchaToken: dart.nullable(core.String), channel: constants$.OtpChannel, data: dart.nullable(core.Map$(core.String, dart.dynamic)), email: dart.nullable(core.String), emailRedirectTo: dart.nullable(core.String), phone: dart.nullable(core.String), shouldCreateUser: dart.nullable(core.bool)}, {}),
    verifyOTP: dart.fnType(async.Future$(auth_response.AuthResponse), [], {captchaToken: dart.nullable(core.String), email: dart.nullable(core.String), phone: dart.nullable(core.String), redirectTo: dart.nullable(core.String)}, {token: core.String, type: constants$.OtpType}),
    refreshSession: dart.fnType(async.Future$(auth_response.AuthResponse), []),
    reauthenticate: dart.fnType(async.Future$(dart.void), []),
    resend: dart.fnType(async.Future$(auth_response.ResendResponse), [], {captchaToken: dart.nullable(core.String), email: dart.nullable(core.String), emailRedirectTo: dart.nullable(core.String), phone: dart.nullable(core.String)}, {type: constants$.OtpType}),
    updateUser: dart.fnType(async.Future$(auth_response.UserResponse), [user_attributes.UserAttributes], {emailRedirectTo: dart.nullable(core.String)}, {}),
    setSession: dart.fnType(async.Future$(auth_response.AuthResponse), [core.String]),
    getSessionFromUrl: dart.fnType(async.Future$(auth_response.AuthSessionUrlResponse), [core.Uri], {storeSession: core.bool}, {}),
    signOut: dart.fnType(async.Future$(dart.void), [], {scope: constants$.SignOutScope}, {}),
    resetPasswordForEmail: dart.fnType(async.Future$(dart.void), [core.String], {captchaToken: dart.nullable(core.String), redirectTo: dart.nullable(core.String)}, {}),
    recoverSession: dart.fnType(async.Future$(auth_response.AuthResponse), [core.String]),
    [S$._handleProviderSignIn]: dart.fnType(async.Future$(auth_response.OAuthResponse), [provider$.Provider], {}, {queryParams: dart.nullable(core.Map$(core.String, core.String)), redirectTo: dart.nullable(core.String), scopes: dart.nullable(core.String)}),
    [S$._saveSession]: dart.fnType(dart.void, [session$.Session]),
    [S$._setTokenRefreshTimer]: dart.fnType(dart.void, [core.Duration], {accessToken: dart.nullable(core.String), refreshToken: dart.nullable(core.String)}, {}),
    [S$._removeSession]: dart.fnType(dart.void, []),
    [S$._callRefreshToken]: dart.fnType(async.Future$(auth_response.AuthResponse), [], {accessToken: dart.nullable(core.String), ignorePendingRequest: core.bool, refreshToken: dart.nullable(core.String)}, {}),
    [S$._notifyAllSubscribers]: dart.fnType(dart.void, [constants$.AuthChangeEvent]),
    [S$._notifyException]: dart.fnType(core.Exception, [core.Exception], [dart.nullable(core.StackTrace)])
  }));
  dart.setGetterSignature(gotrue_client.GoTrueClient, () => ({
    __proto__: dart.getGetters(gotrue_client.GoTrueClient.__proto__),
    admin: gotrue_admin_api.GoTrueAdminApi,
    mfa: gotrue_client.GoTrueMFAApi,
    [S$._fetch$1]: fetch.GotrueFetch,
    [S$._autoRefreshToken]: core.bool,
    onAuthStateChange: async.Stream$(auth_state.AuthState),
    onAuthStateChangeSync: async.Stream$(auth_state.AuthState),
    headers: core.Map$(core.String, core.String),
    currentUser: dart.nullable(user.User),
    currentSession: dart.nullable(session$.Session)
  }));
  dart.setSetterSignature(gotrue_client.GoTrueClient, () => ({
    __proto__: dart.getSetters(gotrue_client.GoTrueClient.__proto__),
    admin: gotrue_admin_api.GoTrueAdminApi,
    mfa: gotrue_client.GoTrueMFAApi,
    [S$._autoRefreshToken]: core.bool
  }));
  dart.setLibraryUri(gotrue_client.GoTrueClient, I[54]);
  dart.setFieldSignature(gotrue_client.GoTrueClient, () => ({
    __proto__: dart.getFields(gotrue_client.GoTrueClient.__proto__),
    [S$.__GoTrueClient_admin]: dart.fieldType(dart.nullable(gotrue_admin_api.GoTrueAdminApi)),
    [S$.__GoTrueClient_mfa]: dart.fieldType(dart.nullable(gotrue_client.GoTrueMFAApi)),
    [S$._currentUser]: dart.fieldType(dart.nullable(user.User)),
    [S$._currentSession]: dart.fieldType(dart.nullable(session$.Session)),
    [S$._url$3]: dart.finalFieldType(core.String),
    [S$._headers$4]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$._httpClient$4]: dart.finalFieldType(dart.nullable(client$.Client)),
    [S$.__GoTrueClient__fetch]: dart.fieldType(dart.nullable(fetch.GotrueFetch)),
    [S$.__GoTrueClient__autoRefreshToken]: dart.fieldType(dart.nullable(core.bool)),
    [S$._refreshTokenTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [S$._refreshTokenRetryCount]: dart.fieldType(core.int),
    [S$._refreshTokenCompleter]: dart.fieldType(dart.nullable(async.Completer$(auth_response.AuthResponse))),
    [S$._isRefreshingToken]: dart.fieldType(core.bool),
    [S$._onAuthStateChangeController]: dart.finalFieldType(behavior_subject.BehaviorSubject$(auth_state.AuthState)),
    [S$._onAuthStateChangeControllerSync]: dart.finalFieldType(behavior_subject.BehaviorSubject$(auth_state.AuthState)),
    [S$._asyncStorage]: dart.finalFieldType(dart.nullable(gotrue_async_storage.GotrueAsyncStorage)),
    [S$._flowType]: dart.finalFieldType(oauth_flow_type.AuthFlowType)
  }));
  gotrue_client.GoTrueMFAApi = class GoTrueMFAApi extends core.Object {
    static ['_#new#tearOff'](opts$) {
      let client = opts$ && 'client' in opts$ ? opts$.client : null;
      let fetch = opts$ && 'fetch' in opts$ ? opts$.fetch : null;
      return new gotrue_client.GoTrueMFAApi.new({client: client, fetch: fetch});
    }
    unenroll(factorId) {
      return async.async(mfa.AuthMFAUnenrollResponse, (function* unenroll() {
        let t116;
        let session = this[S$._client].currentSession;
        let data = (yield this[S$._fetch$1].request(this[S$._client][S$._url$3] + "/factors/" + factorId, fetch.RequestMethodType.delete, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._client][S$._headers$4], jwt: (t116 = session, t116 == null ? null : t116.accessToken)})}));
        return mfa.AuthMFAUnenrollResponse.fromJson(T$.MapOfString$dynamic().as(data));
      }).bind(this));
    }
    enroll(opts$) {
      let factorType = opts$ && 'factorType' in opts$ ? opts$.factorType : C[151] || CT.C151;
      let issuer = opts$ && 'issuer' in opts$ ? opts$.issuer : null;
      let friendlyName = opts$ && 'friendlyName' in opts$ ? opts$.friendlyName : null;
      return async.async(mfa.AuthMFAEnrollResponse, (function* enroll() {
        let t116;
        let session = this[S$._client].currentSession;
        let data = (yield this[S$._fetch$1].request(this[S$._client][S$._url$3] + "/factors", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._client][S$._headers$4], body: new (T$.IdentityMapOfString$dynamic()).from(["friendly_name", friendlyName, "factor_type", core['EnumName|get#name'](factorType), "issuer", issuer]), jwt: (t116 = session, t116 == null ? null : t116.accessToken)})}));
        dart.dsend(dart.dsend(data, '_get', ["totp"]), '_set', ["qr_code", "data:image/svg+xml;utf-8," + dart.str(dart.dsend(dart.dsend(data, '_get', ["totp"]), '_get', ["qr_code"]))]);
        let response = mfa.AuthMFAEnrollResponse.fromJson(T$.MapOfString$dynamic().as(data));
        return response;
      }).bind(this));
    }
    verify(opts$) {
      let factorId = opts$ && 'factorId' in opts$ ? opts$.factorId : null;
      let challengeId = opts$ && 'challengeId' in opts$ ? opts$.challengeId : null;
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      return async.async(mfa.AuthMFAVerifyResponse, (function* verify() {
        let t116;
        let session = this[S$._client].currentSession;
        let data = (yield this[S$._fetch$1].request(this[S$._client][S$._url$3] + "/factors/" + factorId + "/verify", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._client][S$._headers$4], body: new (T$.IdentityMapOfString$dynamic()).from(["challenge_id", challengeId, "code", code]), jwt: (t116 = session, t116 == null ? null : t116.accessToken)})}));
        let response = mfa.AuthMFAVerifyResponse.fromJson(T$.MapOfString$dynamic().as(data));
        this[S$._client][S$._saveSession](new session$.Session.new({accessToken: response.accessToken, tokenType: response.tokenType, user: response.user, expiresIn: response.expiresIn.inSeconds, refreshToken: response.refreshToken}));
        this[S$._client][S$._notifyAllSubscribers](constants$.AuthChangeEvent.mfaChallengeVerified);
        return response;
      }).bind(this));
    }
    challenge(opts$) {
      let factorId = opts$ && 'factorId' in opts$ ? opts$.factorId : null;
      return async.async(mfa.AuthMFAChallengeResponse, (function* challenge() {
        let t116;
        let session = this[S$._client].currentSession;
        let data = (yield this[S$._fetch$1].request(this[S$._client][S$._url$3] + "/factors/" + factorId + "/challenge", fetch.RequestMethodType.post, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$._client][S$._headers$4], jwt: (t116 = session, t116 == null ? null : t116.accessToken)})}));
        return mfa.AuthMFAChallengeResponse.fromJson(T$.MapOfString$dynamic().as(data));
      }).bind(this));
    }
    challengeAndVerify(opts$) {
      let factorId = opts$ && 'factorId' in opts$ ? opts$.factorId : null;
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      return async.async(mfa.AuthMFAVerifyResponse, (function* challengeAndVerify() {
        let challengeResponse = (yield this.challenge({factorId: factorId}));
        return this.verify({factorId: factorId, challengeId: challengeResponse.id, code: code});
      }).bind(this));
    }
    listFactors() {
      return async.async(mfa.AuthMFAListFactorsResponse, (function* listFactors() {
        let t116, t116$;
        yield this[S$._client].refreshSession();
        let user = this[S$._client].currentUser;
        let factors = (t116$ = (t116 = user, t116 == null ? null : t116.factors), t116$ == null ? T$.JSArrayOfFactor().of([]) : t116$);
        let totp = factors[S$.$where](dart.fn(factor => factor.factorType === mfa.FactorType.totp && factor.status === mfa.FactorStatus.verified, T$.FactorTobool()))[S$.$toList]();
        return new mfa.AuthMFAListFactorsResponse.new({all: factors, totp: totp});
      }).bind(this));
    }
    getAuthenticatorAssuranceLevel() {
      let t116, t116$;
      let session = this[S$._client].currentSession;
      if (session == null) {
        return new mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse.new({currentLevel: null, nextLevel: null, currentAuthenticationMethods: T$.JSArrayOfAMREntry().of([])});
      }
      let payload = jwt_decode.Jwt.parseJwt(session.accessToken);
      let currentLevel = iterable_extensions['IterableExtension|firstWhereOrNull'](mfa.AuthenticatorAssuranceLevels, mfa.AuthenticatorAssuranceLevels.values, dart.fn(level => core['EnumName|get#name'](level) === payload[S$.$_get]("aal"), T$.AuthenticatorAssuranceLevelsTobool()));
      let nextLevel = currentLevel;
      if (dart.test((t116$ = (t116 = session.user.factors, t116 == null ? null : t116[S$.$any](dart.fn(factor => factor.status === mfa.FactorStatus.verified, T$.FactorTobool()))), t116$ == null ? false : t116$))) {
        nextLevel = mfa.AuthenticatorAssuranceLevels.aal2;
      }
      let amr = core.List.as(payload[S$.$_get]("amr"))[S$.$map](mfa.AMREntry, dart.fn(e => mfa.AMREntry.fromJson(T$.LinkedHashMapOfString$dynamic().from(core.Map.as(e))), T$.dynamicToAMREntry()))[S$.$toList]();
      return new mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse.new({currentLevel: currentLevel, nextLevel: nextLevel, currentAuthenticationMethods: amr});
    }
  };
  (gotrue_client.GoTrueMFAApi.new = function(opts$) {
    let client = opts$ && 'client' in opts$ ? opts$.client : null;
    let fetch = opts$ && 'fetch' in opts$ ? opts$.fetch : null;
    this[S$._client] = client;
    this[S$._fetch$1] = fetch;
    ;
  }).prototype = gotrue_client.GoTrueMFAApi.prototype;
  dart.addTypeTests(gotrue_client.GoTrueMFAApi);
  dart.addTypeCaches(gotrue_client.GoTrueMFAApi);
  dart.setMethodSignature(gotrue_client.GoTrueMFAApi, () => ({
    __proto__: dart.getMethods(gotrue_client.GoTrueMFAApi.__proto__),
    unenroll: dart.fnType(async.Future$(mfa.AuthMFAUnenrollResponse), [core.String]),
    enroll: dart.fnType(async.Future$(mfa.AuthMFAEnrollResponse), [], {factorType: mfa.FactorType, friendlyName: dart.nullable(core.String), issuer: dart.nullable(core.String)}, {}),
    verify: dart.fnType(async.Future$(mfa.AuthMFAVerifyResponse), [], {}, {challengeId: core.String, code: core.String, factorId: core.String}),
    challenge: dart.fnType(async.Future$(mfa.AuthMFAChallengeResponse), [], {}, {factorId: core.String}),
    challengeAndVerify: dart.fnType(async.Future$(mfa.AuthMFAVerifyResponse), [], {}, {code: core.String, factorId: core.String}),
    listFactors: dart.fnType(async.Future$(mfa.AuthMFAListFactorsResponse), []),
    getAuthenticatorAssuranceLevel: dart.fnType(mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse, [])
  }));
  dart.setLibraryUri(gotrue_client.GoTrueMFAApi, I[54]);
  dart.setFieldSignature(gotrue_client.GoTrueMFAApi, () => ({
    __proto__: dart.getFields(gotrue_client.GoTrueMFAApi.__proto__),
    [S$._client]: dart.finalFieldType(gotrue_client.GoTrueClient),
    [S$._fetch$1]: dart.finalFieldType(fetch.GotrueFetch)
  }));
  auth_exception.AuthException = class AuthException extends core.Object {
    get message() {
      return this[S$.message$4];
    }
    set message(value) {
      super.message = value;
    }
    get statusCode() {
      return this[S$.statusCode];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    static ['_#new#tearOff'](message, opts$) {
      let statusCode = opts$ && 'statusCode' in opts$ ? opts$.statusCode : null;
      return new auth_exception.AuthException.new(message, {statusCode: statusCode});
    }
    toString() {
      return "AuthException(message: " + this.message + ", statusCode: " + dart.str(this.statusCode) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return auth_exception.AuthException.is(other) && other.message === this.message && other.statusCode == this.statusCode;
    }
    get hashCode() {
      return (this.message[S$.$hashCode] ^ dart.hashCode(this.statusCode)) >>> 0;
    }
  };
  (auth_exception.AuthException.new = function(message, opts$) {
    let statusCode = opts$ && 'statusCode' in opts$ ? opts$.statusCode : null;
    this[S$.message$4] = message;
    this[S$.statusCode] = statusCode;
    ;
  }).prototype = auth_exception.AuthException.prototype;
  dart.addTypeTests(auth_exception.AuthException);
  dart.addTypeCaches(auth_exception.AuthException);
  auth_exception.AuthException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(auth_exception.AuthException, I[55]);
  dart.setFieldSignature(auth_exception.AuthException, () => ({
    __proto__: dart.getFields(auth_exception.AuthException.__proto__),
    message: dart.finalFieldType(core.String),
    statusCode: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(auth_exception.AuthException, ['toString', '_equals']);
  dart.defineExtensionAccessors(auth_exception.AuthException, ['hashCode']);
  auth_exception.AuthPKCEGrantCodeExchangeError = class AuthPKCEGrantCodeExchangeError extends auth_exception.AuthException {
    static ['_#new#tearOff'](message) {
      return new auth_exception.AuthPKCEGrantCodeExchangeError.new(message);
    }
  };
  (auth_exception.AuthPKCEGrantCodeExchangeError.new = function(message) {
    auth_exception.AuthPKCEGrantCodeExchangeError.__proto__.new.call(this, message);
    ;
  }).prototype = auth_exception.AuthPKCEGrantCodeExchangeError.prototype;
  dart.addTypeTests(auth_exception.AuthPKCEGrantCodeExchangeError);
  dart.addTypeCaches(auth_exception.AuthPKCEGrantCodeExchangeError);
  dart.setLibraryUri(auth_exception.AuthPKCEGrantCodeExchangeError, I[55]);
  auth_response.AuthResponse = class AuthResponse extends core.Object {
    get session() {
      return this[S$.session];
    }
    set session(value) {
      super.session = value;
    }
    get user() {
      return this[S$.user];
    }
    set user(value) {
      super.user = value;
    }
    static ['_#new#tearOff'](opts$) {
      let session = opts$ && 'session' in opts$ ? opts$.session : null;
      let user = opts$ && 'user' in opts$ ? opts$.user : null;
      return new auth_response.AuthResponse.new({session: session, user: user});
    }
    static ['_#fromJson#tearOff'](json) {
      return new auth_response.AuthResponse.fromJson(json);
    }
  };
  (auth_response.AuthResponse.new = function(opts$) {
    let t117, t116;
    let session = opts$ && 'session' in opts$ ? opts$.session : null;
    let user = opts$ && 'user' in opts$ ? opts$.user : null;
    this[S$.session] = session;
    this[S$.user] = (t116 = user, t116 == null ? (t117 = session, t117 == null ? null : t117.user) : t116);
    ;
  }).prototype = auth_response.AuthResponse.prototype;
  (auth_response.AuthResponse.fromJson = function(json) {
    let t117, t116;
    this[S$.session] = session$.Session.fromJson(json);
    this[S$.user] = (t116 = user.User.fromJson(json), t116 == null ? (t117 = session$.Session.fromJson(json), t117 == null ? null : t117.user) : t116);
    ;
  }).prototype = auth_response.AuthResponse.prototype;
  dart.addTypeTests(auth_response.AuthResponse);
  dart.addTypeCaches(auth_response.AuthResponse);
  dart.setLibraryUri(auth_response.AuthResponse, I[56]);
  dart.setFieldSignature(auth_response.AuthResponse, () => ({
    __proto__: dart.getFields(auth_response.AuthResponse.__proto__),
    session: dart.finalFieldType(dart.nullable(session$.Session)),
    user: dart.finalFieldType(dart.nullable(user.User))
  }));
  auth_response.OAuthResponse = class OAuthResponse extends core.Object {
    get provider() {
      return this[S$.provider];
    }
    set provider(value) {
      super.provider = value;
    }
    get url() {
      return this[S$.url];
    }
    set url(value) {
      super.url = value;
    }
    static ['_#new#tearOff'](opts$) {
      let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      return new auth_response.OAuthResponse.new({provider: provider, url: url});
    }
  };
  (auth_response.OAuthResponse.new = function(opts$) {
    let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
    let url = opts$ && 'url' in opts$ ? opts$.url : null;
    this[S$.provider] = provider;
    this[S$.url] = url;
    ;
  }).prototype = auth_response.OAuthResponse.prototype;
  dart.addTypeTests(auth_response.OAuthResponse);
  dart.addTypeCaches(auth_response.OAuthResponse);
  dart.setLibraryUri(auth_response.OAuthResponse, I[56]);
  dart.setFieldSignature(auth_response.OAuthResponse, () => ({
    __proto__: dart.getFields(auth_response.OAuthResponse.__proto__),
    provider: dart.finalFieldType(provider$.Provider),
    url: dart.finalFieldType(dart.nullable(core.String))
  }));
  auth_response.UserResponse = class UserResponse extends core.Object {
    get user() {
      return this[S$.user$1];
    }
    set user(value) {
      super.user = value;
    }
    static ['_#fromJson#tearOff'](json) {
      return new auth_response.UserResponse.fromJson(json);
    }
  };
  (auth_response.UserResponse.fromJson = function(json) {
    this[S$.user$1] = user.User.fromJson(json);
    ;
  }).prototype = auth_response.UserResponse.prototype;
  dart.addTypeTests(auth_response.UserResponse);
  dart.addTypeCaches(auth_response.UserResponse);
  dart.setLibraryUri(auth_response.UserResponse, I[56]);
  dart.setFieldSignature(auth_response.UserResponse, () => ({
    __proto__: dart.getFields(auth_response.UserResponse.__proto__),
    user: dart.finalFieldType(dart.nullable(user.User))
  }));
  auth_response.ResendResponse = class ResendResponse extends core.Object {
    get messageId() {
      return this[S$.messageId];
    }
    set messageId(value) {
      this[S$.messageId] = value;
    }
    static ['_#new#tearOff'](opts$) {
      let messageId = opts$ && 'messageId' in opts$ ? opts$.messageId : null;
      return new auth_response.ResendResponse.new({messageId: messageId});
    }
  };
  (auth_response.ResendResponse.new = function(opts$) {
    let messageId = opts$ && 'messageId' in opts$ ? opts$.messageId : null;
    this[S$.messageId] = messageId;
    ;
  }).prototype = auth_response.ResendResponse.prototype;
  dart.addTypeTests(auth_response.ResendResponse);
  dart.addTypeCaches(auth_response.ResendResponse);
  dart.setLibraryUri(auth_response.ResendResponse, I[56]);
  dart.setFieldSignature(auth_response.ResendResponse, () => ({
    __proto__: dart.getFields(auth_response.ResendResponse.__proto__),
    messageId: dart.fieldType(dart.nullable(core.String))
  }));
  auth_response.AuthSessionUrlResponse = class AuthSessionUrlResponse extends core.Object {
    get session() {
      return this[S$.session$1];
    }
    set session(value) {
      super.session = value;
    }
    get redirectType() {
      return this[S$.redirectType];
    }
    set redirectType(value) {
      super.redirectType = value;
    }
    static ['_#new#tearOff'](opts$) {
      let session = opts$ && 'session' in opts$ ? opts$.session : null;
      let redirectType = opts$ && 'redirectType' in opts$ ? opts$.redirectType : null;
      return new auth_response.AuthSessionUrlResponse.new({session: session, redirectType: redirectType});
    }
  };
  (auth_response.AuthSessionUrlResponse.new = function(opts$) {
    let session = opts$ && 'session' in opts$ ? opts$.session : null;
    let redirectType = opts$ && 'redirectType' in opts$ ? opts$.redirectType : null;
    this[S$.session$1] = session;
    this[S$.redirectType] = redirectType;
    ;
  }).prototype = auth_response.AuthSessionUrlResponse.prototype;
  dart.addTypeTests(auth_response.AuthSessionUrlResponse);
  dart.addTypeCaches(auth_response.AuthSessionUrlResponse);
  dart.setLibraryUri(auth_response.AuthSessionUrlResponse, I[56]);
  dart.setFieldSignature(auth_response.AuthSessionUrlResponse, () => ({
    __proto__: dart.getFields(auth_response.AuthSessionUrlResponse.__proto__),
    session: dart.finalFieldType(session$.Session),
    redirectType: dart.finalFieldType(dart.nullable(core.String))
  }));
  auth_response.GenerateLinkResponse = class GenerateLinkResponse extends core.Object {
    get properties() {
      return this[S$.properties];
    }
    set properties(value) {
      super.properties = value;
    }
    get user() {
      return this[S$.user$2];
    }
    set user(value) {
      super.user = value;
    }
    static ['_#fromJson#tearOff'](json) {
      return new auth_response.GenerateLinkResponse.fromJson(json);
    }
  };
  (auth_response.GenerateLinkResponse.fromJson = function(json) {
    this[S$.properties] = new auth_response.GenerateLinkProperties.fromJson(json);
    this[S$.user$2] = dart.nullCheck(user.User.fromJson(json));
    ;
  }).prototype = auth_response.GenerateLinkResponse.prototype;
  dart.addTypeTests(auth_response.GenerateLinkResponse);
  dart.addTypeCaches(auth_response.GenerateLinkResponse);
  dart.setLibraryUri(auth_response.GenerateLinkResponse, I[56]);
  dart.setFieldSignature(auth_response.GenerateLinkResponse, () => ({
    __proto__: dart.getFields(auth_response.GenerateLinkResponse.__proto__),
    properties: dart.finalFieldType(auth_response.GenerateLinkProperties),
    user: dart.finalFieldType(user.User)
  }));
  auth_response.GenerateLinkProperties = class GenerateLinkProperties extends core.Object {
    get actionLink() {
      return this[S$.actionLink$1];
    }
    set actionLink(value) {
      super.actionLink = value;
    }
    get emailOtp() {
      return this[S$.emailOtp];
    }
    set emailOtp(value) {
      super.emailOtp = value;
    }
    get hashedToken() {
      return this[S$.hashedToken];
    }
    set hashedToken(value) {
      super.hashedToken = value;
    }
    get redirectTo() {
      return this[S$.redirectTo$1];
    }
    set redirectTo(value) {
      super.redirectTo = value;
    }
    get verificationType() {
      return this[S$.verificationType];
    }
    set verificationType(value) {
      super.verificationType = value;
    }
    static ['_#fromJson#tearOff'](json) {
      return new auth_response.GenerateLinkProperties.fromJson(json);
    }
  };
  (auth_response.GenerateLinkProperties.fromJson = function(json) {
    let t116, t116$, t116$0, t116$1;
    this[S$.actionLink$1] = core.String.as((t116 = json[S$.$_get]("action_link"), t116 == null ? "" : t116));
    this[S$.emailOtp] = core.String.as((t116$ = json[S$.$_get]("email_otp"), t116$ == null ? "" : t116$));
    this[S$.hashedToken] = core.String.as((t116$0 = json[S$.$_get]("hashed_token"), t116$0 == null ? "" : t116$0));
    this[S$.redirectTo$1] = core.String.as((t116$1 = json[S$.$_get]("redirect_to"), t116$1 == null ? "" : t116$1));
    this[S$.verificationType] = constants$['GenerateLinkTypeExtended|fromString'](T$.StringN().as(json[S$.$_get]("verification_type")));
    ;
  }).prototype = auth_response.GenerateLinkProperties.prototype;
  dart.addTypeTests(auth_response.GenerateLinkProperties);
  dart.addTypeCaches(auth_response.GenerateLinkProperties);
  dart.setLibraryUri(auth_response.GenerateLinkProperties, I[56]);
  dart.setFieldSignature(auth_response.GenerateLinkProperties, () => ({
    __proto__: dart.getFields(auth_response.GenerateLinkProperties.__proto__),
    actionLink: dart.finalFieldType(core.String),
    emailOtp: dart.finalFieldType(core.String),
    hashedToken: dart.finalFieldType(core.String),
    redirectTo: dart.finalFieldType(core.String),
    verificationType: dart.finalFieldType(constants$.GenerateLinkType)
  }));
  auth_response['ToSnakeCase|get#snakeCase'] = function ToSnakeCase$124get$35snakeCase($this) {
    let t117;
    let a = "a"[S$.$codeUnitAt](0);
    let z = "z"[S$.$codeUnitAt](0);
    let A = "A"[S$.$codeUnitAt](0);
    let Z = "Z"[S$.$codeUnitAt](0);
    let result = (t117 = new core.StringBuffer.new(), (() => {
      t117.write(core['EnumName|get#name']($this)[S$.$_get](0)[S$.$toLowerCase]());
      return t117;
    })());
    for (let i = 1; i < core['EnumName|get#name']($this).length; i = i + 1) {
      let char = core['EnumName|get#name']($this)[S$.$codeUnitAt](i);
      if (A <= char && char <= Z) {
        let pChar = core['EnumName|get#name']($this)[S$.$codeUnitAt](i - 1);
        if (a <= pChar && pChar <= z) {
          result.write("_");
        }
      }
      result.write(core['EnumName|get#name']($this)[S$.$_get](i)[S$.$toLowerCase]());
    }
    return result.toString();
  };
  auth_state.AuthState = class AuthState extends core.Object {
    get event() {
      return this[S$.event];
    }
    set event(value) {
      super.event = value;
    }
    get session() {
      return this[S$.session$2];
    }
    set session(value) {
      super.session = value;
    }
    static ['_#new#tearOff'](event, session) {
      return new auth_state.AuthState.new(event, session);
    }
  };
  (auth_state.AuthState.new = function(event, session) {
    this[S$.event] = event;
    this[S$.session$2] = session;
    ;
  }).prototype = auth_state.AuthState.prototype;
  dart.addTypeTests(auth_state.AuthState);
  dart.addTypeCaches(auth_state.AuthState);
  dart.setLibraryUri(auth_state.AuthState, I[57]);
  dart.setFieldSignature(auth_state.AuthState, () => ({
    __proto__: dart.getFields(auth_state.AuthState.__proto__),
    event: dart.finalFieldType(constants$.AuthChangeEvent),
    session: dart.finalFieldType(dart.nullable(session$.Session))
  }));
  mfa.AuthMFAEnrollResponse = class AuthMFAEnrollResponse extends core.Object {
    get id() {
      return this[S$.id$1];
    }
    set id(value) {
      super.id = value;
    }
    get type() {
      return this[S$.type];
    }
    set type(value) {
      super.type = value;
    }
    get totp() {
      return this[S$.totp];
    }
    set totp(value) {
      super.totp = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let totp = opts$ && 'totp' in opts$ ? opts$.totp : null;
      return new mfa.AuthMFAEnrollResponse.new({id: id, type: type, totp: totp});
    }
    static fromJson(json) {
      return new mfa.AuthMFAEnrollResponse.new({id: core.String.as(json[S$.$_get]("id")), type: mfa.FactorType.values[S$.$firstWhere](dart.fn(e => core['EnumName|get#name'](e) === json[S$.$_get]("type"), T$.FactorTypeTobool())), totp: mfa.TOTPEnrollment.fromJson(T$.MapOfString$dynamic().as(json[S$.$_get]("totp")))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AuthMFAEnrollResponse.fromJson(json);
    }
  };
  (mfa.AuthMFAEnrollResponse.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let type = opts$ && 'type' in opts$ ? opts$.type : null;
    let totp = opts$ && 'totp' in opts$ ? opts$.totp : null;
    this[S$.id$1] = id;
    this[S$.type] = type;
    this[S$.totp] = totp;
    ;
  }).prototype = mfa.AuthMFAEnrollResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAEnrollResponse);
  dart.addTypeCaches(mfa.AuthMFAEnrollResponse);
  dart.setStaticMethodSignature(mfa.AuthMFAEnrollResponse, () => ['fromJson']);
  dart.setLibraryUri(mfa.AuthMFAEnrollResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAEnrollResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAEnrollResponse.__proto__),
    id: dart.finalFieldType(core.String),
    type: dart.finalFieldType(mfa.FactorType),
    totp: dart.finalFieldType(mfa.TOTPEnrollment)
  }));
  mfa.TOTPEnrollment = class TOTPEnrollment extends core.Object {
    get qrCode() {
      return this[S$.qrCode];
    }
    set qrCode(value) {
      super.qrCode = value;
    }
    get secret() {
      return this[S$.secret];
    }
    set secret(value) {
      super.secret = value;
    }
    get uri() {
      return this[S$.uri];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](opts$) {
      let qrCode = opts$ && 'qrCode' in opts$ ? opts$.qrCode : null;
      let secret = opts$ && 'secret' in opts$ ? opts$.secret : null;
      let uri = opts$ && 'uri' in opts$ ? opts$.uri : null;
      return new mfa.TOTPEnrollment.new({qrCode: qrCode, secret: secret, uri: uri});
    }
    static fromJson(json) {
      return new mfa.TOTPEnrollment.new({qrCode: core.String.as(json[S$.$_get]("qr_code")), secret: core.String.as(json[S$.$_get]("secret")), uri: core.String.as(json[S$.$_get]("uri"))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.TOTPEnrollment.fromJson(json);
    }
  };
  (mfa.TOTPEnrollment.new = function(opts$) {
    let qrCode = opts$ && 'qrCode' in opts$ ? opts$.qrCode : null;
    let secret = opts$ && 'secret' in opts$ ? opts$.secret : null;
    let uri = opts$ && 'uri' in opts$ ? opts$.uri : null;
    this[S$.qrCode] = qrCode;
    this[S$.secret] = secret;
    this[S$.uri] = uri;
    ;
  }).prototype = mfa.TOTPEnrollment.prototype;
  dart.addTypeTests(mfa.TOTPEnrollment);
  dart.addTypeCaches(mfa.TOTPEnrollment);
  dart.setStaticMethodSignature(mfa.TOTPEnrollment, () => ['fromJson']);
  dart.setLibraryUri(mfa.TOTPEnrollment, I[58]);
  dart.setFieldSignature(mfa.TOTPEnrollment, () => ({
    __proto__: dart.getFields(mfa.TOTPEnrollment.__proto__),
    qrCode: dart.finalFieldType(core.String),
    secret: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(core.String)
  }));
  mfa.AuthMFAChallengeResponse = class AuthMFAChallengeResponse extends core.Object {
    get id() {
      return this[S$.id$2];
    }
    set id(value) {
      super.id = value;
    }
    get expiresAt() {
      return this[S$.expiresAt];
    }
    set expiresAt(value) {
      super.expiresAt = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let expiresAt = opts$ && 'expiresAt' in opts$ ? opts$.expiresAt : null;
      return new mfa.AuthMFAChallengeResponse.new({id: id, expiresAt: expiresAt});
    }
    static fromJson(json) {
      return new mfa.AuthMFAChallengeResponse.new({id: core.String.as(json[S$.$_get]("id")), expiresAt: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(json[S$.$_get]("expires_at"), '*', [1000])))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AuthMFAChallengeResponse.fromJson(json);
    }
  };
  (mfa.AuthMFAChallengeResponse.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let expiresAt = opts$ && 'expiresAt' in opts$ ? opts$.expiresAt : null;
    this[S$.id$2] = id;
    this[S$.expiresAt] = expiresAt;
    ;
  }).prototype = mfa.AuthMFAChallengeResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAChallengeResponse);
  dart.addTypeCaches(mfa.AuthMFAChallengeResponse);
  dart.setStaticMethodSignature(mfa.AuthMFAChallengeResponse, () => ['fromJson']);
  dart.setLibraryUri(mfa.AuthMFAChallengeResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAChallengeResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAChallengeResponse.__proto__),
    id: dart.finalFieldType(core.String),
    expiresAt: dart.finalFieldType(core.DateTime)
  }));
  mfa.AuthMFAVerifyResponse = class AuthMFAVerifyResponse extends core.Object {
    get accessToken() {
      return this[S$.accessToken$1];
    }
    set accessToken(value) {
      super.accessToken = value;
    }
    get tokenType() {
      return this[S$.tokenType];
    }
    set tokenType(value) {
      super.tokenType = value;
    }
    get expiresIn() {
      return this[S$.expiresIn];
    }
    set expiresIn(value) {
      super.expiresIn = value;
    }
    get refreshToken() {
      return this[S$.refreshToken];
    }
    set refreshToken(value) {
      super.refreshToken = value;
    }
    get user() {
      return this[S$.user$3];
    }
    set user(value) {
      super.user = value;
    }
    static ['_#new#tearOff'](opts$) {
      let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
      let tokenType = opts$ && 'tokenType' in opts$ ? opts$.tokenType : null;
      let expiresIn = opts$ && 'expiresIn' in opts$ ? opts$.expiresIn : null;
      let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
      let user = opts$ && 'user' in opts$ ? opts$.user : null;
      return new mfa.AuthMFAVerifyResponse.new({accessToken: accessToken, tokenType: tokenType, expiresIn: expiresIn, refreshToken: refreshToken, user: user});
    }
    static fromJson(json) {
      return new mfa.AuthMFAVerifyResponse.new({accessToken: core.String.as(json[S$.$_get]("access_token")), tokenType: core.String.as(json[S$.$_get]("token_type")), expiresIn: new core.Duration.new({seconds: core.int.as(json[S$.$_get]("expires_in"))}), refreshToken: core.String.as(json[S$.$_get]("refresh_token")), user: dart.nullCheck(user.User.fromJson(T$.MapOfString$dynamic().as(json[S$.$_get]("user"))))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AuthMFAVerifyResponse.fromJson(json);
    }
  };
  (mfa.AuthMFAVerifyResponse.new = function(opts$) {
    let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
    let tokenType = opts$ && 'tokenType' in opts$ ? opts$.tokenType : null;
    let expiresIn = opts$ && 'expiresIn' in opts$ ? opts$.expiresIn : null;
    let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
    let user = opts$ && 'user' in opts$ ? opts$.user : null;
    this[S$.accessToken$1] = accessToken;
    this[S$.tokenType] = tokenType;
    this[S$.expiresIn] = expiresIn;
    this[S$.refreshToken] = refreshToken;
    this[S$.user$3] = user;
    ;
  }).prototype = mfa.AuthMFAVerifyResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAVerifyResponse);
  dart.addTypeCaches(mfa.AuthMFAVerifyResponse);
  dart.setStaticMethodSignature(mfa.AuthMFAVerifyResponse, () => ['fromJson']);
  dart.setLibraryUri(mfa.AuthMFAVerifyResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAVerifyResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAVerifyResponse.__proto__),
    accessToken: dart.finalFieldType(core.String),
    tokenType: dart.finalFieldType(core.String),
    expiresIn: dart.finalFieldType(core.Duration),
    refreshToken: dart.finalFieldType(core.String),
    user: dart.finalFieldType(user.User)
  }));
  mfa.AuthMFAUnenrollResponse = class AuthMFAUnenrollResponse extends core.Object {
    get id() {
      return this[S$.id$3];
    }
    set id(value) {
      super.id = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      return new mfa.AuthMFAUnenrollResponse.new({id: id});
    }
    static fromJson(json) {
      return new mfa.AuthMFAUnenrollResponse.new({id: core.String.as(json[S$.$_get]("id"))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AuthMFAUnenrollResponse.fromJson(json);
    }
  };
  (mfa.AuthMFAUnenrollResponse.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    this[S$.id$3] = id;
    ;
  }).prototype = mfa.AuthMFAUnenrollResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAUnenrollResponse);
  dart.addTypeCaches(mfa.AuthMFAUnenrollResponse);
  dart.setStaticMethodSignature(mfa.AuthMFAUnenrollResponse, () => ['fromJson']);
  dart.setLibraryUri(mfa.AuthMFAUnenrollResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAUnenrollResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAUnenrollResponse.__proto__),
    id: dart.finalFieldType(core.String)
  }));
  mfa.AuthMFAListFactorsResponse = class AuthMFAListFactorsResponse extends core.Object {
    get all() {
      return this[S$.all];
    }
    set all(value) {
      super.all = value;
    }
    get totp() {
      return this[S$.totp$1];
    }
    set totp(value) {
      super.totp = value;
    }
    static ['_#new#tearOff'](opts$) {
      let all = opts$ && 'all' in opts$ ? opts$.all : null;
      let totp = opts$ && 'totp' in opts$ ? opts$.totp : null;
      return new mfa.AuthMFAListFactorsResponse.new({all: all, totp: totp});
    }
  };
  (mfa.AuthMFAListFactorsResponse.new = function(opts$) {
    let all = opts$ && 'all' in opts$ ? opts$.all : null;
    let totp = opts$ && 'totp' in opts$ ? opts$.totp : null;
    this[S$.all] = all;
    this[S$.totp$1] = totp;
    ;
  }).prototype = mfa.AuthMFAListFactorsResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAListFactorsResponse);
  dart.addTypeCaches(mfa.AuthMFAListFactorsResponse);
  dart.setLibraryUri(mfa.AuthMFAListFactorsResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAListFactorsResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAListFactorsResponse.__proto__),
    all: dart.finalFieldType(core.List$(mfa.Factor)),
    totp: dart.finalFieldType(core.List$(mfa.Factor))
  }));
  mfa.AuthMFAAdminListFactorsResponse = class AuthMFAAdminListFactorsResponse extends core.Object {
    get factors() {
      return this[S$.factors$1];
    }
    set factors(value) {
      super.factors = value;
    }
    static ['_#new#tearOff'](opts$) {
      let factors = opts$ && 'factors' in opts$ ? opts$.factors : null;
      return new mfa.AuthMFAAdminListFactorsResponse.new({factors: factors});
    }
    static fromJson(json) {
      return new mfa.AuthMFAAdminListFactorsResponse.new({factors: core.List.as(json[S$.$_get]("factors"))[S$.$map](mfa.Factor, dart.fn(e => mfa.Factor.fromJson(T$.MapOfString$dynamic().as(e)), T$.dynamicToFactor()))[S$.$toList]()});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AuthMFAAdminListFactorsResponse.fromJson(json);
    }
  };
  (mfa.AuthMFAAdminListFactorsResponse.new = function(opts$) {
    let factors = opts$ && 'factors' in opts$ ? opts$.factors : null;
    this[S$.factors$1] = factors;
    ;
  }).prototype = mfa.AuthMFAAdminListFactorsResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAAdminListFactorsResponse);
  dart.addTypeCaches(mfa.AuthMFAAdminListFactorsResponse);
  dart.setStaticMethodSignature(mfa.AuthMFAAdminListFactorsResponse, () => ['fromJson']);
  dart.setLibraryUri(mfa.AuthMFAAdminListFactorsResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAAdminListFactorsResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAAdminListFactorsResponse.__proto__),
    factors: dart.finalFieldType(core.List$(mfa.Factor))
  }));
  mfa.AuthMFAAdminDeleteFactorResponse = class AuthMFAAdminDeleteFactorResponse extends core.Object {
    get id() {
      return this[S$.id$4];
    }
    set id(value) {
      super.id = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      return new mfa.AuthMFAAdminDeleteFactorResponse.new({id: id});
    }
    static fromJson(json) {
      return new mfa.AuthMFAAdminDeleteFactorResponse.new({id: core.String.as(json[S$.$_get]("id"))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AuthMFAAdminDeleteFactorResponse.fromJson(json);
    }
  };
  (mfa.AuthMFAAdminDeleteFactorResponse.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    this[S$.id$4] = id;
    ;
  }).prototype = mfa.AuthMFAAdminDeleteFactorResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAAdminDeleteFactorResponse);
  dart.addTypeCaches(mfa.AuthMFAAdminDeleteFactorResponse);
  dart.setStaticMethodSignature(mfa.AuthMFAAdminDeleteFactorResponse, () => ['fromJson']);
  dart.setLibraryUri(mfa.AuthMFAAdminDeleteFactorResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAAdminDeleteFactorResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAAdminDeleteFactorResponse.__proto__),
    id: dart.finalFieldType(core.String)
  }));
  mfa.FactorStatus = class FactorStatus extends core._Enum {
    [S$._enumToString]() {
      return "FactorStatus." + this[S$._name];
    }
  };
  (mfa.FactorStatus.new = function(index, name) {
    mfa.FactorStatus.__proto__.new.call(this, index, name);
    ;
  }).prototype = mfa.FactorStatus.prototype;
  dart.addTypeTests(mfa.FactorStatus);
  dart.addTypeCaches(mfa.FactorStatus);
  dart.setMethodSignature(mfa.FactorStatus, () => ({
    __proto__: dart.getMethods(mfa.FactorStatus.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(mfa.FactorStatus, I[58]);
  dart.setStaticFieldSignature(mfa.FactorStatus, () => ['values', 'verified', 'unverified']);
  dart.defineLazy(mfa.FactorStatus, {
    /*mfa.FactorStatus.values*/get values() {
      return C[152] || CT.C152;
    },
    /*mfa.FactorStatus.verified*/get verified() {
      return C[153] || CT.C153;
    },
    /*mfa.FactorStatus.unverified*/get unverified() {
      return C[154] || CT.C154;
    }
  }, false);
  mfa.FactorType = class FactorType extends core._Enum {
    [S$._enumToString]() {
      return "FactorType." + this[S$._name];
    }
  };
  (mfa.FactorType.new = function(index, name) {
    mfa.FactorType.__proto__.new.call(this, index, name);
    ;
  }).prototype = mfa.FactorType.prototype;
  dart.addTypeTests(mfa.FactorType);
  dart.addTypeCaches(mfa.FactorType);
  dart.setMethodSignature(mfa.FactorType, () => ({
    __proto__: dart.getMethods(mfa.FactorType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(mfa.FactorType, I[58]);
  dart.setStaticFieldSignature(mfa.FactorType, () => ['values', 'totp']);
  dart.defineLazy(mfa.FactorType, {
    /*mfa.FactorType.values*/get values() {
      return C[155] || CT.C155;
    },
    /*mfa.FactorType.totp*/get totp() {
      return C[151] || CT.C151;
    }
  }, false);
  mfa.Factor = class Factor extends core.Object {
    get id() {
      return this[S$.id$5];
    }
    set id(value) {
      super.id = value;
    }
    get friendlyName() {
      return this[S$.friendlyName];
    }
    set friendlyName(value) {
      super.friendlyName = value;
    }
    get factorType() {
      return this[S$.factorType];
    }
    set factorType(value) {
      super.factorType = value;
    }
    get status() {
      return this[S$.status$1];
    }
    set status(value) {
      super.status = value;
    }
    get createdAt() {
      return this[S$.createdAt$1];
    }
    set createdAt(value) {
      super.createdAt = value;
    }
    get updatedAt() {
      return this[S$.updatedAt$1];
    }
    set updatedAt(value) {
      super.updatedAt = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let friendlyName = opts$ && 'friendlyName' in opts$ ? opts$.friendlyName : null;
      let factorType = opts$ && 'factorType' in opts$ ? opts$.factorType : null;
      let status = opts$ && 'status' in opts$ ? opts$.status : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      return new mfa.Factor.new({id: id, friendlyName: friendlyName, factorType: factorType, status: status, createdAt: createdAt, updatedAt: updatedAt});
    }
    static fromJson(json) {
      return new mfa.Factor.new({id: core.String.as(json[S$.$_get]("id")), friendlyName: T$.StringN().as(json[S$.$_get]("friendly_name")), factorType: mfa.FactorType.values[S$.$firstWhere](dart.fn(e => core['EnumName|get#name'](e) === json[S$.$_get]("factor_type"), T$.FactorTypeTobool())), status: mfa.FactorStatus.values[S$.$firstWhere](dart.fn(e => core['EnumName|get#name'](e) === json[S$.$_get]("status"), T$.FactorStatusTobool())), createdAt: core.DateTime.parse(core.String.as(json[S$.$_get]("created_at"))), updatedAt: core.DateTime.parse(core.String.as(json[S$.$_get]("updated_at")))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.Factor.fromJson(json);
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from(["id", this.id, "friendly_name", this.friendlyName, "factor_type", core['EnumName|get#name'](this.factorType), "status", core['EnumName|get#name'](this.status), "created_at", this.createdAt.toIso8601String(), "updated_at", this.updatedAt.toIso8601String()]);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return mfa.Factor.is(other) && other.id === this.id && other.friendlyName == this.friendlyName && other.factorType === this.factorType && other.status === this.status && other.createdAt._equals(this.createdAt) && other.updatedAt._equals(this.updatedAt);
    }
    get hashCode() {
      return (this.id[S$.$hashCode] ^ dart.hashCode(this.friendlyName) ^ this.factorType[S$.$hashCode] ^ this.status[S$.$hashCode] ^ this.createdAt.hashCode ^ this.updatedAt.hashCode) >>> 0;
    }
  };
  (mfa.Factor.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let friendlyName = opts$ && 'friendlyName' in opts$ ? opts$.friendlyName : null;
    let factorType = opts$ && 'factorType' in opts$ ? opts$.factorType : null;
    let status = opts$ && 'status' in opts$ ? opts$.status : null;
    let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
    let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
    this[S$.id$5] = id;
    this[S$.friendlyName] = friendlyName;
    this[S$.factorType] = factorType;
    this[S$.status$1] = status;
    this[S$.createdAt$1] = createdAt;
    this[S$.updatedAt$1] = updatedAt;
    ;
  }).prototype = mfa.Factor.prototype;
  dart.addTypeTests(mfa.Factor);
  dart.addTypeCaches(mfa.Factor);
  dart.setMethodSignature(mfa.Factor, () => ({
    __proto__: dart.getMethods(mfa.Factor.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(mfa.Factor, () => ['fromJson']);
  dart.setLibraryUri(mfa.Factor, I[58]);
  dart.setFieldSignature(mfa.Factor, () => ({
    __proto__: dart.getFields(mfa.Factor.__proto__),
    id: dart.finalFieldType(core.String),
    friendlyName: dart.finalFieldType(dart.nullable(core.String)),
    factorType: dart.finalFieldType(mfa.FactorType),
    status: dart.finalFieldType(mfa.FactorStatus),
    createdAt: dart.finalFieldType(core.DateTime),
    updatedAt: dart.finalFieldType(core.DateTime)
  }));
  dart.defineExtensionMethods(mfa.Factor, ['_equals']);
  dart.defineExtensionAccessors(mfa.Factor, ['hashCode']);
  mfa.AuthenticatorAssuranceLevels = class AuthenticatorAssuranceLevels extends core._Enum {
    [S$._enumToString]() {
      return "AuthenticatorAssuranceLevels." + this[S$._name];
    }
  };
  (mfa.AuthenticatorAssuranceLevels.new = function(index, name) {
    mfa.AuthenticatorAssuranceLevels.__proto__.new.call(this, index, name);
    ;
  }).prototype = mfa.AuthenticatorAssuranceLevels.prototype;
  dart.addTypeTests(mfa.AuthenticatorAssuranceLevels);
  dart.addTypeCaches(mfa.AuthenticatorAssuranceLevels);
  dart.setMethodSignature(mfa.AuthenticatorAssuranceLevels, () => ({
    __proto__: dart.getMethods(mfa.AuthenticatorAssuranceLevels.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(mfa.AuthenticatorAssuranceLevels, I[58]);
  dart.setStaticFieldSignature(mfa.AuthenticatorAssuranceLevels, () => ['values', 'aal1', 'aal2']);
  dart.defineLazy(mfa.AuthenticatorAssuranceLevels, {
    /*mfa.AuthenticatorAssuranceLevels.values*/get values() {
      return C[156] || CT.C156;
    },
    /*mfa.AuthenticatorAssuranceLevels.aal1*/get aal1() {
      return C[157] || CT.C157;
    },
    /*mfa.AuthenticatorAssuranceLevels.aal2*/get aal2() {
      return C[158] || CT.C158;
    }
  }, false);
  mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse = class AuthMFAGetAuthenticatorAssuranceLevelResponse extends core.Object {
    get currentLevel() {
      return this[S$.currentLevel];
    }
    set currentLevel(value) {
      super.currentLevel = value;
    }
    get nextLevel() {
      return this[S$.nextLevel];
    }
    set nextLevel(value) {
      super.nextLevel = value;
    }
    get currentAuthenticationMethods() {
      return this[S$.currentAuthenticationMethods];
    }
    set currentAuthenticationMethods(value) {
      super.currentAuthenticationMethods = value;
    }
    static ['_#new#tearOff'](opts$) {
      let currentLevel = opts$ && 'currentLevel' in opts$ ? opts$.currentLevel : null;
      let nextLevel = opts$ && 'nextLevel' in opts$ ? opts$.nextLevel : null;
      let currentAuthenticationMethods = opts$ && 'currentAuthenticationMethods' in opts$ ? opts$.currentAuthenticationMethods : null;
      return new mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse.new({currentLevel: currentLevel, nextLevel: nextLevel, currentAuthenticationMethods: currentAuthenticationMethods});
    }
  };
  (mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse.new = function(opts$) {
    let currentLevel = opts$ && 'currentLevel' in opts$ ? opts$.currentLevel : null;
    let nextLevel = opts$ && 'nextLevel' in opts$ ? opts$.nextLevel : null;
    let currentAuthenticationMethods = opts$ && 'currentAuthenticationMethods' in opts$ ? opts$.currentAuthenticationMethods : null;
    this[S$.currentLevel] = currentLevel;
    this[S$.nextLevel] = nextLevel;
    this[S$.currentAuthenticationMethods] = currentAuthenticationMethods;
    ;
  }).prototype = mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse.prototype;
  dart.addTypeTests(mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse);
  dart.addTypeCaches(mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse);
  dart.setLibraryUri(mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse, I[58]);
  dart.setFieldSignature(mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse, () => ({
    __proto__: dart.getFields(mfa.AuthMFAGetAuthenticatorAssuranceLevelResponse.__proto__),
    currentLevel: dart.finalFieldType(dart.nullable(mfa.AuthenticatorAssuranceLevels)),
    nextLevel: dart.finalFieldType(dart.nullable(mfa.AuthenticatorAssuranceLevels)),
    currentAuthenticationMethods: dart.finalFieldType(core.List$(mfa.AMREntry))
  }));
  mfa.AMRMethod = class AMRMethod extends core._Enum {
    [S$._enumToString]() {
      return "AMRMethod." + this[S$._name];
    }
  };
  (mfa.AMRMethod.new = function(index, name) {
    mfa.AMRMethod.__proto__.new.call(this, index, name);
    ;
  }).prototype = mfa.AMRMethod.prototype;
  dart.addTypeTests(mfa.AMRMethod);
  dart.addTypeCaches(mfa.AMRMethod);
  dart.setMethodSignature(mfa.AMRMethod, () => ({
    __proto__: dart.getMethods(mfa.AMRMethod.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(mfa.AMRMethod, I[58]);
  dart.setStaticFieldSignature(mfa.AMRMethod, () => ['values', 'password', 'otp', 'oauth', 'totp']);
  dart.defineLazy(mfa.AMRMethod, {
    /*mfa.AMRMethod.values*/get values() {
      return C[159] || CT.C159;
    },
    /*mfa.AMRMethod.password*/get password() {
      return C[160] || CT.C160;
    },
    /*mfa.AMRMethod.otp*/get otp() {
      return C[161] || CT.C161;
    },
    /*mfa.AMRMethod.oauth*/get oauth() {
      return C[162] || CT.C162;
    },
    /*mfa.AMRMethod.totp*/get totp() {
      return C[163] || CT.C163;
    }
  }, false);
  mfa.AMREntry = class AMREntry extends core.Object {
    get method() {
      return this[S$.method];
    }
    set method(value) {
      super.method = value;
    }
    get timestamp() {
      return this[S$.timestamp];
    }
    set timestamp(value) {
      super.timestamp = value;
    }
    static ['_#new#tearOff'](opts$) {
      let method = opts$ && 'method' in opts$ ? opts$.method : null;
      let timestamp = opts$ && 'timestamp' in opts$ ? opts$.timestamp : null;
      return new mfa.AMREntry.new({method: method, timestamp: timestamp});
    }
    static fromJson(json) {
      return new mfa.AMREntry.new({method: mfa.AMRMethod.values[S$.$firstWhere](dart.fn(e => core['EnumName|get#name'](e) === json[S$.$_get]("method"), T$.AMRMethodTobool())), timestamp: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(json[S$.$_get]("timestamp"), '*', [1000])))});
    }
    static ['_#fromJson#tearOff'](json) {
      return mfa.AMREntry.fromJson(json);
    }
  };
  (mfa.AMREntry.new = function(opts$) {
    let method = opts$ && 'method' in opts$ ? opts$.method : null;
    let timestamp = opts$ && 'timestamp' in opts$ ? opts$.timestamp : null;
    this[S$.method] = method;
    this[S$.timestamp] = timestamp;
    ;
  }).prototype = mfa.AMREntry.prototype;
  dart.addTypeTests(mfa.AMREntry);
  dart.addTypeCaches(mfa.AMREntry);
  dart.setStaticMethodSignature(mfa.AMREntry, () => ['fromJson']);
  dart.setLibraryUri(mfa.AMREntry, I[58]);
  dart.setFieldSignature(mfa.AMREntry, () => ({
    __proto__: dart.getFields(mfa.AMREntry.__proto__),
    method: dart.finalFieldType(mfa.AMRMethod),
    timestamp: dart.finalFieldType(core.DateTime)
  }));
  oauth_flow_type.AuthFlowType = class AuthFlowType extends core._Enum {
    [S$._enumToString]() {
      return "AuthFlowType." + this[S$._name];
    }
  };
  (oauth_flow_type.AuthFlowType.new = function(index, name) {
    oauth_flow_type.AuthFlowType.__proto__.new.call(this, index, name);
    ;
  }).prototype = oauth_flow_type.AuthFlowType.prototype;
  dart.addTypeTests(oauth_flow_type.AuthFlowType);
  dart.addTypeCaches(oauth_flow_type.AuthFlowType);
  dart.setMethodSignature(oauth_flow_type.AuthFlowType, () => ({
    __proto__: dart.getMethods(oauth_flow_type.AuthFlowType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(oauth_flow_type.AuthFlowType, I[59]);
  dart.setStaticFieldSignature(oauth_flow_type.AuthFlowType, () => ['values', 'implicit', 'pkce']);
  dart.defineLazy(oauth_flow_type.AuthFlowType, {
    /*oauth_flow_type.AuthFlowType.values*/get values() {
      return C[164] || CT.C164;
    },
    /*oauth_flow_type.AuthFlowType.implicit*/get implicit() {
      return C[36] || CT.C36;
    },
    /*oauth_flow_type.AuthFlowType.pkce*/get pkce() {
      return C[165] || CT.C165;
    }
  }, false);
  provider$.Provider = class Provider extends core._Enum {
    [S$._enumToString]() {
      return "Provider." + this[S$._name];
    }
  };
  (provider$.Provider.new = function(index, name) {
    provider$.Provider.__proto__.new.call(this, index, name);
    ;
  }).prototype = provider$.Provider.prototype;
  dart.addTypeTests(provider$.Provider);
  dart.addTypeCaches(provider$.Provider);
  dart.setMethodSignature(provider$.Provider, () => ({
    __proto__: dart.getMethods(provider$.Provider.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(provider$.Provider, I[60]);
  dart.setStaticFieldSignature(provider$.Provider, () => ['values', 'apple', 'azure', 'bitbucket', 'discord', 'facebook', 'github', 'gitlab', 'google', 'kakao', 'keycloak', 'linkedin', 'notion', 'slack', 'spotify', 'twitch', 'twitter', 'workos']);
  dart.defineLazy(provider$.Provider, {
    /*provider$.Provider.values*/get values() {
      return C[166] || CT.C166;
    },
    /*provider$.Provider.apple*/get apple() {
      return C[167] || CT.C167;
    },
    /*provider$.Provider.azure*/get azure() {
      return C[168] || CT.C168;
    },
    /*provider$.Provider.bitbucket*/get bitbucket() {
      return C[169] || CT.C169;
    },
    /*provider$.Provider.discord*/get discord() {
      return C[170] || CT.C170;
    },
    /*provider$.Provider.facebook*/get facebook() {
      return C[171] || CT.C171;
    },
    /*provider$.Provider.github*/get github() {
      return C[172] || CT.C172;
    },
    /*provider$.Provider.gitlab*/get gitlab() {
      return C[173] || CT.C173;
    },
    /*provider$.Provider.google*/get google() {
      return C[174] || CT.C174;
    },
    /*provider$.Provider.kakao*/get kakao() {
      return C[175] || CT.C175;
    },
    /*provider$.Provider.keycloak*/get keycloak() {
      return C[176] || CT.C176;
    },
    /*provider$.Provider.linkedin*/get linkedin() {
      return C[177] || CT.C177;
    },
    /*provider$.Provider.notion*/get notion() {
      return C[178] || CT.C178;
    },
    /*provider$.Provider.slack*/get slack() {
      return C[179] || CT.C179;
    },
    /*provider$.Provider.spotify*/get spotify() {
      return C[180] || CT.C180;
    },
    /*provider$.Provider.twitch*/get twitch() {
      return C[181] || CT.C181;
    },
    /*provider$.Provider.twitter*/get twitter() {
      return C[182] || CT.C182;
    },
    /*provider$.Provider.workos*/get workos() {
      return C[183] || CT.C183;
    }
  }, false);
  provider$['ProviderName|get#name'] = function ProviderName$124get$35name($this) {
    return $this.toString()[S$.$split](".")[S$.$last];
  };
  session$.Session = class Session extends core.Object {
    get providerToken() {
      return this[S$.providerToken];
    }
    set providerToken(value) {
      super.providerToken = value;
    }
    get providerRefreshToken() {
      return this[S$.providerRefreshToken];
    }
    set providerRefreshToken(value) {
      super.providerRefreshToken = value;
    }
    get accessToken() {
      return this[S$.accessToken$2];
    }
    set accessToken(value) {
      super.accessToken = value;
    }
    get expiresIn() {
      return this[S$.expiresIn$1];
    }
    set expiresIn(value) {
      super.expiresIn = value;
    }
    get refreshToken() {
      return this[S$.refreshToken$1];
    }
    set refreshToken(value) {
      super.refreshToken = value;
    }
    get tokenType() {
      return this[S$.tokenType$1];
    }
    set tokenType(value) {
      super.tokenType = value;
    }
    get user() {
      return this[S$.user$4];
    }
    set user(value) {
      super.user = value;
    }
    static ['_#new#tearOff'](opts$) {
      let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
      let expiresIn = opts$ && 'expiresIn' in opts$ ? opts$.expiresIn : null;
      let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
      let tokenType = opts$ && 'tokenType' in opts$ ? opts$.tokenType : null;
      let providerToken = opts$ && 'providerToken' in opts$ ? opts$.providerToken : null;
      let providerRefreshToken = opts$ && 'providerRefreshToken' in opts$ ? opts$.providerRefreshToken : null;
      let user = opts$ && 'user' in opts$ ? opts$.user : null;
      return new session$.Session.new({accessToken: accessToken, expiresIn: expiresIn, refreshToken: refreshToken, tokenType: tokenType, providerToken: providerToken, providerRefreshToken: providerRefreshToken, user: user});
    }
    static fromJson(json) {
      if (json[S$.$_get]("access_token") == null) {
        return null;
      }
      return new session$.Session.new({accessToken: core.String.as(json[S$.$_get]("access_token")), expiresIn: T$.intN().as(json[S$.$_get]("expires_in")), refreshToken: T$.StringN().as(json[S$.$_get]("refresh_token")), tokenType: core.String.as(json[S$.$_get]("token_type")), providerToken: T$.StringN().as(json[S$.$_get]("provider_token")), providerRefreshToken: T$.StringN().as(json[S$.$_get]("provider_refresh_token")), user: dart.nullCheck(user.User.fromJson(T$.MapOfString$dynamic().as(json[S$.$_get]("user"))))});
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from(["access_token", this.accessToken, "expires_in", this.expiresIn, "refresh_token", this.refreshToken, "token_type", this.tokenType, "provider_token", this.providerToken, "provider_refresh_token", this.providerRefreshToken, "user", this.user.toJson()]);
    }
    get expiresAt() {
      if (!this[S$.__Session_expiresAt_isSet]) {
        this[S$.__Session_expiresAt] = this[S$._expiresAt];
        this[S$.__Session_expiresAt_isSet] = true;
      }
      return this[S$.__Session_expiresAt];
    }
    set expiresAt(expiresAt$35param) {
      this[S$.__Session_expiresAt_isSet] = true;
      this[S$.__Session_expiresAt] = expiresAt$35param;
    }
    get [S$._expiresAt]() {
      try {
        let payload = jwt_decode.Jwt.parseJwt(this.accessToken);
        return core.int.as(payload[S$.$_get]("exp"));
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return null;
        } else
          throw e;
      }
    }
    get isExpired() {
      if (this.expiresAt == null) return false;
      return new core.DateTime.now().add(new core.Duration.new({seconds: 5})).isAfter(new core.DateTime.fromMillisecondsSinceEpoch(dart.nullCheck(this.expiresAt) * 1000));
    }
    get persistSessionString() {
      let data = new (T$.IdentityMapOfString$ObjectN()).from(["currentSession", this.toJson(), "expiresAt", this.expiresAt]);
      return convert.json.encode(data);
    }
    copyWith(opts$) {
      let t131, t131$, t131$0, t131$1, t131$2, t131$3, t131$4;
      let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
      let expiresIn = opts$ && 'expiresIn' in opts$ ? opts$.expiresIn : null;
      let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
      let tokenType = opts$ && 'tokenType' in opts$ ? opts$.tokenType : null;
      let providerToken = opts$ && 'providerToken' in opts$ ? opts$.providerToken : null;
      let providerRefreshToken = opts$ && 'providerRefreshToken' in opts$ ? opts$.providerRefreshToken : null;
      let user = opts$ && 'user' in opts$ ? opts$.user : null;
      return new session$.Session.new({accessToken: (t131 = accessToken, t131 == null ? this.accessToken : t131), expiresIn: (t131$ = expiresIn, t131$ == null ? this.expiresIn : t131$), refreshToken: (t131$0 = refreshToken, t131$0 == null ? this.refreshToken : t131$0), tokenType: (t131$1 = tokenType, t131$1 == null ? this.tokenType : t131$1), providerToken: (t131$2 = providerToken, t131$2 == null ? this.providerToken : t131$2), providerRefreshToken: (t131$3 = providerRefreshToken, t131$3 == null ? this.providerRefreshToken : t131$3), user: (t131$4 = user, t131$4 == null ? this.user : t131$4)});
    }
    toString() {
      return "Session(providerToken: " + dart.str(this.providerToken) + ", providerRefreshToken: " + dart.str(this.providerRefreshToken) + ", expiresIn: " + dart.str(this.expiresIn) + ", tokenType: " + this.tokenType + ", user: " + dart.str(this.user) + ", accessToken: " + this.accessToken + ", refreshToken: " + dart.str(this.refreshToken) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return session$.Session.is(other) && other.providerToken == this.providerToken && other.providerRefreshToken == this.providerRefreshToken && other.accessToken === this.accessToken && other.expiresIn == this.expiresIn && other.refreshToken == this.refreshToken && other.tokenType === this.tokenType && other.user._equals(this.user);
    }
    get hashCode() {
      return (dart.hashCode(this.providerToken) ^ dart.hashCode(this.providerRefreshToken) ^ this.accessToken[S$.$hashCode] ^ dart.hashCode(this.expiresIn) ^ dart.hashCode(this.refreshToken) ^ this.tokenType[S$.$hashCode] ^ this.user.hashCode) >>> 0;
    }
  };
  (session$.Session.new = function(opts$) {
    let accessToken = opts$ && 'accessToken' in opts$ ? opts$.accessToken : null;
    let expiresIn = opts$ && 'expiresIn' in opts$ ? opts$.expiresIn : null;
    let refreshToken = opts$ && 'refreshToken' in opts$ ? opts$.refreshToken : null;
    let tokenType = opts$ && 'tokenType' in opts$ ? opts$.tokenType : null;
    let providerToken = opts$ && 'providerToken' in opts$ ? opts$.providerToken : null;
    let providerRefreshToken = opts$ && 'providerRefreshToken' in opts$ ? opts$.providerRefreshToken : null;
    let user = opts$ && 'user' in opts$ ? opts$.user : null;
    this[S$.__Session_expiresAt] = null;
    this[S$.__Session_expiresAt_isSet] = false;
    this[S$.accessToken$2] = accessToken;
    this[S$.expiresIn$1] = expiresIn;
    this[S$.refreshToken$1] = refreshToken;
    this[S$.tokenType$1] = tokenType;
    this[S$.providerToken] = providerToken;
    this[S$.providerRefreshToken] = providerRefreshToken;
    this[S$.user$4] = user;
    ;
  }).prototype = session$.Session.prototype;
  dart.addTypeTests(session$.Session);
  dart.addTypeCaches(session$.Session);
  dart.setMethodSignature(session$.Session, () => ({
    __proto__: dart.getMethods(session$.Session.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(session$.Session, [], {accessToken: dart.nullable(core.String), expiresIn: dart.nullable(core.int), providerRefreshToken: dart.nullable(core.String), providerToken: dart.nullable(core.String), refreshToken: dart.nullable(core.String), tokenType: dart.nullable(core.String), user: dart.nullable(user.User)}, {})
  }));
  dart.setStaticMethodSignature(session$.Session, () => ['fromJson']);
  dart.setGetterSignature(session$.Session, () => ({
    __proto__: dart.getGetters(session$.Session.__proto__),
    expiresAt: dart.nullable(core.int),
    [S$._expiresAt]: dart.nullable(core.int),
    isExpired: core.bool,
    persistSessionString: core.String
  }));
  dart.setSetterSignature(session$.Session, () => ({
    __proto__: dart.getSetters(session$.Session.__proto__),
    expiresAt: dart.nullable(core.int)
  }));
  dart.setLibraryUri(session$.Session, I[61]);
  dart.setFieldSignature(session$.Session, () => ({
    __proto__: dart.getFields(session$.Session.__proto__),
    providerToken: dart.finalFieldType(dart.nullable(core.String)),
    providerRefreshToken: dart.finalFieldType(dart.nullable(core.String)),
    accessToken: dart.finalFieldType(core.String),
    expiresIn: dart.finalFieldType(dart.nullable(core.int)),
    refreshToken: dart.finalFieldType(dart.nullable(core.String)),
    tokenType: dart.finalFieldType(core.String),
    user: dart.finalFieldType(user.User),
    [S$.__Session_expiresAt]: dart.fieldType(dart.nullable(core.int)),
    [S$.__Session_expiresAt_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(session$.Session, ['toString', '_equals']);
  dart.defineExtensionAccessors(session$.Session, ['hashCode']);
  user.UserIdentity = class UserIdentity extends core.Object {
    get id() {
      return this[S$.id$6];
    }
    set id(value) {
      super.id = value;
    }
    get userId() {
      return this[S$.userId];
    }
    set userId(value) {
      super.userId = value;
    }
    get identityData() {
      return this[S$.identityData];
    }
    set identityData(value) {
      super.identityData = value;
    }
    get provider() {
      return this[S$.provider$1];
    }
    set provider(value) {
      super.provider = value;
    }
    get createdAt() {
      return this[S$.createdAt$2];
    }
    set createdAt(value) {
      super.createdAt = value;
    }
    get lastSignInAt() {
      return this[S$.lastSignInAt$1];
    }
    set lastSignInAt(value) {
      super.lastSignInAt = value;
    }
    get updatedAt() {
      return this[S$.updatedAt$2];
    }
    set updatedAt(value) {
      super.updatedAt = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let userId = opts$ && 'userId' in opts$ ? opts$.userId : null;
      let identityData = opts$ && 'identityData' in opts$ ? opts$.identityData : null;
      let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      return new user.UserIdentity.new({id: id, userId: userId, identityData: identityData, provider: provider, createdAt: createdAt, lastSignInAt: lastSignInAt, updatedAt: updatedAt});
    }
    copyWith(opts$) {
      let t131, t131$, t131$0, t131$1, t131$2, t131$3, t131$4;
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let userId = opts$ && 'userId' in opts$ ? opts$.userId : null;
      let identityData = opts$ && 'identityData' in opts$ ? opts$.identityData : null;
      let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      return new user.UserIdentity.new({id: (t131 = id, t131 == null ? this.id : t131), userId: (t131$ = userId, t131$ == null ? this.userId : t131$), identityData: (t131$0 = identityData, t131$0 == null ? this.identityData : t131$0), provider: (t131$1 = provider, t131$1 == null ? this.provider : t131$1), createdAt: (t131$2 = createdAt, t131$2 == null ? this.createdAt : t131$2), lastSignInAt: (t131$3 = lastSignInAt, t131$3 == null ? this.lastSignInAt : t131$3), updatedAt: (t131$4 = updatedAt, t131$4 == null ? this.updatedAt : t131$4)});
    }
    static fromMap(map) {
      let t131;
      return new user.UserIdentity.new({id: core.String.as(map[S$.$_get]("id")), userId: core.String.as(map[S$.$_get]("user_id")), identityData: (t131 = T$.MapN().as(map[S$.$_get]("identity_data")), t131 == null ? null : t131[S$.$cast](core.String, dart.dynamic)), provider: core.String.as(map[S$.$_get]("provider")), createdAt: T$.StringN().as(map[S$.$_get]("created_at")), lastSignInAt: T$.StringN().as(map[S$.$_get]("last_sign_in_at")), updatedAt: T$.StringN().as(map[S$.$_get]("updated_at"))});
    }
    static ['_#fromMap#tearOff'](map) {
      return user.UserIdentity.fromMap(map);
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from(["id", this.id, "user_id", this.userId, "identity_data", this.identityData, "provider", this.provider, "created_at", this.createdAt, "last_sign_in_at", this.lastSignInAt, "updated_at", this.updatedAt]);
    }
    toString() {
      return "UserIdentity(id: " + this.id + ", userId: " + this.userId + ", identityData: " + dart.str(this.identityData) + ", provider: " + this.provider + ", createdAt: " + dart.str(this.createdAt) + ", lastSignInAt: " + dart.str(this.lastSignInAt) + ", updatedAt: " + dart.str(this.updatedAt) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      let mapEquals = dart.bind(C[80] || CT.C80, 'equals');
      return user.UserIdentity.is(other) && other.id === this.id && other.userId === this.userId && mapEquals(other.identityData, this.identityData) && other.provider === this.provider && other.createdAt == this.createdAt && other.lastSignInAt == this.lastSignInAt && other.updatedAt == this.updatedAt;
    }
    get hashCode() {
      return (this.id[S$.$hashCode] ^ this.userId[S$.$hashCode] ^ dart.hashCode(this.identityData) ^ this.provider[S$.$hashCode] ^ dart.hashCode(this.createdAt) ^ dart.hashCode(this.lastSignInAt) ^ dart.hashCode(this.updatedAt)) >>> 0;
    }
  };
  (user.UserIdentity.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let userId = opts$ && 'userId' in opts$ ? opts$.userId : null;
    let identityData = opts$ && 'identityData' in opts$ ? opts$.identityData : null;
    let provider = opts$ && 'provider' in opts$ ? opts$.provider : null;
    let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
    let lastSignInAt = opts$ && 'lastSignInAt' in opts$ ? opts$.lastSignInAt : null;
    let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
    this[S$.id$6] = id;
    this[S$.userId] = userId;
    this[S$.identityData] = identityData;
    this[S$.provider$1] = provider;
    this[S$.createdAt$2] = createdAt;
    this[S$.lastSignInAt$1] = lastSignInAt;
    this[S$.updatedAt$2] = updatedAt;
    ;
  }).prototype = user.UserIdentity.prototype;
  dart.addTypeTests(user.UserIdentity);
  dart.addTypeCaches(user.UserIdentity);
  dart.setMethodSignature(user.UserIdentity, () => ({
    __proto__: dart.getMethods(user.UserIdentity.__proto__),
    copyWith: dart.fnType(user.UserIdentity, [], {createdAt: dart.nullable(core.String), id: dart.nullable(core.String), identityData: dart.nullable(core.Map$(core.String, dart.dynamic)), lastSignInAt: dart.nullable(core.String), provider: dart.nullable(core.String), updatedAt: dart.nullable(core.String), userId: dart.nullable(core.String)}, {}),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(user.UserIdentity, () => ['fromMap']);
  dart.setLibraryUri(user.UserIdentity, I[32]);
  dart.setFieldSignature(user.UserIdentity, () => ({
    __proto__: dart.getFields(user.UserIdentity.__proto__),
    id: dart.finalFieldType(core.String),
    userId: dart.finalFieldType(core.String),
    identityData: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    provider: dart.finalFieldType(core.String),
    createdAt: dart.finalFieldType(dart.nullable(core.String)),
    lastSignInAt: dart.finalFieldType(dart.nullable(core.String)),
    updatedAt: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(user.UserIdentity, ['toString', '_equals']);
  dart.defineExtensionAccessors(user.UserIdentity, ['hashCode']);
  user_attributes.UserAttributes = class UserAttributes extends core.Object {
    get email() {
      return this[S$.email$2];
    }
    set email(value) {
      this[S$.email$2] = value;
    }
    get phone() {
      return this[S$.phone$1];
    }
    set phone(value) {
      this[S$.phone$1] = value;
    }
    get password() {
      return this[S$.password$1];
    }
    set password(value) {
      this[S$.password$1] = value;
    }
    get nonce() {
      return this[S$.nonce$1];
    }
    set nonce(value) {
      this[S$.nonce$1] = value;
    }
    get data() {
      return this[S$.data$1];
    }
    set data(value) {
      this[S$.data$1] = value;
    }
    static ['_#new#tearOff'](opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let password = opts$ && 'password' in opts$ ? opts$.password : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      return new user_attributes.UserAttributes.new({email: email, phone: phone, password: password, nonce: nonce, data: data});
    }
    toJson() {
      return (() => {
        let t131 = new (T$.IdentityMapOfString$dynamic()).new();
        if (this.email != null) t131[S$.$_set]("email", this.email);
        if (this.phone != null) t131[S$.$_set]("phone", this.phone);
        if (this.nonce != null) t131[S$.$_set]("nonce", this.nonce);
        if (this.password != null) t131[S$.$_set]("password", this.password);
        if (this.data != null) t131[S$.$_set]("data", this.data);
        return t131;
      })();
    }
  };
  (user_attributes.UserAttributes.new = function(opts$) {
    let email = opts$ && 'email' in opts$ ? opts$.email : null;
    let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
    let password = opts$ && 'password' in opts$ ? opts$.password : null;
    let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
    let data = opts$ && 'data' in opts$ ? opts$.data : null;
    this[S$.email$2] = email;
    this[S$.phone$1] = phone;
    this[S$.password$1] = password;
    this[S$.nonce$1] = nonce;
    this[S$.data$1] = data;
    if (!(data == null || core.List.is(data) || core.Map.is(data))) dart.assertFailed(null, I[62], 27, 15, "data == null || data is List || data is Map");
    ;
  }).prototype = user_attributes.UserAttributes.prototype;
  dart.addTypeTests(user_attributes.UserAttributes);
  dart.addTypeCaches(user_attributes.UserAttributes);
  dart.setMethodSignature(user_attributes.UserAttributes, () => ({
    __proto__: dart.getMethods(user_attributes.UserAttributes.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(user_attributes.UserAttributes, I[63]);
  dart.setFieldSignature(user_attributes.UserAttributes, () => ({
    __proto__: dart.getFields(user_attributes.UserAttributes.__proto__),
    email: dart.fieldType(dart.nullable(core.String)),
    phone: dart.fieldType(dart.nullable(core.String)),
    password: dart.fieldType(dart.nullable(core.String)),
    nonce: dart.fieldType(dart.nullable(core.String)),
    data: dart.fieldType(dart.nullable(core.Object))
  }));
  user_attributes.AdminUserAttributes = class AdminUserAttributes extends user_attributes.UserAttributes {
    get userMetadata() {
      return this[S$.userMetadata$1];
    }
    set userMetadata(value) {
      super.userMetadata = value;
    }
    get appMetadata() {
      return this[S$.appMetadata$1];
    }
    set appMetadata(value) {
      super.appMetadata = value;
    }
    get emailConfirm() {
      return this[S$.emailConfirm];
    }
    set emailConfirm(value) {
      super.emailConfirm = value;
    }
    get phoneConfirm() {
      return this[S$.phoneConfirm];
    }
    set phoneConfirm(value) {
      super.phoneConfirm = value;
    }
    get banDuration() {
      return this[S$.banDuration];
    }
    set banDuration(value) {
      super.banDuration = value;
    }
    static ['_#new#tearOff'](opts$) {
      let email = opts$ && 'email' in opts$ ? opts$.email : null;
      let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
      let password = opts$ && 'password' in opts$ ? opts$.password : null;
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let userMetadata = opts$ && 'userMetadata' in opts$ ? opts$.userMetadata : null;
      let appMetadata = opts$ && 'appMetadata' in opts$ ? opts$.appMetadata : null;
      let emailConfirm = opts$ && 'emailConfirm' in opts$ ? opts$.emailConfirm : null;
      let phoneConfirm = opts$ && 'phoneConfirm' in opts$ ? opts$.phoneConfirm : null;
      let banDuration = opts$ && 'banDuration' in opts$ ? opts$.banDuration : null;
      return new user_attributes.AdminUserAttributes.new({email: email, phone: phone, password: password, data: data, userMetadata: userMetadata, appMetadata: appMetadata, emailConfirm: emailConfirm, phoneConfirm: phoneConfirm, banDuration: banDuration});
    }
    toJson() {
      return (() => {
        let t132 = new (T$.IdentityMapOfString$dynamic()).new();
        if (this.email != null) t132[S$.$_set]("email", this.email);
        if (this.phone != null) t132[S$.$_set]("phone", this.phone);
        if (this.password != null) t132[S$.$_set]("password", this.password);
        if (this.data != null) t132[S$.$_set]("data", this.data);
        if (this.userMetadata != null) t132[S$.$_set]("user_metadata", this.userMetadata);
        if (this.appMetadata != null) t132[S$.$_set]("app_metadata", this.appMetadata);
        if (this.emailConfirm != null) t132[S$.$_set]("email_confirm", this.emailConfirm);
        if (this.phoneConfirm != null) t132[S$.$_set]("phone_confirm", this.phoneConfirm);
        if (this.banDuration != null) t132[S$.$_set]("ban_duration", this.banDuration);
        return t132;
      })();
    }
  };
  (user_attributes.AdminUserAttributes.new = function(opts$) {
    let email = opts$ && 'email' in opts$ ? opts$.email : null;
    let phone = opts$ && 'phone' in opts$ ? opts$.phone : null;
    let password = opts$ && 'password' in opts$ ? opts$.password : null;
    let data = opts$ && 'data' in opts$ ? opts$.data : null;
    let userMetadata = opts$ && 'userMetadata' in opts$ ? opts$.userMetadata : null;
    let appMetadata = opts$ && 'appMetadata' in opts$ ? opts$.appMetadata : null;
    let emailConfirm = opts$ && 'emailConfirm' in opts$ ? opts$.emailConfirm : null;
    let phoneConfirm = opts$ && 'phoneConfirm' in opts$ ? opts$.phoneConfirm : null;
    let banDuration = opts$ && 'banDuration' in opts$ ? opts$.banDuration : null;
    this[S$.userMetadata$1] = userMetadata;
    this[S$.appMetadata$1] = appMetadata;
    this[S$.emailConfirm] = emailConfirm;
    this[S$.phoneConfirm] = phoneConfirm;
    this[S$.banDuration] = banDuration;
    user_attributes.AdminUserAttributes.__proto__.new.call(this, {email: email, phone: phone, password: password, data: data});
    ;
  }).prototype = user_attributes.AdminUserAttributes.prototype;
  dart.addTypeTests(user_attributes.AdminUserAttributes);
  dart.addTypeCaches(user_attributes.AdminUserAttributes);
  dart.setLibraryUri(user_attributes.AdminUserAttributes, I[63]);
  dart.setFieldSignature(user_attributes.AdminUserAttributes, () => ({
    __proto__: dart.getFields(user_attributes.AdminUserAttributes.__proto__),
    userMetadata: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    appMetadata: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    emailConfirm: dart.finalFieldType(dart.nullable(core.bool)),
    phoneConfirm: dart.finalFieldType(dart.nullable(core.bool)),
    banDuration: dart.finalFieldType(dart.nullable(core.String))
  }));
  postgrest$.PostgrestClient = class PostgrestClient extends core.Object {
    get url() {
      return this[S$.url$1];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[S$.headers$3];
    }
    set headers(value) {
      super.headers = value;
    }
    get schema() {
      return this[S$.schema$1];
    }
    set schema(value) {
      super.schema = value;
    }
    get httpClient() {
      return this[S$.httpClient];
    }
    set httpClient(value) {
      super.httpClient = value;
    }
    static ['_#new#tearOff'](url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      return new postgrest$.PostgrestClient.new(url, {headers: headers, schema: schema, httpClient: httpClient, isolate: isolate});
    }
    auth(token) {
      this.headers[S$.$_set]("Authorization", "Bearer " + token);
      return this;
    }
    setAuth(token) {
      if (token != null) {
        this.headers[S$.$_set]("Authorization", "Bearer " + dart.str(token));
      } else {
        this.headers[S$.$remove]("Authorization");
      }
      return this;
    }
    from(table) {
      let url = this.url + "/" + table;
      return new (T$.PostgrestQueryBuilderOfvoid()).new(url, {headers: (() => {
          let t134 = T$.LinkedHashMapOfString$String().of(this.headers);
          return t134;
        })(), schema: this.schema, httpClient: this.httpClient, isolate: this[S$._isolate$3]});
    }
    useSchema(schema) {
      return new postgrest$.PostgrestClient.new(this.url, {headers: (() => {
          let t135 = T$.LinkedHashMapOfString$String().of(this.headers);
          return t135;
        })(), schema: schema, httpClient: this.httpClient, isolate: this[S$._isolate$3]});
    }
    rpc(fn, opts$) {
      let params = opts$ && 'params' in opts$ ? opts$.params : null;
      let options = opts$ && 'options' in opts$ ? opts$.options : C[82] || CT.C82;
      let url = this.url + "/rpc/" + fn;
      return new postgrest_builder.PostgrestRpcBuilder.new(url, {headers: (() => {
          let t136 = T$.LinkedHashMapOfString$String().of(this.headers);
          return t136;
        })(), schema: this.schema, httpClient: this.httpClient, options: options, isolate: this[S$._isolate$3]}).rpc(params, options);
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (!this[S$._hasCustomIsolate$1]) {
          return this[S$._isolate$3].dispose();
        }
      }).bind(this));
    }
  };
  (postgrest$.PostgrestClient.new = function(url, opts$) {
    let t135, t134;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
    this[S$.url$1] = url;
    this[S$.schema$1] = schema;
    this[S$.httpClient] = httpClient;
    this[S$.headers$3] = (() => {
      let t133 = T$.LinkedHashMapOfString$String().of(constants$3.defaultHeaders);
      if (headers != null) t133[S$.$addAll](headers);
      return t133;
    })();
    this[S$._isolate$3] = (t134 = isolate, t134 == null ? (t135 = new _isolates_web.YAJsonIsolate.new(), (() => {
      t135.initialize();
      return t135;
    })()) : t134);
    this[S$._hasCustomIsolate$1] = isolate != null;
    ;
  }).prototype = postgrest$.PostgrestClient.prototype;
  dart.addTypeTests(postgrest$.PostgrestClient);
  dart.addTypeCaches(postgrest$.PostgrestClient);
  dart.setMethodSignature(postgrest$.PostgrestClient, () => ({
    __proto__: dart.getMethods(postgrest$.PostgrestClient.__proto__),
    auth: dart.fnType(postgrest$.PostgrestClient, [core.String]),
    setAuth: dart.fnType(postgrest$.PostgrestClient, [dart.nullable(core.String)]),
    from: dart.fnType(postgrest_builder.PostgrestQueryBuilder$(dart.void), [core.String]),
    useSchema: dart.fnType(postgrest$.PostgrestClient, [core.String]),
    rpc: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [core.String], {options: types$2.FetchOptions, params: dart.nullable(core.Map)}, {}),
    dispose: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(postgrest$.PostgrestClient, I[64]);
  dart.setFieldSignature(postgrest$.PostgrestClient, () => ({
    __proto__: dart.getFields(postgrest$.PostgrestClient.__proto__),
    url: dart.finalFieldType(core.String),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    schema: dart.finalFieldType(dart.nullable(core.String)),
    httpClient: dart.finalFieldType(dart.nullable(client$.Client)),
    [S$._isolate$3]: dart.finalFieldType(_isolates_web.YAJsonIsolate),
    [S$._hasCustomIsolate$1]: dart.finalFieldType(core.bool)
  }));
  const _is_PostgrestTransformBuilder_default = Symbol('_is_PostgrestTransformBuilder_default');
  postgrest_builder.PostgrestTransformBuilder$ = dart.generic(T => {
    class PostgrestTransformBuilder extends postgrest_builder.PostgrestBuilder$(T, T) {
      static ['_#new#tearOff'](T, builder) {
        return new (postgrest_builder.PostgrestTransformBuilder$(T)).new(builder);
      }
      select(R, columns = "*") {
        this[S$._assertCorrectGeneric](dart.wrapType(R));
        let quoted = false;
        let re = core.RegExp.new("\\s");
        let cleanedColumns = columns[S$.$split]("")[S$.$map](core.String, dart.fn(c => {
          if (re.hasMatch(c) && !quoted) {
            return "";
          }
          if (c === "\"") {
            quoted = !quoted;
          }
          return c;
        }, T$.StringToString()))[S$.$join]();
        this.overrideSearchParams("select", cleanedColumns);
        if (this[S$._headers$1][S$.$_get]("Prefer") != null) {
          this[S$._headers$1][S$.$_set]("Prefer", dart.str(this[S$._headers$1][S$.$_get]("Prefer")) + ",");
        }
        this[S$._headers$1][S$.$_set]("Prefer", dart.str(this[S$._headers$1][S$.$_get]("Prefer")) + "return=representation");
        return new (postgrest_builder.PostgrestTransformBuilder$(R)).new(new (postgrest_builder.PostgrestBuilder$(R, R)).new({headers: this[S$._headers$1], url: this[S$._url], httpClient: this[S$._httpClient$1], isolate: this[S$._isolate$1], options: this[S$._options], body: this[S$._body], method: this[S$._method], schema: this[S$._schema$1]}));
      }
      order(column, opts$) {
        let ascending = opts$ && 'ascending' in opts$ ? opts$.ascending : false;
        let nullsFirst = opts$ && 'nullsFirst' in opts$ ? opts$.nullsFirst : false;
        let foreignTable = opts$ && 'foreignTable' in opts$ ? opts$.foreignTable : null;
        let key = foreignTable == null ? "order" : dart.str(foreignTable) + ".order";
        let existingOrder = this[S$._url].queryParameters[S$.$_get](key);
        let value = (existingOrder == null ? "" : dart.str(existingOrder) + ",") + column + "." + (ascending ? "asc" : "desc") + "." + (nullsFirst ? "nullsfirst" : "nullslast");
        this.overrideSearchParams(key, value);
        return this;
      }
      limit(count, opts$) {
        let foreignTable = opts$ && 'foreignTable' in opts$ ? opts$.foreignTable : null;
        let key = foreignTable == null ? "limit" : dart.str(foreignTable) + ".limit";
        this.appendSearchParams(key, dart.str(count));
        return this;
      }
      range(from, to, opts$) {
        let foreignTable = opts$ && 'foreignTable' in opts$ ? opts$.foreignTable : null;
        let keyOffset = foreignTable == null ? "offset" : dart.str(foreignTable) + ".offset";
        let keyLimit = foreignTable == null ? "limit" : dart.str(foreignTable) + ".limit";
        this.appendSearchParams(keyOffset, dart.str(from));
        this.appendSearchParams(keyLimit, dart.str(to - from + 1));
        return this;
      }
      single() {
        this[S$._headers$1][S$.$_set]("Accept", "application/vnd.pgrst.object+json");
        return this;
      }
      maybeSingle() {
        let t137;
        if ((t137 = this[S$._method], t137 == null ? null : t137[S$.$toUpperCase]()) === "GET") {
          this[S$._headers$1][S$.$_set]("Accept", "application/json");
        } else {
          this[S$._headers$1][S$.$_set]("Accept", "application/vnd.pgrst.object+json");
        }
        this[S$._maybeSingle] = true;
        return this;
      }
      csv() {
        this[S$._headers$1][S$.$_set]("Accept", "text/csv");
        return this;
      }
    }
    (PostgrestTransformBuilder.new = function(builder) {
      PostgrestTransformBuilder.__proto__.new.call(this, {url: builder[S$._url], method: builder[S$._method], headers: builder[S$._headers$1], schema: builder[S$._schema$1], body: builder[S$._body], httpClient: builder[S$._httpClient$1], options: builder[S$._options], isolate: builder[S$._isolate$1]});
      ;
    }).prototype = PostgrestTransformBuilder.prototype;
    dart.addTypeTests(PostgrestTransformBuilder);
    PostgrestTransformBuilder.prototype[_is_PostgrestTransformBuilder_default] = true;
    dart.addTypeCaches(PostgrestTransformBuilder);
    dart.setMethodSignature(PostgrestTransformBuilder, () => ({
      __proto__: dart.getMethods(PostgrestTransformBuilder.__proto__),
      select: dart.gFnType(R => [postgrest_builder.PostgrestTransformBuilder$(R), [], [core.String]], R => [dart.nullable(core.Object)]),
      order: dart.fnType(postgrest_builder.PostgrestTransformBuilder$(T), [core.String], {ascending: core.bool, foreignTable: dart.nullable(core.String), nullsFirst: core.bool}, {}),
      limit: dart.fnType(postgrest_builder.PostgrestTransformBuilder$(T), [core.int], {foreignTable: dart.nullable(core.String)}, {}),
      range: dart.fnType(postgrest_builder.PostgrestTransformBuilder$(T), [core.int, core.int], {foreignTable: dart.nullable(core.String)}, {}),
      single: dart.fnType(postgrest_builder.PostgrestTransformBuilder$(T), []),
      maybeSingle: dart.fnType(postgrest_builder.PostgrestTransformBuilder$(T), []),
      csv: dart.fnType(postgrest_builder.PostgrestTransformBuilder$(T), [])
    }));
    dart.setLibraryUri(PostgrestTransformBuilder, I[40]);
    return PostgrestTransformBuilder;
  });
  postgrest_builder.PostgrestTransformBuilder = postgrest_builder.PostgrestTransformBuilder$();
  dart.addTypeTests(postgrest_builder.PostgrestTransformBuilder, _is_PostgrestTransformBuilder_default);
  const _is_PostgrestFilterBuilder_default = Symbol('_is_PostgrestFilterBuilder_default');
  postgrest_builder.PostgrestFilterBuilder$ = dart.generic(T => {
    class PostgrestFilterBuilder extends postgrest_builder.PostgrestTransformBuilder$(T) {
      static ['_#new#tearOff'](T, builder) {
        return new (postgrest_builder.PostgrestFilterBuilder$(T)).new(builder);
      }
      [S$._cleanFilterArray](filter) {
        if (filter[S$.$every](dart.fn(element => typeof element == 'number', T$.dynamicTobool()))) {
          return filter[S$.$map](core.String, dart.fn(s => dart.str(s), T$.dynamicToString()))[S$.$join](",");
        } else {
          return filter[S$.$map](core.String, dart.fn(s => "\"" + dart.str(s) + "\"", T$.dynamicToString()))[S$.$join](",");
        }
      }
      not(column, operator, value) {
        if (core.List.is(value)) {
          if (operator === "in") {
            this.appendSearchParams(column, "not." + operator + ".(" + this[S$._cleanFilterArray](value) + ")");
          } else {
            this.appendSearchParams(column, "not." + operator + ".{" + this[S$._cleanFilterArray](value) + "}");
          }
        } else {
          this.appendSearchParams(column, "not." + operator + "." + dart.str(value));
        }
        return this;
      }
      or(filters, opts$) {
        let foreignTable = opts$ && 'foreignTable' in opts$ ? opts$.foreignTable : null;
        let key = foreignTable != null ? dart.str(foreignTable) + ".or" : "or";
        this.appendSearchParams(key, "(" + filters + ")");
        return this;
      }
      eq(column, value) {
        if (core.List.is(value)) {
          this.appendSearchParams(column, "eq.{" + this[S$._cleanFilterArray](value) + "}");
        } else {
          this.appendSearchParams(column, "eq." + dart.str(value));
        }
        return this;
      }
      neq(column, value) {
        if (core.List.is(value)) {
          this.appendSearchParams(column, "neq.{" + this[S$._cleanFilterArray](value) + "}");
        } else {
          this.appendSearchParams(column, "neq." + dart.str(value));
        }
        return this;
      }
      gt(column, value) {
        this.appendSearchParams(column, "gt." + dart.str(value));
        return this;
      }
      gte(column, value) {
        this.appendSearchParams(column, "gte." + dart.str(value));
        return this;
      }
      lt(column, value) {
        this.appendSearchParams(column, "lt." + dart.str(value));
        return this;
      }
      lte(column, value) {
        this.appendSearchParams(column, "lte." + dart.str(value));
        return this;
      }
      like(column, pattern) {
        this.appendSearchParams(column, "like." + pattern);
        return this;
      }
      likeAllOf(column, patterns) {
        this.appendSearchParams(column, "like(all).{" + patterns[S$.$join](",") + "}");
        return this;
      }
      likeAnyOf(column, patterns) {
        this.appendSearchParams(column, "like(any).{" + patterns[S$.$join](",") + "}");
        return this;
      }
      ilike(column, pattern) {
        this.appendSearchParams(column, "ilike." + pattern);
        return this;
      }
      ilikeAllOf(column, patterns) {
        this.appendSearchParams(column, "ilike(all).{" + patterns[S$.$join](",") + "}");
        return this;
      }
      ilikeAnyOf(column, patterns) {
        this.appendSearchParams(column, "ilike(any).{" + patterns[S$.$join](",") + "}");
        return this;
      }
      is_(column, value) {
        this.appendSearchParams(column, "is." + dart.str(value));
        return this;
      }
      in_(column, values) {
        this.appendSearchParams(column, "in.(" + this[S$._cleanFilterArray](values) + ")");
        return this;
      }
      contains(column, value) {
        if (typeof value == 'string') {
          this.appendSearchParams(column, "cs." + dart.str(value));
        } else if (core.List.is(value)) {
          this.appendSearchParams(column, "cs.{" + this[S$._cleanFilterArray](value) + "}");
        } else {
          this.appendSearchParams(column, "cs." + convert.json.encode(value));
        }
        return this;
      }
      containedBy(column, value) {
        if (typeof value == 'string') {
          this.appendSearchParams(column, "cd." + dart.str(value));
        } else if (core.List.is(value)) {
          this.appendSearchParams(column, "cd.{" + this[S$._cleanFilterArray](value) + "}");
        } else {
          this.appendSearchParams(column, "cd." + convert.json.encode(value));
        }
        return this;
      }
      rangeLt(column, range) {
        this.appendSearchParams(column, "sl." + range);
        return this;
      }
      rangeGt(column, range) {
        this.appendSearchParams(column, "sr." + range);
        return this;
      }
      rangeGte(column, range) {
        this.appendSearchParams(column, "nxl." + range);
        return this;
      }
      rangeLte(column, range) {
        this.appendSearchParams(column, "nxr." + range);
        return this;
      }
      rangeAdjacent(column, range) {
        this.appendSearchParams(column, "adj." + range);
        return this;
      }
      overlaps(column, value) {
        if (typeof value == 'string') {
          this.appendSearchParams(column, "ov." + dart.str(value));
        } else if (core.List.is(value)) {
          this.appendSearchParams(column, "ov.{" + this[S$._cleanFilterArray](value) + "}");
        }
        return this;
      }
      textSearch(column, query, opts$) {
        let config = opts$ && 'config' in opts$ ? opts$.config : null;
        let type = opts$ && 'type' in opts$ ? opts$.type : null;
        let typePart = "";
        if (type === types$2.TextSearchType.plain) {
          typePart = "pl";
        } else if (type === types$2.TextSearchType.phrase) {
          typePart = "ph";
        } else if (type === types$2.TextSearchType.websearch) {
          typePart = "w";
        }
        let configPart = config == null ? "" : "(" + dart.str(config) + ")";
        this.appendSearchParams(column, typePart + "fts" + configPart + "." + query);
        return this;
      }
      filter(column, operator, value) {
        if (core.List.is(value)) {
          if (operator === "in") {
            this.appendSearchParams(column, operator + ".(" + this[S$._cleanFilterArray](value) + ")");
          } else {
            this.appendSearchParams(column, operator + ".{" + this[S$._cleanFilterArray](value) + "}");
          }
        } else {
          this.appendSearchParams(column, operator + "." + dart.str(value));
        }
        return this;
      }
      match(query) {
        query[S$.$forEach](dart.fn((k, v) => this.appendSearchParams(dart.str(k), "eq." + dart.str(v)), T$.dynamicAnddynamicTovoid()));
        return this;
      }
    }
    (PostgrestFilterBuilder.new = function(builder) {
      PostgrestFilterBuilder.__proto__.new.call(this, builder);
      ;
    }).prototype = PostgrestFilterBuilder.prototype;
    dart.addTypeTests(PostgrestFilterBuilder);
    PostgrestFilterBuilder.prototype[_is_PostgrestFilterBuilder_default] = true;
    dart.addTypeCaches(PostgrestFilterBuilder);
    dart.setMethodSignature(PostgrestFilterBuilder, () => ({
      __proto__: dart.getMethods(PostgrestFilterBuilder.__proto__),
      [S$._cleanFilterArray]: dart.fnType(core.String, [core.List]),
      not: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String, dart.dynamic]),
      or: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String], {foreignTable: dart.nullable(core.String)}, {}),
      eq: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      neq: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      gt: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      gte: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      lt: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      lte: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      like: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      likeAllOf: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [core.String, core.List$(core.String)]),
      likeAnyOf: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [core.String, core.List$(core.String)]),
      ilike: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      ilikeAllOf: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [core.String, core.List$(core.String)]),
      ilikeAnyOf: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [core.String, core.List$(core.String)]),
      is_: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      in_: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.List]),
      contains: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      containedBy: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      rangeLt: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      rangeGt: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      rangeGte: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      rangeLte: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      rangeAdjacent: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String]),
      overlaps: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, dart.dynamic]),
      textSearch: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String], {config: dart.nullable(core.String), type: dart.nullable(types$2.TextSearchType)}, {}),
      filter: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.String, core.String, dart.dynamic]),
      match: dart.fnType(postgrest_builder.PostgrestFilterBuilder$(T), [core.Map])
    }));
    dart.setLibraryUri(PostgrestFilterBuilder, I[40]);
    return PostgrestFilterBuilder;
  });
  postgrest_builder.PostgrestFilterBuilder = postgrest_builder.PostgrestFilterBuilder$();
  dart.addTypeTests(postgrest_builder.PostgrestFilterBuilder, _is_PostgrestFilterBuilder_default);
  postgrest_builder.PostgrestRpcBuilder = class PostgrestRpcBuilder extends postgrest_builder.PostgrestBuilder {
    static ['_#new#tearOff'](url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
      return new postgrest_builder.PostgrestRpcBuilder.new(url, {headers: headers, schema: schema, httpClient: httpClient, options: options, isolate: isolate});
    }
    rpc(params = null, options = C[82] || CT.C82) {
      this[S$._method] = "POST";
      this[S$._body] = params;
      this[S$._options] = options.ensureNotHead();
      return new postgrest_builder.PostgrestFilterBuilder.new(this);
    }
  };
  (postgrest_builder.PostgrestRpcBuilder.new = function(url, opts$) {
    let t137;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let options = opts$ && 'options' in opts$ ? opts$.options : null;
    let isolate = opts$ && 'isolate' in opts$ ? opts$.isolate : null;
    postgrest_builder.PostgrestRpcBuilder.__proto__.new.call(this, {url: core.Uri.parse(url), headers: (t137 = headers, t137 == null ? new (T$.IdentityMapOfString$String()).new() : t137), schema: schema, httpClient: httpClient, options: options, isolate: isolate});
    ;
  }).prototype = postgrest_builder.PostgrestRpcBuilder.prototype;
  dart.addTypeTests(postgrest_builder.PostgrestRpcBuilder);
  dart.addTypeCaches(postgrest_builder.PostgrestRpcBuilder);
  dart.setMethodSignature(postgrest_builder.PostgrestRpcBuilder, () => ({
    __proto__: dart.getMethods(postgrest_builder.PostgrestRpcBuilder.__proto__),
    rpc: dart.fnType(postgrest_builder.PostgrestFilterBuilder, [], [dart.dynamic, types$2.FetchOptions])
  }));
  dart.setLibraryUri(postgrest_builder.PostgrestRpcBuilder, I[40]);
  dart.defineLazy(postgrest_builder, {
    /*postgrest_builder.METHOD_GET*/get METHOD_GET() {
      return "GET";
    },
    /*postgrest_builder.METHOD_HEAD*/get METHOD_HEAD() {
      return "HEAD";
    },
    /*postgrest_builder.METHOD_POST*/get METHOD_POST() {
      return "POST";
    },
    /*postgrest_builder.METHOD_PUT*/get METHOD_PUT() {
      return "PUT";
    },
    /*postgrest_builder.METHOD_PATCH*/get METHOD_PATCH() {
      return "PATCH";
    },
    /*postgrest_builder.METHOD_DELETE*/get METHOD_DELETE() {
      return "DELETE";
    }
  }, false);
  types$2.PostgrestException = class PostgrestException extends core.Object {
    get message() {
      return this[S$.message$5];
    }
    set message(value) {
      super.message = value;
    }
    get code() {
      return this[S$.code$1];
    }
    set code(value) {
      super.code = value;
    }
    get details() {
      return this[S$.details];
    }
    set details(value) {
      super.details = value;
    }
    get hint() {
      return this[S$.hint];
    }
    set hint(value) {
      super.hint = value;
    }
    static ['_#new#tearOff'](opts$) {
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      let details = opts$ && 'details' in opts$ ? opts$.details : null;
      let hint = opts$ && 'hint' in opts$ ? opts$.hint : null;
      return new types$2.PostgrestException.new({message: message, code: code, details: details, hint: hint});
    }
    static fromJson(json, opts$) {
      let t137, t137$, t137$0;
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      let details = opts$ && 'details' in opts$ ? opts$.details : null;
      return new types$2.PostgrestException.new({message: core.String.as((t137 = json[S$.$_get]("message"), t137 == null ? message : t137)), code: T$.StringN().as((t137$ = json[S$.$_get]("code"), t137$ == null ? dart.str(code) : t137$)), details: (t137$0 = json[S$.$_get]("details"), t137$0 == null ? details : t137$0), hint: T$.StringN().as(json[S$.$_get]("hint"))});
    }
    static ['_#fromJson#tearOff'](json, opts$) {
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      let details = opts$ && 'details' in opts$ ? opts$.details : null;
      return types$2.PostgrestException.fromJson(json, {message: message, code: code, details: details});
    }
    toString() {
      return "PostgrestException(message: " + this.message + ", code: " + dart.str(this.code) + ", details: " + dart.str(this.details) + ", hint: " + dart.str(this.hint) + ")";
    }
  };
  (types$2.PostgrestException.new = function(opts$) {
    let message = opts$ && 'message' in opts$ ? opts$.message : null;
    let code = opts$ && 'code' in opts$ ? opts$.code : null;
    let details = opts$ && 'details' in opts$ ? opts$.details : null;
    let hint = opts$ && 'hint' in opts$ ? opts$.hint : null;
    this[S$.message$5] = message;
    this[S$.code$1] = code;
    this[S$.details] = details;
    this[S$.hint] = hint;
    ;
  }).prototype = types$2.PostgrestException.prototype;
  dart.addTypeTests(types$2.PostgrestException);
  dart.addTypeCaches(types$2.PostgrestException);
  types$2.PostgrestException[dart.implements] = () => [core.Exception];
  dart.setStaticMethodSignature(types$2.PostgrestException, () => ['fromJson']);
  dart.setLibraryUri(types$2.PostgrestException, I[65]);
  dart.setFieldSignature(types$2.PostgrestException, () => ({
    __proto__: dart.getFields(types$2.PostgrestException.__proto__),
    message: dart.finalFieldType(core.String),
    code: dart.finalFieldType(dart.nullable(core.String)),
    details: dart.finalFieldType(dart.dynamic),
    hint: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types$2.PostgrestException, ['toString']);
  const _is_PostgrestResponse_default = Symbol('_is_PostgrestResponse_default');
  types$2.PostgrestResponse$ = dart.generic(T => {
    class PostgrestResponse extends core.Object {
      get data() {
        return this[S$.data$2];
      }
      set data(value) {
        super.data = value;
      }
      get status() {
        return this[S$.status$2];
      }
      set status(value) {
        super.status = value;
      }
      get count() {
        return this[S$.count];
      }
      set count(value) {
        super.count = value;
      }
      static ['_#new#tearOff'](T, opts$) {
        let data = opts$ && 'data' in opts$ ? opts$.data : null;
        let status = opts$ && 'status' in opts$ ? opts$.status : null;
        let count = opts$ && 'count' in opts$ ? opts$.count : null;
        return new (types$2.PostgrestResponse$(T)).new({data: data, status: status, count: count});
      }
      static fromJson(json) {
        return new (types$2.PostgrestResponse$(T)).new({data: T.as(json[S$.$_get]("data")), status: core.int.as(json[S$.$_get]("status")), count: T$.intN().as(json[S$.$_get]("count"))});
      }
      static ['_#fromJson#tearOff'](T, json) {
        return types$2.PostgrestResponse$(T).fromJson(json);
      }
    }
    (PostgrestResponse.new = function(opts$) {
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let status = opts$ && 'status' in opts$ ? opts$.status : null;
      let count = opts$ && 'count' in opts$ ? opts$.count : null;
      this[S$.data$2] = data;
      this[S$.status$2] = status;
      this[S$.count] = count;
      ;
    }).prototype = PostgrestResponse.prototype;
    dart.addTypeTests(PostgrestResponse);
    PostgrestResponse.prototype[_is_PostgrestResponse_default] = true;
    dart.addTypeCaches(PostgrestResponse);
    dart.setStaticMethodSignature(PostgrestResponse, () => ['fromJson']);
    dart.setLibraryUri(PostgrestResponse, I[65]);
    dart.setFieldSignature(PostgrestResponse, () => ({
      __proto__: dart.getFields(PostgrestResponse.__proto__),
      data: dart.finalFieldType(dart.nullable(T)),
      status: dart.finalFieldType(core.int),
      count: dart.finalFieldType(dart.nullable(core.int))
    }));
    return PostgrestResponse;
  });
  types$2.PostgrestResponse = types$2.PostgrestResponse$();
  dart.addTypeTests(types$2.PostgrestResponse, _is_PostgrestResponse_default);
  types$2.CountOption = class CountOption extends core._Enum {
    [S$._enumToString]() {
      return "CountOption." + this[S$._name];
    }
  };
  (types$2.CountOption.new = function(index, name) {
    types$2.CountOption.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$2.CountOption.prototype;
  dart.addTypeTests(types$2.CountOption);
  dart.addTypeCaches(types$2.CountOption);
  dart.setMethodSignature(types$2.CountOption, () => ({
    __proto__: dart.getMethods(types$2.CountOption.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$2.CountOption, I[65]);
  dart.setStaticFieldSignature(types$2.CountOption, () => ['values', 'exact', 'planned', 'estimated']);
  dart.defineLazy(types$2.CountOption, {
    /*types$2.CountOption.values*/get values() {
      return C[184] || CT.C184;
    },
    /*types$2.CountOption.exact*/get exact() {
      return C[185] || CT.C185;
    },
    /*types$2.CountOption.planned*/get planned() {
      return C[186] || CT.C186;
    },
    /*types$2.CountOption.estimated*/get estimated() {
      return C[187] || CT.C187;
    }
  }, false);
  types$2.ReturningOption = class ReturningOption extends core._Enum {
    [S$._enumToString]() {
      return "ReturningOption." + this[S$._name];
    }
  };
  (types$2.ReturningOption.new = function(index, name) {
    types$2.ReturningOption.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$2.ReturningOption.prototype;
  dart.addTypeTests(types$2.ReturningOption);
  dart.addTypeCaches(types$2.ReturningOption);
  dart.setMethodSignature(types$2.ReturningOption, () => ({
    __proto__: dart.getMethods(types$2.ReturningOption.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$2.ReturningOption, I[65]);
  dart.setStaticFieldSignature(types$2.ReturningOption, () => ['values', 'minimal', 'representation']);
  dart.defineLazy(types$2.ReturningOption, {
    /*types$2.ReturningOption.values*/get values() {
      return C[188] || CT.C188;
    },
    /*types$2.ReturningOption.minimal*/get minimal() {
      return C[189] || CT.C189;
    },
    /*types$2.ReturningOption.representation*/get representation() {
      return C[91] || CT.C91;
    }
  }, false);
  types$2.TextSearchType = class TextSearchType extends core._Enum {
    [S$._enumToString]() {
      return "TextSearchType." + this[S$._name];
    }
  };
  (types$2.TextSearchType.new = function(index, name) {
    types$2.TextSearchType.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$2.TextSearchType.prototype;
  dart.addTypeTests(types$2.TextSearchType);
  dart.addTypeCaches(types$2.TextSearchType);
  dart.setMethodSignature(types$2.TextSearchType, () => ({
    __proto__: dart.getMethods(types$2.TextSearchType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$2.TextSearchType, I[65]);
  dart.setStaticFieldSignature(types$2.TextSearchType, () => ['values', 'plain', 'phrase', 'websearch']);
  dart.defineLazy(types$2.TextSearchType, {
    /*types$2.TextSearchType.values*/get values() {
      return C[190] || CT.C190;
    },
    /*types$2.TextSearchType.plain*/get plain() {
      return C[191] || CT.C191;
    },
    /*types$2.TextSearchType.phrase*/get phrase() {
      return C[192] || CT.C192;
    },
    /*types$2.TextSearchType.websearch*/get websearch() {
      return C[193] || CT.C193;
    }
  }, false);
  types$2.FetchOptions = class FetchOptions extends core.Object {
    get head() {
      return this[S$.head];
    }
    set head(value) {
      super.head = value;
    }
    get count() {
      return this[S$.count$1];
    }
    set count(value) {
      super.count = value;
    }
    get forceResponse() {
      return this[S$.forceResponse];
    }
    set forceResponse(value) {
      super.forceResponse = value;
    }
    static ['_#new#tearOff'](opts$) {
      let head = opts$ && 'head' in opts$ ? opts$.head : false;
      let count = opts$ && 'count' in opts$ ? opts$.count : null;
      let forceResponse = opts$ && 'forceResponse' in opts$ ? opts$.forceResponse : false;
      return new types$2.FetchOptions.new({head: head, count: count, forceResponse: forceResponse});
    }
    ensureNotHead() {
      return new types$2.FetchOptions.new({head: false, count: this.count, forceResponse: this.forceResponse});
    }
  };
  (types$2.FetchOptions.new = function(opts$) {
    let head = opts$ && 'head' in opts$ ? opts$.head : false;
    let count = opts$ && 'count' in opts$ ? opts$.count : null;
    let forceResponse = opts$ && 'forceResponse' in opts$ ? opts$.forceResponse : false;
    this[S$.head] = head;
    this[S$.count$1] = count;
    this[S$.forceResponse] = forceResponse;
    ;
  }).prototype = types$2.FetchOptions.prototype;
  dart.addTypeTests(types$2.FetchOptions);
  dart.addTypeCaches(types$2.FetchOptions);
  dart.setMethodSignature(types$2.FetchOptions, () => ({
    __proto__: dart.getMethods(types$2.FetchOptions.__proto__),
    ensureNotHead: dart.fnType(types$2.FetchOptions, [])
  }));
  dart.setLibraryUri(types$2.FetchOptions, I[65]);
  dart.setFieldSignature(types$2.FetchOptions, () => ({
    __proto__: dart.getFields(types$2.FetchOptions.__proto__),
    head: dart.finalFieldType(core.bool),
    count: dart.finalFieldType(dart.nullable(types$2.CountOption)),
    forceResponse: dart.finalFieldType(core.bool)
  }));
  types$2['CountOptionName|name'] = function CountOptionName$124name($this) {
    return $this.toString()[S$.$split](".")[S$.$last];
  };
  types$2['CountOptionName|get#name'] = function CountOptionName$124get$35name($this) {
    return dart.fn(() => types$2['CountOptionName|name']($this), T$.VoidToString());
  };
  types$2['ReturningOptionName|name'] = function ReturningOptionName$124name($this) {
    return $this.toString()[S$.$split](".")[S$.$last];
  };
  types$2['ReturningOptionName|get#name'] = function ReturningOptionName$124get$35name($this) {
    return dart.fn(() => types$2['ReturningOptionName|name']($this), T$.VoidToString());
  };
  types$2['TextSearchTypeName|name'] = function TextSearchTypeName$124name($this) {
    return $this.toString()[S$.$split](".")[S$.$last];
  };
  types$2['TextSearchTypeName|get#name'] = function TextSearchTypeName$124get$35name($this) {
    return dart.fn(() => types$2['TextSearchTypeName|name']($this), T$.VoidToString());
  };
  realtime_channel.Binding = class Binding extends core.Object {
    get type() {
      return this[S$.type$1];
    }
    set type(value) {
      this[S$.type$1] = value;
    }
    get filter() {
      return this[S$.filter$2];
    }
    set filter(value) {
      this[S$.filter$2] = value;
    }
    get callback() {
      return this[S$.callback];
    }
    set callback(value) {
      this[S$.callback] = value;
    }
    get id() {
      return this[S$.id$7];
    }
    set id(value) {
      this[S$.id$7] = value;
    }
    static ['_#new#tearOff'](type, filter, callback, id = null) {
      return new realtime_channel.Binding.new(type, filter, callback, id);
    }
    copyWith(opts$) {
      let t149, t149$, t149$0, t149$1;
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
      let callback = opts$ && 'callback' in opts$ ? opts$.callback : null;
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      return new realtime_channel.Binding.new((t149 = type, t149 == null ? this.type : t149), (t149$ = filter, t149$ == null ? this.filter : t149$), (t149$0 = callback, t149$0 == null ? this.callback : t149$0), (t149$1 = id, t149$1 == null ? this.id : t149$1));
    }
  };
  (realtime_channel.Binding.new = function(type, filter, callback, id = null) {
    this[S$.type$1] = type;
    this[S$.filter$2] = filter;
    this[S$.callback] = callback;
    this[S$.id$7] = id;
    ;
  }).prototype = realtime_channel.Binding.prototype;
  dart.addTypeTests(realtime_channel.Binding);
  dart.addTypeCaches(realtime_channel.Binding);
  dart.setMethodSignature(realtime_channel.Binding, () => ({
    __proto__: dart.getMethods(realtime_channel.Binding.__proto__),
    copyWith: dart.fnType(realtime_channel.Binding, [], {callback: dart.nullable(dart.fnType(dart.void, [dart.dynamic], [dart.dynamic])), filter: dart.nullable(core.Map$(core.String, core.String)), id: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(realtime_channel.Binding, I[66]);
  dart.setFieldSignature(realtime_channel.Binding, () => ({
    __proto__: dart.getFields(realtime_channel.Binding.__proto__),
    type: dart.fieldType(core.String),
    filter: dart.fieldType(core.Map$(core.String, core.String)),
    callback: dart.fieldType(dart.fnType(dart.void, [dart.dynamic], [dart.dynamic])),
    id: dart.fieldType(dart.nullable(core.String))
  }));
  realtime_channel.ChannelFilter = class ChannelFilter extends core.Object {
    get event() {
      return this[S$.event$1];
    }
    set event(value) {
      super.event = value;
    }
    get schema() {
      return this[S$.schema$2];
    }
    set schema(value) {
      super.schema = value;
    }
    get table() {
      return this[S$.table];
    }
    set table(value) {
      super.table = value;
    }
    get filter() {
      return this[S$.filter$3];
    }
    set filter(value) {
      super.filter = value;
    }
    static ['_#new#tearOff'](opts$) {
      let event = opts$ && 'event' in opts$ ? opts$.event : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let table = opts$ && 'table' in opts$ ? opts$.table : null;
      let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
      return new realtime_channel.ChannelFilter.new({event: event, schema: schema, table: table, filter: filter});
    }
    toMap() {
      return (() => {
        let t149 = new (T$.IdentityMapOfString$String()).new();
        if (this.event != null) t149[S$.$_set]("event", dart.nullCheck(this.event));
        if (this.schema != null) t149[S$.$_set]("schema", dart.nullCheck(this.schema));
        if (this.table != null) t149[S$.$_set]("table", dart.nullCheck(this.table));
        if (this.filter != null) t149[S$.$_set]("filter", dart.nullCheck(this.filter));
        return t149;
      })();
    }
  };
  (realtime_channel.ChannelFilter.new = function(opts$) {
    let event = opts$ && 'event' in opts$ ? opts$.event : null;
    let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
    let table = opts$ && 'table' in opts$ ? opts$.table : null;
    let filter = opts$ && 'filter' in opts$ ? opts$.filter : null;
    this[S$.event$1] = event;
    this[S$.schema$2] = schema;
    this[S$.table] = table;
    this[S$.filter$3] = filter;
    ;
  }).prototype = realtime_channel.ChannelFilter.prototype;
  dart.addTypeTests(realtime_channel.ChannelFilter);
  dart.addTypeCaches(realtime_channel.ChannelFilter);
  dart.setMethodSignature(realtime_channel.ChannelFilter, () => ({
    __proto__: dart.getMethods(realtime_channel.ChannelFilter.__proto__),
    toMap: dart.fnType(core.Map$(core.String, core.String), [])
  }));
  dart.setLibraryUri(realtime_channel.ChannelFilter, I[66]);
  dart.setFieldSignature(realtime_channel.ChannelFilter, () => ({
    __proto__: dart.getFields(realtime_channel.ChannelFilter.__proto__),
    event: dart.finalFieldType(dart.nullable(core.String)),
    schema: dart.finalFieldType(dart.nullable(core.String)),
    table: dart.finalFieldType(dart.nullable(core.String)),
    filter: dart.finalFieldType(dart.nullable(core.String))
  }));
  realtime_channel.ChannelResponse = class ChannelResponse extends core._Enum {
    [S$._enumToString]() {
      return "ChannelResponse." + this[S$._name];
    }
  };
  (realtime_channel.ChannelResponse.new = function(index, name) {
    realtime_channel.ChannelResponse.__proto__.new.call(this, index, name);
    ;
  }).prototype = realtime_channel.ChannelResponse.prototype;
  dart.addTypeTests(realtime_channel.ChannelResponse);
  dart.addTypeCaches(realtime_channel.ChannelResponse);
  dart.setMethodSignature(realtime_channel.ChannelResponse, () => ({
    __proto__: dart.getMethods(realtime_channel.ChannelResponse.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(realtime_channel.ChannelResponse, I[66]);
  dart.setStaticFieldSignature(realtime_channel.ChannelResponse, () => ['values', 'ok', 'timedOut', 'rateLimited', 'error']);
  dart.defineLazy(realtime_channel.ChannelResponse, {
    /*realtime_channel.ChannelResponse.values*/get values() {
      return C[194] || CT.C194;
    },
    /*realtime_channel.ChannelResponse.ok*/get ok() {
      return C[195] || CT.C195;
    },
    /*realtime_channel.ChannelResponse.timedOut*/get timedOut() {
      return C[196] || CT.C196;
    },
    /*realtime_channel.ChannelResponse.rateLimited*/get rateLimited() {
      return C[197] || CT.C197;
    },
    /*realtime_channel.ChannelResponse.error*/get error() {
      return C[198] || CT.C198;
    }
  }, false);
  realtime_channel.RealtimeListenTypes = class RealtimeListenTypes extends core._Enum {
    [S$._enumToString]() {
      return "RealtimeListenTypes." + this[S$._name];
    }
  };
  (realtime_channel.RealtimeListenTypes.new = function(index, name) {
    realtime_channel.RealtimeListenTypes.__proto__.new.call(this, index, name);
    ;
  }).prototype = realtime_channel.RealtimeListenTypes.prototype;
  dart.addTypeTests(realtime_channel.RealtimeListenTypes);
  dart.addTypeCaches(realtime_channel.RealtimeListenTypes);
  dart.setMethodSignature(realtime_channel.RealtimeListenTypes, () => ({
    __proto__: dart.getMethods(realtime_channel.RealtimeListenTypes.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(realtime_channel.RealtimeListenTypes, I[66]);
  dart.setStaticFieldSignature(realtime_channel.RealtimeListenTypes, () => ['values', 'postgresChanges', 'broadcast', 'presence']);
  dart.defineLazy(realtime_channel.RealtimeListenTypes, {
    /*realtime_channel.RealtimeListenTypes.values*/get values() {
      return C[199] || CT.C199;
    },
    /*realtime_channel.RealtimeListenTypes.postgresChanges*/get postgresChanges() {
      return C[200] || CT.C200;
    },
    /*realtime_channel.RealtimeListenTypes.broadcast*/get broadcast() {
      return C[201] || CT.C201;
    },
    /*realtime_channel.RealtimeListenTypes.presence*/get presence() {
      return C[202] || CT.C202;
    }
  }, false);
  realtime_channel.RealtimeChannelConfig = class RealtimeChannelConfig extends core.Object {
    get ack() {
      return this[S$.ack];
    }
    set ack(value) {
      super.ack = value;
    }
    get self() {
      return this[S$.self];
    }
    set self(value) {
      super.self = value;
    }
    get key() {
      return this[S$.key];
    }
    set key(value) {
      super.key = value;
    }
    static ['_#new#tearOff'](opts$) {
      let ack = opts$ && 'ack' in opts$ ? opts$.ack : false;
      let self = opts$ && 'self' in opts$ ? opts$.self : false;
      let key = opts$ && 'key' in opts$ ? opts$.key : "";
      return new realtime_channel.RealtimeChannelConfig.new({ack: ack, self: self, key: key});
    }
    toMap() {
      return new (T$.IdentityMapOfString$dynamic()).from(["config", new (T$.IdentityMapOfString$MapOfString$Object()).from(["broadcast", new (T$.IdentityMapOfString$bool()).from(["ack", this.ack, "self", this.self]), "presence", new (T$.IdentityMapOfString$String()).from(["key", this.key])])]);
    }
  };
  (realtime_channel.RealtimeChannelConfig.new = function(opts$) {
    let ack = opts$ && 'ack' in opts$ ? opts$.ack : false;
    let self = opts$ && 'self' in opts$ ? opts$.self : false;
    let key = opts$ && 'key' in opts$ ? opts$.key : "";
    this[S$.ack] = ack;
    this[S$.self] = self;
    this[S$.key] = key;
    ;
  }).prototype = realtime_channel.RealtimeChannelConfig.prototype;
  dart.addTypeTests(realtime_channel.RealtimeChannelConfig);
  dart.addTypeCaches(realtime_channel.RealtimeChannelConfig);
  dart.setMethodSignature(realtime_channel.RealtimeChannelConfig, () => ({
    __proto__: dart.getMethods(realtime_channel.RealtimeChannelConfig.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(realtime_channel.RealtimeChannelConfig, I[66]);
  dart.setFieldSignature(realtime_channel.RealtimeChannelConfig, () => ({
    __proto__: dart.getFields(realtime_channel.RealtimeChannelConfig.__proto__),
    ack: dart.finalFieldType(core.bool),
    self: dart.finalFieldType(core.bool),
    key: dart.finalFieldType(core.String)
  }));
  realtime_channel.RealtimeChannel = class RealtimeChannel extends core.Object {
    get joinedOnce() {
      return this[S$.joinedOnce];
    }
    set joinedOnce(value) {
      this[S$.joinedOnce] = value;
    }
    get subTopic() {
      return this[S$.subTopic];
    }
    set subTopic(value) {
      super.subTopic = value;
    }
    get topic() {
      return this[S$.topic];
    }
    set topic(value) {
      super.topic = value;
    }
    get params() {
      return this[S$.params];
    }
    set params(value) {
      this[S$.params] = value;
    }
    get socket() {
      return this[S$.socket];
    }
    set socket(value) {
      super.socket = value;
    }
    set joinPush(joinPush$35param) {
      this[S$.__RealtimeChannel_joinPush] = joinPush$35param;
    }
    get joinPush() {
      let t154;
      t154 = this[S$.__RealtimeChannel_joinPush];
      return t154 == null ? dart.throw(new _internal.LateError.fieldNI("joinPush")) : t154;
    }
    get [S$._rejoinTimer]() {
      let t154;
      t154 = this[S$.__RealtimeChannel__rejoinTimer];
      return t154 == null ? dart.throw(new _internal.LateError.fieldNI("_rejoinTimer")) : t154;
    }
    set [S$._rejoinTimer](_rejoinTimer$35param) {
      this[S$.__RealtimeChannel__rejoinTimer] = _rejoinTimer$35param;
    }
    get presence() {
      let t154;
      t154 = this[S$.__RealtimeChannel_presence];
      return t154 == null ? dart.throw(new _internal.LateError.fieldNI("presence")) : t154;
    }
    set presence(presence$35param) {
      this[S$.__RealtimeChannel_presence] = presence$35param;
    }
    get broadcastEndpointURL() {
      let t154;
      t154 = this[S$.__RealtimeChannel_broadcastEndpointURL];
      return t154 == null ? dart.throw(new _internal.LateError.fieldNI("broadcastEndpointURL")) : t154;
    }
    set broadcastEndpointURL(broadcastEndpointURL$35param) {
      if (this[S$.__RealtimeChannel_broadcastEndpointURL] == null)
        this[S$.__RealtimeChannel_broadcastEndpointURL] = broadcastEndpointURL$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("broadcastEndpointURL"));
    }
    static ['_#new#tearOff'](topic, socket, opts$) {
      let params = opts$ && 'params' in opts$ ? opts$.params : C[83] || CT.C83;
      return new realtime_channel.RealtimeChannel.new(topic, socket, {params: params});
    }
    rejoinUntilConnected() {
      this[S$._rejoinTimer].scheduleTimeout();
      if (this.socket.isConnected) {
        this.rejoin();
      }
    }
    subscribe(callback = null, timeout = null) {
      let t154, t154$, t155;
      if (!this.socket.isConnected) {
        this.socket.connect();
      }
      if (this.joinedOnce === true) {
        dart.throw("tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance");
      } else {
        let broadcast = dart.dsend(this.params[S$.$_get]("config"), '_get', ["broadcast"]);
        let presence = dart.dsend(this.params[S$.$_get]("config"), '_get', ["presence"]);
        this.onError(dart.fn(e => {
          if (callback != null) callback("CHANNEL_ERROR", e);
        }, T$.StringNTovoid()));
        this.onClose(dart.fn(() => {
          if (callback != null) callback("CLOSED");
        }, T$.VoidToNull()));
        let accessTokenPayload = new (T$.IdentityMapOfString$String()).new();
        let config = new (T$.IdentityMapOfString$dynamic()).from(["broadcast", broadcast, "presence", presence, "postgres_changes", (t154$ = (t154 = this[S$._bindings][S$.$_get]("postgres_changes"), t154 == null ? null : t154[S$.$map](T$.MapOfString$String(), dart.fn(r => r.filter, T$.BindingToMapOfString$String()))[S$.$toList]()), t154$ == null ? [] : t154$)]);
        if (this.socket.accessToken != null) {
          accessTokenPayload[S$.$_set]("access_token", dart.nullCheck(this.socket.accessToken));
        }
        this.updateJoinPayload((() => {
          let t154 = new (T$.IdentityMapOfString$dynamic()).new();
          t154[S$.$_set]("config", config);
          t154[S$.$addAll](accessTokenPayload);
          return t154;
        })());
        this.joinedOnce = true;
        this.rejoin((t155 = timeout, t155 == null ? this[S$._timeout] : t155));
        this.joinPush.receive("ok", dart.fn(response => {
          let t155, t155$, t155$0;
          let serverPostgresFilters = dart.dsend(response, '_get', ["postgres_changes"]);
          if (this.socket.accessToken != null) this.socket.setAuth(this.socket.accessToken);
          if (serverPostgresFilters == null) {
            if (callback != null) callback("SUBSCRIBED");
            return;
          } else {
            let clientPostgresBindings = this[S$._bindings][S$.$_get]("postgres_changes");
            let bindingsLen = (t155$ = (t155 = clientPostgresBindings, t155 == null ? null : t155[S$.$length]), t155$ == null ? 0 : t155$);
            let newPostgresBindings = T$.JSArrayOfBinding().of([]);
            for (let i = 0; i < bindingsLen; i = i + 1) {
              let clientPostgresBinding = dart.nullCheck(clientPostgresBindings)[S$.$_get](i);
              let event = clientPostgresBinding.filter[S$.$_get]("event");
              let schema = clientPostgresBinding.filter[S$.$_get]("schema");
              let table = clientPostgresBinding.filter[S$.$_get]("table");
              let filter = clientPostgresBinding.filter[S$.$_get]("filter");
              let serverPostgresFilter = dart.dsend(serverPostgresFilters, '_get', [i]);
              if (serverPostgresFilter != null && dart.equals(dart.dsend(serverPostgresFilter, '_get', ["event"]), event) && dart.equals(dart.dsend(serverPostgresFilter, '_get', ["schema"]), schema) && dart.equals(dart.dsend(serverPostgresFilter, '_get', ["table"]), table) && dart.equals(dart.dsend(serverPostgresFilter, '_get', ["filter"]), filter)) {
                newPostgresBindings[S$.$add](clientPostgresBinding.copyWith({id: (t155$0 = dart.dsend(serverPostgresFilter, '_get', ["id"]), t155$0 == null ? null : dart.toString(t155$0))}));
              } else {
                this.unsubscribe();
                if (callback != null) {
                  callback("CHANNEL_ERROR", core.Exception.new("mismatch between server and client bindings for postgres changes"));
                }
                return;
              }
            }
            this[S$._bindings][S$.$_set]("postgres_changes", newPostgresBindings);
            if (callback != null) callback("SUBSCRIBED");
            return;
          }
        }, T$.dynamicTovoid())).receive("error", dart.fn(error => {
          if (callback != null) {
            callback("CHANNEL_ERROR", core.Exception.new(convert.jsonEncode(T$.MapOfString$dynamic().as(error)[S$.$isNotEmpty] ? error[S$.$values][S$.$join](", ") : "error")));
          }
          return;
        }, T$.dynamicTovoid())).receive("timeout", dart.fn(_ => {
          if (callback != null) callback("TIMED_OUT");
          return;
        }, T$.dynamicTovoid()));
      }
    }
    presenceState() {
      return this.presence.state;
    }
    track(payload, opts = C[203] || CT.C203) {
      let t155;
      return this.send({type: realtime_channel.RealtimeListenTypes.presence, payload: new (T$.IdentityMapOfString$dynamic()).from(["event", "track", "payload", payload]), opts: new (T$.IdentityMapOfString$dynamic()).from(["timeout", (t155 = opts[S$.$_get]("timeout"), t155 == null ? this[S$._timeout] : t155)])});
    }
    untrack(opts = C[203] || CT.C203) {
      return this.send({type: realtime_channel.RealtimeListenTypes.presence, payload: new (T$.IdentityMapOfString$dynamic()).from(["event", "untrack"]), opts: opts});
    }
    onClose(callback) {
      this.onEvents(constants$0['ChannelEventsExtended|eventName'](constants$0.ChannelEvents.close), new realtime_channel.ChannelFilter.new(), dart.fn((reason, ref = null) => dart.dcall(callback, []), T$.dynamicAnddynamicTovoid$1()));
    }
    onError(callback) {
      this.onEvents(constants$0['ChannelEventsExtended|eventName'](constants$0.ChannelEvents.error), new realtime_channel.ChannelFilter.new(), dart.fn((reason, ref = null) => {
        let t155;
        return callback((t155 = reason, t155 == null ? null : dart.toString(t155)));
      }, T$.dynamicAnddynamicTovoid$1()));
    }
    on(type, filter, callback) {
      return this.onEvents(realtime_channel['ToType|toType'](type), filter, callback);
    }
    onEvents(type, filter, callback) {
      let typeLower = type[S$.$toLowerCase]();
      let binding = new realtime_channel.Binding.new(typeLower, filter.toMap(), callback);
      if (this[S$._bindings][S$.$_get](typeLower) != null) {
        dart.nullCheck(this[S$._bindings][S$.$_get](typeLower))[S$.$add](binding);
      } else {
        this[S$._bindings][S$.$_set](typeLower, T$.JSArrayOfBinding().of([binding]));
      }
      return this;
    }
    off(type, filter) {
      let typeLower = type[S$.$toLowerCase]();
      this[S$._bindings][S$.$_set](typeLower, dart.nullCheck(this[S$._bindings][S$.$_get](typeLower))[S$.$where](dart.fn(bind => !(bind.type[S$.$toLowerCase]() === typeLower && dart.dtest(realtime_channel.RealtimeChannel._isEqual(bind.filter, filter))), T$.BindingTobool()))[S$.$toList]());
      return this;
    }
    get canPush() {
      return this.socket.isConnected && this.isJoined;
    }
    push(event, payload, timeout = null) {
      let t155;
      if (!this.joinedOnce) {
        dart.throw("tried to push '" + constants$0['ChannelEventsExtended|eventName'](event) + "' to '" + this.topic + "' before joining. Use channel.subscribe() before pushing events");
      }
      let pushEvent = new push.Push.new(this, event, payload, (t155 = timeout, t155 == null ? this[S$._timeout] : t155));
      if (this.canPush) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this[S$._pushBuffer][S$.$add](pushEvent);
      }
      return pushEvent;
    }
    send(opts$) {
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let event = opts$ && 'event' in opts$ ? opts$.event : null;
      let payload = opts$ && 'payload' in opts$ ? opts$.payload : null;
      let opts = opts$ && 'opts' in opts$ ? opts$.opts : C[203] || CT.C203;
      return async.async(realtime_channel.ChannelResponse, (function* send() {
        let t156, t156$, t156$0, t157, t158, t157$, t158$, t157$0;
        let completer = T$.CompleterOfChannelResponse().new();
        payload[S$.$_set]("type", realtime_channel['ToType|toType'](type));
        if (event != null) {
          payload[S$.$_set]("event", event);
        }
        if (!this.canPush && type === realtime_channel.RealtimeListenTypes.broadcast) {
          let headers = (() => {
            let t155 = new (T$.IdentityMapOfString$String()).new();
            t155[S$.$_set]("Content-Type", "application/json");
            t155[S$.$_set]("apikey", (t156 = this.socket.accessToken, t156 == null ? "" : t156));
            t155[S$.$addAll](this.socket.headers);
            return t155;
          })();
          let body = new (T$.IdentityMapOfString$ListOfMapOfString$ObjectN()).from(["messages", T$.JSArrayOfMapOfString$ObjectN().of([new (T$.IdentityMapOfString$ObjectN()).from(["topic", this.subTopic, "payload", payload, "event", event])])]);
          try {
            let res = (yield (t156$0 = (t156$ = this.socket.httpClient, t156$ == null ? null : dart.bind(t156$, 'post')), t156$0 == null ? C[93] || CT.C93 : t156$0)(core.Uri.parse(this.broadcastEndpointURL), {headers: headers, body: convert.json.encode(body)}));
            if (200 <= res.statusCode && res.statusCode < 300) {
              completer.complete(realtime_channel.ChannelResponse.ok);
            } else {
              completer.complete(realtime_channel.ChannelResponse.error);
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.complete(realtime_channel.ChannelResponse.error);
            } else
              throw e$;
          }
        } else {
          let push = this.push(constants$0['ChannelEventsExtended|fromType'](core.String.as(payload[S$.$_get]("type"))), payload, T$.DurationN().as((t157 = opts[S$.$_get]("timeout"), t157 == null ? this[S$._timeout] : t157)));
          if (push.rateLimited) {
            completer.complete(realtime_channel.ChannelResponse.rateLimited);
          }
          if (dart.equals(payload[S$.$_get]("type"), "broadcast") && ((t157$ = this.params[S$.$_get]("config"), t157$ == null ? null : (t158 = dart.dsend(t157$, '_get', ["broadcast"]), t158 == null ? null : dart.dsend(t158, '_get', ["ack"]))) == null || dart.equals((t157$0 = this.params[S$.$_get]("config"), t157$0 == null ? null : (t158$ = dart.dsend(t157$0, '_get', ["broadcast"]), t158$ == null ? null : dart.dsend(t158$, '_get', ["ack"]))), false))) {
            if (!completer.isCompleted) {
              completer.complete(realtime_channel.ChannelResponse.ok);
            }
          }
          push.receive("ok", dart.fn(_ => {
            if (!completer.isCompleted) {
              completer.complete(realtime_channel.ChannelResponse.ok);
            }
          }, T$.dynamicTovoid()));
          push.receive("timeout", dart.fn(_ => {
            if (!completer.isCompleted) {
              completer.complete(realtime_channel.ChannelResponse.timedOut);
            }
          }, T$.dynamicTovoid()));
        }
        return completer.future;
      }).bind(this));
    }
    updateJoinPayload(payload) {
      this.joinPush.updatePayload(payload);
    }
    unsubscribe(timeout = null) {
      let t157;
      this[S$._state] = constants$0.ChannelStates.leaving;
      const onClose = () => {
        this.socket.log("channel", "leave " + this.topic);
        this.trigger(constants$0['ChannelEventsExtended|eventName'](constants$0.ChannelEvents.close), "leave", this.joinRef);
      };
      dart.fn(onClose, T$.VoidTovoid());
      this.joinPush.destroy();
      let completer = T$.CompleterOfString().new();
      let leavePush = new push.Push.new(this, constants$0.ChannelEvents.leave, new (T$.IdentityMapOfString$dynamic()).new(), (t157 = timeout, t157 == null ? this[S$._timeout] : t157));
      leavePush.receive("ok", dart.fn(_ => {
        onClose();
        if (!completer.isCompleted) {
          completer.complete("ok");
        }
      }, T$.dynamicTovoid())).receive("timeout", dart.fn(_ => {
        if (!completer.isCompleted) {
          onClose();
        }
        completer.complete("timed out");
      }, T$.dynamicTovoid())).receive("error", dart.fn(_ => {
        onClose();
        if (!completer.isCompleted) {
          completer.complete("error");
        }
      }, T$.dynamicTovoid()));
      leavePush.send();
      if (!this.canPush) {
        leavePush.trigger("ok", new _js_helper.LinkedMap.new());
      }
      return completer.future;
    }
    get [S$._broadcastEndpointURL]() {
      let url = this.socket.endPoint;
      url = url[S$.$replaceFirst](core.RegExp.new("^ws", {caseSensitive: false}), "http");
      url = url[S$.$replaceAll](core.RegExp.new("(/socket/websocket|/socket|/websocket)/?$", {caseSensitive: false}), "");
      url = url[S$.$replaceAll](core.RegExp.new("/+$"), "") + "/api/broadcast";
      return url;
    }
    onMessage(event, payload, ref = null) {
      return payload;
    }
    isMember(topic) {
      return this.topic === topic;
    }
    get joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = null) {
      let t157;
      if (this.isLeaving) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this[S$._state] = constants$0.ChannelStates.joining;
      this.joinPush.resend((t157 = timeout, t157 == null ? this[S$._timeout] : t157));
    }
    trigger(type, payload = null, ref = null) {
      let t157, t157$, t159, t158, t157$0, t157$1, t159$, t158$, t157$2;
      let typeLower = type[S$.$toLowerCase]();
      let events = T$.JSArrayOfChannelEvents().of([constants$0.ChannelEvents.close, constants$0.ChannelEvents.error, constants$0.ChannelEvents.leave, constants$0.ChannelEvents.join])[S$.$map](core.String, dart.fn(e => constants$0['ChannelEventsExtended|eventName'](e), T$.ChannelEventsToString()))[S$.$toSet]();
      if (ref != null && events.contains(typeLower) && ref !== this.joinRef) {
        return;
      }
      let handledPayload = this.onMessage(typeLower, payload, ref);
      if (payload != null && handledPayload == null) {
        dart.throw("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      if (T$.JSArrayOfString().of(["insert", "update", "delete"])[S$.$contains](typeLower)) {
        let bindings = (t157 = this[S$._bindings][S$.$_get]("postgres_changes"), t157 == null ? null : t157[S$.$where](dart.fn(bind => {
          let t158;
          return bind.filter[S$.$_get]("event") === "*" || (t158 = bind.filter[S$.$_get]("event"), t158 == null ? null : t158[S$.$toLowerCase]()) === typeLower;
        }, T$.BindingTobool())));
        for (let bind of (t157$ = bindings, t157$ == null ? T$.JSArrayOfBinding().of([]) : t157$)) {
          handledPayload = transformers.getEnrichedPayload(T$.MapOfString$dynamic().as(handledPayload));
          t157$0 = bind;
          t158 = handledPayload;
          t159 = ref;
          t157$0.callback(t158, t159);
        }
      } else {
        let bindings = (t157$1 = this[S$._bindings][S$.$_get](typeLower), t157$1 == null ? T$.JSArrayOfBinding().of([]) : t157$1)[S$.$where](dart.fn(bind => {
          let t157, t157$, t157$0, t157$1, t157$2, t157$3, t157$4;
          if (T$.JSArrayOfString().of(["broadcast", "presence", "postgres_changes"])[S$.$contains](typeLower)) {
            let bindId = bind.id;
            if (bindId != null) {
              let bindEvent = bind.filter[S$.$_get]("event");
              return (t157 = T$.ListN().as(dart.dsend(payload, '_get', ["ids"])), t157 == null ? null : t157[S$.$contains](core.int.parse(bindId))) === true && (bindEvent === "*" || (t157$ = bindEvent, t157$ == null ? null : t157$[S$.$toLowerCase]()) == (t157$1 = T$.StringN().as((t157$0 = dart.dsend(payload, '_get', ["data"]), t157$0 == null ? null : dart.dsend(t157$0, '_get', ["type"]))), t157$1 == null ? null : t157$1[S$.$toLowerCase]()));
            } else {
              let bindEvent = (t157$2 = bind.filter[S$.$_get]("event"), t157$2 == null ? null : t157$2[S$.$toLowerCase]());
              return bindEvent === "*" || bindEvent == (t157$4 = T$.StringN().as((t157$3 = payload, t157$3 == null ? null : dart.dsend(t157$3, '_get', ["event"]))), t157$4 == null ? null : t157$4[S$.$toLowerCase]());
            }
          } else {
            return bind.type[S$.$toLowerCase]() === typeLower;
          }
        }, T$.BindingTobool()));
        for (let bind of bindings) {
          if (T$.MapOfString$dynamic().is(handledPayload) && handledPayload[S$.$keys][S$.$contains]("ids")) {
            handledPayload = transformers.getEnrichedPayload(handledPayload);
          }
          t157$2 = bind;
          t158$ = handledPayload;
          t159$ = ref;
          t157$2.callback(t158$, t159$);
        }
      }
    }
    replyEventName(ref) {
      return "chan_reply_" + dart.str(ref);
    }
    get isClosed() {
      return this[S$._state] === constants$0.ChannelStates.closed;
    }
    get isErrored() {
      return this[S$._state] === constants$0.ChannelStates.errored;
    }
    get isJoined() {
      return this[S$._state] === constants$0.ChannelStates.joined;
    }
    get isJoining() {
      return this[S$._state] === constants$0.ChannelStates.joining;
    }
    get isLeaving() {
      return this[S$._state] === constants$0.ChannelStates.leaving;
    }
    static _isEqual(obj1, obj2) {
      if (obj1[S$.$keys][S$.$length] !== obj2[S$.$keys][S$.$length]) {
        return false;
      }
      for (let k of obj1[S$.$keys]) {
        if (obj1[S$.$_get](k) != obj2[S$.$_get](k)) {
          return false;
        }
      }
      return true;
    }
  };
  (realtime_channel.RealtimeChannel.new = function(topic, socket, opts$) {
    let params = opts$ && 'params' in opts$ ? opts$.params : C[83] || CT.C83;
    this[S$._bindings] = new (T$.IdentityMapOfString$ListOfBinding()).new();
    this[S$._state] = constants$0.ChannelStates.closed;
    this[S$.joinedOnce] = false;
    this[S$.__RealtimeChannel_joinPush] = null;
    this[S$.__RealtimeChannel__rejoinTimer] = null;
    this[S$._pushBuffer] = T$.JSArrayOfPush().of([]);
    this[S$.__RealtimeChannel_presence] = null;
    this[S$.__RealtimeChannel_broadcastEndpointURL] = null;
    this[S$.topic] = topic;
    this[S$.socket] = socket;
    this[S$._timeout] = socket.timeout;
    this[S$.params] = params.toMap();
    this[S$.subTopic] = topic[S$.$replaceFirst](core.RegExp.new("^realtime:", {caseSensitive: false}), "");
    this.broadcastEndpointURL = this[S$._broadcastEndpointURL];
    this.joinPush = new push.Push.new(this, constants$0.ChannelEvents.join, this.params, this[S$._timeout]);
    this[S$._rejoinTimer] = new retry_timer.RetryTimer.new(dart.fn(() => this.rejoinUntilConnected(), T$.VoidTovoid()), this.socket.reconnectAfterMs);
    this.joinPush.receive("ok", dart.fn(_ => {
      this[S$._state] = constants$0.ChannelStates.joined;
      this[S$._rejoinTimer].reset();
      for (let pushEvent of this[S$._pushBuffer]) {
        pushEvent.send();
      }
      this[S$._pushBuffer] = T$.JSArrayOfPush().of([]);
    }, T$.dynamicTovoid()));
    this.onClose(dart.fn(() => {
      this[S$._rejoinTimer].reset();
      this.socket.log("channel", "close " + this.topic + " " + this.joinRef);
      this[S$._state] = constants$0.ChannelStates.closed;
      this.socket.remove(this);
    }, T$.VoidToNull()));
    this.onError(dart.fn(reason => {
      if (this.isLeaving || this.isClosed) {
        return;
      }
      this.socket.log("channel", "error " + this.topic, reason);
      this[S$._state] = constants$0.ChannelStates.errored;
      this[S$._rejoinTimer].scheduleTimeout();
    }, T$.StringNTovoid()));
    this.joinPush.receive("timeout", dart.fn(_ => {
      if (!this.isJoining) {
        return;
      }
      this.socket.log("channel", "timeout " + this.topic, this.joinPush.timeout);
      this[S$._state] = constants$0.ChannelStates.errored;
      this[S$._rejoinTimer].scheduleTimeout();
    }, T$.dynamicTovoid()));
    this.onEvents(constants$0['ChannelEventsExtended|eventName'](constants$0.ChannelEvents.reply), new realtime_channel.ChannelFilter.new(), dart.fn((payload, ref = null) => {
      this.trigger(this.replyEventName(T$.StringN().as(ref)), payload);
    }, T$.dynamicAnddynamicTovoid$1()));
    this.presence = new realtime_presence.RealtimePresence.new(this);
  }).prototype = realtime_channel.RealtimeChannel.prototype;
  dart.addTypeTests(realtime_channel.RealtimeChannel);
  dart.addTypeCaches(realtime_channel.RealtimeChannel);
  dart.setMethodSignature(realtime_channel.RealtimeChannel, () => ({
    __proto__: dart.getMethods(realtime_channel.RealtimeChannel.__proto__),
    rejoinUntilConnected: dart.fnType(dart.void, []),
    subscribe: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(dart.void, [core.String], [dart.nullable(core.Object)])), dart.nullable(core.Duration)]),
    presenceState: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    track: dart.fnType(async.Future$(realtime_channel.ChannelResponse), [core.Map$(core.String, dart.dynamic)], [core.Map$(core.String, dart.dynamic)]),
    untrack: dart.fnType(async.Future$(realtime_channel.ChannelResponse), [], [core.Map$(core.String, dart.dynamic)]),
    onClose: dart.fnType(dart.void, [core.Function]),
    onError: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(core.String)])]),
    on: dart.fnType(realtime_channel.RealtimeChannel, [realtime_channel.RealtimeListenTypes, realtime_channel.ChannelFilter, dart.fnType(dart.void, [dart.dynamic], [dart.dynamic])]),
    onEvents: dart.fnType(realtime_channel.RealtimeChannel, [core.String, realtime_channel.ChannelFilter, dart.fnType(dart.void, [dart.dynamic], [dart.dynamic])]),
    off: dart.fnType(realtime_channel.RealtimeChannel, [core.String, core.Map$(core.String, core.String)]),
    push: dart.fnType(push.Push, [constants$0.ChannelEvents, core.Map$(core.String, dart.dynamic)], [dart.nullable(core.Duration)]),
    send: dart.fnType(async.Future$(realtime_channel.ChannelResponse), [], {event: dart.nullable(core.String), opts: core.Map$(core.String, dart.dynamic)}, {payload: core.Map$(core.String, dart.dynamic), type: realtime_channel.RealtimeListenTypes}),
    updateJoinPayload: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    unsubscribe: dart.fnType(async.Future$(core.String), [], [dart.nullable(core.Duration)]),
    onMessage: dart.fnType(dart.dynamic, [core.String, dart.dynamic], [dart.nullable(core.String)]),
    isMember: dart.fnType(core.bool, [dart.nullable(core.String)]),
    rejoin: dart.fnType(dart.void, [], [dart.nullable(core.Duration)]),
    trigger: dart.fnType(dart.void, [core.String], [dart.dynamic, dart.nullable(core.String)]),
    replyEventName: dart.fnType(core.String, [dart.nullable(core.String)])
  }));
  dart.setStaticMethodSignature(realtime_channel.RealtimeChannel, () => ['_isEqual']);
  dart.setGetterSignature(realtime_channel.RealtimeChannel, () => ({
    __proto__: dart.getGetters(realtime_channel.RealtimeChannel.__proto__),
    joinPush: push.Push,
    [S$._rejoinTimer]: retry_timer.RetryTimer,
    presence: realtime_presence.RealtimePresence,
    broadcastEndpointURL: core.String,
    canPush: core.bool,
    [S$._broadcastEndpointURL]: core.String,
    joinRef: core.String,
    isClosed: core.bool,
    isErrored: core.bool,
    isJoined: core.bool,
    isJoining: core.bool,
    isLeaving: core.bool
  }));
  dart.setSetterSignature(realtime_channel.RealtimeChannel, () => ({
    __proto__: dart.getSetters(realtime_channel.RealtimeChannel.__proto__),
    joinPush: push.Push,
    [S$._rejoinTimer]: retry_timer.RetryTimer,
    presence: realtime_presence.RealtimePresence,
    broadcastEndpointURL: core.String
  }));
  dart.setLibraryUri(realtime_channel.RealtimeChannel, I[66]);
  dart.setFieldSignature(realtime_channel.RealtimeChannel, () => ({
    __proto__: dart.getFields(realtime_channel.RealtimeChannel.__proto__),
    [S$._bindings]: dart.finalFieldType(core.Map$(core.String, core.List$(realtime_channel.Binding))),
    [S$._timeout]: dart.finalFieldType(core.Duration),
    [S$._state]: dart.fieldType(constants$0.ChannelStates),
    joinedOnce: dart.fieldType(core.bool),
    [S$.__RealtimeChannel_joinPush]: dart.fieldType(dart.nullable(push.Push)),
    [S$.__RealtimeChannel__rejoinTimer]: dart.fieldType(dart.nullable(retry_timer.RetryTimer)),
    [S$._pushBuffer]: dart.fieldType(core.List$(push.Push)),
    [S$.__RealtimeChannel_presence]: dart.fieldType(dart.nullable(realtime_presence.RealtimePresence)),
    [S$.__RealtimeChannel_broadcastEndpointURL]: dart.fieldType(dart.nullable(core.String)),
    subTopic: dart.finalFieldType(core.String),
    topic: dart.finalFieldType(core.String),
    params: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    socket: dart.finalFieldType(realtime_client$.RealtimeClient)
  }));
  realtime_channel['ToType|toType'] = function ToType$124toType($this) {
    if ($this === realtime_channel.RealtimeListenTypes.postgresChanges) {
      return "postgres_changes";
    } else {
      return core['EnumName|get#name']($this);
    }
  };
  realtime_channel['ToType|get#toType'] = function ToType$124get$35toType($this) {
    return dart.fn(() => realtime_channel['ToType|toType']($this), T$.VoidToString());
  };
  realtime_client$.RealtimeCloseEvent = class RealtimeCloseEvent extends core.Object {
    get code() {
      return this[S$.code$2];
    }
    set code(value) {
      super.code = value;
    }
    get reason() {
      return this[S$.reason];
    }
    set reason(value) {
      super.reason = value;
    }
    static ['_#new#tearOff'](opts$) {
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      let reason = opts$ && 'reason' in opts$ ? opts$.reason : null;
      return new realtime_client$.RealtimeCloseEvent.new({code: code, reason: reason});
    }
  };
  (realtime_client$.RealtimeCloseEvent.new = function(opts$) {
    let code = opts$ && 'code' in opts$ ? opts$.code : null;
    let reason = opts$ && 'reason' in opts$ ? opts$.reason : null;
    this[S$.code$2] = code;
    this[S$.reason] = reason;
    ;
  }).prototype = realtime_client$.RealtimeCloseEvent.prototype;
  dart.addTypeTests(realtime_client$.RealtimeCloseEvent);
  dart.addTypeCaches(realtime_client$.RealtimeCloseEvent);
  dart.setLibraryUri(realtime_client$.RealtimeCloseEvent, I[67]);
  dart.setFieldSignature(realtime_client$.RealtimeCloseEvent, () => ({
    __proto__: dart.getFields(realtime_client$.RealtimeCloseEvent.__proto__),
    code: dart.finalFieldType(core.int),
    reason: dart.finalFieldType(dart.nullable(core.String))
  }));
  realtime_client$.RealtimeClient = class RealtimeClient extends core.Object {
    get accessToken() {
      return this[S$.accessToken$3];
    }
    set accessToken(value) {
      this[S$.accessToken$3] = value;
    }
    get channels() {
      return this[S$.channels];
    }
    set channels(value) {
      this[S$.channels] = value;
    }
    get endPoint() {
      return this[S$.endPoint];
    }
    set endPoint(value) {
      super.endPoint = value;
    }
    get headers() {
      return this[S$.headers$4];
    }
    set headers(value) {
      super.headers = value;
    }
    get params() {
      return this[S$.params$1];
    }
    set params(value) {
      super.params = value;
    }
    get timeout() {
      return this[S$.timeout];
    }
    set timeout(value) {
      super.timeout = value;
    }
    get transport() {
      return this[S$.transport];
    }
    set transport(value) {
      super.transport = value;
    }
    get httpClient() {
      return this[S$.httpClient$1];
    }
    set httpClient(value) {
      super.httpClient = value;
    }
    get heartbeatIntervalMs() {
      return this[S$.heartbeatIntervalMs];
    }
    set heartbeatIntervalMs(value) {
      this[S$.heartbeatIntervalMs] = value;
    }
    get heartbeatTimer() {
      return this[S$.heartbeatTimer];
    }
    set heartbeatTimer(value) {
      this[S$.heartbeatTimer] = value;
    }
    get pendingHeartbeatRef() {
      return this[S$.pendingHeartbeatRef];
    }
    set pendingHeartbeatRef(value) {
      this[S$.pendingHeartbeatRef] = value;
    }
    get ref() {
      return this[S$.ref];
    }
    set ref(value) {
      this[S$.ref] = value;
    }
    get logger() {
      return this[S$0.logger];
    }
    set logger(value) {
      this[S$0.logger] = value;
    }
    get conn() {
      return this[S$0.conn];
    }
    set conn(value) {
      this[S$0.conn] = value;
    }
    get sendBuffer() {
      return this[S$0.sendBuffer];
    }
    set sendBuffer(value) {
      this[S$0.sendBuffer] = value;
    }
    get stateChangeCallbacks() {
      return this[S$0.stateChangeCallbacks];
    }
    set stateChangeCallbacks(value) {
      this[S$0.stateChangeCallbacks] = value;
    }
    get longpollerTimeout() {
      return this[S$0.longpollerTimeout];
    }
    set longpollerTimeout(value) {
      this[S$0.longpollerTimeout] = value;
    }
    get connState() {
      return this[S$0.connState];
    }
    set connState(value) {
      this[S$0.connState] = value;
    }
    get eventsPerSecondLimitMs() {
      return this[S$0.eventsPerSecondLimitMs];
    }
    set eventsPerSecondLimitMs(value) {
      this[S$0.eventsPerSecondLimitMs] = value;
    }
    get inThrottle() {
      return this[S$0.inThrottle];
    }
    set inThrottle(value) {
      this[S$0.inThrottle] = value;
    }
    set reconnectTimer(reconnectTimer$35param) {
      this[S$0.__RealtimeClient_reconnectTimer] = reconnectTimer$35param;
    }
    get reconnectTimer() {
      let t160;
      t160 = this[S$0.__RealtimeClient_reconnectTimer];
      return t160 == null ? dart.throw(new _internal.LateError.fieldNI("reconnectTimer")) : t160;
    }
    get encode() {
      let t160;
      t160 = this[S$0.__RealtimeClient_encode];
      return t160 == null ? dart.throw(new _internal.LateError.fieldNI("encode")) : t160;
    }
    set encode(encode$35param) {
      this[S$0.__RealtimeClient_encode] = encode$35param;
    }
    get decode() {
      let t160;
      t160 = this[S$0.__RealtimeClient_decode];
      return t160 == null ? dart.throw(new _internal.LateError.fieldNI("decode")) : t160;
    }
    set decode(decode$35param) {
      this[S$0.__RealtimeClient_decode] = decode$35param;
    }
    get reconnectAfterMs() {
      let t160;
      t160 = this[S$0.__RealtimeClient_reconnectAfterMs];
      return t160 == null ? dart.throw(new _internal.LateError.fieldNI("reconnectAfterMs")) : t160;
    }
    set reconnectAfterMs(reconnectAfterMs$35param) {
      this[S$0.__RealtimeClient_reconnectAfterMs] = reconnectAfterMs$35param;
    }
    static ['_#new#tearOff'](endPoint, opts$) {
      let transport = opts$ && 'transport' in opts$ ? opts$.transport : null;
      let timeout = opts$ && 'timeout' in opts$ ? opts$.timeout : C[117] || CT.C117;
      let heartbeatIntervalMs = opts$ && 'heartbeatIntervalMs' in opts$ ? opts$.heartbeatIntervalMs : 30000;
      let logger = opts$ && 'logger' in opts$ ? opts$.logger : null;
      let encode = opts$ && 'encode' in opts$ ? opts$.encode : null;
      let decode = opts$ && 'decode' in opts$ ? opts$.decode : null;
      let reconnectAfterMs = opts$ && 'reconnectAfterMs' in opts$ ? opts$.reconnectAfterMs : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let params = opts$ && 'params' in opts$ ? opts$.params : C[203] || CT.C203;
      let longpollerTimeout = opts$ && 'longpollerTimeout' in opts$ ? opts$.longpollerTimeout : 20000;
      let logLevel = opts$ && 'logLevel' in opts$ ? opts$.logLevel : null;
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      return new realtime_client$.RealtimeClient.new(endPoint, {transport: transport, timeout: timeout, heartbeatIntervalMs: heartbeatIntervalMs, logger: logger, encode: encode, decode: decode, reconnectAfterMs: reconnectAfterMs, headers: headers, params: params, longpollerTimeout: longpollerTimeout, logLevel: logLevel, httpClient: httpClient});
    }
    connect() {
      return async.async(dart.void, (function* connect() {
        let t161, t160;
        if (this.conn != null) {
          return;
        }
        try {
          this.connState = constants$0.SocketStates.connecting;
          this.conn = (t160 = this.endPointURL, t161 = this.headers, this.transport(t160, t161));
          dart.nullCheck(this.conn).ready.catchError(dart.bind(this, S$0._onConnError));
          this.connState = constants$0.SocketStates.open;
          this[S$0._onConnOpen]();
          dart.nullCheck(this.conn).stream.timeout(new core.Duration.new({milliseconds: this.longpollerTimeout}));
          dart.nullCheck(this.conn).stream.listen(dart.fn(message => this.onConnMessage(core.String.as(message)), T$.dynamicTovoid()), {onError: dart.bind(this, S$0._onConnError), onDone: dart.fn(() => {
              if (this.connState !== constants$0.SocketStates.disconnected) {
                this.connState = constants$0.SocketStates.closed;
              }
              this[S$0._onConnClose]();
            }, T$.VoidTovoid())});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this[S$0._onConnError](e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    disconnect(opts$) {
      let t161, t161$;
      let code = opts$ && 'code' in opts$ ? opts$.code : null;
      let reason = opts$ && 'reason' in opts$ ? opts$.reason : null;
      let conn = this.conn;
      if (conn != null) {
        this.connState = constants$0.SocketStates.disconnected;
        if (code != null) {
          conn.sink.close(code, (t161 = reason, t161 == null ? "" : t161));
        } else {
          conn.sink.close();
        }
        this.conn = null;
        if (this.heartbeatTimer != null) {
          t161$ = this.heartbeatTimer;
          t161$ == null ? null : t161$.cancel();
        }
        this.reconnectTimer.reset();
      }
    }
    getChannels() {
      return this.channels;
    }
    removeChannel(channel) {
      return async.async(core.String, (function* removeChannel() {
        let status = (yield channel.unsubscribe());
        if (this.channels[S$.$isEmpty]) {
          this.disconnect();
        }
        return status;
      }).bind(this));
    }
    removeAllChannels() {
      return async.async(T$.ListOfString(), (function* removeAllChannels() {
        let values = (yield async.Future.wait(core.String, this.channels[S$.$map](T$.FutureOfString(), dart.fn(channel => channel.unsubscribe(), T$.RealtimeChannelToFutureOfString()))));
        this.disconnect();
        return values;
      }).bind(this));
    }
    log(kind = null, msg = null, data = null) {
      let t161;
      t161 = this.logger;
      t161 == null ? null : t161(kind, msg, data);
    }
    onOpen(callback) {
      dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("open"))[S$.$add](callback);
    }
    onClose(callback) {
      dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("close"))[S$.$add](callback);
    }
    onError(callback) {
      dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("error"))[S$.$add](callback);
    }
    onMessage(callback) {
      dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("message"))[S$.$add](callback);
    }
    get connectionState() {
      switch (this.connState) {
        case C[205] || CT.C205:
          {
            return "connecting";
          }
        case C[206] || CT.C206:
          {
            return "open";
          }
        case C[207] || CT.C207:
          {
            return "closing";
          }
        case C[208] || CT.C208:
          {
            return "disconnected";
          }
        case C[209] || CT.C209:
        default:
          {
            return "closed";
          }
      }
    }
    get isConnected() {
      return this.connectionState === "open";
    }
    remove(channel) {
      this.channels = this.channels[S$.$where](dart.fn(c => c.joinRef !== channel.joinRef, T$.RealtimeChannelTobool()))[S$.$toList]();
    }
    channel(topic, params = C[83] || CT.C83) {
      let chan = new realtime_channel.RealtimeChannel.new("realtime:" + topic, this, {params: params});
      this.channels[S$.$add](chan);
      return chan;
    }
    push(message) {
      let event = message.event;
      const callback = () => {
        let t161;
        t161 = message.toJson();
        this.encode(t161, dart.fn(result => {
          let t162;
          t162 = this.conn;
          return t162 == null ? null : t162.sink.add(result);
        }, T$.StringTovoid()));
      };
      dart.fn(callback, T$.VoidTovoid());
      this.log("push", message.topic + " " + dart.str(message.event) + " (" + message.ref + ")", message.payload);
      if (this.isConnected) {
        if (T$.JSArrayOfChannelEvents().of([constants$0.ChannelEvents.broadcast, constants$0.ChannelEvents.presence, constants$0.ChannelEvents.postgresChanges])[S$.$contains](event)) {
          let isThrottled = this[S$0._throttle](callback)();
          if (isThrottled) {
            return "rate limited";
          }
        } else {
          callback();
        }
      } else {
        this.sendBuffer[S$.$add](callback);
      }
      return null;
    }
    onConnMessage(rawMessage) {
      let t161;
      t161 = rawMessage;
      this.decode(t161, dart.fn(msg => {
        let t162;
        let topic = core.String.as(dart.dsend(msg, '_get', ["topic"]));
        let event = core.String.as(dart.dsend(msg, '_get', ["event"]));
        let payload = dart.dsend(msg, '_get', ["payload"]);
        let ref = T$.StringN().as(dart.dsend(msg, '_get', ["ref"]));
        if (ref != null && ref == this.pendingHeartbeatRef) {
          this.pendingHeartbeatRef = null;
        }
        this.log("receive", dart.str((t162 = dart.dsend(payload, '_get', ["status"]), t162 == null ? "" : t162)) + " " + topic + " " + event + " " + (ref != null ? "(" + dart.str(ref) + ")" : ""), payload);
        this.channels[S$.$where](dart.fn(channel => channel.isMember(topic), T$.RealtimeChannelTobool()))[S$.$forEach](dart.fn(channel => channel.trigger(event, payload, ref), T$.RealtimeChannelTovoid()));
        for (let callback of dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("message"))) {
          dart.dcall(callback, [msg]);
        }
      }, T$.dynamicTovoid()));
    }
    get endPointURL() {
      let params = T$.LinkedHashMapOfString$String().from(this.params);
      params[S$.$_set]("vsn", "1.0.0");
      return this[S$0._appendParams](this.endPoint, params);
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef < 0) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref[S$.$toString]();
    }
    setAuth(token) {
      this.accessToken = token;
      for (let channel of this.channels) {
        if (token != null) {
          channel.updateJoinPayload(new (T$.IdentityMapOfString$dynamic()).from(["user_token", token]));
        }
        if (channel.joinedOnce && channel.isJoined) {
          channel.push(constants$0.ChannelEvents.accessToken, new (T$.IdentityMapOfString$dynamic()).from(["access_token", token]));
        }
      }
    }
    leaveOpenTopic(topic) {
      let dupChannel = iterable_extensions['IterableExtension|firstWhereOrNull'](realtime_channel.RealtimeChannel, this.channels, dart.fn(c => c.topic === topic && (c.isJoined || c.isJoining), T$.RealtimeChannelTobool()));
      if (dupChannel != null) {
        this.log("transport", "leaving duplicate topic \"" + topic + "\"");
        dupChannel.unsubscribe();
      }
    }
    [S$0._onConnOpen]() {
      this.log("transport", "connected to " + this.endPointURL);
      this[S$0._flushSendBuffer]();
      this.reconnectTimer.reset();
      if (this.heartbeatTimer != null) dart.nullCheck(this.heartbeatTimer).cancel();
      this.heartbeatTimer = async.Timer.periodic(new core.Duration.new({milliseconds: this.heartbeatIntervalMs}), dart.fn(t => this.sendHeartbeat(), T$.TimerTovoid()));
      for (let callback of dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("open"))) {
        dart.dcall(callback, []);
      }
    }
    [S$0._onConnClose]() {
      let t161, t161$;
      let statusCode = (t161 = this.conn, t161 == null ? null : t161.closeCode);
      let event = null;
      if (statusCode != null) {
        event = new realtime_client$.RealtimeCloseEvent.new({code: statusCode, reason: (t161$ = this.conn, t161$ == null ? null : t161$.closeReason)});
      }
      this.log("transport", "close", event);
      if (this.connState === constants$0.SocketStates.closed) {
        this[S$0._triggerChanError]();
        this.reconnectTimer.scheduleTimeout();
      }
      if (this.heartbeatTimer != null) dart.nullCheck(this.heartbeatTimer).cancel();
      for (let callback of dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("close"))) {
        dart.dcall(callback, [event]);
      }
    }
    [S$0._onConnError](error) {
      this.log("transport", dart.toString(error));
      this[S$0._triggerChanError]();
      for (let callback of dart.nullCheck(this.stateChangeCallbacks[S$.$_get]("error"))) {
        dart.dcall(callback, [error]);
      }
    }
    [S$0._triggerChanError]() {
      for (let channel of this.channels) {
        channel.trigger(constants$0['ChannelEventsExtended|eventName'](constants$0.ChannelEvents.error));
      }
    }
    [S$0._appendParams](url, params) {
      if (params[S$.$keys][S$.$isEmpty]) {
        return url;
      }
      let endpoint = core.Uri.parse(url);
      endpoint = endpoint.replace({queryParameters: (() => {
          let t161 = T$.LinkedHashMapOfString$dynamic().of(endpoint.queryParameters);
          t161[S$.$addAll](params);
          return t161;
        })()});
      return endpoint.toString();
    }
    [S$0._flushSendBuffer]() {
      if (this.isConnected && this.sendBuffer[S$.$isNotEmpty]) {
        for (let callback of this.sendBuffer) {
          dart.dcall(callback, []);
        }
        this.sendBuffer = [];
      }
    }
    sendHeartbeat() {
      let t162;
      if (!this.isConnected) {
        return;
      }
      if (this.pendingHeartbeatRef != null) {
        this.pendingHeartbeatRef = null;
        this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        t162 = this.conn;
        t162 == null ? null : t162.sink.close(1000, "heartbeat timeout");
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push(new message.Message.new({topic: "phoenix", event: constants$0.ChannelEvents.heartbeat, payload: new _js_helper.LinkedMap.new(), ref: dart.nullCheck(this.pendingHeartbeatRef)}));
      this.setAuth(this.accessToken);
    }
    [S$0._throttle](callback, eventsPerSecondLimit = null) {
      return dart.fn(() => {
        let t162;
        if (this.inThrottle) return true;
        dart.dcall(callback, []);
        this.inThrottle = true;
        async.Timer.new(new core.Duration.new({milliseconds: (t162 = eventsPerSecondLimit, t162 == null ? this.eventsPerSecondLimitMs : t162)}), dart.fn(() => this.inThrottle = false, T$.VoidTovoid()));
        return false;
      }, T$.VoidTobool());
    }
  };
  (realtime_client$.RealtimeClient.new = function(endPoint, opts$) {
    let t160, t160$, t160$0, t160$1, t160$2, t160$3;
    let transport = opts$ && 'transport' in opts$ ? opts$.transport : null;
    let timeout = opts$ && 'timeout' in opts$ ? opts$.timeout : C[117] || CT.C117;
    let heartbeatIntervalMs = opts$ && 'heartbeatIntervalMs' in opts$ ? opts$.heartbeatIntervalMs : 30000;
    let logger = opts$ && 'logger' in opts$ ? opts$.logger : null;
    let encode = opts$ && 'encode' in opts$ ? opts$.encode : null;
    let decode = opts$ && 'decode' in opts$ ? opts$.decode : null;
    let reconnectAfterMs = opts$ && 'reconnectAfterMs' in opts$ ? opts$.reconnectAfterMs : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let params = opts$ && 'params' in opts$ ? opts$.params : C[203] || CT.C203;
    let longpollerTimeout = opts$ && 'longpollerTimeout' in opts$ ? opts$.longpollerTimeout : 20000;
    let logLevel = opts$ && 'logLevel' in opts$ ? opts$.logLevel : null;
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    this[S$.accessToken$3] = null;
    this[S$.channels] = T$.JSArrayOfRealtimeChannel().of([]);
    this[S$.heartbeatIntervalMs] = 30000;
    this[S$.heartbeatTimer] = null;
    this[S$.pendingHeartbeatRef] = null;
    this[S$.ref] = 0;
    this[S$0.__RealtimeClient_reconnectTimer] = null;
    this[S$0.__RealtimeClient_encode] = null;
    this[S$0.__RealtimeClient_decode] = null;
    this[S$0.__RealtimeClient_reconnectAfterMs] = null;
    this[S$0.conn] = null;
    this[S$0.sendBuffer] = [];
    this[S$0.stateChangeCallbacks] = new (T$.IdentityMapOfString$ListOfFunction()).from(["open", T$.JSArrayOfFunction().of([]), "close", T$.JSArrayOfFunction().of([]), "error", T$.JSArrayOfFunction().of([]), "message", T$.JSArrayOfFunction().of([])]);
    this[S$0.longpollerTimeout] = 20000;
    this[S$0.connState] = null;
    this[S$0.eventsPerSecondLimitMs] = 100;
    this[S$0.inThrottle] = false;
    this[S$.timeout] = timeout;
    this[S$.heartbeatIntervalMs] = heartbeatIntervalMs;
    this[S$0.logger] = logger;
    this[S$.params$1] = params;
    this[S$0.longpollerTimeout] = longpollerTimeout;
    this[S$.httpClient$1] = httpClient;
    this[S$.endPoint] = core.Uri.parse(endPoint + "/" + "websocket").replace({queryParameters: logLevel == null ? null : new (T$.IdentityMapOfString$dynamic()).from(["log_level", core['EnumName|get#name'](logLevel)])}).toString();
    this[S$.headers$4] = (() => {
      let t159 = T$.LinkedHashMapOfString$String().of(constants$0.Constants.defaultHeaders);
      if (headers != null) t159[S$.$addAll](headers);
      return t159;
    })();
    this[S$.transport] = (t160 = transport, t160 == null ? C[204] || CT.C204 : t160);
    let eventsPerSecond = this.params[S$.$_get]("eventsPerSecond");
    if (eventsPerSecond != null) {
      this.eventsPerSecondLimitMs = (1000 / core.int.parse(core.String.as(eventsPerSecond)))[S$0.$floor]();
    }
    let customJWT = (t160$ = this.headers[S$.$_get]("Authorization"), t160$ == null ? null : t160$[S$.$split](" ")[S$.$last]);
    this.accessToken = T$.StringN().as((t160$0 = customJWT, t160$0 == null ? this.params[S$.$_get]("apikey") : t160$0));
    this.reconnectAfterMs = (t160$1 = reconnectAfterMs, t160$1 == null ? retry_timer.RetryTimer.createRetryFunction() : t160$1);
    this.encode = (t160$2 = encode, t160$2 == null ? dart.fn((payload, callback) => callback(convert.json.encode(payload)), T$.dynamicAndFnTovoid()) : t160$2);
    this.decode = (t160$3 = decode, t160$3 == null ? dart.fn((payload, callback) => callback(convert.json.decode(payload)), T$.StringAndFnTovoid()) : t160$3);
    this.reconnectTimer = new retry_timer.RetryTimer.new(dart.fn(() => {
      this.disconnect();
      this.connect();
    }, T$.VoidTovoid()), this.reconnectAfterMs);
  }).prototype = realtime_client$.RealtimeClient.prototype;
  dart.addTypeTests(realtime_client$.RealtimeClient);
  dart.addTypeCaches(realtime_client$.RealtimeClient);
  dart.setMethodSignature(realtime_client$.RealtimeClient, () => ({
    __proto__: dart.getMethods(realtime_client$.RealtimeClient.__proto__),
    connect: dart.fnType(dart.void, []),
    disconnect: dart.fnType(dart.void, [], {code: dart.nullable(core.int), reason: dart.nullable(core.String)}, {}),
    getChannels: dart.fnType(core.List$(realtime_channel.RealtimeChannel), []),
    removeChannel: dart.fnType(async.Future$(core.String), [realtime_channel.RealtimeChannel]),
    removeAllChannels: dart.fnType(async.Future$(core.List$(core.String)), []),
    log: dart.fnType(dart.void, [], [dart.nullable(core.String), dart.nullable(core.String), dart.dynamic]),
    onOpen: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    onClose: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.dynamic])]),
    onError: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.dynamic])]),
    onMessage: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.dynamic])]),
    remove: dart.fnType(dart.void, [realtime_channel.RealtimeChannel]),
    channel: dart.fnType(realtime_channel.RealtimeChannel, [core.String], [realtime_channel.RealtimeChannelConfig]),
    push: dart.fnType(dart.nullable(core.String), [message.Message]),
    onConnMessage: dart.fnType(dart.void, [core.String]),
    makeRef: dart.fnType(core.String, []),
    setAuth: dart.fnType(dart.void, [dart.nullable(core.String)]),
    leaveOpenTopic: dart.fnType(dart.void, [core.String]),
    [S$0._onConnOpen]: dart.fnType(dart.void, []),
    [S$0._onConnClose]: dart.fnType(dart.void, []),
    [S$0._onConnError]: dart.fnType(dart.void, [dart.dynamic]),
    [S$0._triggerChanError]: dart.fnType(dart.void, []),
    [S$0._appendParams]: dart.fnType(core.String, [core.String, core.Map$(core.String, core.String)]),
    [S$0._flushSendBuffer]: dart.fnType(dart.void, []),
    sendHeartbeat: dart.fnType(dart.void, []),
    [S$0._throttle]: dart.fnType(dart.fnType(core.bool, []), [core.Function], [dart.nullable(core.int)])
  }));
  dart.setGetterSignature(realtime_client$.RealtimeClient, () => ({
    __proto__: dart.getGetters(realtime_client$.RealtimeClient.__proto__),
    reconnectTimer: retry_timer.RetryTimer,
    encode: dart.fnType(dart.void, [dart.dynamic, dart.fnType(dart.void, [core.String])]),
    decode: dart.fnType(dart.void, [core.String, dart.fnType(dart.void, [dart.dynamic])]),
    reconnectAfterMs: dart.fnType(core.int, [core.int]),
    connectionState: core.String,
    isConnected: core.bool,
    endPointURL: core.String
  }));
  dart.setSetterSignature(realtime_client$.RealtimeClient, () => ({
    __proto__: dart.getSetters(realtime_client$.RealtimeClient.__proto__),
    reconnectTimer: retry_timer.RetryTimer,
    encode: dart.fnType(dart.void, [dart.dynamic, dart.fnType(dart.void, [core.String])]),
    decode: dart.fnType(dart.void, [core.String, dart.fnType(dart.void, [dart.dynamic])]),
    reconnectAfterMs: dart.fnType(core.int, [core.int])
  }));
  dart.setLibraryUri(realtime_client$.RealtimeClient, I[67]);
  dart.setFieldSignature(realtime_client$.RealtimeClient, () => ({
    __proto__: dart.getFields(realtime_client$.RealtimeClient.__proto__),
    accessToken: dart.fieldType(dart.nullable(core.String)),
    channels: dart.fieldType(core.List$(realtime_channel.RealtimeChannel)),
    endPoint: dart.finalFieldType(core.String),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    params: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
    timeout: dart.finalFieldType(core.Duration),
    transport: dart.finalFieldType(dart.fnType(channel$.WebSocketChannel, [core.String, core.Map$(core.String, core.String)])),
    httpClient: dart.finalFieldType(dart.nullable(client$.Client)),
    heartbeatIntervalMs: dart.fieldType(core.int),
    heartbeatTimer: dart.fieldType(dart.nullable(async.Timer)),
    pendingHeartbeatRef: dart.fieldType(dart.nullable(core.String)),
    ref: dart.fieldType(core.int),
    [S$0.__RealtimeClient_reconnectTimer]: dart.fieldType(dart.nullable(retry_timer.RetryTimer)),
    logger: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.String), dart.nullable(core.String), dart.dynamic]))),
    [S$0.__RealtimeClient_encode]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.dynamic, dart.fnType(dart.void, [core.String])]))),
    [S$0.__RealtimeClient_decode]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String, dart.fnType(dart.void, [dart.dynamic])]))),
    [S$0.__RealtimeClient_reconnectAfterMs]: dart.fieldType(dart.nullable(dart.fnType(core.int, [core.int]))),
    conn: dart.fieldType(dart.nullable(channel$.WebSocketChannel)),
    sendBuffer: dart.fieldType(core.List),
    stateChangeCallbacks: dart.fieldType(core.Map$(core.String, core.List$(core.Function))),
    longpollerTimeout: dart.fieldType(core.int),
    connState: dart.fieldType(dart.nullable(constants$0.SocketStates)),
    eventsPerSecondLimitMs: dart.fieldType(core.int),
    inThrottle: dart.fieldType(core.bool)
  }));
  realtime_presence.Presence = class Presence extends core.Object {
    get presenceRef() {
      return this[S$0.presenceRef];
    }
    set presenceRef(value) {
      super.presenceRef = value;
    }
    get payload() {
      return this[S$0.payload];
    }
    set payload(value) {
      super.payload = value;
    }
    static ['_#new#tearOff'](map) {
      return new realtime_presence.Presence.new(map);
    }
    deepClone() {
      return new realtime_presence.Presence.new((() => {
        let t162 = new (T$.IdentityMapOfString$dynamic()).new();
        t162[S$.$_set]("presence_ref", this.presenceRef);
        t162[S$.$addAll](this.payload);
        return t162;
      })());
    }
  };
  (realtime_presence.Presence.new = function(map) {
    let t162;
    this[S$0.presenceRef] = core.String.as(map[S$.$_get]("presence_ref"));
    this[S$0.payload] = (t162 = map, (() => {
      t162[S$.$remove]("presence_ref");
      return t162;
    })());
    ;
  }).prototype = realtime_presence.Presence.prototype;
  dart.addTypeTests(realtime_presence.Presence);
  dart.addTypeCaches(realtime_presence.Presence);
  dart.setMethodSignature(realtime_presence.Presence, () => ({
    __proto__: dart.getMethods(realtime_presence.Presence.__proto__),
    deepClone: dart.fnType(realtime_presence.Presence, [])
  }));
  dart.setLibraryUri(realtime_presence.Presence, I[68]);
  dart.setFieldSignature(realtime_presence.Presence, () => ({
    __proto__: dart.getFields(realtime_presence.Presence.__proto__),
    presenceRef: dart.finalFieldType(core.String),
    payload: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  realtime_presence.PresenceOpts = class PresenceOpts extends core.Object {
    get events() {
      return this[S$0.events];
    }
    set events(value) {
      super.events = value;
    }
    static ['_#new#tearOff'](opts$) {
      let events = opts$ && 'events' in opts$ ? opts$.events : null;
      return new realtime_presence.PresenceOpts.new({events: events});
    }
  };
  (realtime_presence.PresenceOpts.new = function(opts$) {
    let events = opts$ && 'events' in opts$ ? opts$.events : null;
    this[S$0.events] = events;
    ;
  }).prototype = realtime_presence.PresenceOpts.prototype;
  dart.addTypeTests(realtime_presence.PresenceOpts);
  dart.addTypeCaches(realtime_presence.PresenceOpts);
  dart.setLibraryUri(realtime_presence.PresenceOpts, I[68]);
  dart.setFieldSignature(realtime_presence.PresenceOpts, () => ({
    __proto__: dart.getFields(realtime_presence.PresenceOpts.__proto__),
    events: dart.finalFieldType(realtime_presence.PresenceEvents)
  }));
  realtime_presence.PresenceEvents = class PresenceEvents extends core.Object {
    get state() {
      return this[S$0.state$2];
    }
    set state(value) {
      super.state = value;
    }
    get diff() {
      return this[S$0.diff];
    }
    set diff(value) {
      super.diff = value;
    }
    static ['_#new#tearOff'](opts$) {
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      let diff = opts$ && 'diff' in opts$ ? opts$.diff : null;
      return new realtime_presence.PresenceEvents.new({state: state, diff: diff});
    }
  };
  (realtime_presence.PresenceEvents.new = function(opts$) {
    let state = opts$ && 'state' in opts$ ? opts$.state : null;
    let diff = opts$ && 'diff' in opts$ ? opts$.diff : null;
    this[S$0.state$2] = state;
    this[S$0.diff] = diff;
    ;
  }).prototype = realtime_presence.PresenceEvents.prototype;
  dart.addTypeTests(realtime_presence.PresenceEvents);
  dart.addTypeCaches(realtime_presence.PresenceEvents);
  dart.setLibraryUri(realtime_presence.PresenceEvents, I[68]);
  dart.setFieldSignature(realtime_presence.PresenceEvents, () => ({
    __proto__: dart.getFields(realtime_presence.PresenceEvents.__proto__),
    state: dart.finalFieldType(core.String),
    diff: dart.finalFieldType(core.String)
  }));
  realtime_presence.RealtimePresence = class RealtimePresence extends core.Object {
    get state() {
      return this[S$0.state$3];
    }
    set state(value) {
      this[S$0.state$3] = value;
    }
    get pendingDiffs() {
      return this[S$0.pendingDiffs];
    }
    set pendingDiffs(value) {
      this[S$0.pendingDiffs] = value;
    }
    get joinRef() {
      return this[S$0.joinRef];
    }
    set joinRef(value) {
      this[S$0.joinRef] = value;
    }
    get caller() {
      return this[S$0.caller];
    }
    set caller(value) {
      this[S$0.caller] = value;
    }
    get channel() {
      return this[S$0.channel];
    }
    set channel(value) {
      super.channel = value;
    }
    static ['_#new#tearOff'](channel, opts = null) {
      return new realtime_presence.RealtimePresence.new(channel, opts);
    }
    static syncState(currentState, newState, onJoin = null, onLeave = null) {
      let state = realtime_presence.RealtimePresence._cloneDeep(currentState);
      let transformedState = realtime_presence.RealtimePresence._transformState(newState);
      let joins = new (T$.IdentityMapOfString$dynamic()).new();
      let leaves = new (T$.IdentityMapOfString$dynamic()).new();
      realtime_presence.RealtimePresence._map(core.Null, state, dart.fn((key, presence) => {
        if (!transformedState[S$.$containsKey](key)) {
          leaves[S$.$_set](key, presence);
        }
      }, T$.StringAnddynamicToNull()));
      realtime_presence.RealtimePresence._map(core.Null, transformedState, dart.fn((key, newPresences) => {
        let currentPresences = state[S$.$_get](key);
        if (currentPresences != null) {
          let newPresenceRefs = core.List.as(newPresences)[S$.$map](core.String, dart.fn(m => core.String.as(dart.dload(m, 'presenceRef')), T$.dynamicToString()))[S$.$toList]();
          let curPresenceRefs = currentPresences[S$.$map](core.String, dart.fn(m => m.presenceRef, T$.PresenceToString()))[S$.$toList]();
          let joinedPresences = T$.ListOfPresence().as(newPresences[S$.$where](dart.fn(m => !curPresenceRefs[S$.$contains](dart.dload(m, 'presenceRef')), T$.dynamicTobool()))[S$.$toList]());
          let leftPresences = currentPresences[S$.$where](dart.fn(m => !newPresenceRefs[S$.$contains](m.presenceRef), T$.PresenceTobool()))[S$.$toList]();
          if (joinedPresences[S$.$isNotEmpty]) {
            joins[S$.$_set](key, joinedPresences);
          }
          if (leftPresences[S$.$isNotEmpty]) {
            leaves[S$.$_set](key, leftPresences);
          }
        } else {
          joins[S$.$_set](key, newPresences);
        }
      }, T$.StringAnddynamicToNull()));
      return realtime_presence.RealtimePresence.syncDiff(state, new (T$.IdentityMapOfString$dynamic()).from(["joins", joins, "leaves", leaves]), onJoin, onLeave);
    }
    static syncDiff(state, diff, onJoin = null, onLeave = null) {
      let joins = realtime_presence.RealtimePresence._transformState(T$.MapOfString$dynamic().as(diff[S$.$_get]("joins")));
      let leaves = realtime_presence.RealtimePresence._transformState(T$.MapOfString$dynamic().as(diff[S$.$_get]("leaves")));
      onJoin == null ? onJoin = dart.fn((_, __, ___) => new _js_helper.LinkedMap.new(), T$.StringNAnddynamicAnddynamicTovoid()) : null;
      onLeave == null ? onLeave = dart.fn((_, __, ___) => new _js_helper.LinkedMap.new(), T$.StringNAnddynamicAnddynamicTovoid()) : null;
      realtime_presence.RealtimePresence._map(core.Null, joins, dart.fn((key, newPresences) => {
        let t163;
        let currentPresences = (t163 = state[S$.$_get](key), t163 == null ? T$.JSArrayOfPresence().of([]) : t163);
        state[S$.$_set](key, core.List.as(newPresences)[S$.$map](realtime_presence.Presence, dart.fn(presence => realtime_presence.Presence.as(dart.dsend(presence, 'deepClone', [])), T$.dynamicToPresence()))[S$.$toList]());
        if (currentPresences[S$.$isNotEmpty]) {
          let joinedPresenceRefs = dart.nullCheck(state[S$.$_get](key))[S$.$map](core.String, dart.fn(m => m.presenceRef, T$.PresenceToString()))[S$.$toList]();
          let curPresences = currentPresences[S$.$where](dart.fn(m => !joinedPresenceRefs[S$.$contains](m.presenceRef), T$.PresenceTobool()))[S$.$toList]();
          dart.nullCheck(state[S$.$_get](key))[S$0.$insertAll](0, curPresences);
        }
        dart.nullCheck(onJoin)(key, currentPresences, newPresences);
      }, T$.StringAnddynamicToNull()));
      realtime_presence.RealtimePresence._map(core.Null, leaves, dart.fn((key, leftPresences) => {
        let currentPresences = state[S$.$_get](key);
        if (currentPresences == null) return;
        let presenceRefsToRemove = core.List.as(leftPresences)[S$.$map](core.String, dart.fn(leftPresence => core.String.as(dart.dload(leftPresence, 'presenceRef')), T$.dynamicToString()))[S$.$toList]();
        currentPresences = currentPresences[S$.$where](dart.fn(presence => !presenceRefsToRemove[S$.$contains](presence.presenceRef), T$.PresenceTobool()))[S$.$toList]();
        state[S$.$_set](key, currentPresences);
        dart.nullCheck(onLeave)(key, currentPresences, leftPresences);
        if (currentPresences[S$.$isEmpty]) {
          state[S$.$remove](key);
        }
      }, T$.StringAnddynamicToNull()));
      return state;
    }
    static _list(T, presences, chooser = null) {
      chooser == null ? chooser = dart.fn((key, pres) => T.as(pres), dart.fnType(T, [core.String, dart.dynamic])) : null;
      return realtime_presence.RealtimePresence._map(T, presences, dart.fn((key, presences) => dart.nullCheck(chooser)(key, presences), dart.fnType(T, [core.String, dart.dynamic])));
    }
    static _map(T, obj, func) {
      return obj[S$.$keys][S$.$map](T, dart.fn(key => func(key, obj[S$.$_get](key)), dart.fnType(T, [core.String])))[S$.$toList]();
    }
    static _transformState(state) {
      let newStateMap = new (T$.IdentityMapOfString$ListOfPresence()).new();
      for (let key of state[S$.$keys]) {
        let presences = dart.nullCheck(state[S$.$_get](key));
        if (core.Map.is(presences)) {
          newStateMap[S$.$_set](key, core.List.as(presences[S$.$_get]("metas"))[S$.$map](realtime_presence.Presence, dart.fn(presence => {
            dart.dsend(presence, '_set', ["presence_ref", core.String.as(dart.dsend(presence, '_get', ["phx_ref"]))]);
            dart.dsend(presence, 'remove', ["phx_ref"]);
            dart.dsend(presence, 'remove', ["phx_ref_prev"]);
            return new realtime_presence.Presence.new(T$.MapOfString$dynamic().as(presence));
          }, T$.dynamicToPresence()))[S$.$toList]());
        } else {
          newStateMap[S$.$_set](key, T$.ListOfPresence().as(presences));
        }
      }
      return newStateMap;
    }
    static _cloneDeep(obj) {
      return T$.MapOfString$ListOfPresence().fromEntries(obj[S$0.$entries][S$.$map](T$.MapEntryOfString$ListOfPresence(), dart.fn(entry => new (T$.MapEntryOfString$ListOfPresence()).__(entry.key, entry.value[S$.$map](realtime_presence.Presence, dart.fn(presence => presence.deepClone(), T$.PresenceToPresence()))[S$.$toList]()), T$.MapEntryOfString$ListOfPresenceToMapEntryOfString$ListOfPresence())));
    }
    onJoin(callback) {
      this.caller[S$.$_set]("onJoin", callback);
    }
    onLeave(callback) {
      this.caller[S$.$_set]("onLeave", callback);
    }
    onSync(callback) {
      this.caller[S$.$_set]("onSync", callback);
    }
    list(T, by = null) {
      return realtime_presence.RealtimePresence._list(T, this.state, by);
    }
    inPendingSyncState() {
      return this.joinRef == null || this.joinRef !== this.channel.joinRef;
    }
  };
  (realtime_presence.RealtimePresence.new = function(channel, opts = null) {
    let t163, t163$;
    this[S$0.state$3] = new (T$.IdentityMapOfString$ListOfPresence()).new();
    this[S$0.pendingDiffs] = T$.JSArrayOfMapOfString$dynamic().of([]);
    this[S$0.joinRef] = null;
    this[S$0.caller] = new (T$.IdentityMapOfString$dynamic()).from(["onJoin", dart.fn((_, __, ___) => {
      }, T$.dynamicAnddynamicAnddynamicToNull()), "onLeave", dart.fn((_, __, ___) => {
      }, T$.dynamicAnddynamicAnddynamicToNull()), "onSync", dart.fn(() => {
      }, T$.VoidToNull())]);
    this[S$0.channel] = channel;
    let events = (t163$ = (t163 = opts, t163 == null ? null : t163.events), t163$ == null ? new realtime_presence.PresenceEvents.new({state: "presence_state", diff: "presence_diff"}) : t163$);
    this.channel.onEvents(events.state, new realtime_channel.ChannelFilter.new(), dart.fn((newState, _ = null) => {
      let onJoin = this.caller[S$.$_get]("onJoin");
      let onLeave = this.caller[S$.$_get]("onLeave");
      let onSync = this.caller[S$.$_get]("onSync");
      this.joinRef = this.channel.joinRef;
      this.state = realtime_presence.RealtimePresence.syncState(this.state, T$.MapOfString$dynamic().as(newState), T$.StringNAnddynamicAnddynamicToNvoid().as(onJoin), T$.StringNAnddynamicAnddynamicToNvoid().as(onLeave));
      for (let diff of this.pendingDiffs) {
        this.state = realtime_presence.RealtimePresence.syncDiff(this.state, diff, T$.StringNAnddynamicAnddynamicToNvoid().as(onJoin), T$.StringNAnddynamicAnddynamicToNvoid().as(onLeave));
      }
      this.pendingDiffs = T$.JSArrayOfMapOfString$dynamic().of([]);
      dart.dcall(onSync, []);
    }, T$.dynamicAnddynamicTovoid$1()));
    this.channel.onEvents(events.diff, new realtime_channel.ChannelFilter.new(), dart.fn((diff, _ = null) => {
      let onJoin = this.caller[S$.$_get]("onJoin");
      let onLeave = this.caller[S$.$_get]("onLeave");
      let onSync = this.caller[S$.$_get]("onSync");
      if (this.inPendingSyncState()) {
        this.pendingDiffs[S$.$add](T$.MapOfString$dynamic().as(diff));
      } else {
        this.state = realtime_presence.RealtimePresence.syncDiff(this.state, T$.MapOfString$dynamic().as(diff), T$.StringNAnddynamicAnddynamicToNvoid().as(onJoin), T$.StringNAnddynamicAnddynamicToNvoid().as(onLeave));
        dart.dcall(onSync, []);
      }
    }, T$.dynamicAnddynamicTovoid$1()));
    this.onJoin(dart.fn((key, currentPresences, newPresences) => {
      this.channel.trigger("presence", new (T$.IdentityMapOfString$dynamic()).from(["event", "join", "key", key, "currentPresences", currentPresences, "newPresences", newPresences]));
    }, T$.StringNAnddynamicAnddynamicTovoid()));
    this.onLeave(dart.fn((key, currentPresences, leftPresences) => {
      this.channel.trigger("presence", new (T$.IdentityMapOfString$dynamic()).from(["event", "leave", "key", key, "currentPresences", currentPresences, "leftPresences", leftPresences]));
    }, T$.StringNAnddynamicAnddynamicTovoid()));
    this.onSync(dart.fn(() => this.channel.trigger("presence", new (T$.IdentityMapOfString$String()).from(["event", "sync"])), T$.VoidTovoid()));
  }).prototype = realtime_presence.RealtimePresence.prototype;
  dart.addTypeTests(realtime_presence.RealtimePresence);
  dart.addTypeCaches(realtime_presence.RealtimePresence);
  dart.setMethodSignature(realtime_presence.RealtimePresence, () => ({
    __proto__: dart.getMethods(realtime_presence.RealtimePresence.__proto__),
    onJoin: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(core.String), dart.dynamic, dart.dynamic])]),
    onLeave: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(core.String), dart.dynamic, dart.dynamic])]),
    onSync: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    list: dart.gFnType(T => [core.List$(T), [], [dart.nullable(dart.fnType(T, [core.String, dart.dynamic]))]], T => [dart.nullable(core.Object)]),
    inPendingSyncState: dart.fnType(core.bool, [])
  }));
  dart.setStaticMethodSignature(realtime_presence.RealtimePresence, () => ['syncState', 'syncDiff', '_list', '_map', '_transformState', '_cloneDeep']);
  dart.setLibraryUri(realtime_presence.RealtimePresence, I[68]);
  dart.setFieldSignature(realtime_presence.RealtimePresence, () => ({
    __proto__: dart.getFields(realtime_presence.RealtimePresence.__proto__),
    state: dart.fieldType(core.Map$(core.String, core.List$(realtime_presence.Presence))),
    pendingDiffs: dart.fieldType(core.List$(core.Map$(core.String, dart.dynamic))),
    joinRef: dart.fieldType(dart.nullable(core.String)),
    caller: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    channel: dart.finalFieldType(realtime_channel.RealtimeChannel)
  }));
  transformers.PostgresTypes = class PostgresTypes extends core._Enum {
    [S$._enumToString]() {
      return "PostgresTypes." + this[S$._name];
    }
  };
  (transformers.PostgresTypes.new = function(index, name) {
    transformers.PostgresTypes.__proto__.new.call(this, index, name);
    ;
  }).prototype = transformers.PostgresTypes.prototype;
  dart.addTypeTests(transformers.PostgresTypes);
  dart.addTypeCaches(transformers.PostgresTypes);
  dart.setMethodSignature(transformers.PostgresTypes, () => ({
    __proto__: dart.getMethods(transformers.PostgresTypes.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(transformers.PostgresTypes, I[69]);
  dart.setStaticFieldSignature(transformers.PostgresTypes, () => ['values', 'abstime', 'bool', 'date', 'daterange', 'float4', 'float8', 'int2', 'int4', 'int4range', 'int8', 'int8range', 'json', 'jsonb', 'money', 'numeric', 'oid', 'reltime', 'time', 'text', 'timestamp', 'timestamptz', 'timetz', 'tsrange', 'tstzrange']);
  dart.defineLazy(transformers.PostgresTypes, {
    /*transformers.PostgresTypes.values*/get values() {
      return C[210] || CT.C210;
    },
    /*transformers.PostgresTypes.abstime*/get abstime() {
      return C[211] || CT.C211;
    },
    /*transformers.PostgresTypes.bool*/get bool() {
      return C[212] || CT.C212;
    },
    /*transformers.PostgresTypes.date*/get date() {
      return C[213] || CT.C213;
    },
    /*transformers.PostgresTypes.daterange*/get daterange() {
      return C[214] || CT.C214;
    },
    /*transformers.PostgresTypes.float4*/get float4() {
      return C[215] || CT.C215;
    },
    /*transformers.PostgresTypes.float8*/get float8() {
      return C[216] || CT.C216;
    },
    /*transformers.PostgresTypes.int2*/get int2() {
      return C[217] || CT.C217;
    },
    /*transformers.PostgresTypes.int4*/get int4() {
      return C[218] || CT.C218;
    },
    /*transformers.PostgresTypes.int4range*/get int4range() {
      return C[219] || CT.C219;
    },
    /*transformers.PostgresTypes.int8*/get int8() {
      return C[220] || CT.C220;
    },
    /*transformers.PostgresTypes.int8range*/get int8range() {
      return C[221] || CT.C221;
    },
    /*transformers.PostgresTypes.json*/get json() {
      return C[222] || CT.C222;
    },
    /*transformers.PostgresTypes.jsonb*/get jsonb() {
      return C[223] || CT.C223;
    },
    /*transformers.PostgresTypes.money*/get money() {
      return C[224] || CT.C224;
    },
    /*transformers.PostgresTypes.numeric*/get numeric() {
      return C[225] || CT.C225;
    },
    /*transformers.PostgresTypes.oid*/get oid() {
      return C[226] || CT.C226;
    },
    /*transformers.PostgresTypes.reltime*/get reltime() {
      return C[227] || CT.C227;
    },
    /*transformers.PostgresTypes.time*/get time() {
      return C[228] || CT.C228;
    },
    /*transformers.PostgresTypes.text*/get text() {
      return C[229] || CT.C229;
    },
    /*transformers.PostgresTypes.timestamp*/get timestamp() {
      return C[230] || CT.C230;
    },
    /*transformers.PostgresTypes.timestamptz*/get timestamptz() {
      return C[231] || CT.C231;
    },
    /*transformers.PostgresTypes.timetz*/get timetz() {
      return C[232] || CT.C232;
    },
    /*transformers.PostgresTypes.tsrange*/get tsrange() {
      return C[233] || CT.C233;
    },
    /*transformers.PostgresTypes.tstzrange*/get tstzrange() {
      return C[234] || CT.C234;
    }
  }, false);
  transformers.PostgresColumn = class PostgresColumn extends core.Object {
    get name() {
      return this[S$0.name];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[S$0.type$2];
    }
    set type(value) {
      super.type = value;
    }
    get flags() {
      return this[S$0.flags];
    }
    set flags(value) {
      super.flags = value;
    }
    get typeModifier() {
      return this[S$0.typeModifier];
    }
    set typeModifier(value) {
      super.typeModifier = value;
    }
    static ['_#new#tearOff'](name, type, opts$) {
      let flags = opts$ && 'flags' in opts$ ? opts$.flags : C[235] || CT.C235;
      let typeModifier = opts$ && 'typeModifier' in opts$ ? opts$.typeModifier : null;
      return new transformers.PostgresColumn.new(name, type, {flags: flags, typeModifier: typeModifier});
    }
  };
  (transformers.PostgresColumn.new = function(name, type, opts$) {
    let flags = opts$ && 'flags' in opts$ ? opts$.flags : C[235] || CT.C235;
    let typeModifier = opts$ && 'typeModifier' in opts$ ? opts$.typeModifier : null;
    this[S$0.name] = name;
    this[S$0.type$2] = type;
    this[S$0.flags] = flags;
    this[S$0.typeModifier] = typeModifier;
    ;
  }).prototype = transformers.PostgresColumn.prototype;
  dart.addTypeTests(transformers.PostgresColumn);
  dart.addTypeCaches(transformers.PostgresColumn);
  dart.setLibraryUri(transformers.PostgresColumn, I[69]);
  dart.setFieldSignature(transformers.PostgresColumn, () => ({
    __proto__: dart.getFields(transformers.PostgresColumn.__proto__),
    name: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.String),
    flags: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    typeModifier: dart.finalFieldType(dart.nullable(core.int))
  }));
  transformers.convertChangeData = function convertChangeData(columns, record, opts$) {
    let skipTypes = opts$ && 'skipTypes' in opts$ ? opts$.skipTypes : null;
    let result = new (T$.IdentityMapOfString$dynamic()).new();
    let parsedColumns = T$.JSArrayOfPostgresColumn().of([]);
    for (let element of columns) {
      let name = T$.StringN().as(element[S$.$_get]("name"));
      let type = T$.StringN().as(element[S$.$_get]("type"));
      if (name != null && type != null) {
        parsedColumns[S$.$add](new transformers.PostgresColumn.new(name, type));
      }
    }
    record[S$.$forEach](dart.fn((key, value) => {
      let t165;
      result[S$.$_set](key, transformers.convertColumn(key, parsedColumns, record, (t165 = skipTypes, t165 == null ? T$.JSArrayOfString().of([]) : t165)));
    }, T$.StringAnddynamicTovoid()));
    return result;
  };
  transformers.convertColumn = function convertColumn(columnName, columns, record, skipTypes) {
    let column = iterable_extensions['IterableExtension|firstWhereOrNull'](transformers.PostgresColumn, columns, dart.fn(x => x.name === columnName, T$.PostgresColumnTobool()));
    let columnValue = record[S$.$_get](columnName);
    if (column != null && !skipTypes[S$.$contains](column.type)) {
      return transformers.convertCell(column.type, columnValue);
    }
    return transformers.noop(columnValue);
  };
  transformers.convertCell = function convertCell(type, value) {
    if (type[S$.$_get](0) === "_") {
      let dataType = type[S$.$substring](1);
      return transformers.toArray(value, dataType);
    }
    let typeEnum = iterable_extensions['IterableExtension|firstWhereOrNull'](transformers.PostgresTypes, transformers.PostgresTypes.values, dart.fn(e => e.toString() === "PostgresTypes." + type, T$.PostgresTypesTobool()));
    switch (typeEnum) {
      case C[212] || CT.C212:
        {
          return transformers.toBoolean(value);
        }
      case C[215] || CT.C215:
      case C[216] || CT.C216:
      case C[225] || CT.C225:
        {
          return transformers.toDouble(value);
        }
      case C[217] || CT.C217:
      case C[218] || CT.C218:
      case C[220] || CT.C220:
      case C[226] || CT.C226:
        {
          return transformers.toInt(value);
        }
      case C[222] || CT.C222:
      case C[223] || CT.C223:
        {
          return transformers.toJson(value);
        }
      case C[230] || CT.C230:
        {
          return transformers.toTimestampString(dart.toString(value));
        }
      case C[211] || CT.C211:
      case C[213] || CT.C213:
      case C[214] || CT.C214:
      case C[219] || CT.C219:
      case C[221] || CT.C221:
      case C[224] || CT.C224:
      case C[227] || CT.C227:
      case C[229] || CT.C229:
      case C[228] || CT.C228:
      case C[231] || CT.C231:
      case C[232] || CT.C232:
      case C[233] || CT.C233:
      case C[234] || CT.C234:
        {
          return transformers.noop(value);
        }
      default:
        {
          return transformers.noop(value);
        }
    }
  };
  transformers.noop = function noop(value) {
    return value;
  };
  transformers.toBoolean = function toBoolean(value) {
    switch (value) {
      case "t":
      case "true":
        {
          return true;
        }
      case "f":
      case "false":
        {
          return false;
        }
      default:
        {
          if (typeof value == 'boolean') return value;
          return null;
        }
    }
  };
  transformers.toDouble = function toDouble(value) {
    if (typeof value == 'number') {
      return value;
    } else {
      try {
        let temp = dart.toString(value);
        return core.double.parse(temp);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return null;
        } else
          throw e;
      }
    }
  };
  transformers.toInt = function toInt(value) {
    if (core.int.is(value)) {
      return value;
    } else {
      try {
        let temp = dart.toString(value);
        return core.int.parse(temp);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return null;
        } else
          throw e;
      }
    }
  };
  transformers.toJson = function toJson(value) {
    if (typeof value == 'string') {
      try {
        return convert.json.decode(value);
      } catch (e) {
        let error = dart.getThrown(e);
        if (core.Object.is(error)) {
          core.print("JSON parse error: " + dart.str(error));
          return value;
        } else
          throw e;
      }
    }
    return value;
  };
  transformers.toArray = function toArray(value, type) {
    if (!(typeof value == 'string')) {
      return value;
    }
    let lastIdx = value.length - 1;
    let closeBrace = value[S$.$_get](lastIdx);
    let openBrace = value[S$.$_get](0);
    if (openBrace === "{" && closeBrace === "}") {
      let valTrim = value[S$.$substring](1, lastIdx);
      let arr = null;
      try {
        arr = core.List.as(convert.json.decode("[" + valTrim + "]"));
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          arr = valTrim !== "" ? valTrim[S$.$split](",") : [];
        } else
          throw e;
      }
      return arr[S$.$map](dart.dynamic, dart.fn(val => transformers.convertCell(type, val), T$.dynamicTodynamic()))[S$.$toList]();
    }
    return value;
  };
  transformers.toTimestampString = function toTimestampString(value) {
    if (value != null) {
      return value[S$.$replaceAll](" ", "T");
    }
    return null;
  };
  transformers.getEnrichedPayload = function getEnrichedPayload(payload) {
    let t169;
    let postgresChanges = (t169 = payload[S$.$_get]("data"), t169 == null ? payload : t169);
    let schema = dart.dsend(postgresChanges, '_get', ["schema"]);
    let table = dart.dsend(postgresChanges, '_get', ["table"]);
    let commitTimestamp = dart.dsend(postgresChanges, '_get', ["commit_timestamp"]);
    let type = dart.dsend(postgresChanges, '_get', ["type"]);
    let errors = dart.dsend(postgresChanges, '_get', ["errors"]);
    let enrichedPayload = new (T$.IdentityMapOfString$dynamic()).from(["schema", schema, "table", table, "commit_timestamp", commitTimestamp, "eventType", type, "new", new _js_helper.LinkedMap.new(), "old", new _js_helper.LinkedMap.new(), "errors", errors]);
    return (() => {
      let t169 = T$.LinkedHashMapOfString$dynamic().of(enrichedPayload);
      t169[S$.$addAll](transformers.getPayloadRecords(T$.MapOfString$dynamic().as(postgresChanges)));
      return t169;
    })();
  };
  transformers.getPayloadRecords = function getPayloadRecords(payload) {
    let records = new (T$.IdentityMapOfString$MapOfString$dynamic()).from(["new", new (T$.IdentityMapOfString$dynamic()).new(), "old", new (T$.IdentityMapOfString$dynamic()).new()]);
    if (dart.equals(payload[S$.$_get]("type"), "INSERT") || dart.equals(payload[S$.$_get]("type"), "UPDATE")) {
      records[S$.$_set]("new", transformers.convertChangeData(T$.ListOfMapOfString$dynamic().from(core.Iterable.as(payload[S$.$_get]("columns"))), T$.LinkedHashMapOfString$dynamic().from(core.Map.as(payload[S$.$_get]("record")))));
    }
    if (dart.equals(payload[S$.$_get]("type"), "UPDATE") || dart.equals(payload[S$.$_get]("type"), "DELETE")) {
      records[S$.$_set]("old", transformers.convertChangeData(T$.ListOfMapOfString$dynamic().from(core.Iterable.as(payload[S$.$_get]("columns"))), T$.LinkedHashMapOfString$dynamic().from(core.Map.as(payload[S$.$_get]("old_record")))));
    }
    return records;
  };
  constants$0.Constants = class Constants extends core.Object {
    static ['_#new#tearOff']() {
      return new constants$0.Constants.new();
    }
  };
  (constants$0.Constants.new = function() {
    ;
  }).prototype = constants$0.Constants.prototype;
  dart.addTypeTests(constants$0.Constants);
  dart.addTypeCaches(constants$0.Constants);
  dart.setLibraryUri(constants$0.Constants, I[70]);
  dart.setStaticFieldSignature(constants$0.Constants, () => ['vsn', 'defaultTimeout', 'wsCloseNormal', 'defaultHeaders']);
  dart.defineLazy(constants$0.Constants, {
    /*constants$0.Constants.vsn*/get vsn() {
      return "1.0.0";
    },
    /*constants$0.Constants.defaultTimeout*/get defaultTimeout() {
      return C[117] || CT.C117;
    },
    /*constants$0.Constants.wsCloseNormal*/get wsCloseNormal() {
      return 1000;
    },
    /*constants$0.Constants.defaultHeaders*/get defaultHeaders() {
      return C[236] || CT.C236;
    }
  }, false);
  constants$0.SocketStates = class SocketStates extends core._Enum {
    [S$._enumToString]() {
      return "SocketStates." + this[S$._name];
    }
  };
  (constants$0.SocketStates.new = function(index, name) {
    constants$0.SocketStates.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$0.SocketStates.prototype;
  dart.addTypeTests(constants$0.SocketStates);
  dart.addTypeCaches(constants$0.SocketStates);
  dart.setMethodSignature(constants$0.SocketStates, () => ({
    __proto__: dart.getMethods(constants$0.SocketStates.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$0.SocketStates, I[70]);
  dart.setStaticFieldSignature(constants$0.SocketStates, () => ['values', 'connecting', 'open', 'closing', 'closed', 'disconnected']);
  dart.defineLazy(constants$0.SocketStates, {
    /*constants$0.SocketStates.values*/get values() {
      return C[237] || CT.C237;
    },
    /*constants$0.SocketStates.connecting*/get connecting() {
      return C[205] || CT.C205;
    },
    /*constants$0.SocketStates.open*/get open() {
      return C[206] || CT.C206;
    },
    /*constants$0.SocketStates.closing*/get closing() {
      return C[207] || CT.C207;
    },
    /*constants$0.SocketStates.closed*/get closed() {
      return C[209] || CT.C209;
    },
    /*constants$0.SocketStates.disconnected*/get disconnected() {
      return C[208] || CT.C208;
    }
  }, false);
  constants$0.ChannelStates = class ChannelStates extends core._Enum {
    [S$._enumToString]() {
      return "ChannelStates." + this[S$._name];
    }
  };
  (constants$0.ChannelStates.new = function(index, name) {
    constants$0.ChannelStates.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$0.ChannelStates.prototype;
  dart.addTypeTests(constants$0.ChannelStates);
  dart.addTypeCaches(constants$0.ChannelStates);
  dart.setMethodSignature(constants$0.ChannelStates, () => ({
    __proto__: dart.getMethods(constants$0.ChannelStates.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$0.ChannelStates, I[70]);
  dart.setStaticFieldSignature(constants$0.ChannelStates, () => ['values', 'closed', 'errored', 'joined', 'joining', 'leaving']);
  dart.defineLazy(constants$0.ChannelStates, {
    /*constants$0.ChannelStates.values*/get values() {
      return C[238] || CT.C238;
    },
    /*constants$0.ChannelStates.closed*/get closed() {
      return C[239] || CT.C239;
    },
    /*constants$0.ChannelStates.errored*/get errored() {
      return C[240] || CT.C240;
    },
    /*constants$0.ChannelStates.joined*/get joined() {
      return C[241] || CT.C241;
    },
    /*constants$0.ChannelStates.joining*/get joining() {
      return C[242] || CT.C242;
    },
    /*constants$0.ChannelStates.leaving*/get leaving() {
      return C[243] || CT.C243;
    }
  }, false);
  constants$0.ChannelEvents = class ChannelEvents extends core._Enum {
    [S$._enumToString]() {
      return "ChannelEvents." + this[S$._name];
    }
  };
  (constants$0.ChannelEvents.new = function(index, name) {
    constants$0.ChannelEvents.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$0.ChannelEvents.prototype;
  dart.addTypeTests(constants$0.ChannelEvents);
  dart.addTypeCaches(constants$0.ChannelEvents);
  dart.setMethodSignature(constants$0.ChannelEvents, () => ({
    __proto__: dart.getMethods(constants$0.ChannelEvents.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$0.ChannelEvents, I[70]);
  dart.setStaticFieldSignature(constants$0.ChannelEvents, () => ['values', 'close', 'error', 'join', 'reply', 'leave', 'heartbeat', 'accessToken', 'broadcast', 'presence', 'postgresChanges']);
  dart.defineLazy(constants$0.ChannelEvents, {
    /*constants$0.ChannelEvents.values*/get values() {
      return C[244] || CT.C244;
    },
    /*constants$0.ChannelEvents.close*/get close() {
      return C[245] || CT.C245;
    },
    /*constants$0.ChannelEvents.error*/get error() {
      return C[246] || CT.C246;
    },
    /*constants$0.ChannelEvents.join*/get join() {
      return C[247] || CT.C247;
    },
    /*constants$0.ChannelEvents.reply*/get reply() {
      return C[248] || CT.C248;
    },
    /*constants$0.ChannelEvents.leave*/get leave() {
      return C[249] || CT.C249;
    },
    /*constants$0.ChannelEvents.heartbeat*/get heartbeat() {
      return C[250] || CT.C250;
    },
    /*constants$0.ChannelEvents.accessToken*/get accessToken() {
      return C[251] || CT.C251;
    },
    /*constants$0.ChannelEvents.broadcast*/get broadcast() {
      return C[252] || CT.C252;
    },
    /*constants$0.ChannelEvents.presence*/get presence() {
      return C[253] || CT.C253;
    },
    /*constants$0.ChannelEvents.postgresChanges*/get postgresChanges() {
      return C[254] || CT.C254;
    }
  }, false);
  constants$0.Transports = class Transports extends core.Object {
    static ['_#new#tearOff']() {
      return new constants$0.Transports.new();
    }
  };
  (constants$0.Transports.new = function() {
    ;
  }).prototype = constants$0.Transports.prototype;
  dart.addTypeTests(constants$0.Transports);
  dart.addTypeCaches(constants$0.Transports);
  dart.setLibraryUri(constants$0.Transports, I[70]);
  dart.setStaticFieldSignature(constants$0.Transports, () => ['websocket']);
  dart.defineLazy(constants$0.Transports, {
    /*constants$0.Transports.websocket*/get websocket() {
      return "websocket";
    }
  }, false);
  constants$0.RealtimeLogLevel = class RealtimeLogLevel extends core._Enum {
    [S$._enumToString]() {
      return "RealtimeLogLevel." + this[S$._name];
    }
  };
  (constants$0.RealtimeLogLevel.new = function(index, name) {
    constants$0.RealtimeLogLevel.__proto__.new.call(this, index, name);
    ;
  }).prototype = constants$0.RealtimeLogLevel.prototype;
  dart.addTypeTests(constants$0.RealtimeLogLevel);
  dart.addTypeCaches(constants$0.RealtimeLogLevel);
  dart.setMethodSignature(constants$0.RealtimeLogLevel, () => ({
    __proto__: dart.getMethods(constants$0.RealtimeLogLevel.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(constants$0.RealtimeLogLevel, I[70]);
  dart.setStaticFieldSignature(constants$0.RealtimeLogLevel, () => ['values', 'info', 'debug', 'warn', 'error']);
  dart.defineLazy(constants$0.RealtimeLogLevel, {
    /*constants$0.RealtimeLogLevel.values*/get values() {
      return C[255] || CT.C255;
    },
    /*constants$0.RealtimeLogLevel.info*/get info() {
      return C[256] || CT.C256;
    },
    /*constants$0.RealtimeLogLevel.debug*/get debug() {
      return C[257] || CT.C257;
    },
    /*constants$0.RealtimeLogLevel.warn*/get warn() {
      return C[258] || CT.C258;
    },
    /*constants$0.RealtimeLogLevel.error*/get error() {
      return C[259] || CT.C259;
    }
  }, false);
  constants$0['ChannelEventsExtended|fromType'] = function ChannelEventsExtended$124fromType(type) {
    for (let enumVariant of constants$0.ChannelEvents.values) {
      if (core['EnumName|get#name'](enumVariant) === type || constants$0['ChannelEventsExtended|eventName'](enumVariant) === type) {
        return enumVariant;
      }
    }
    dart.throw("No type " + type + " exists");
  };
  constants$0['ChannelEventsExtended|eventName'] = function ChannelEventsExtended$124eventName($this) {
    if ($this === constants$0.ChannelEvents.accessToken) {
      return "access_token";
    } else if ($this === constants$0.ChannelEvents.postgresChanges) {
      return "postgres_changes";
    } else if ($this === constants$0.ChannelEvents.broadcast) {
      return "broadcast";
    } else if ($this === constants$0.ChannelEvents.presence) {
      return "presence";
    }
    return "phx_" + core['EnumName|get#name']($this);
  };
  constants$0['ChannelEventsExtended|get#eventName'] = function ChannelEventsExtended$124get$35eventName($this) {
    return dart.fn(() => constants$0['ChannelEventsExtended|eventName']($this), T$.VoidToString());
  };
  storage_bucket_api.StorageBucketApi = class StorageBucketApi extends core.Object {
    get url() {
      return this[S$0.url$2];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[S$0.headers$5];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](url, headers, opts$) {
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      return new storage_bucket_api.StorageBucketApi.new(url, headers, {httpClient: httpClient});
    }
    listBuckets() {
      return async.async(T$.ListOfBucket(), (function* listBuckets() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.get(this.url + "/bucket", {options: options}));
        let buckets = T$.ListOfBucket().from(core.List.as(response)[S$.$map](dart.dynamic, dart.fn(value => new types$3.Bucket.fromJson(T$.MapOfString$dynamic().as(value)), T$.dynamicToBucket())));
        return buckets;
      }).bind(this));
    }
    getBucket(id) {
      return async.async(types$3.Bucket, (function* getBucket() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.get(this.url + "/bucket/" + id, {options: options}));
        return new types$3.Bucket.fromJson(T$.MapOfString$dynamic().as(response));
      }).bind(this));
    }
    createBucket(id, bucketOptions = C[260] || CT.C260) {
      return async.async(core.String, (function* createBucket() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/bucket", (() => {
          let t181 = new (T$.IdentityMapOfString$dynamic()).new();
          t181[S$.$_set]("id", id);
          t181[S$.$_set]("name", id);
          t181[S$.$_set]("public", bucketOptions.public);
          if (bucketOptions.fileSizeLimit != null) t181[S$.$_set]("file_size_limit", bucketOptions.fileSizeLimit);
          if (bucketOptions.allowedMimeTypes != null) t181[S$.$_set]("allowed_mime_types", bucketOptions.allowedMimeTypes);
          return t181;
        })(), {options: options}));
        let bucketId = core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("name"));
        return bucketId;
      }).bind(this));
    }
    updateBucket(id, bucketOptions) {
      return async.async(core.String, (function* updateBucket() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.put(this.url + "/bucket/" + id, (() => {
          let t182 = new (T$.IdentityMapOfString$dynamic()).new();
          t182[S$.$_set]("id", id);
          t182[S$.$_set]("name", id);
          t182[S$.$_set]("public", bucketOptions.public);
          if (bucketOptions.fileSizeLimit != null) t182[S$.$_set]("file_size_limit", bucketOptions.fileSizeLimit);
          if (bucketOptions.allowedMimeTypes != null) t182[S$.$_set]("allowed_mime_types", bucketOptions.allowedMimeTypes);
          return t182;
        })(), {options: options}));
        let message = core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("message"));
        return message;
      }).bind(this));
    }
    emptyBucket(id) {
      return async.async(core.String, (function* emptyBucket() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/bucket/" + id + "/empty", new (T$.IdentityMapOfString$dynamic()).new(), {options: options}));
        return core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("message"));
      }).bind(this));
    }
    deleteBucket(id) {
      return async.async(core.String, (function* deleteBucket() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.delete(this.url + "/bucket/" + id, new (T$.IdentityMapOfString$dynamic()).new(), {options: options}));
        return core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("message"));
      }).bind(this));
    }
  };
  (storage_bucket_api.StorageBucketApi.new = function(url, headers, opts$) {
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    this[S$0.url$2] = url;
    this[S$0.headers$5] = headers;
    fetch$.storageFetch = new fetch$.Fetch.new(httpClient);
  }).prototype = storage_bucket_api.StorageBucketApi.prototype;
  dart.addTypeTests(storage_bucket_api.StorageBucketApi);
  dart.addTypeCaches(storage_bucket_api.StorageBucketApi);
  dart.setMethodSignature(storage_bucket_api.StorageBucketApi, () => ({
    __proto__: dart.getMethods(storage_bucket_api.StorageBucketApi.__proto__),
    listBuckets: dart.fnType(async.Future$(core.List$(types$3.Bucket)), []),
    getBucket: dart.fnType(async.Future$(types$3.Bucket), [core.String]),
    createBucket: dart.fnType(async.Future$(core.String), [core.String], [types$3.BucketOptions]),
    updateBucket: dart.fnType(async.Future$(core.String), [core.String, types$3.BucketOptions]),
    emptyBucket: dart.fnType(async.Future$(core.String), [core.String]),
    deleteBucket: dart.fnType(async.Future$(core.String), [core.String])
  }));
  dart.setLibraryUri(storage_bucket_api.StorageBucketApi, I[72]);
  dart.setFieldSignature(storage_bucket_api.StorageBucketApi, () => ({
    __proto__: dart.getFields(storage_bucket_api.StorageBucketApi.__proto__),
    url: dart.finalFieldType(core.String),
    headers: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  storage_client$.SupabaseStorageClient = class SupabaseStorageClient extends storage_bucket_api.StorageBucketApi {
    static ['_#new#tearOff'](url, headers, opts$) {
      let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : 0;
      return new storage_client$.SupabaseStorageClient.new(url, headers, {httpClient: httpClient, retryAttempts: retryAttempts});
    }
    from(id) {
      return new storage_file_api.StorageFileApi.new(this.url, this.headers, id, this[S$0._defaultRetryAttempts]);
    }
    setAuth(jwt) {
      this.headers[S$.$_set]("Authorization", "Bearer " + jwt);
    }
  };
  (storage_client$.SupabaseStorageClient.new = function(url, headers, opts$) {
    let httpClient = opts$ && 'httpClient' in opts$ ? opts$.httpClient : null;
    let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : 0;
    if (!(retryAttempts >= 0)) dart.assertFailed("retryAttempts has to be great than or equal to 0", I[71], 37, 11, "retryAttempts >= 0");
    this[S$0._defaultRetryAttempts] = retryAttempts;
    storage_client$.SupabaseStorageClient.__proto__.new.call(this, url, (() => {
      let t180 = T$.LinkedHashMapOfString$String().of(constants$4.Constants.defaultHeaders);
      t180[S$.$addAll](headers);
      return t180;
    })(), {httpClient: httpClient});
    ;
  }).prototype = storage_client$.SupabaseStorageClient.prototype;
  dart.addTypeTests(storage_client$.SupabaseStorageClient);
  dart.addTypeCaches(storage_client$.SupabaseStorageClient);
  dart.setMethodSignature(storage_client$.SupabaseStorageClient, () => ({
    __proto__: dart.getMethods(storage_client$.SupabaseStorageClient.__proto__),
    from: dart.fnType(storage_file_api.StorageFileApi, [core.String]),
    setAuth: dart.fnType(dart.void, [core.String])
  }));
  dart.setLibraryUri(storage_client$.SupabaseStorageClient, I[73]);
  dart.setFieldSignature(storage_client$.SupabaseStorageClient, () => ({
    __proto__: dart.getFields(storage_client$.SupabaseStorageClient.__proto__),
    [S$0._defaultRetryAttempts]: dart.finalFieldType(core.int)
  }));
  storage_file_api.StorageFileApi = class StorageFileApi extends core.Object {
    get url() {
      return this[S$0.url$3];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[S$0.headers$6];
    }
    set headers(value) {
      super.headers = value;
    }
    get bucketId() {
      return this[S$0.bucketId];
    }
    set bucketId(value) {
      super.bucketId = value;
    }
    get [S$0._retryAttempts$1]() {
      return this[S$0._retryAttempts];
    }
    set [S$0._retryAttempts$1](value) {
      super[S$0._retryAttempts$1] = value;
    }
    static ['_#new#tearOff'](url, headers, bucketId, _retryAttempts) {
      return new storage_file_api.StorageFileApi.new(url, headers, bucketId, _retryAttempts);
    }
    [S$0._getFinalPath](path) {
      return dart.str(this.bucketId) + "/" + path;
    }
    [S$0._removeEmptyFolders](path) {
      return path[S$.$replaceAll](core.RegExp.new("/^\\/|\\/$/g"), "")[S$.$replaceAll](core.RegExp.new("/\\/+/g"), "/");
    }
    upload(path, file, opts$) {
      let fileOptions = opts$ && 'fileOptions' in opts$ ? opts$.fileOptions : C[261] || CT.C261;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(core.String, (function* upload() {
        let t183;
        if (!(retryAttempts == null || dart.notNull(retryAttempts) >= 0)) dart.assertFailed("retryAttempts has to be greater or equal to 0", I[74], 51, 12, "retryAttempts == null || retryAttempts >= 0");
        let finalPath = this[S$0._getFinalPath](path);
        let response = (yield fetch$.storageFetch.postFile(this.url + "/object/" + finalPath, file, fileOptions, {options: new types$3.FetchOptions.new({headers: this.headers}), retryAttempts: (t183 = retryAttempts, t183 == null ? this[S$0._retryAttempts$1] : t183), retryController: retryController}));
        return core.String.as(core.Map.as(response)[S$.$_get]("Key"));
      }).bind(this));
    }
    uploadBinary(path, data, opts$) {
      let fileOptions = opts$ && 'fileOptions' in opts$ ? opts$.fileOptions : C[261] || CT.C261;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(core.String, (function* uploadBinary() {
        let t183;
        if (!(retryAttempts == null || dart.notNull(retryAttempts) >= 0)) dart.assertFailed("retryAttempts has to be greater or equal to 0", I[74], 86, 12, "retryAttempts == null || retryAttempts >= 0");
        let finalPath = this[S$0._getFinalPath](path);
        let response = (yield fetch$.storageFetch.postBinaryFile(this.url + "/object/" + finalPath, data, fileOptions, {options: new types$3.FetchOptions.new({headers: this.headers}), retryAttempts: (t183 = retryAttempts, t183 == null ? this[S$0._retryAttempts$1] : t183), retryController: retryController}));
        return core.String.as(core.Map.as(response)[S$.$_get]("Key"));
      }).bind(this));
    }
    uploadToSignedUrl(path, token, file, fileOptions = C[261] || CT.C261, retryAttempts = null, retryController = null) {
      return async.async(core.String, (function* uploadToSignedUrl() {
        let t183;
        if (!(retryAttempts == null || dart.notNull(retryAttempts) >= 0)) dart.assertFailed("retryAttempts has to be greater or equal to 0", I[74], 116, 12, "retryAttempts == null || retryAttempts >= 0");
        let cleanPath = this[S$0._removeEmptyFolders](path);
        let _path = this[S$0._getFinalPath](cleanPath);
        let url = core.Uri.parse(this.url + "/object/upload/sign/" + _path);
        url = url.replace({queryParameters: new (T$.IdentityMapOfString$dynamic()).from(["token", token])});
        yield fetch$.storageFetch.putFile(url.toString(), file, fileOptions, {retryAttempts: (t183 = retryAttempts, t183 == null ? this[S$0._retryAttempts$1] : t183), retryController: retryController});
        return cleanPath;
      }).bind(this));
    }
    uploadBinaryToSignedUrl(path, token, data, fileOptions = C[261] || CT.C261, retryAttempts = null, retryController = null) {
      return async.async(core.String, (function* uploadBinaryToSignedUrl() {
        let t183;
        if (!(retryAttempts == null || dart.notNull(retryAttempts) >= 0)) dart.assertFailed("retryAttempts has to be greater or equal to 0", I[74], 150, 12, "retryAttempts == null || retryAttempts >= 0");
        let cleanPath = this[S$0._removeEmptyFolders](path);
        let _path = this[S$0._getFinalPath](cleanPath);
        let url = core.Uri.parse(this.url + "/object/upload/sign/" + _path);
        url = url.replace({queryParameters: new (T$.IdentityMapOfString$dynamic()).from(["token", token])});
        yield fetch$.storageFetch.putBinaryFile(url.toString(), data, fileOptions, {retryAttempts: (t183 = retryAttempts, t183 == null ? this[S$0._retryAttempts$1] : t183), retryController: retryController});
        return cleanPath;
      }).bind(this));
    }
    createSignedUploadUrl(path) {
      return async.async(types$3.SignedUploadURLResponse, (function* createSignedUploadUrl() {
        let finalPath = this[S$0._getFinalPath](path);
        let data = (yield fetch$.storageFetch.post(this.url + "/object/upload/sign/" + finalPath, new (T$.IdentityMapOfString$dynamic()).new(), {options: new types$3.FetchOptions.new({headers: this.headers})}));
        let signedUrl = core.Uri.parse(this.url + dart.str(dart.dsend(data, '_get', ["url"])));
        let token = signedUrl.queryParameters[S$.$_get]("token");
        if (token == null || token[S$.$isEmpty]) {
          dart.throw(new types$3.StorageException.new("No token returned by API"));
        }
        return new types$3.SignedUploadURLResponse.new({signedUrl: signedUrl.toString(), path: path, token: token});
      }).bind(this));
    }
    update(path, file, opts$) {
      let fileOptions = opts$ && 'fileOptions' in opts$ ? opts$.fileOptions : C[261] || CT.C261;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(core.String, (function* update() {
        let t183;
        if (!(retryAttempts == null || dart.notNull(retryAttempts) >= 0)) dart.assertFailed("retryAttempts has to be greater or equal to 0", I[74], 220, 12, "retryAttempts == null || retryAttempts >= 0");
        let finalPath = this[S$0._getFinalPath](path);
        let response = (yield fetch$.storageFetch.putFile(this.url + "/object/" + finalPath, file, fileOptions, {options: new types$3.FetchOptions.new({headers: this.headers}), retryAttempts: (t183 = retryAttempts, t183 == null ? this[S$0._retryAttempts$1] : t183), retryController: retryController}));
        return core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("Key"));
      }).bind(this));
    }
    updateBinary(path, data, opts$) {
      let fileOptions = opts$ && 'fileOptions' in opts$ ? opts$.fileOptions : C[261] || CT.C261;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(core.String, (function* updateBinary() {
        let t183;
        if (!(retryAttempts == null || dart.notNull(retryAttempts) >= 0)) dart.assertFailed("retryAttempts has to be greater or equal to 0", I[74], 256, 12, "retryAttempts == null || retryAttempts >= 0");
        let finalPath = this[S$0._getFinalPath](path);
        let response = (yield fetch$.storageFetch.putBinaryFile(this.url + "/object/" + finalPath, data, fileOptions, {options: new types$3.FetchOptions.new({headers: this.headers}), retryAttempts: (t183 = retryAttempts, t183 == null ? this[S$0._retryAttempts$1] : t183), retryController: retryController}));
        return core.String.as(core.Map.as(response)[S$.$_get]("Key"));
      }).bind(this));
    }
    move(fromPath, toPath) {
      return async.async(core.String, (function* move() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/object/move", new (T$.IdentityMapOfString$dynamic()).from(["bucketId", this.bucketId, "sourceKey", fromPath, "destinationKey", toPath]), {options: options}));
        return core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("message"));
      }).bind(this));
    }
    copy(fromPath, toPath) {
      return async.async(core.String, (function* copy() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/object/copy", new (T$.IdentityMapOfString$dynamic()).from(["bucketId", this.bucketId, "sourceKey", fromPath, "destinationKey", toPath]), {options: options}));
        return core.String.as(T$.MapOfString$dynamic().as(response)[S$.$_get]("Key"));
      }).bind(this));
    }
    createSignedUrl(path, expiresIn, opts$) {
      let transform = opts$ && 'transform' in opts$ ? opts$.transform : null;
      return async.async(core.String, (function* createSignedUrl() {
        let finalPath = this[S$0._getFinalPath](path);
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/object/sign/" + finalPath, (() => {
          let t183 = new (T$.IdentityMapOfString$dynamic()).new();
          t183[S$.$_set]("expiresIn", expiresIn);
          if (transform != null) t183[S$.$_set]("transform", types$3['ToQueryParams|get#toQueryParams'](transform));
          return t183;
        })(), {options: options}));
        let signedUrlPath = T$.MapOfString$dynamic().as(response)[S$.$_get]("signedURL");
        let signedUrl = this.url + dart.str(signedUrlPath);
        return signedUrl;
      }).bind(this));
    }
    createSignedUrls(paths, expiresIn) {
      return async.async(T$.ListOfSignedUrl(), (function* createSignedUrls() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/object/sign/" + dart.str(this.bucketId), new (T$.IdentityMapOfString$dynamic()).from(["expiresIn", expiresIn, "paths", paths]), {options: options}));
        let urls = core.List.as(response)[S$.$map](types$3.SignedUrl, dart.fn(e => {
          let t184;
          return new types$3.SignedUrl.new({path: core.String.as((t184 = dart.dsend(e, '_get', ["path"]), t184 == null ? "" : t184)), signedUrl: this.url + dart.str(dart.dsend(e, '_get', ["signedURL"]))});
        }, T$.dynamicToSignedUrl()))[S$.$toList]();
        return urls;
      }).bind(this));
    }
    download(path, opts$) {
      let transform = opts$ && 'transform' in opts$ ? opts$.transform : null;
      return async.async(typed_data.Uint8List, (function* download() {
        let t184;
        let wantsTransformations = transform != null;
        let finalPath = this[S$0._getFinalPath](path);
        let renderPath = wantsTransformations ? "render/image/authenticated" : "object";
        let queryParams = (t184 = transform, t184 == null ? null : types$3['ToQueryParams|get#toQueryParams'](t184));
        let options = new types$3.FetchOptions.new({headers: this.headers, noResolveJson: true});
        let fetchUrl = core.Uri.parse(this.url + "/" + renderPath + "/" + finalPath);
        fetchUrl = fetchUrl.replace({queryParameters: queryParams});
        let response = (yield fetch$.storageFetch.get(fetchUrl.toString(), {options: options}));
        return typed_data.Uint8List.as(response);
      }).bind(this));
    }
    getPublicUrl(path, opts$) {
      let t184;
      let transform = opts$ && 'transform' in opts$ ? opts$.transform : null;
      let finalPath = this[S$0._getFinalPath](path);
      let wantsTransformation = transform != null;
      let renderPath = wantsTransformation ? "render/image" : "object";
      let transformationQuery = (t184 = transform, t184 == null ? null : types$3['ToQueryParams|get#toQueryParams'](t184));
      let publicUrl = core.Uri.parse(this.url + "/" + renderPath + "/public/" + finalPath);
      publicUrl = publicUrl.replace({queryParameters: transformationQuery});
      return publicUrl.toString();
    }
    remove(paths) {
      return async.async(T$.ListOfFileObject(), (function* remove() {
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.delete(this.url + "/object/" + dart.str(this.bucketId), new (T$.IdentityMapOfString$dynamic()).from(["prefixes", paths]), {options: options}));
        let fileObjects = T$.ListOfFileObject().from(core.List.as(response)[S$.$map](dart.dynamic, dart.fn(item => new types$3.FileObject.fromJson(item), T$.dynamicToFileObject())));
        return fileObjects;
      }).bind(this));
    }
    list(opts$) {
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let searchOptions = opts$ && 'searchOptions' in opts$ ? opts$.searchOptions : C[262] || CT.C262;
      return async.async(T$.ListOfFileObject(), (function* list() {
        let t185;
        let body = (() => {
          let t184 = new (T$.IdentityMapOfString$dynamic()).new();
          t184[S$.$_set]("prefix", (t185 = path, t185 == null ? "" : t185));
          t184[S$.$addAll](searchOptions.toMap());
          return t184;
        })();
        let options = new types$3.FetchOptions.new({headers: this.headers});
        let response = (yield fetch$.storageFetch.post(this.url + "/object/list/" + dart.str(this.bucketId), body, {options: options}));
        let fileObjects = T$.ListOfFileObject().from(core.List.as(response)[S$.$map](dart.dynamic, dart.fn(item => new types$3.FileObject.fromJson(item), T$.dynamicToFileObject())));
        return fileObjects;
      }).bind(this));
    }
  };
  (storage_file_api.StorageFileApi.new = function(url, headers, bucketId, _retryAttempts) {
    this[S$0.url$3] = url;
    this[S$0.headers$6] = headers;
    this[S$0.bucketId] = bucketId;
    this[S$0._retryAttempts] = _retryAttempts;
    ;
  }).prototype = storage_file_api.StorageFileApi.prototype;
  dart.addTypeTests(storage_file_api.StorageFileApi);
  dart.addTypeCaches(storage_file_api.StorageFileApi);
  dart.setMethodSignature(storage_file_api.StorageFileApi, () => ({
    __proto__: dart.getMethods(storage_file_api.StorageFileApi.__proto__),
    [S$0._getFinalPath]: dart.fnType(core.String, [core.String]),
    [S$0._removeEmptyFolders]: dart.fnType(core.String, [core.String]),
    upload: dart.fnType(async.Future$(core.String), [core.String, file_stub.File], {fileOptions: types$3.FileOptions, retryAttempts: dart.nullable(core.int), retryController: dart.nullable(types$3.StorageRetryController)}, {}),
    uploadBinary: dart.fnType(async.Future$(core.String), [core.String, typed_data.Uint8List], {fileOptions: types$3.FileOptions, retryAttempts: dart.nullable(core.int), retryController: dart.nullable(types$3.StorageRetryController)}, {}),
    uploadToSignedUrl: dart.fnType(async.Future$(core.String), [core.String, core.String, file_stub.File], [types$3.FileOptions, dart.nullable(core.int), dart.nullable(types$3.StorageRetryController)]),
    uploadBinaryToSignedUrl: dart.fnType(async.Future$(core.String), [core.String, core.String, typed_data.Uint8List], [types$3.FileOptions, dart.nullable(core.int), dart.nullable(types$3.StorageRetryController)]),
    createSignedUploadUrl: dart.fnType(async.Future$(types$3.SignedUploadURLResponse), [core.String]),
    update: dart.fnType(async.Future$(core.String), [core.String, file_stub.File], {fileOptions: types$3.FileOptions, retryAttempts: dart.nullable(core.int), retryController: dart.nullable(types$3.StorageRetryController)}, {}),
    updateBinary: dart.fnType(async.Future$(core.String), [core.String, typed_data.Uint8List], {fileOptions: types$3.FileOptions, retryAttempts: dart.nullable(core.int), retryController: dart.nullable(types$3.StorageRetryController)}, {}),
    move: dart.fnType(async.Future$(core.String), [core.String, core.String]),
    copy: dart.fnType(async.Future$(core.String), [core.String, core.String]),
    createSignedUrl: dart.fnType(async.Future$(core.String), [core.String, core.int], {transform: dart.nullable(types$3.TransformOptions)}, {}),
    createSignedUrls: dart.fnType(async.Future$(core.List$(types$3.SignedUrl)), [core.List$(core.String), core.int]),
    download: dart.fnType(async.Future$(typed_data.Uint8List), [core.String], {transform: dart.nullable(types$3.TransformOptions)}, {}),
    getPublicUrl: dart.fnType(core.String, [core.String], {transform: dart.nullable(types$3.TransformOptions)}, {}),
    remove: dart.fnType(async.Future$(core.List$(types$3.FileObject)), [core.List$(core.String)]),
    list: dart.fnType(async.Future$(core.List$(types$3.FileObject)), [], {path: dart.nullable(core.String), searchOptions: types$3.SearchOptions}, {})
  }));
  dart.setLibraryUri(storage_file_api.StorageFileApi, I[75]);
  dart.setFieldSignature(storage_file_api.StorageFileApi, () => ({
    __proto__: dart.getFields(storage_file_api.StorageFileApi.__proto__),
    url: dart.finalFieldType(core.String),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    bucketId: dart.finalFieldType(dart.nullable(core.String)),
    [S$0._retryAttempts$1]: dart.finalFieldType(core.int)
  }));
  types$3.FetchOptions = class FetchOptions extends core.Object {
    get headers() {
      return this[S$0.headers$7];
    }
    set headers(value) {
      super.headers = value;
    }
    get noResolveJson() {
      return this[S$0.noResolveJson];
    }
    set noResolveJson(value) {
      super.noResolveJson = value;
    }
    static ['_#new#tearOff'](opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let noResolveJson = opts$ && 'noResolveJson' in opts$ ? opts$.noResolveJson : null;
      return new types$3.FetchOptions.new({headers: headers, noResolveJson: noResolveJson});
    }
  };
  (types$3.FetchOptions.new = function(opts$) {
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let noResolveJson = opts$ && 'noResolveJson' in opts$ ? opts$.noResolveJson : null;
    this[S$0.headers$7] = headers;
    this[S$0.noResolveJson] = noResolveJson;
    ;
  }).prototype = types$3.FetchOptions.prototype;
  dart.addTypeTests(types$3.FetchOptions);
  dart.addTypeCaches(types$3.FetchOptions);
  dart.setLibraryUri(types$3.FetchOptions, I[76]);
  dart.setFieldSignature(types$3.FetchOptions, () => ({
    __proto__: dart.getFields(types$3.FetchOptions.__proto__),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String))),
    noResolveJson: dart.finalFieldType(dart.nullable(core.bool))
  }));
  types$3.Bucket = class Bucket extends core.Object {
    get id() {
      return this[S$0.id$8];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[S$0.name$1];
    }
    set name(value) {
      super.name = value;
    }
    get owner() {
      return this[S$0.owner];
    }
    set owner(value) {
      super.owner = value;
    }
    get createdAt() {
      return this[S$0.createdAt$3];
    }
    set createdAt(value) {
      super.createdAt = value;
    }
    get updatedAt() {
      return this[S$0.updatedAt$3];
    }
    set updatedAt(value) {
      super.updatedAt = value;
    }
    get public() {
      return this[S$0.$public];
    }
    set public(value) {
      super.public = value;
    }
    get fileSizeLimit() {
      return this[S$0.fileSizeLimit];
    }
    set fileSizeLimit(value) {
      super.fileSizeLimit = value;
    }
    get allowedMimeTypes() {
      return this[S$0.allowedMimeTypes];
    }
    set allowedMimeTypes(value) {
      super.allowedMimeTypes = value;
    }
    static ['_#new#tearOff'](opts$) {
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let name = opts$ && 'name' in opts$ ? opts$.name : null;
      let owner = opts$ && 'owner' in opts$ ? opts$.owner : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      let $public = opts$ && 'public' in opts$ ? opts$.public : null;
      let fileSizeLimit = opts$ && 'fileSizeLimit' in opts$ ? opts$.fileSizeLimit : null;
      let allowedMimeTypes = opts$ && 'allowedMimeTypes' in opts$ ? opts$.allowedMimeTypes : null;
      return new types$3.Bucket.new({id: id, name: name, owner: owner, createdAt: createdAt, updatedAt: updatedAt, public: $public, fileSizeLimit: fileSizeLimit, allowedMimeTypes: allowedMimeTypes});
    }
    static ['_#fromJson#tearOff'](json) {
      return new types$3.Bucket.fromJson(json);
    }
  };
  (types$3.Bucket.new = function(opts$) {
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let name = opts$ && 'name' in opts$ ? opts$.name : null;
    let owner = opts$ && 'owner' in opts$ ? opts$.owner : null;
    let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
    let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
    let $public = opts$ && 'public' in opts$ ? opts$.public : null;
    let fileSizeLimit = opts$ && 'fileSizeLimit' in opts$ ? opts$.fileSizeLimit : null;
    let allowedMimeTypes = opts$ && 'allowedMimeTypes' in opts$ ? opts$.allowedMimeTypes : null;
    this[S$0.id$8] = id;
    this[S$0.name$1] = name;
    this[S$0.owner] = owner;
    this[S$0.createdAt$3] = createdAt;
    this[S$0.updatedAt$3] = updatedAt;
    this[S$0.$public] = $public;
    this[S$0.fileSizeLimit] = fileSizeLimit;
    this[S$0.allowedMimeTypes] = allowedMimeTypes;
    ;
  }).prototype = types$3.Bucket.prototype;
  (types$3.Bucket.fromJson = function(json) {
    this[S$0.id$8] = core.String.as(json[S$.$_get]("id"));
    this[S$0.name$1] = core.String.as(json[S$.$_get]("name"));
    this[S$0.owner] = core.String.as(json[S$.$_get]("owner"));
    this[S$0.createdAt$3] = core.String.as(json[S$.$_get]("created_at"));
    this[S$0.updatedAt$3] = core.String.as(json[S$.$_get]("updated_at"));
    this[S$0.$public] = core.bool.as(json[S$.$_get]("public"));
    this[S$0.fileSizeLimit] = T$.intN().as(json[S$.$_get]("file_size_limit"));
    this[S$0.allowedMimeTypes] = json[S$.$_get]("allowed_mime_types") == null ? null : T$.ListOfString().from(core.List.as(json[S$.$_get]("allowed_mime_types")));
    ;
  }).prototype = types$3.Bucket.prototype;
  dart.addTypeTests(types$3.Bucket);
  dart.addTypeCaches(types$3.Bucket);
  dart.setLibraryUri(types$3.Bucket, I[76]);
  dart.setFieldSignature(types$3.Bucket, () => ({
    __proto__: dart.getFields(types$3.Bucket.__proto__),
    id: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String),
    owner: dart.finalFieldType(core.String),
    createdAt: dart.finalFieldType(core.String),
    updatedAt: dart.finalFieldType(core.String),
    public: dart.finalFieldType(core.bool),
    fileSizeLimit: dart.finalFieldType(dart.nullable(core.int)),
    allowedMimeTypes: dart.finalFieldType(dart.nullable(core.List$(core.String)))
  }));
  types$3.FileObject = class FileObject extends core.Object {
    get name() {
      return this[S$0.name$2];
    }
    set name(value) {
      super.name = value;
    }
    get bucketId() {
      return this[S$0.bucketId$1];
    }
    set bucketId(value) {
      super.bucketId = value;
    }
    get owner() {
      return this[S$0.owner$1];
    }
    set owner(value) {
      super.owner = value;
    }
    get id() {
      return this[S$0.id$9];
    }
    set id(value) {
      super.id = value;
    }
    get updatedAt() {
      return this[S$0.updatedAt$4];
    }
    set updatedAt(value) {
      super.updatedAt = value;
    }
    get createdAt() {
      return this[S$0.createdAt$4];
    }
    set createdAt(value) {
      super.createdAt = value;
    }
    get lastAccessedAt() {
      return this[S$0.lastAccessedAt];
    }
    set lastAccessedAt(value) {
      super.lastAccessedAt = value;
    }
    get metadata() {
      return this[S$0.metadata];
    }
    set metadata(value) {
      super.metadata = value;
    }
    get buckets() {
      return this[S$0.buckets];
    }
    set buckets(value) {
      super.buckets = value;
    }
    static ['_#new#tearOff'](opts$) {
      let name = opts$ && 'name' in opts$ ? opts$.name : null;
      let bucketId = opts$ && 'bucketId' in opts$ ? opts$.bucketId : null;
      let owner = opts$ && 'owner' in opts$ ? opts$.owner : null;
      let id = opts$ && 'id' in opts$ ? opts$.id : null;
      let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
      let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
      let lastAccessedAt = opts$ && 'lastAccessedAt' in opts$ ? opts$.lastAccessedAt : null;
      let metadata = opts$ && 'metadata' in opts$ ? opts$.metadata : null;
      let buckets = opts$ && 'buckets' in opts$ ? opts$.buckets : null;
      return new types$3.FileObject.new({name: name, bucketId: bucketId, owner: owner, id: id, updatedAt: updatedAt, createdAt: createdAt, lastAccessedAt: lastAccessedAt, metadata: metadata, buckets: buckets});
    }
    static ['_#fromJson#tearOff'](json) {
      return new types$3.FileObject.fromJson(json);
    }
  };
  (types$3.FileObject.new = function(opts$) {
    let name = opts$ && 'name' in opts$ ? opts$.name : null;
    let bucketId = opts$ && 'bucketId' in opts$ ? opts$.bucketId : null;
    let owner = opts$ && 'owner' in opts$ ? opts$.owner : null;
    let id = opts$ && 'id' in opts$ ? opts$.id : null;
    let updatedAt = opts$ && 'updatedAt' in opts$ ? opts$.updatedAt : null;
    let createdAt = opts$ && 'createdAt' in opts$ ? opts$.createdAt : null;
    let lastAccessedAt = opts$ && 'lastAccessedAt' in opts$ ? opts$.lastAccessedAt : null;
    let metadata = opts$ && 'metadata' in opts$ ? opts$.metadata : null;
    let buckets = opts$ && 'buckets' in opts$ ? opts$.buckets : null;
    this[S$0.name$2] = name;
    this[S$0.bucketId$1] = bucketId;
    this[S$0.owner$1] = owner;
    this[S$0.id$9] = id;
    this[S$0.updatedAt$4] = updatedAt;
    this[S$0.createdAt$4] = createdAt;
    this[S$0.lastAccessedAt] = lastAccessedAt;
    this[S$0.metadata] = metadata;
    this[S$0.buckets] = buckets;
    ;
  }).prototype = types$3.FileObject.prototype;
  (types$3.FileObject.fromJson = function(json) {
    this[S$0.id$9] = T$.StringN().as(T$.MapOfString$dynamic().as(json)[S$.$_get]("id"));
    this[S$0.name$2] = core.String.as(json[S$.$_get]("name"));
    this[S$0.bucketId$1] = T$.StringN().as(json[S$.$_get]("bucket_id"));
    this[S$0.owner$1] = T$.StringN().as(json[S$.$_get]("owner"));
    this[S$0.updatedAt$4] = T$.StringN().as(json[S$.$_get]("updated_at"));
    this[S$0.createdAt$4] = T$.StringN().as(json[S$.$_get]("created_at"));
    this[S$0.lastAccessedAt] = T$.StringN().as(json[S$.$_get]("last_accessed_at"));
    this[S$0.metadata] = T$.MapNOfString$dynamic().as(json[S$.$_get]("metadata"));
    this[S$0.buckets] = json[S$.$_get]("buckets") != null ? new types$3.Bucket.fromJson(T$.MapOfString$dynamic().as(json[S$.$_get]("buckets"))) : null;
    ;
  }).prototype = types$3.FileObject.prototype;
  dart.addTypeTests(types$3.FileObject);
  dart.addTypeCaches(types$3.FileObject);
  dart.setLibraryUri(types$3.FileObject, I[76]);
  dart.setFieldSignature(types$3.FileObject, () => ({
    __proto__: dart.getFields(types$3.FileObject.__proto__),
    name: dart.finalFieldType(core.String),
    bucketId: dart.finalFieldType(dart.nullable(core.String)),
    owner: dart.finalFieldType(dart.nullable(core.String)),
    id: dart.finalFieldType(dart.nullable(core.String)),
    updatedAt: dart.finalFieldType(dart.nullable(core.String)),
    createdAt: dart.finalFieldType(dart.nullable(core.String)),
    lastAccessedAt: dart.finalFieldType(dart.nullable(core.String)),
    metadata: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    buckets: dart.finalFieldType(dart.nullable(types$3.Bucket))
  }));
  types$3.BucketOptions = class BucketOptions extends core.Object {
    get public() {
      return this[S$0.$public$1];
    }
    set public(value) {
      super.public = value;
    }
    get fileSizeLimit() {
      return this[S$0.fileSizeLimit$1];
    }
    set fileSizeLimit(value) {
      super.fileSizeLimit = value;
    }
    get allowedMimeTypes() {
      return this[S$0.allowedMimeTypes$1];
    }
    set allowedMimeTypes(value) {
      super.allowedMimeTypes = value;
    }
    static ['_#new#tearOff'](opts$) {
      let $public = opts$ && 'public' in opts$ ? opts$.public : null;
      let fileSizeLimit = opts$ && 'fileSizeLimit' in opts$ ? opts$.fileSizeLimit : null;
      let allowedMimeTypes = opts$ && 'allowedMimeTypes' in opts$ ? opts$.allowedMimeTypes : null;
      return new types$3.BucketOptions.new({public: $public, fileSizeLimit: fileSizeLimit, allowedMimeTypes: allowedMimeTypes});
    }
  };
  (types$3.BucketOptions.new = function(opts$) {
    let $public = opts$ && 'public' in opts$ ? opts$.public : null;
    let fileSizeLimit = opts$ && 'fileSizeLimit' in opts$ ? opts$.fileSizeLimit : null;
    let allowedMimeTypes = opts$ && 'allowedMimeTypes' in opts$ ? opts$.allowedMimeTypes : null;
    this[S$0.$public$1] = $public;
    this[S$0.fileSizeLimit$1] = fileSizeLimit;
    this[S$0.allowedMimeTypes$1] = allowedMimeTypes;
    ;
  }).prototype = types$3.BucketOptions.prototype;
  dart.addTypeTests(types$3.BucketOptions);
  dart.addTypeCaches(types$3.BucketOptions);
  dart.setLibraryUri(types$3.BucketOptions, I[76]);
  dart.setFieldSignature(types$3.BucketOptions, () => ({
    __proto__: dart.getFields(types$3.BucketOptions.__proto__),
    public: dart.finalFieldType(core.bool),
    fileSizeLimit: dart.finalFieldType(dart.nullable(core.String)),
    allowedMimeTypes: dart.finalFieldType(dart.nullable(core.List$(core.String)))
  }));
  types$3.FileOptions = class FileOptions extends core.Object {
    get cacheControl() {
      return this[S$0.cacheControl];
    }
    set cacheControl(value) {
      super.cacheControl = value;
    }
    get upsert() {
      return this[S$0.upsert];
    }
    set upsert(value) {
      super.upsert = value;
    }
    get contentType() {
      return this[S$0.contentType];
    }
    set contentType(value) {
      super.contentType = value;
    }
    static ['_#new#tearOff'](opts$) {
      let cacheControl = opts$ && 'cacheControl' in opts$ ? opts$.cacheControl : "3600";
      let upsert = opts$ && 'upsert' in opts$ ? opts$.upsert : false;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      return new types$3.FileOptions.new({cacheControl: cacheControl, upsert: upsert, contentType: contentType});
    }
  };
  (types$3.FileOptions.new = function(opts$) {
    let cacheControl = opts$ && 'cacheControl' in opts$ ? opts$.cacheControl : "3600";
    let upsert = opts$ && 'upsert' in opts$ ? opts$.upsert : false;
    let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
    this[S$0.cacheControl] = cacheControl;
    this[S$0.upsert] = upsert;
    this[S$0.contentType] = contentType;
    ;
  }).prototype = types$3.FileOptions.prototype;
  dart.addTypeTests(types$3.FileOptions);
  dart.addTypeCaches(types$3.FileOptions);
  dart.setLibraryUri(types$3.FileOptions, I[76]);
  dart.setFieldSignature(types$3.FileOptions, () => ({
    __proto__: dart.getFields(types$3.FileOptions.__proto__),
    cacheControl: dart.finalFieldType(core.String),
    upsert: dart.finalFieldType(core.bool),
    contentType: dart.finalFieldType(dart.nullable(core.String))
  }));
  types$3.SearchOptions = class SearchOptions extends core.Object {
    get limit() {
      return this[S$0.limit];
    }
    set limit(value) {
      super.limit = value;
    }
    get offset() {
      return this[S$0.offset];
    }
    set offset(value) {
      super.offset = value;
    }
    get sortBy() {
      return this[S$0.sortBy];
    }
    set sortBy(value) {
      super.sortBy = value;
    }
    get search() {
      return this[S$0.search];
    }
    set search(value) {
      super.search = value;
    }
    static ['_#new#tearOff'](opts$) {
      let limit = opts$ && 'limit' in opts$ ? opts$.limit : 100;
      let offset = opts$ && 'offset' in opts$ ? opts$.offset : 0;
      let sortBy = opts$ && 'sortBy' in opts$ ? opts$.sortBy : C[263] || CT.C263;
      let search = opts$ && 'search' in opts$ ? opts$.search : null;
      return new types$3.SearchOptions.new({limit: limit, offset: offset, sortBy: sortBy, search: search});
    }
    toMap() {
      let t185;
      return new (T$.IdentityMapOfString$dynamic()).from(["limit", this.limit, "offset", this.offset, "sortBy", (t185 = this.sortBy, t185 == null ? null : t185.toMap()), "search", this.search]);
    }
  };
  (types$3.SearchOptions.new = function(opts$) {
    let limit = opts$ && 'limit' in opts$ ? opts$.limit : 100;
    let offset = opts$ && 'offset' in opts$ ? opts$.offset : 0;
    let sortBy = opts$ && 'sortBy' in opts$ ? opts$.sortBy : C[263] || CT.C263;
    let search = opts$ && 'search' in opts$ ? opts$.search : null;
    this[S$0.limit] = limit;
    this[S$0.offset] = offset;
    this[S$0.sortBy] = sortBy;
    this[S$0.search] = search;
    ;
  }).prototype = types$3.SearchOptions.prototype;
  dart.addTypeTests(types$3.SearchOptions);
  dart.addTypeCaches(types$3.SearchOptions);
  dart.setMethodSignature(types$3.SearchOptions, () => ({
    __proto__: dart.getMethods(types$3.SearchOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types$3.SearchOptions, I[76]);
  dart.setFieldSignature(types$3.SearchOptions, () => ({
    __proto__: dart.getFields(types$3.SearchOptions.__proto__),
    limit: dart.finalFieldType(dart.nullable(core.int)),
    offset: dart.finalFieldType(dart.nullable(core.int)),
    sortBy: dart.finalFieldType(dart.nullable(types$3.SortBy)),
    search: dart.finalFieldType(dart.nullable(core.String))
  }));
  types$3.SortBy = class SortBy extends core.Object {
    get column() {
      return this[S$0.column];
    }
    set column(value) {
      super.column = value;
    }
    get order() {
      return this[S$0.order];
    }
    set order(value) {
      super.order = value;
    }
    static ['_#new#tearOff'](opts$) {
      let column = opts$ && 'column' in opts$ ? opts$.column : null;
      let order = opts$ && 'order' in opts$ ? opts$.order : null;
      return new types$3.SortBy.new({column: column, order: order});
    }
    toMap() {
      return new (T$.IdentityMapOfString$dynamic()).from(["column", this.column, "order", this.order]);
    }
  };
  (types$3.SortBy.new = function(opts$) {
    let column = opts$ && 'column' in opts$ ? opts$.column : null;
    let order = opts$ && 'order' in opts$ ? opts$.order : null;
    this[S$0.column] = column;
    this[S$0.order] = order;
    ;
  }).prototype = types$3.SortBy.prototype;
  dart.addTypeTests(types$3.SortBy);
  dart.addTypeCaches(types$3.SortBy);
  dart.setMethodSignature(types$3.SortBy, () => ({
    __proto__: dart.getMethods(types$3.SortBy.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types$3.SortBy, I[76]);
  dart.setFieldSignature(types$3.SortBy, () => ({
    __proto__: dart.getFields(types$3.SortBy.__proto__),
    column: dart.finalFieldType(dart.nullable(core.String)),
    order: dart.finalFieldType(dart.nullable(core.String))
  }));
  types$3.SignedUrl = class SignedUrl extends core.Object {
    get path() {
      return this[S$0.path];
    }
    set path(value) {
      super.path = value;
    }
    get signedUrl() {
      return this[S$0.signedUrl];
    }
    set signedUrl(value) {
      super.signedUrl = value;
    }
    static ['_#new#tearOff'](opts$) {
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let signedUrl = opts$ && 'signedUrl' in opts$ ? opts$.signedUrl : null;
      return new types$3.SignedUrl.new({path: path, signedUrl: signedUrl});
    }
    toString() {
      return "SignedUrl(path: " + this.path + ", signedUrl: " + this.signedUrl + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return types$3.SignedUrl.is(other) && other.path === this.path && other.signedUrl === this.signedUrl;
    }
    get hashCode() {
      return (this.path[S$.$hashCode] ^ this.signedUrl[S$.$hashCode]) >>> 0;
    }
    copyWith(opts$) {
      let t185, t185$;
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let signedUrl = opts$ && 'signedUrl' in opts$ ? opts$.signedUrl : null;
      return new types$3.SignedUrl.new({path: (t185 = path, t185 == null ? this.path : t185), signedUrl: (t185$ = signedUrl, t185$ == null ? this.signedUrl : t185$)});
    }
  };
  (types$3.SignedUrl.new = function(opts$) {
    let path = opts$ && 'path' in opts$ ? opts$.path : null;
    let signedUrl = opts$ && 'signedUrl' in opts$ ? opts$.signedUrl : null;
    this[S$0.path] = path;
    this[S$0.signedUrl] = signedUrl;
    ;
  }).prototype = types$3.SignedUrl.prototype;
  dart.addTypeTests(types$3.SignedUrl);
  dart.addTypeCaches(types$3.SignedUrl);
  dart.setMethodSignature(types$3.SignedUrl, () => ({
    __proto__: dart.getMethods(types$3.SignedUrl.__proto__),
    copyWith: dart.fnType(types$3.SignedUrl, [], {path: dart.nullable(core.String), signedUrl: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(types$3.SignedUrl, I[76]);
  dart.setFieldSignature(types$3.SignedUrl, () => ({
    __proto__: dart.getFields(types$3.SignedUrl.__proto__),
    path: dart.finalFieldType(core.String),
    signedUrl: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types$3.SignedUrl, ['toString', '_equals']);
  dart.defineExtensionAccessors(types$3.SignedUrl, ['hashCode']);
  types$3.SignedUploadURLResponse = class SignedUploadURLResponse extends types$3.SignedUrl {
    get token() {
      return this[S$0.token];
    }
    set token(value) {
      super.token = value;
    }
    static ['_#new#tearOff'](opts$) {
      let signedUrl = opts$ && 'signedUrl' in opts$ ? opts$.signedUrl : null;
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let token = opts$ && 'token' in opts$ ? opts$.token : null;
      return new types$3.SignedUploadURLResponse.new({signedUrl: signedUrl, path: path, token: token});
    }
  };
  (types$3.SignedUploadURLResponse.new = function(opts$) {
    let signedUrl = opts$ && 'signedUrl' in opts$ ? opts$.signedUrl : null;
    let path = opts$ && 'path' in opts$ ? opts$.path : null;
    let token = opts$ && 'token' in opts$ ? opts$.token : null;
    this[S$0.token] = token;
    types$3.SignedUploadURLResponse.__proto__.new.call(this, {signedUrl: signedUrl, path: path});
    ;
  }).prototype = types$3.SignedUploadURLResponse.prototype;
  dart.addTypeTests(types$3.SignedUploadURLResponse);
  dart.addTypeCaches(types$3.SignedUploadURLResponse);
  dart.setLibraryUri(types$3.SignedUploadURLResponse, I[76]);
  dart.setFieldSignature(types$3.SignedUploadURLResponse, () => ({
    __proto__: dart.getFields(types$3.SignedUploadURLResponse.__proto__),
    token: dart.finalFieldType(core.String)
  }));
  types$3.StorageException = class StorageException extends core.Object {
    get message() {
      return this[S$0.message$6];
    }
    set message(value) {
      super.message = value;
    }
    get error() {
      return this[S$0.error$1];
    }
    set error(value) {
      super.error = value;
    }
    get statusCode() {
      return this[S$0.statusCode$1];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    static ['_#new#tearOff'](message, opts$) {
      let error = opts$ && 'error' in opts$ ? opts$.error : null;
      let statusCode = opts$ && 'statusCode' in opts$ ? opts$.statusCode : null;
      return new types$3.StorageException.new(message, {error: error, statusCode: statusCode});
    }
    static fromJson(json, statusCode = null) {
      let t185, t185$;
      return new types$3.StorageException.new((t185 = T$.StringN().as(json[S$.$_get]("message")), t185 == null ? json[S$.$toString]() : t185), {error: T$.StringN().as(json[S$.$_get]("error")), statusCode: (t185$ = T$.StringN().as(json[S$.$_get]("statusCode")), t185$ == null ? statusCode : t185$)});
    }
    static ['_#fromJson#tearOff'](json, statusCode = null) {
      return types$3.StorageException.fromJson(json, statusCode);
    }
    toString() {
      return "StorageException(message: " + this.message + ", statusCode: " + dart.str(this.statusCode) + ", error: " + dart.str(this.error) + ")";
    }
  };
  (types$3.StorageException.new = function(message, opts$) {
    let error = opts$ && 'error' in opts$ ? opts$.error : null;
    let statusCode = opts$ && 'statusCode' in opts$ ? opts$.statusCode : null;
    this[S$0.message$6] = message;
    this[S$0.error$1] = error;
    this[S$0.statusCode$1] = statusCode;
    ;
  }).prototype = types$3.StorageException.prototype;
  dart.addTypeTests(types$3.StorageException);
  dart.addTypeCaches(types$3.StorageException);
  types$3.StorageException[dart.implements] = () => [core.Exception];
  dart.setStaticMethodSignature(types$3.StorageException, () => ['fromJson']);
  dart.setLibraryUri(types$3.StorageException, I[76]);
  dart.setFieldSignature(types$3.StorageException, () => ({
    __proto__: dart.getFields(types$3.StorageException.__proto__),
    message: dart.finalFieldType(core.String),
    error: dart.finalFieldType(dart.nullable(core.String)),
    statusCode: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types$3.StorageException, ['toString']);
  types$3.StorageRetryController = class StorageRetryController extends core.Object {
    get cancelled() {
      return this[S$0._cancelled];
    }
    static ['_#new#tearOff']() {
      return new types$3.StorageRetryController.new();
    }
    cancel() {
      this[S$0._cancelled] = true;
    }
  };
  (types$3.StorageRetryController.new = function() {
    this[S$0._cancelled] = false;
    ;
  }).prototype = types$3.StorageRetryController.prototype;
  dart.addTypeTests(types$3.StorageRetryController);
  dart.addTypeCaches(types$3.StorageRetryController);
  dart.setMethodSignature(types$3.StorageRetryController, () => ({
    __proto__: dart.getMethods(types$3.StorageRetryController.__proto__),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(types$3.StorageRetryController, () => ({
    __proto__: dart.getGetters(types$3.StorageRetryController.__proto__),
    cancelled: core.bool
  }));
  dart.setLibraryUri(types$3.StorageRetryController, I[76]);
  dart.setFieldSignature(types$3.StorageRetryController, () => ({
    __proto__: dart.getFields(types$3.StorageRetryController.__proto__),
    [S$0._cancelled]: dart.fieldType(core.bool)
  }));
  types$3.ResizeMode = class ResizeMode extends core._Enum {
    [S$._enumToString]() {
      return "ResizeMode." + this[S$._name];
    }
  };
  (types$3.ResizeMode.new = function(index, name) {
    types$3.ResizeMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$3.ResizeMode.prototype;
  dart.addTypeTests(types$3.ResizeMode);
  dart.addTypeCaches(types$3.ResizeMode);
  dart.setMethodSignature(types$3.ResizeMode, () => ({
    __proto__: dart.getMethods(types$3.ResizeMode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$3.ResizeMode, I[76]);
  dart.setStaticFieldSignature(types$3.ResizeMode, () => ['values', 'cover', 'contain', 'fill']);
  dart.defineLazy(types$3.ResizeMode, {
    /*types$3.ResizeMode.values*/get values() {
      return C[264] || CT.C264;
    },
    /*types$3.ResizeMode.cover*/get cover() {
      return C[265] || CT.C265;
    },
    /*types$3.ResizeMode.contain*/get contain() {
      return C[266] || CT.C266;
    },
    /*types$3.ResizeMode.fill*/get fill() {
      return C[267] || CT.C267;
    }
  }, false);
  types$3.RequestImageFormat = class RequestImageFormat extends core._Enum {
    [S$._enumToString]() {
      return "RequestImageFormat." + this[S$._name];
    }
  };
  (types$3.RequestImageFormat.new = function(index, name) {
    types$3.RequestImageFormat.__proto__.new.call(this, index, name);
    ;
  }).prototype = types$3.RequestImageFormat.prototype;
  dart.addTypeTests(types$3.RequestImageFormat);
  dart.addTypeCaches(types$3.RequestImageFormat);
  dart.setMethodSignature(types$3.RequestImageFormat, () => ({
    __proto__: dart.getMethods(types$3.RequestImageFormat.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types$3.RequestImageFormat, I[76]);
  dart.setStaticFieldSignature(types$3.RequestImageFormat, () => ['values', 'origin']);
  dart.defineLazy(types$3.RequestImageFormat, {
    /*types$3.RequestImageFormat.values*/get values() {
      return C[268] || CT.C268;
    },
    /*types$3.RequestImageFormat.origin*/get origin() {
      return C[269] || CT.C269;
    }
  }, false);
  types$3.TransformOptions = class TransformOptions extends core.Object {
    get width() {
      return this[S$0.width];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[S$0.height];
    }
    set height(value) {
      super.height = value;
    }
    get resize() {
      return this[S$0.resize];
    }
    set resize(value) {
      super.resize = value;
    }
    get quality() {
      return this[S$0.quality];
    }
    set quality(value) {
      super.quality = value;
    }
    get format() {
      return this[S$0.format];
    }
    set format(value) {
      super.format = value;
    }
    static ['_#new#tearOff'](opts$) {
      let width = opts$ && 'width' in opts$ ? opts$.width : null;
      let height = opts$ && 'height' in opts$ ? opts$.height : null;
      let resize = opts$ && 'resize' in opts$ ? opts$.resize : null;
      let quality = opts$ && 'quality' in opts$ ? opts$.quality : null;
      let format = opts$ && 'format' in opts$ ? opts$.format : null;
      return new types$3.TransformOptions.new({width: width, height: height, resize: resize, quality: quality, format: format});
    }
  };
  (types$3.TransformOptions.new = function(opts$) {
    let width = opts$ && 'width' in opts$ ? opts$.width : null;
    let height = opts$ && 'height' in opts$ ? opts$.height : null;
    let resize = opts$ && 'resize' in opts$ ? opts$.resize : null;
    let quality = opts$ && 'quality' in opts$ ? opts$.quality : null;
    let format = opts$ && 'format' in opts$ ? opts$.format : null;
    this[S$0.width] = width;
    this[S$0.height] = height;
    this[S$0.resize] = resize;
    this[S$0.quality] = quality;
    this[S$0.format] = format;
    ;
  }).prototype = types$3.TransformOptions.prototype;
  dart.addTypeTests(types$3.TransformOptions);
  dart.addTypeCaches(types$3.TransformOptions);
  dart.setLibraryUri(types$3.TransformOptions, I[76]);
  dart.setFieldSignature(types$3.TransformOptions, () => ({
    __proto__: dart.getFields(types$3.TransformOptions.__proto__),
    width: dart.finalFieldType(dart.nullable(core.int)),
    height: dart.finalFieldType(dart.nullable(core.int)),
    resize: dart.finalFieldType(dart.nullable(types$3.ResizeMode)),
    quality: dart.finalFieldType(dart.nullable(core.int)),
    format: dart.finalFieldType(dart.nullable(types$3.RequestImageFormat))
  }));
  types$3['ToQueryParams|get#toQueryParams'] = function ToQueryParams$124get$35toQueryParams($this) {
    return (() => {
      let t190 = new (T$.IdentityMapOfString$String()).new();
      if ($this.width != null) t190[S$.$_set]("width", dart.str($this.width));
      if ($this.height != null) t190[S$.$_set]("height", dart.str($this.height));
      if ($this.resize != null) t190[S$.$_set]("resize", types$3['ToSnakeCase|get#snakeCase'](dart.nullCheck($this.resize)));
      if ($this.quality != null) t190[S$.$_set]("quality", dart.str($this.quality));
      if ($this.format != null) t190[S$.$_set]("format", types$3['ToSnakeCase|get#snakeCase'](dart.nullCheck($this.format)));
      return t190;
    })();
  };
  types$3['ToSnakeCase|get#snakeCase'] = function ToSnakeCase$124get$35snakeCase$($this) {
    let t192;
    let a = "a"[S$.$codeUnitAt](0);
    let z = "z"[S$.$codeUnitAt](0);
    let A = "A"[S$.$codeUnitAt](0);
    let Z = "Z"[S$.$codeUnitAt](0);
    let result = (t192 = new core.StringBuffer.new(), (() => {
      t192.write(core['EnumName|get#name']($this)[S$.$_get](0)[S$.$toLowerCase]());
      return t192;
    })());
    for (let i = 1; i < core['EnumName|get#name']($this).length; i = i + 1) {
      let char = core['EnumName|get#name']($this)[S$.$codeUnitAt](i);
      if (A <= char && char <= Z) {
        let pChar = core['EnumName|get#name']($this)[S$.$codeUnitAt](i - 1);
        if (a <= pChar && pChar <= z) {
          result.write("_");
        }
      }
      result.write(core['EnumName|get#name']($this)[S$.$_get](i)[S$.$toLowerCase]());
    }
    return result.toString();
  };
  constants$1.Constants = class Constants extends core.Object {
    static ['_#new#tearOff']() {
      return new constants$1.Constants.new();
    }
  };
  (constants$1.Constants.new = function() {
    ;
  }).prototype = constants$1.Constants.prototype;
  dart.addTypeTests(constants$1.Constants);
  dart.addTypeCaches(constants$1.Constants);
  dart.setLibraryUri(constants$1.Constants, I[77]);
  dart.setStaticFieldSignature(constants$1.Constants, () => ['defaultHeaders']);
  dart.defineLazy(constants$1.Constants, {
    /*constants$1.Constants.defaultHeaders*/get defaultHeaders() {
      return C[270] || CT.C270;
    }
  }, false);
  base_client.BaseClient = class BaseClient extends core.Object {
    head(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      return this[S$0._sendUnstreamed]("HEAD", url, headers);
    }
    get(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      return this[S$0._sendUnstreamed]("GET", url, headers);
    }
    post(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
      return this[S$0._sendUnstreamed]("POST", url, headers, body, encoding);
    }
    put(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
      return this[S$0._sendUnstreamed]("PUT", url, headers, body, encoding);
    }
    patch(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
      return this[S$0._sendUnstreamed]("PATCH", url, headers, body, encoding);
    }
    delete(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
      return this[S$0._sendUnstreamed]("DELETE", url, headers, body, encoding);
    }
    read(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      return async.async(core.String, (function* read() {
        let response = (yield this.get(url, {headers: headers}));
        this[S$0._checkResponseSuccess](url, response);
        return response.body;
      }).bind(this));
    }
    readBytes(url, opts$) {
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      return async.async(typed_data.Uint8List, (function* readBytes() {
        let response = (yield this.get(url, {headers: headers}));
        this[S$0._checkResponseSuccess](url, response);
        return response.bodyBytes;
      }).bind(this));
    }
    [S$0._sendUnstreamed](method, url, headers, body = null, encoding = null) {
      return async.async(response$.Response, (function* _sendUnstreamed() {
        let request = new request$.Request.new(method, url);
        if (headers != null) request.headers[S$.$addAll](headers);
        if (encoding != null) request.encoding = encoding;
        if (body != null) {
          if (typeof body == 'string') {
            request.body = body;
          } else if (core.List.is(body)) {
            request.bodyBytes = body[S$.$cast](core.int);
          } else if (core.Map.is(body)) {
            request.bodyFields = body[S$.$cast](core.String, core.String);
          } else {
            dart.throw(new core.ArgumentError.new("Invalid request body \"" + dart.str(body) + "\"."));
          }
        }
        return response$.Response.fromStream(yield this.send(request));
      }).bind(this));
    }
    [S$0._checkResponseSuccess](url, response) {
      if (response.statusCode < 400) return;
      let message = "Request to " + dart.str(url) + " failed with status " + dart.str(response.statusCode);
      if (response.reasonPhrase != null) {
        message = message + ": " + dart.str(response.reasonPhrase);
      }
      dart.throw(new exception.ClientException.new(message + ".", url));
    }
    close() {
    }
  };
  (base_client.BaseClient.new = function() {
    ;
  }).prototype = base_client.BaseClient.prototype;
  dart.addTypeTests(base_client.BaseClient);
  dart.addTypeCaches(base_client.BaseClient);
  base_client.BaseClient[dart.implements] = () => [client$.Client];
  dart.setMethodSignature(base_client.BaseClient, () => ({
    __proto__: dart.getMethods(base_client.BaseClient.__proto__),
    head: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    get: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    post: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    put: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    patch: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    delete: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    read: dart.fnType(async.Future$(core.String), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    [S$0._sendUnstreamed]: dart.fnType(async.Future$(response$.Response), [core.String, core.Uri, dart.nullable(core.Map$(core.String, core.String))], [dart.nullable(core.Object), dart.nullable(convert.Encoding)]),
    [S$0._checkResponseSuccess]: dart.fnType(dart.void, [core.Uri, response$.Response]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(base_client.BaseClient, I[78]);
  auth_http_client.AuthHttpClient = class AuthHttpClient extends base_client.BaseClient {
    static ['_#new#tearOff'](_supabaseKey, _inner, _auth) {
      return new auth_http_client.AuthHttpClient.new(_supabaseKey, _inner, _auth);
    }
    send(request) {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let t192, t192$, t193, t193$;
        if (dart.test((t192$ = (t192 = this[S$0._auth].currentSession, t192 == null ? null : t192.isExpired), t192$ == null ? false : t192$))) {
          try {
            yield this[S$0._auth].refreshSession();
          } catch (e) {
            let _ = dart.getThrown(e);
            if (core.Object.is(_)) {
            } else
              throw e;
          }
        }
        let authBearer = (t193$ = (t193 = this[S$0._auth].currentSession, t193 == null ? null : t193.accessToken), t193$ == null ? this[S$0._supabaseKey] : t193$);
        request.headers[S$0.$putIfAbsent]("Authorization", dart.fn(() => "Bearer " + authBearer, T$.VoidToString()));
        request.headers[S$0.$putIfAbsent]("apikey", dart.fn(() => this[S$0._supabaseKey], T$.VoidToString()));
        return this[S$0._inner].send(request);
      }).bind(this));
    }
  };
  (auth_http_client.AuthHttpClient.new = function(_supabaseKey, _inner, _auth) {
    this[S$0._supabaseKey] = _supabaseKey;
    this[S$0._inner] = _inner;
    this[S$0._auth] = _auth;
    ;
  }).prototype = auth_http_client.AuthHttpClient.prototype;
  dart.addTypeTests(auth_http_client.AuthHttpClient);
  dart.addTypeCaches(auth_http_client.AuthHttpClient);
  dart.setMethodSignature(auth_http_client.AuthHttpClient, () => ({
    __proto__: dart.getMethods(auth_http_client.AuthHttpClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])
  }));
  dart.setLibraryUri(auth_http_client.AuthHttpClient, I[79]);
  dart.setFieldSignature(auth_http_client.AuthHttpClient, () => ({
    __proto__: dart.getFields(auth_http_client.AuthHttpClient.__proto__),
    [S$0._inner]: dart.finalFieldType(client$.Client),
    [S$0._auth]: dart.finalFieldType(gotrue_client.GoTrueClient),
    [S$0._supabaseKey]: dart.finalFieldType(core.String)
  }));
  supabase_stream_builder._FilterType = class _FilterType extends core._Enum {
    [S$._enumToString]() {
      return "_FilterType." + this[S$._name];
    }
  };
  (supabase_stream_builder._FilterType.new = function(index, name) {
    supabase_stream_builder._FilterType.__proto__.new.call(this, index, name);
    ;
  }).prototype = supabase_stream_builder._FilterType.prototype;
  dart.addTypeTests(supabase_stream_builder._FilterType);
  dart.addTypeCaches(supabase_stream_builder._FilterType);
  dart.setMethodSignature(supabase_stream_builder._FilterType, () => ({
    __proto__: dart.getMethods(supabase_stream_builder._FilterType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(supabase_stream_builder._FilterType, I[80]);
  dart.setStaticFieldSignature(supabase_stream_builder._FilterType, () => ['values', 'eq', 'neq', 'lt', 'lte', 'gt', 'gte', 'inFilter']);
  dart.defineLazy(supabase_stream_builder._FilterType, {
    /*supabase_stream_builder._FilterType.values*/get values() {
      return C[271] || CT.C271;
    },
    /*supabase_stream_builder._FilterType.eq*/get eq() {
      return C[272] || CT.C272;
    },
    /*supabase_stream_builder._FilterType.neq*/get neq() {
      return C[273] || CT.C273;
    },
    /*supabase_stream_builder._FilterType.lt*/get lt() {
      return C[274] || CT.C274;
    },
    /*supabase_stream_builder._FilterType.lte*/get lte() {
      return C[275] || CT.C275;
    },
    /*supabase_stream_builder._FilterType.gt*/get gt() {
      return C[276] || CT.C276;
    },
    /*supabase_stream_builder._FilterType.gte*/get gte() {
      return C[277] || CT.C277;
    },
    /*supabase_stream_builder._FilterType.inFilter*/get inFilter() {
      return C[278] || CT.C278;
    }
  }, false);
  supabase_stream_builder._StreamPostgrestFilter = class _StreamPostgrestFilter extends core.Object {
    static ['_#new#tearOff'](opts$) {
      let column = opts$ && 'column' in opts$ ? opts$.column : null;
      let value = opts$ && 'value' in opts$ ? opts$.value : null;
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      return new supabase_stream_builder._StreamPostgrestFilter.new({column: column, value: value, type: type});
    }
  };
  (supabase_stream_builder._StreamPostgrestFilter.new = function(opts$) {
    let column = opts$ && 'column' in opts$ ? opts$.column : null;
    let value = opts$ && 'value' in opts$ ? opts$.value : null;
    let type = opts$ && 'type' in opts$ ? opts$.type : null;
    this.column = column;
    this.value = value;
    this.type = type;
    ;
  }).prototype = supabase_stream_builder._StreamPostgrestFilter.prototype;
  dart.addTypeTests(supabase_stream_builder._StreamPostgrestFilter);
  dart.addTypeCaches(supabase_stream_builder._StreamPostgrestFilter);
  dart.setLibraryUri(supabase_stream_builder._StreamPostgrestFilter, I[80]);
  dart.setFieldSignature(supabase_stream_builder._StreamPostgrestFilter, () => ({
    __proto__: dart.getFields(supabase_stream_builder._StreamPostgrestFilter.__proto__),
    column: dart.finalFieldType(core.String),
    value: dart.finalFieldType(dart.dynamic),
    type: dart.finalFieldType(supabase_stream_builder._FilterType)
  }));
  supabase_stream_builder._Order = class _Order extends core.Object {
    static ['_#new#tearOff'](opts$) {
      let column = opts$ && 'column' in opts$ ? opts$.column : null;
      let ascending = opts$ && 'ascending' in opts$ ? opts$.ascending : null;
      return new supabase_stream_builder._Order.new({column: column, ascending: ascending});
    }
  };
  (supabase_stream_builder._Order.new = function(opts$) {
    let column = opts$ && 'column' in opts$ ? opts$.column : null;
    let ascending = opts$ && 'ascending' in opts$ ? opts$.ascending : null;
    this.column = column;
    this.ascending = ascending;
    ;
  }).prototype = supabase_stream_builder._Order.prototype;
  dart.addTypeTests(supabase_stream_builder._Order);
  dart.addTypeCaches(supabase_stream_builder._Order);
  dart.setLibraryUri(supabase_stream_builder._Order, I[80]);
  dart.setFieldSignature(supabase_stream_builder._Order, () => ({
    __proto__: dart.getFields(supabase_stream_builder._Order.__proto__),
    column: dart.finalFieldType(core.String),
    ascending: dart.finalFieldType(core.bool)
  }));
  supabase_stream_builder.SupabaseStreamBuilder = class SupabaseStreamBuilder extends async.Stream$(core.List$(core.Map$(core.String, dart.dynamic))) {
    static ['_#new#tearOff'](opts$) {
      let queryBuilder = opts$ && 'queryBuilder' in opts$ ? opts$.queryBuilder : null;
      let realtimeTopic = opts$ && 'realtimeTopic' in opts$ ? opts$.realtimeTopic : null;
      let realtimeClient = opts$ && 'realtimeClient' in opts$ ? opts$.realtimeClient : null;
      let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
      let table = opts$ && 'table' in opts$ ? opts$.table : null;
      let primaryKey = opts$ && 'primaryKey' in opts$ ? opts$.primaryKey : null;
      return new supabase_stream_builder.SupabaseStreamBuilder.new({queryBuilder: queryBuilder, realtimeTopic: realtimeTopic, realtimeClient: realtimeClient, schema: schema, table: table, primaryKey: primaryKey});
    }
    eq(column, value) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 90, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.eq, column: column, value: value});
      return this;
    }
    neq(column, value) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 110, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.neq, column: column, value: value});
      return this;
    }
    lt(column, value) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 130, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.lt, column: column, value: value});
      return this;
    }
    lte(column, value) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 150, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.lte, column: column, value: value});
      return this;
    }
    gt(column, value) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 170, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.gt, column: column, value: value});
      return this;
    }
    gte(column, value) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 190, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.gte, column: column, value: value});
      return this;
    }
    inFilter(column, values) {
      if (!(this[S$0._streamFilter] == null)) dart.assertFailed("Only one filter can be applied to `.stream()`", I[81], 210, 7, "_streamFilter == null");
      this[S$0._streamFilter] = new supabase_stream_builder._StreamPostgrestFilter.new({type: supabase_stream_builder._FilterType.inFilter, column: column, value: values});
      return this;
    }
    order(column, opts$) {
      let ascending = opts$ && 'ascending' in opts$ ? opts$.ascending : false;
      this[S$0._orderBy] = new supabase_stream_builder._Order.new({column: column, ascending: ascending});
      return this;
    }
    limit(count) {
      this[S$0._limit] = count;
      return this;
    }
    execute() {
      this[S$0._setupStream]();
      return dart.nullCheck(this[S$0._streamController]).stream;
    }
    listen(onData, opts$) {
      let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
      let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
      let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
      this[S$0._setupStream]();
      return dart.nullCheck(this[S$0._streamController]).stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    [S$0._setupStream]() {
      this[S$0._streamController] == null ? this[S$0._streamController] = T$.BehaviorSubjectOfListOfMapOfString$dynamic().new({onListen: dart.fn(() => {
          this[S$0._getStreamData]();
        }, T$.VoidTovoid()), onCancel: dart.fn(() => {
          let t195, t195$;
          t195 = this[S$0._channel];
          t195 == null ? null : t195.unsubscribe();
          t195$ = this[S$0._streamController];
          t195$ == null ? null : t195$.close();
          this[S$0._streamController] = null;
        }, T$.VoidTovoid())}) : null;
    }
    [S$0._getStreamData]() {
      return async.async(dart.void, (function* _getStreamData() {
        let t195, t195$;
        let currentStreamFilter = this[S$0._streamFilter];
        this[S$0._streamData] = T$.JSArrayOfMapOfString$dynamic().of([]);
        let realtimeFilter = null;
        if (currentStreamFilter != null) {
          if (currentStreamFilter.type === supabase_stream_builder._FilterType.inFilter) {
            let value = currentStreamFilter.value;
            if (T$.ListOfString().is(value)) {
              realtimeFilter = currentStreamFilter.column + "=in.(" + value[S$.$map](core.String, dart.fn(s => "\"" + s + "\"", T$.StringToString()))[S$.$join](",") + ")";
            } else {
              realtimeFilter = currentStreamFilter.column + "=in.(" + dart.str(dart.dsend(value, 'join', [","])) + ")";
            }
          } else {
            realtimeFilter = currentStreamFilter.column + "=" + core['EnumName|get#name'](currentStreamFilter.type) + "." + dart.str(currentStreamFilter.value);
          }
        }
        this[S$0._channel] = this[S$0._realtimeClient].channel(this[S$0._realtimeTopic]);
        dart.nullCheck(this[S$0._channel]).on(realtime_channel.RealtimeListenTypes.postgresChanges, new realtime_channel.ChannelFilter.new({event: "INSERT", schema: this[S$0._schema$2], table: this[S$0._table$1], filter: realtimeFilter}), dart.fn((payload, ref = null) => {
          let newRecord = T$.LinkedHashMapOfString$dynamic().from(core.Map.as(dart.nullCheck(dart.dsend(payload, '_get', ["new"]))));
          this[S$0._streamData][S$.$add](newRecord);
          this[S$0._addStream]();
        }, T$.dynamicAnddynamicTovoid$1())).on(realtime_channel.RealtimeListenTypes.postgresChanges, new realtime_channel.ChannelFilter.new({event: "UPDATE", schema: this[S$0._schema$2], table: this[S$0._table$1], filter: realtimeFilter}), dart.fn((payload, ref = null) => {
          let updatedIndex = this[S$0._streamData][S$0.$indexWhere](dart.fn(element => this[S$0._isTargetRecord]({record: element, payload: core.Map.as(payload)}), T$.MapOfString$dynamicTobool()));
          let updatedRecord = T$.LinkedHashMapOfString$dynamic().from(core.Map.as(dart.nullCheck(dart.dsend(payload, '_get', ["new"]))));
          if (updatedIndex >= 0) {
            this[S$0._streamData][S$.$_set](updatedIndex, updatedRecord);
          } else {
            this[S$0._streamData][S$.$add](updatedRecord);
          }
          this[S$0._addStream]();
        }, T$.dynamicAnddynamicTovoid$1())).on(realtime_channel.RealtimeListenTypes.postgresChanges, new realtime_channel.ChannelFilter.new({event: "DELETE", schema: this[S$0._schema$2], table: this[S$0._table$1], filter: realtimeFilter}), dart.fn((payload, ref = null) => {
          let deletedIndex = this[S$0._streamData][S$0.$indexWhere](dart.fn(element => this[S$0._isTargetRecord]({record: element, payload: core.Map.as(payload)}), T$.MapOfString$dynamicTobool()));
          if (deletedIndex >= 0) {
            this[S$0._streamData][S$0.$removeAt](deletedIndex);
            this[S$0._addStream]();
          }
        }, T$.dynamicAnddynamicTovoid$1())).subscribe(dart.fn((status, error = null) => {
          if (error != null) {
            this[S$0._addException](error);
          }
        }, T$.StringAndObjectNTovoid()));
        let query = this[S$0._queryBuilder].select(dart.dynamic);
        if (this[S$0._streamFilter] != null) {
          switch (dart.nullCheck(this[S$0._streamFilter]).type) {
            case C[272] || CT.C272:
              {
                query = query.eq(dart.nullCheck(this[S$0._streamFilter]).column, dart.nullCheck(this[S$0._streamFilter]).value);
                break;
              }
            case C[273] || CT.C273:
              {
                query = query.neq(dart.nullCheck(this[S$0._streamFilter]).column, dart.nullCheck(this[S$0._streamFilter]).value);
                break;
              }
            case C[274] || CT.C274:
              {
                query = query.lt(dart.nullCheck(this[S$0._streamFilter]).column, dart.nullCheck(this[S$0._streamFilter]).value);
                break;
              }
            case C[275] || CT.C275:
              {
                query = query.lte(dart.nullCheck(this[S$0._streamFilter]).column, dart.nullCheck(this[S$0._streamFilter]).value);
                break;
              }
            case C[276] || CT.C276:
              {
                query = query.gt(dart.nullCheck(this[S$0._streamFilter]).column, dart.nullCheck(this[S$0._streamFilter]).value);
                break;
              }
            case C[277] || CT.C277:
              {
                query = query.gte(dart.nullCheck(this[S$0._streamFilter]).column, dart.nullCheck(this[S$0._streamFilter]).value);
                break;
              }
            case C[278] || CT.C278:
              {
                query = query.in_(dart.nullCheck(this[S$0._streamFilter]).column, core.List.as(dart.nullCheck(this[S$0._streamFilter]).value));
                break;
              }
          }
        }
        let transformQuery = null;
        if (this[S$0._orderBy] != null) {
          transformQuery = query.order(dart.nullCheck(this[S$0._orderBy]).column, {ascending: dart.nullCheck(this[S$0._orderBy]).ascending});
        }
        if (this[S$0._limit] != null) {
          transformQuery = (t195 = transformQuery, t195 == null ? query : t195).limit(dart.nullCheck(this[S$0._limit]));
        }
        try {
          let data = (yield (t195$ = transformQuery, t195$ == null ? query : t195$));
          let rows = T$.ListOfMapOfString$dynamic().from(core.List.as(data));
          this[S$0._streamData][S$.$addAll](rows);
          this[S$0._addStream]();
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this[S$0._addException](error, stackTrace);
          } else
            throw e;
        }
      }).bind(this));
    }
    [S$0._isTargetRecord](opts$) {
      let record = opts$ && 'record' in opts$ ? opts$.record : null;
      let payload = opts$ && 'payload' in opts$ ? opts$.payload : null;
      let targetRecord = null;
      function targetRecord$35get() {
        let t197;
        t197 = targetRecord;
        return t197 == null ? dart.throw(new _internal.LateError.localNI("targetRecord")) : t197;
      }
      function targetRecord$35set(targetRecord$35param) {
        if (targetRecord == null)
          return targetRecord = targetRecord$35param;
        else
          dart.throw(new _internal.LateError.localAI("targetRecord"));
      }
      if (dart.equals(payload[S$.$_get]("eventType"), "UPDATE")) {
        targetRecord$35set(T$.MapOfString$dynamic().as(dart.nullCheck(payload[S$.$_get]("new"))));
      } else if (dart.equals(payload[S$.$_get]("eventType"), "DELETE")) {
        targetRecord$35set(T$.MapOfString$dynamic().as(dart.nullCheck(payload[S$.$_get]("old"))));
      }
      return this[S$0._uniqueColumns][S$.$every](dart.fn(column => dart.equals(record[S$.$_get](column), targetRecord$35get()[S$.$_get](column)), T$.StringTobool()));
    }
    [S$0._sortData]() {
      let orderModifier = dart.nullCheck(this[S$0._orderBy]).ascending ? 1 : -1;
      this[S$0._streamData][S$0.$sort](dart.fn((a, b) => {
        if (typeof a[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column) == 'string' && typeof b[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column) == 'string') {
          return orderModifier * core.String.as(a[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column))[S$0.$compareTo](core.String.as(b[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column)));
        } else if (core.int.is(a[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column)) && core.int.is(b[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column))) {
          return orderModifier * core.int.as(a[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column))[S$0.$compareTo](core.int.as(b[S$.$_get](dart.nullCheck(this[S$0._orderBy]).column)));
        } else {
          return 0;
        }
      }, T$.MapOfString$dynamicAndMapOfString$dynamicToint()));
    }
    [S$0._addStream]() {
      let t199, t199$;
      if (this[S$0._orderBy] != null) {
        this[S$0._sortData]();
      }
      if (!dart.test((t199$ = (t199 = this[S$0._streamController], t199 == null ? null : t199.isClosed), t199$ == null ? true : t199$))) {
        let emitData = (this[S$0._limit] != null ? this[S$0._streamData][S$0.$take](dart.nullCheck(this[S$0._limit])) : this[S$0._streamData])[S$.$toList]();
        dart.nullCheck(this[S$0._streamController]).add(emitData);
      }
    }
    [S$0._addException](error, stackTrace = null) {
      let t199, t199$, t200, t199$0;
      if (!dart.test((t199$ = (t199 = this[S$0._streamController], t199 == null ? null : t199.isClosed), t199$ == null ? true : t199$))) {
        t199$0 = this[S$0._streamController];
        t199$0 == null ? null : t199$0.addError(error, (t200 = stackTrace, t200 == null ? core.StackTrace.current : t200));
      }
    }
    get isBroadcast() {
      return true;
    }
    asyncMap(E, convert) {
      let controller = behavior_subject.BehaviorSubject$(E).new();
      controller.onListen = dart.fn(() => {
        let t200;
        let subscription = this.listen(null, {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')});
        function add(value) {
          controller.add(value);
        }
        dart.fn(add, dart.fnType(dart.void, [E]));
        let addError = dart.bind(controller, 'addError');
        let resume = dart.bind(subscription, 'resume');
        subscription.onData(dart.fn(event => {
          let newValue = null;
          try {
            newValue = convert(event);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              controller.addError(e, s);
              return;
            } else
              throw e$;
          }
          if (async.Future$(E).is(newValue)) {
            subscription.pause();
            newValue.then(dart.void, add, {onError: addError}).whenComplete(resume);
          } else {
            controller.add(E.as(newValue));
          }
        }, T$.ListOfMapOfString$dynamicTovoid()));
        controller.onCancel = dart.bind(subscription, 'cancel');
        if (!this.isBroadcast) {
          t200 = controller;
          (() => {
            t200.onPause = dart.bind(subscription, 'pause');
            t200.onResume = resume;
            return t200;
          })();
        }
      }, T$.VoidTovoid());
      return controller.stream;
    }
    asyncExpand(E, convert) {
      let controller = behavior_subject.BehaviorSubject$(E).new();
      controller.onListen = dart.fn(() => {
        let t201;
        let subscription = this.listen(null, {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')});
        subscription.onData(dart.fn(event => {
          let newStream = null;
          try {
            newStream = convert(event);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              controller.addError(e, s);
              return;
            } else
              throw e$;
          }
          if (newStream != null) {
            subscription.pause();
            controller.addStream(newStream).whenComplete(dart.bind(subscription, 'resume'));
          }
        }, T$.ListOfMapOfString$dynamicTovoid()));
        controller.onCancel = dart.bind(subscription, 'cancel');
        if (!this.isBroadcast) {
          t201 = controller;
          (() => {
            t201.onPause = dart.bind(subscription, 'pause');
            t201.onResume = dart.bind(subscription, 'resume');
            return t201;
          })();
        }
      }, T$.VoidTovoid());
      return controller.stream;
    }
  };
  (supabase_stream_builder.SupabaseStreamBuilder.new = function(opts$) {
    let queryBuilder = opts$ && 'queryBuilder' in opts$ ? opts$.queryBuilder : null;
    let realtimeTopic = opts$ && 'realtimeTopic' in opts$ ? opts$.realtimeTopic : null;
    let realtimeClient = opts$ && 'realtimeClient' in opts$ ? opts$.realtimeClient : null;
    let schema = opts$ && 'schema' in opts$ ? opts$.schema : null;
    let table = opts$ && 'table' in opts$ ? opts$.table : null;
    let primaryKey = opts$ && 'primaryKey' in opts$ ? opts$.primaryKey : null;
    this[S$0._channel] = null;
    this[S$0._streamController] = null;
    this[S$0._streamData] = T$.JSArrayOfMapOfString$dynamic().of([]);
    this[S$0._streamFilter] = null;
    this[S$0._orderBy] = null;
    this[S$0._limit] = null;
    this[S$0._queryBuilder] = queryBuilder;
    this[S$0._realtimeTopic] = realtimeTopic;
    this[S$0._realtimeClient] = realtimeClient;
    this[S$0._schema$2] = schema;
    this[S$0._table$1] = table;
    this[S$0._uniqueColumns] = primaryKey;
    supabase_stream_builder.SupabaseStreamBuilder.__proto__.new.call(this);
    ;
  }).prototype = supabase_stream_builder.SupabaseStreamBuilder.prototype;
  dart.addTypeTests(supabase_stream_builder.SupabaseStreamBuilder);
  dart.addTypeCaches(supabase_stream_builder.SupabaseStreamBuilder);
  dart.setMethodSignature(supabase_stream_builder.SupabaseStreamBuilder, () => ({
    __proto__: dart.getMethods(supabase_stream_builder.SupabaseStreamBuilder.__proto__),
    eq: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, dart.dynamic]),
    neq: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, dart.dynamic]),
    lt: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, dart.dynamic]),
    lte: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, dart.dynamic]),
    gt: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, dart.dynamic]),
    gte: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, dart.dynamic]),
    inFilter: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String, core.List]),
    order: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.String], {ascending: core.bool}, {}),
    limit: dart.fnType(supabase_stream_builder.SupabaseStreamBuilder, [core.int]),
    execute: dart.fnType(async.Stream$(core.List$(core.Map$(core.String, dart.dynamic))), []),
    listen: dart.fnType(async.StreamSubscription$(core.List$(core.Map$(core.String, dart.dynamic))), [dart.nullable(dart.fnType(dart.void, [core.List$(core.Map$(core.String, dart.dynamic))]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    [S$0._setupStream]: dart.fnType(dart.void, []),
    [S$0._getStreamData]: dart.fnType(async.Future$(dart.void), []),
    [S$0._isTargetRecord]: dart.fnType(core.bool, [], {}, {payload: core.Map, record: core.Map$(core.String, dart.dynamic)}),
    [S$0._sortData]: dart.fnType(dart.void, []),
    [S$0._addStream]: dart.fnType(dart.void, []),
    [S$0._addException]: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    asyncMap: dart.gFnType(E => [async.Stream$(E), [dart.fnType(async.FutureOr$(E), [core.List$(core.Map$(core.String, dart.dynamic))])]], E => [dart.nullable(core.Object)]),
    asyncExpand: dart.gFnType(E => [async.Stream$(E), [dart.fnType(dart.nullable(async.Stream$(E)), [core.List$(core.Map$(core.String, dart.dynamic))])]], E => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(supabase_stream_builder.SupabaseStreamBuilder, I[80]);
  dart.setFieldSignature(supabase_stream_builder.SupabaseStreamBuilder, () => ({
    __proto__: dart.getFields(supabase_stream_builder.SupabaseStreamBuilder.__proto__),
    [S$0._queryBuilder]: dart.finalFieldType(postgrest_builder.PostgrestQueryBuilder),
    [S$0._realtimeClient]: dart.finalFieldType(realtime_client$.RealtimeClient),
    [S$0._realtimeTopic]: dart.finalFieldType(core.String),
    [S$0._channel]: dart.fieldType(dart.nullable(realtime_channel.RealtimeChannel)),
    [S$0._schema$2]: dart.finalFieldType(core.String),
    [S$0._table$1]: dart.finalFieldType(core.String),
    [S$0._uniqueColumns]: dart.finalFieldType(core.List$(core.String)),
    [S$0._streamController]: dart.fieldType(dart.nullable(behavior_subject.BehaviorSubject$(core.List$(core.Map$(core.String, dart.dynamic))))),
    [S$0._streamData]: dart.fieldType(core.List$(core.Map$(core.String, dart.dynamic))),
    [S$0._streamFilter]: dart.fieldType(dart.nullable(supabase_stream_builder._StreamPostgrestFilter)),
    [S$0._orderBy]: dart.fieldType(dart.nullable(supabase_stream_builder._Order)),
    [S$0._limit]: dart.fieldType(dart.nullable(core.int))
  }));
  hive.HiveField = class HiveField extends core.Object {
    get index() {
      return this[S$0.index];
    }
    set index(value) {
      super.index = value;
    }
    get defaultValue() {
      return this[S$0.defaultValue];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    static ['_#new#tearOff'](index, opts$) {
      let defaultValue = opts$ && 'defaultValue' in opts$ ? opts$.defaultValue : null;
      return new hive.HiveField.new(index, {defaultValue: defaultValue});
    }
  };
  (hive.HiveField.new = function(index, opts$) {
    let defaultValue = opts$ && 'defaultValue' in opts$ ? opts$.defaultValue : null;
    this[S$0.index] = index;
    this[S$0.defaultValue] = defaultValue;
    ;
  }).prototype = hive.HiveField.prototype;
  dart.addTypeTests(hive.HiveField);
  dart.addTypeCaches(hive.HiveField);
  dart.setLibraryUri(hive.HiveField, I[82]);
  dart.setFieldSignature(hive.HiveField, () => ({
    __proto__: dart.getFields(hive.HiveField.__proto__),
    index: dart.finalFieldType(core.int),
    defaultValue: dart.finalFieldType(dart.dynamic)
  }));
  hive.HiveType = class HiveType extends core.Object {
    get typeId() {
      return this[S$0.typeId];
    }
    set typeId(value) {
      super.typeId = value;
    }
    get adapterName() {
      return this[S$0.adapterName];
    }
    set adapterName(value) {
      super.adapterName = value;
    }
    static ['_#new#tearOff'](opts$) {
      let typeId = opts$ && 'typeId' in opts$ ? opts$.typeId : null;
      let adapterName = opts$ && 'adapterName' in opts$ ? opts$.adapterName : null;
      return new hive.HiveType.new({typeId: typeId, adapterName: adapterName});
    }
  };
  (hive.HiveType.new = function(opts$) {
    let typeId = opts$ && 'typeId' in opts$ ? opts$.typeId : null;
    let adapterName = opts$ && 'adapterName' in opts$ ? opts$.adapterName : null;
    this[S$0.typeId] = typeId;
    this[S$0.adapterName] = adapterName;
    ;
  }).prototype = hive.HiveType.prototype;
  dart.addTypeTests(hive.HiveType);
  dart.addTypeCaches(hive.HiveType);
  dart.setLibraryUri(hive.HiveType, I[82]);
  dart.setFieldSignature(hive.HiveType, () => ({
    __proto__: dart.getFields(hive.HiveType.__proto__),
    typeId: dart.finalFieldType(core.int),
    adapterName: dart.finalFieldType(dart.nullable(core.String))
  }));
  hive.BinaryReader = class BinaryReader extends core.Object {};
  (hive.BinaryReader.new = function() {
    ;
  }).prototype = hive.BinaryReader.prototype;
  dart.addTypeTests(hive.BinaryReader);
  dart.addTypeCaches(hive.BinaryReader);
  dart.setLibraryUri(hive.BinaryReader, I[82]);
  dart.setStaticFieldSignature(hive.BinaryReader, () => ['utf8Decoder']);
  dart.defineLazy(hive.BinaryReader, {
    /*hive.BinaryReader.utf8Decoder*/get utf8Decoder() {
      return C[279] || CT.C279;
    }
  }, false);
  hive.BinaryWriter = class BinaryWriter extends core.Object {};
  (hive.BinaryWriter.new = function() {
    ;
  }).prototype = hive.BinaryWriter.prototype;
  dart.addTypeTests(hive.BinaryWriter);
  dart.addTypeCaches(hive.BinaryWriter);
  dart.setLibraryUri(hive.BinaryWriter, I[82]);
  dart.setStaticFieldSignature(hive.BinaryWriter, () => ['utf8Encoder']);
  dart.defineLazy(hive.BinaryWriter, {
    /*hive.BinaryWriter.utf8Encoder*/get utf8Encoder() {
      return C[280] || CT.C280;
    }
  }, false);
  const _is_Box_default = Symbol('_is_Box_default');
  hive.Box$ = dart.generic(E => {
    class Box extends core.Object {}
    (Box.new = function() {
      ;
    }).prototype = Box.prototype;
    dart.addTypeTests(Box);
    Box.prototype[_is_Box_default] = true;
    dart.addTypeCaches(Box);
    Box[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setLibraryUri(Box, I[82]);
    return Box;
  });
  hive.Box = hive.Box$();
  dart.addTypeTests(hive.Box, _is_Box_default);
  hive.BoxEvent = class BoxEvent extends core.Object {
    get key() {
      return this[S$0.key$1];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[S$0.value];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[S$0.deleted];
    }
    set deleted(value) {
      super.deleted = value;
    }
    static ['_#new#tearOff'](key, value, deleted) {
      return new hive.BoxEvent.new(key, value, deleted);
    }
    _equals(other) {
      if (other == null) return false;
      if (hive.BoxEvent.is(other)) {
        return dart.equals(other.key, this.key) && dart.equals(other.value, this.value);
      }
      return false;
    }
    get hashCode() {
      return (this[S$0.$runtimeType].hashCode ^ dart.hashCode(this.key) ^ dart.hashCode(this.value)) >>> 0;
    }
  };
  (hive.BoxEvent.new = function(key, value, deleted) {
    this[S$0.key$1] = key;
    this[S$0.value] = value;
    this[S$0.deleted] = deleted;
    ;
  }).prototype = hive.BoxEvent.prototype;
  dart.addTypeTests(hive.BoxEvent);
  dart.addTypeCaches(hive.BoxEvent);
  dart.setMethodSignature(hive.BoxEvent, () => ({
    __proto__: dart.getMethods(hive.BoxEvent.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [S$.$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(hive.BoxEvent, I[82]);
  dart.setFieldSignature(hive.BoxEvent, () => ({
    __proto__: dart.getFields(hive.BoxEvent.__proto__),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(hive.BoxEvent, ['_equals']);
  dart.defineExtensionAccessors(hive.BoxEvent, ['hashCode']);
  const _is_BoxBase_default = Symbol('_is_BoxBase_default');
  hive.BoxBase$ = dart.generic(E => {
    class BoxBase extends core.Object {}
    (BoxBase.new = function() {
      ;
    }).prototype = BoxBase.prototype;
    dart.addTypeTests(BoxBase);
    BoxBase.prototype[_is_BoxBase_default] = true;
    dart.addTypeCaches(BoxBase);
    dart.setLibraryUri(BoxBase, I[82]);
    return BoxBase;
  });
  hive.BoxBase = hive.BoxBase$();
  dart.addTypeTests(hive.BoxBase, _is_BoxBase_default);
  const _is_LazyBox_default = Symbol('_is_LazyBox_default');
  hive.LazyBox$ = dart.generic(E => {
    class LazyBox extends hive.BoxBase$(E) {}
    (LazyBox.new = function() {
      ;
    }).prototype = LazyBox.prototype;
    dart.addTypeTests(LazyBox);
    LazyBox.prototype[_is_LazyBox_default] = true;
    dart.addTypeCaches(LazyBox);
    dart.setLibraryUri(LazyBox, I[82]);
    return LazyBox;
  });
  hive.LazyBox = hive.LazyBox$();
  dart.addTypeTests(hive.LazyBox, _is_LazyBox_default);
  hive.HiveAesCipher = class HiveAesCipher extends core.Object {
    get [S$0._cipher]() {
      let t201;
      t201 = this[S$0.__HiveAesCipher__cipher];
      return t201 == null ? dart.throw(new _internal.LateError.fieldNI("_cipher")) : t201;
    }
    set [S$0._cipher](_cipher$35param) {
      if (this[S$0.__HiveAesCipher__cipher] == null)
        this[S$0.__HiveAesCipher__cipher] = _cipher$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_cipher"));
    }
    get [S$0._keyCrc]() {
      let t201;
      t201 = this[S$0.__HiveAesCipher__keyCrc];
      return t201 == null ? dart.throw(new _internal.LateError.fieldNI("_keyCrc")) : t201;
    }
    set [S$0._keyCrc](_keyCrc$35param) {
      if (this[S$0.__HiveAesCipher__keyCrc] == null)
        this[S$0.__HiveAesCipher__keyCrc] = _keyCrc$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_keyCrc"));
    }
    static ['_#new#tearOff'](key) {
      return new hive.HiveAesCipher.new(key);
    }
    calculateKeyCrc() {
      return this[S$0._keyCrc];
    }
    decrypt(inp, inpOff, inpLength, out, outOff) {
      let iv = extensions['Uint8ListX|view'](inp, inpOff, 16);
      return this[S$0._cipher].decrypt(iv, inp, inpOff + 16, inpLength - 16, out, 0);
    }
    generateIv() {
      return extensions['RandomX|nextBytes'](hive.HiveAesCipher._ivRandom, 16);
    }
    encrypt(inp, inpOff, inpLength, out, outOff) {
      let iv = this.generateIv();
      out[S$0.$setAll](outOff, iv);
      let len = this[S$0._cipher].encrypt(iv, inp, 0, inpLength, out, outOff + 16);
      return len + 16;
    }
    maxEncryptedSize(inp) {
      return inp[S$.$length] + 32;
    }
  };
  (hive.HiveAesCipher.new = function(key) {
    this[S$0.__HiveAesCipher__cipher] = null;
    this[S$0.__HiveAesCipher__keyCrc] = null;
    if (key[S$.$length] !== 32 || key[S$.$any](dart.fn(it => it < 0 || it > 255, T$.intTobool()))) {
      dart.throw(new core.ArgumentError.new("The encryption key has to be a 32 byte (256 bit) array."));
    }
    let keyBytes = _native_typed_data.NativeUint8List.fromList(key);
    this[S$0._cipher] = new aes_cbc_pkcs7.AesCbcPkcs7.new(keyBytes);
    this[S$0._keyCrc] = crc32.Crc32.compute(typed_data.Uint8List.as(sha256.sha256.convert(keyBytes).bytes));
  }).prototype = hive.HiveAesCipher.prototype;
  dart.addTypeTests(hive.HiveAesCipher);
  dart.addTypeCaches(hive.HiveAesCipher);
  hive.HiveAesCipher[dart.implements] = () => [hive.HiveCipher];
  dart.setMethodSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getMethods(hive.HiveAesCipher.__proto__),
    calculateKeyCrc: dart.fnType(core.int, []),
    decrypt: dart.fnType(core.int, [typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    generateIv: dart.fnType(typed_data.Uint8List, []),
    encrypt: dart.fnType(core.int, [typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    maxEncryptedSize: dart.fnType(core.int, [typed_data.Uint8List])
  }));
  dart.setGetterSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getGetters(hive.HiveAesCipher.__proto__),
    [S$0._cipher]: aes_cbc_pkcs7.AesCbcPkcs7,
    [S$0._keyCrc]: core.int
  }));
  dart.setSetterSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getSetters(hive.HiveAesCipher.__proto__),
    [S$0._cipher]: aes_cbc_pkcs7.AesCbcPkcs7,
    [S$0._keyCrc]: core.int
  }));
  dart.setLibraryUri(hive.HiveAesCipher, I[82]);
  dart.setFieldSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getFields(hive.HiveAesCipher.__proto__),
    [S$0.__HiveAesCipher__cipher]: dart.fieldType(dart.nullable(aes_cbc_pkcs7.AesCbcPkcs7)),
    [S$0.__HiveAesCipher__keyCrc]: dart.fieldType(dart.nullable(core.int))
  }));
  dart.setStaticFieldSignature(hive.HiveAesCipher, () => ['_ivRandom']);
  dart.defineLazy(hive.HiveAesCipher, {
    /*hive.HiveAesCipher._ivRandom*/get _ivRandom() {
      return math.Random.secure();
    }
  }, false);
  hive.HiveCipher = class HiveCipher extends core.Object {};
  (hive.HiveCipher.new = function() {
    ;
  }).prototype = hive.HiveCipher.prototype;
  dart.addTypeTests(hive.HiveCipher);
  dart.addTypeCaches(hive.HiveCipher);
  dart.setLibraryUri(hive.HiveCipher, I[82]);
  hive.HiveInterface = class HiveInterface extends core.Object {};
  (hive.HiveInterface.new = function() {
    ;
  }).prototype = hive.HiveInterface.prototype;
  dart.addTypeTests(hive.HiveInterface);
  dart.addTypeCaches(hive.HiveInterface);
  hive.HiveInterface[dart.implements] = () => [hive.TypeRegistry];
  dart.setLibraryUri(hive.HiveInterface, I[82]);
  hive.HiveError = class HiveError extends core.Error {
    get message() {
      return this[S$0.message$7];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new hive.HiveError.new(message);
    }
    toString() {
      return "HiveError: " + this.message;
    }
  };
  (hive.HiveError.new = function(message) {
    this[S$0.message$7] = message;
    hive.HiveError.__proto__.new.call(this);
    ;
  }).prototype = hive.HiveError.prototype;
  dart.addTypeTests(hive.HiveError);
  dart.addTypeCaches(hive.HiveError);
  dart.setLibraryUri(hive.HiveError, I[82]);
  dart.setFieldSignature(hive.HiveError, () => ({
    __proto__: dart.getFields(hive.HiveError.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(hive.HiveError, ['toString']);
  const _is_HiveCollection_default = Symbol('_is_HiveCollection_default');
  hive.HiveCollection$ = dart.generic(E => {
    class HiveCollection extends core.Object {
      [Symbol.iterator]() {
        return new dart.JsIterator(this[S$0.$iterator]);
      }
    }
    (HiveCollection.new = function() {
      ;
    }).prototype = HiveCollection.prototype;
    HiveCollection.prototype[dart.isList] = true;
    dart.addTypeTests(HiveCollection);
    HiveCollection.prototype[_is_HiveCollection_default] = true;
    dart.addTypeCaches(HiveCollection);
    HiveCollection[dart.implements] = () => [core.List$(E)];
    dart.setLibraryUri(HiveCollection, I[82]);
    return HiveCollection;
  });
  hive.HiveCollection = hive.HiveCollection$();
  dart.addTypeTests(hive.HiveCollection, _is_HiveCollection_default);
  const _is_HiveList_default = Symbol('_is_HiveList_default');
  hive.HiveList$ = dart.generic(E => {
    class HiveList extends hive.HiveCollection$(E) {
      static new(box, opts$) {
        let objects = opts$ && 'objects' in opts$ ? opts$.objects : null;
        return new (hive_list_impl.HiveListImpl$(E)).new(box, {objects: objects});
      }
      static ['_#new#tearOff'](E, box, opts$) {
        let objects = opts$ && 'objects' in opts$ ? opts$.objects : null;
        return hive.HiveList$(E).new(box, {objects: objects});
      }
    }
    HiveList.prototype[dart.isList] = true;
    dart.addTypeTests(HiveList);
    HiveList.prototype[_is_HiveList_default] = true;
    dart.addTypeCaches(HiveList);
    HiveList[dart.implements] = () => [core.List$(E)];
    dart.setStaticMethodSignature(HiveList, () => ['new']);
    dart.setLibraryUri(HiveList, I[82]);
    return HiveList;
  });
  hive.HiveList = hive.HiveList$();
  dart.addTypeTests(hive.HiveList, _is_HiveList_default);
  hive.HiveStorageBackendPreference = class HiveStorageBackendPreference extends core._Enum {
    [S$._enumToString]() {
      return "HiveStorageBackendPreference." + this[S$._name];
    }
  };
  (hive.HiveStorageBackendPreference.new = function(index, name) {
    hive.HiveStorageBackendPreference.__proto__.new.call(this, index, name);
    ;
  }).prototype = hive.HiveStorageBackendPreference.prototype;
  dart.addTypeTests(hive.HiveStorageBackendPreference);
  dart.addTypeCaches(hive.HiveStorageBackendPreference);
  dart.setMethodSignature(hive.HiveStorageBackendPreference, () => ({
    __proto__: dart.getMethods(hive.HiveStorageBackendPreference.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(hive.HiveStorageBackendPreference, I[82]);
  dart.setStaticFieldSignature(hive.HiveStorageBackendPreference, () => ['values', 'native', 'webWorker']);
  dart.defineLazy(hive.HiveStorageBackendPreference, {
    /*hive.HiveStorageBackendPreference.values*/get values() {
      return C[281] || CT.C281;
    },
    /*hive.HiveStorageBackendPreference.native*/get native() {
      return C[282] || CT.C282;
    },
    /*hive.HiveStorageBackendPreference.webWorker*/get webWorker() {
      return C[283] || CT.C283;
    }
  }, false);
  const _is_TypeAdapter_default = Symbol('_is_TypeAdapter_default');
  hive.TypeAdapter$ = dart.generic(T => {
    class TypeAdapter extends core.Object {}
    (TypeAdapter.new = function() {
      ;
    }).prototype = TypeAdapter.prototype;
    dart.addTypeTests(TypeAdapter);
    TypeAdapter.prototype[_is_TypeAdapter_default] = true;
    dart.addTypeCaches(TypeAdapter);
    dart.setLibraryUri(TypeAdapter, I[82]);
    return TypeAdapter;
  });
  hive.TypeAdapter = hive.TypeAdapter$();
  dart.addTypeTests(hive.TypeAdapter, _is_TypeAdapter_default);
  hive.TypeRegistry = class TypeRegistry extends core.Object {};
  (hive.TypeRegistry.new = function() {
    ;
  }).prototype = hive.TypeRegistry.prototype;
  dart.addTypeTests(hive.TypeRegistry);
  dart.addTypeCaches(hive.TypeRegistry);
  dart.setLibraryUri(hive.TypeRegistry, I[82]);
  dart.defineLazy(hive, {
    /*hive.Hive*/get Hive() {
      return new hive_impl.HiveImpl.new();
    }
  }, false);
  path_provider.Directory = class Directory extends core.Object {};
  (path_provider.Directory.new = function() {
    ;
  }).prototype = path_provider.Directory.prototype;
  dart.addTypeTests(path_provider.Directory);
  dart.addTypeCaches(path_provider.Directory);
  dart.setLibraryUri(path_provider.Directory, I[83]);
  path_provider.getApplicationDocumentsDirectory = function getApplicationDocumentsDirectory() {
    dart.throw(new core.UnimplementedError.new("[Hive Error] Tried to use the `path_provider` package from Flutter Web."));
  };
  path.join = function join(part1, part2 = null, part3 = null, part4 = null, part5 = null, part6 = null, part7 = null, part8 = null) {
    dart.throw(new core.UnimplementedError.new("[Hive Error] Tried to use the `path` package from Flutter Web."));
  };
  client$.Client = class Client extends core.Object {
    static new() {
      let t203;
      t203 = client$.zoneClient;
      return t203 == null ? browser_client.createClient() : t203;
    }
    static ['_#new#tearOff']() {
      return client$.Client.new();
    }
  };
  (client$.Client[dart.mixinNew] = function() {
  }).prototype = client$.Client.prototype;
  dart.addTypeTests(client$.Client);
  dart.addTypeCaches(client$.Client);
  dart.setStaticMethodSignature(client$.Client, () => ['new']);
  dart.setLibraryUri(client$.Client, I[84]);
  client$.runWithClient = function runWithClient(R, body, clientFactory, opts$) {
    let zoneSpecification = opts$ && 'zoneSpecification' in opts$ ? opts$.zoneSpecification : null;
    return async.runZoned(R, body, {zoneValues: new (T$.LinkedMapOfObjectN$ObjectN()).from([C[284] || CT.C284, async.Zone.current.bindCallback(client$.Client, clientFactory)]), zoneSpecification: zoneSpecification});
  };
  dart.copyProperties(client$, {
    get zoneClient() {
      let client = async.Zone.current._get(C[284] || CT.C284);
      return client == null ? null : T$.VoidToClient().as(client)();
    }
  });
  exception.ClientException = class ClientException extends core.Object {
    get message() {
      return this[S$0.message$8];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[S$0.uri$1];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](message, uri = null) {
      return new exception.ClientException.new(message, uri);
    }
    toString() {
      return this.message;
    }
  };
  (exception.ClientException.new = function(message, uri = null) {
    this[S$0.message$8] = message;
    this[S$0.uri$1] = uri;
    ;
  }).prototype = exception.ClientException.prototype;
  dart.addTypeTests(exception.ClientException);
  dart.addTypeCaches(exception.ClientException);
  exception.ClientException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception.ClientException, I[85]);
  dart.setFieldSignature(exception.ClientException, () => ({
    __proto__: dart.getFields(exception.ClientException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(exception.ClientException, ['toString']);
  base_request.BaseRequest = class BaseRequest extends core.Object {
    get method() {
      return this[S$0.method$1];
    }
    set method(value) {
      super.method = value;
    }
    get url() {
      return this[S$0.url$4];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[S$0.headers$8];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentLength() {
      return this[S$0._contentLength];
    }
    set contentLength(value) {
      if (value != null && dart.notNull(value) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(value) + "."));
      }
      this[S$0._checkFinalized$1]();
      this[S$0._contentLength] = value;
    }
    get persistentConnection() {
      return this[S$0._persistentConnection];
    }
    set persistentConnection(value) {
      this[S$0._checkFinalized$1]();
      this[S$0._persistentConnection] = value;
    }
    get followRedirects() {
      return this[S$0._followRedirects];
    }
    set followRedirects(value) {
      this[S$0._checkFinalized$1]();
      this[S$0._followRedirects] = value;
    }
    get maxRedirects() {
      return this[S$0._maxRedirects];
    }
    set maxRedirects(value) {
      this[S$0._checkFinalized$1]();
      this[S$0._maxRedirects] = value;
    }
    get finalized() {
      return this[S$0._finalized];
    }
    static _validateMethod(method) {
      if (!base_request.BaseRequest._tokenRE.hasMatch(method)) {
        dart.throw(new core.ArgumentError.value(method, "method", "Not a valid method"));
      }
      return method;
    }
    finalize() {
      if (this.finalized) dart.throw(new core.StateError.new("Can't finalize a finalized Request."));
      this[S$0._finalized] = true;
      return C[285] || CT.C285;
    }
    send() {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let client = client$.Client.new();
        try {
          let response = (yield client.send(this));
          let stream = utils.onDone(T$.ListOfint(), response.stream, dart.bind(client, 'close'));
          return new streamed_response.StreamedResponse.new(new byte_stream.ByteStream.new(stream), response.statusCode, {contentLength: response.contentLength, request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
            client.close();
            dart.rethrow(e);
          } else
            throw e;
        }
      }).bind(this));
    }
    [S$0._checkFinalized$1]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
    toString() {
      return this.method + " " + dart.str(this.url);
    }
  };
  (base_request.BaseRequest.new = function(method, url) {
    this[S$0._contentLength] = null;
    this[S$0._persistentConnection] = true;
    this[S$0._followRedirects] = true;
    this[S$0._maxRedirects] = 5;
    this[S$0._finalized] = false;
    this[S$0.url$4] = url;
    this[S$0.method$1] = base_request.BaseRequest._validateMethod(method);
    this[S$0.headers$8] = T$.LinkedHashMapOfString$String().new({equals: dart.fn((key1, key2) => key1[S$.$toLowerCase]() === key2[S$.$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[S$.$toLowerCase]()[S$.$hashCode], T$.StringToint())});
    ;
  }).prototype = base_request.BaseRequest.prototype;
  dart.addTypeTests(base_request.BaseRequest);
  dart.addTypeCaches(base_request.BaseRequest);
  dart.setMethodSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getMethods(base_request.BaseRequest.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, []),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), []),
    [S$0._checkFinalized$1]: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(base_request.BaseRequest, () => ['_validateMethod']);
  dart.setGetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getGetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int,
    finalized: core.bool
  }));
  dart.setSetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getSetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int
  }));
  dart.setLibraryUri(base_request.BaseRequest, I[86]);
  dart.setFieldSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getFields(base_request.BaseRequest.__proto__),
    method: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.Uri),
    [S$0._contentLength]: dart.fieldType(dart.nullable(core.int)),
    [S$0._persistentConnection]: dart.fieldType(core.bool),
    [S$0._followRedirects]: dart.fieldType(core.bool),
    [S$0._maxRedirects]: dart.fieldType(core.int),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$0._finalized]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(base_request.BaseRequest, () => ['_tokenRE']);
  dart.defineExtensionMethods(base_request.BaseRequest, ['toString']);
  dart.defineLazy(base_request.BaseRequest, {
    /*base_request.BaseRequest._tokenRE*/get _tokenRE() {
      return core.RegExp.new("^[\\w!#%&'*+\\-.^`|~]+$");
    }
  }, false);
  request$.Request = class Request extends base_request.BaseRequest {
    get contentLength() {
      return this.bodyBytes[S$.$length];
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "non-streaming Request objects."));
    }
    get encoding() {
      if (this[S$0._contentType] == null || !dart.nullCheck(this[S$0._contentType]).parameters[S$.$containsKey]("charset")) {
        return this[S$0._defaultEncoding];
      }
      return utils.requiredEncodingForCharset(dart.nullCheck(dart.nullCheck(this[S$0._contentType]).parameters[S$.$_get]("charset")));
    }
    set encoding(value) {
      this[S$0._checkFinalized]();
      this[S$0._defaultEncoding] = value;
      let contentType = this[S$0._contentType];
      if (contentType == null) return;
      this[S$0._contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", value.name])});
    }
    get bodyBytes() {
      return this[S$0._bodyBytes];
    }
    set bodyBytes(value) {
      this[S$0._checkFinalized]();
      this[S$0._bodyBytes] = utils.toUint8List(value);
    }
    get body() {
      return this.encoding.decode(this.bodyBytes);
    }
    set body(value) {
      this.bodyBytes = this.encoding.encode(value);
      let contentType = this[S$0._contentType];
      if (contentType == null) {
        this[S$0._contentType] = new media_type.MediaType.new("text", "plain", new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name]));
      } else if (!contentType.parameters[S$.$containsKey]("charset")) {
        this[S$0._contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name])});
      }
    }
    get bodyFields() {
      let contentType = this[S$0._contentType];
      if (contentType == null || contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot access the body fields of a Request without " + "content-type \"application/x-www-form-urlencoded\"."));
      }
      return core.Uri.splitQueryString(this.body, {encoding: this.encoding});
    }
    set bodyFields(fields) {
      let contentType = this[S$0._contentType];
      if (contentType == null) {
        this[S$0._contentType] = new media_type.MediaType.new("application", "x-www-form-urlencoded");
      } else if (contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot set the body fields of a Request with " + "content-type \"" + contentType.mimeType + "\"."));
      }
      this.body = utils.mapToQuery(fields, {encoding: this.encoding});
    }
    static ['_#new#tearOff'](method, url) {
      return new request$.Request.new(method, url);
    }
    finalize() {
      super.finalize();
      return byte_stream.ByteStream.fromBytes(this.bodyBytes);
    }
    get [S$0._contentType]() {
      let contentType = this.headers[S$.$_get]("content-type");
      if (contentType == null) return null;
      return media_type.MediaType.parse(contentType);
    }
    set [S$0._contentType](value) {
      if (value == null) {
        this.headers[S$.$remove]("content-type");
      } else {
        this.headers[S$.$_set]("content-type", dart.toString(value));
      }
    }
    [S$0._checkFinalized]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
  };
  (request$.Request.new = function(method, url) {
    this[S$0._defaultEncoding] = convert.utf8;
    this[S$0._bodyBytes] = _native_typed_data.NativeUint8List.new(0);
    request$.Request.__proto__.new.call(this, method, url);
    ;
  }).prototype = request$.Request.prototype;
  dart.addTypeTests(request$.Request);
  dart.addTypeCaches(request$.Request);
  dart.setMethodSignature(request$.Request, () => ({
    __proto__: dart.getMethods(request$.Request.__proto__),
    [S$0._checkFinalized]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(request$.Request, () => ({
    __proto__: dart.getGetters(request$.Request.__proto__),
    contentLength: core.int,
    encoding: convert.Encoding,
    bodyBytes: typed_data.Uint8List,
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [S$0._contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setSetterSignature(request$.Request, () => ({
    __proto__: dart.getSetters(request$.Request.__proto__),
    encoding: convert.Encoding,
    bodyBytes: core.List$(core.int),
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [S$0._contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setLibraryUri(request$.Request, I[87]);
  dart.setFieldSignature(request$.Request, () => ({
    __proto__: dart.getFields(request$.Request.__proto__),
    [S$0._defaultEncoding]: dart.fieldType(convert.Encoding),
    [S$0._bodyBytes]: dart.fieldType(typed_data.Uint8List)
  }));
  base_response.BaseResponse = class BaseResponse extends core.Object {
    get request() {
      return this[S$0.request];
    }
    set request(value) {
      super.request = value;
    }
    get statusCode() {
      return this[S$0.statusCode$2];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get reasonPhrase() {
      return this[S$0.reasonPhrase];
    }
    set reasonPhrase(value) {
      super.reasonPhrase = value;
    }
    get contentLength() {
      return this[S$0.contentLength];
    }
    set contentLength(value) {
      super.contentLength = value;
    }
    get headers() {
      return this[S$0.headers$9];
    }
    set headers(value) {
      super.headers = value;
    }
    get isRedirect() {
      return this[S$0.isRedirect];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get persistentConnection() {
      return this[S$0.persistentConnection];
    }
    set persistentConnection(value) {
      super.persistentConnection = value;
    }
  };
  (base_response.BaseResponse.new = function(statusCode, opts$) {
    let contentLength = opts$ && 'contentLength' in opts$ ? opts$.contentLength : null;
    let request = opts$ && 'request' in opts$ ? opts$.request : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : false;
    let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : true;
    let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
    this[S$0.statusCode$2] = statusCode;
    this[S$0.contentLength] = contentLength;
    this[S$0.request] = request;
    this[S$0.headers$9] = headers;
    this[S$0.isRedirect] = isRedirect;
    this[S$0.persistentConnection] = persistentConnection;
    this[S$0.reasonPhrase] = reasonPhrase;
    if (this.statusCode < 100) {
      dart.throw(new core.ArgumentError.new("Invalid status code " + dart.str(this.statusCode) + "."));
    } else if (this.contentLength != null && dart.nullCheck(this.contentLength) < 0) {
      dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(this.contentLength) + "."));
    }
  }).prototype = base_response.BaseResponse.prototype;
  dart.addTypeTests(base_response.BaseResponse);
  dart.addTypeCaches(base_response.BaseResponse);
  dart.setLibraryUri(base_response.BaseResponse, I[88]);
  dart.setFieldSignature(base_response.BaseResponse, () => ({
    __proto__: dart.getFields(base_response.BaseResponse.__proto__),
    request: dart.finalFieldType(dart.nullable(base_request.BaseRequest)),
    statusCode: dart.finalFieldType(core.int),
    reasonPhrase: dart.finalFieldType(dart.nullable(core.String)),
    contentLength: dart.finalFieldType(dart.nullable(core.int)),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    isRedirect: dart.finalFieldType(core.bool),
    persistentConnection: dart.finalFieldType(core.bool)
  }));
  response$.Response = class Response extends base_response.BaseResponse {
    get bodyBytes() {
      return this[S$0.bodyBytes];
    }
    set bodyBytes(value) {
      super.bodyBytes = value;
    }
    get body() {
      return response$._encodingForHeaders(this.headers).decode(this.bodyBytes);
    }
    static ['_#new#tearOff'](body, statusCode, opts$) {
      let request = opts$ && 'request' in opts$ ? opts$.request : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : false;
      let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : true;
      let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
      return new response$.Response.new(body, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static ['_#bytes#tearOff'](bodyBytes, statusCode, opts$) {
      let request = opts$ && 'request' in opts$ ? opts$.request : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : null;
      let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : null;
      let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
      return new response$.Response.bytes(bodyBytes, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static fromStream(response) {
      return async.async(response$.Response, function* fromStream() {
        let body = (yield response.stream.toBytes());
        return new response$.Response.bytes(body, response.statusCode, {request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
      });
    }
  };
  (response$.Response.new = function(body, statusCode, opts$) {
    let request = opts$ && 'request' in opts$ ? opts$.request : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : false;
    let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : true;
    let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
    response$.Response.bytes.call(this, response$._encodingForHeaders(headers).encode(body), statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
  }).prototype = response$.Response.prototype;
  (response$.Response.bytes = function(bodyBytes, statusCode, opts$) {
    let request = opts$ && 'request' in opts$ ? opts$.request : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : false;
    let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : true;
    let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
    this[S$0.bodyBytes] = utils.toUint8List(bodyBytes);
    response$.Response.__proto__.new.call(this, statusCode, {contentLength: bodyBytes[S$.$length], request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = response$.Response.prototype;
  dart.addTypeTests(response$.Response);
  dart.addTypeCaches(response$.Response);
  dart.setStaticMethodSignature(response$.Response, () => ['fromStream']);
  dart.setGetterSignature(response$.Response, () => ({
    __proto__: dart.getGetters(response$.Response.__proto__),
    body: core.String
  }));
  dart.setLibraryUri(response$.Response, I[89]);
  dart.setFieldSignature(response$.Response, () => ({
    __proto__: dart.getFields(response$.Response.__proto__),
    bodyBytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  response$._encodingForHeaders = function _encodingForHeaders(headers) {
    return utils.encodingForCharset(response$._contentTypeForHeaders(headers).parameters[S$.$_get]("charset"));
  };
  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {
    let contentType = headers[S$.$_get]("content-type");
    if (contentType != null) return media_type.MediaType.parse(contentType);
    return new media_type.MediaType.new("application", "octet-stream");
  };
  streamed_request.StreamedRequest = class StreamedRequest extends base_request.BaseRequest {
    get sink() {
      return this[S$0._controller$2].sink;
    }
    static ['_#new#tearOff'](method, url) {
      return new streamed_request.StreamedRequest.new(method, url);
    }
    finalize() {
      super.finalize();
      return new byte_stream.ByteStream.new(this[S$0._controller$2].stream);
    }
  };
  (streamed_request.StreamedRequest.new = function(method, url) {
    this[S$0._controller$2] = T$.StreamControllerOfListOfint().new({sync: true});
    streamed_request.StreamedRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = streamed_request.StreamedRequest.prototype;
  dart.addTypeTests(streamed_request.StreamedRequest);
  dart.addTypeCaches(streamed_request.StreamedRequest);
  dart.setGetterSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getGetters(streamed_request.StreamedRequest.__proto__),
    sink: async.EventSink$(core.List$(core.int))
  }));
  dart.setLibraryUri(streamed_request.StreamedRequest, I[90]);
  dart.setFieldSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getFields(streamed_request.StreamedRequest.__proto__),
    [S$0._controller$2]: dart.finalFieldType(async.StreamController$(core.List$(core.int)))
  }));
  byte_stream.ByteStream = class ByteStream extends async.StreamView$(core.List$(core.int)) {
    static ['_#new#tearOff'](stream) {
      return new byte_stream.ByteStream.new(stream);
    }
    static fromBytes(bytes) {
      return new byte_stream.ByteStream.new(T$.StreamOfListOfint().value(bytes));
    }
    static ['_#fromBytes#tearOff'](bytes) {
      return byte_stream.ByteStream.fromBytes(bytes);
    }
    toBytes() {
      let completer = T$.CompleterOfUint8List().new();
      let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));
      this.listen(T$.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});
      return completer.future;
    }
    bytesToString(encoding = C[287] || CT.C287) {
      return encoding.decodeStream(this);
    }
    toStringStream(encoding = C[287] || CT.C287) {
      return encoding.decoder.bind(this);
    }
  };
  (byte_stream.ByteStream.new = function(stream) {
    byte_stream.ByteStream.__proto__.new.call(this, stream);
    ;
  }).prototype = byte_stream.ByteStream.prototype;
  dart.addTypeTests(byte_stream.ByteStream);
  dart.addTypeCaches(byte_stream.ByteStream);
  dart.setMethodSignature(byte_stream.ByteStream, () => ({
    __proto__: dart.getMethods(byte_stream.ByteStream.__proto__),
    toBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    bytesToString: dart.fnType(async.Future$(core.String), [], [convert.Encoding]),
    toStringStream: dart.fnType(async.Stream$(core.String), [], [convert.Encoding])
  }));
  dart.setStaticMethodSignature(byte_stream.ByteStream, () => ['fromBytes']);
  dart.setLibraryUri(byte_stream.ByteStream, I[91]);
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get field() {
      return this[S$0.field];
    }
    set field(value) {
      super.field = value;
    }
    get length() {
      return this[S$0.length];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[S$0.filename];
    }
    set filename(value) {
      super.filename = value;
    }
    get contentType() {
      return this[S$0.contentType$1];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get isFinalized() {
      return this[S$0._isFinalized];
    }
    static ['_#new#tearOff'](field, stream, length, opts$) {
      let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      return new multipart_file.MultipartFile.new(field, stream, length, {filename: filename, contentType: contentType});
    }
    static fromBytes(field, value, opts$) {
      let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      let stream = byte_stream.ByteStream.fromBytes(value);
      return new multipart_file.MultipartFile.new(field, stream, value[S$.$length], {filename: filename, contentType: contentType});
    }
    static ['_#fromBytes#tearOff'](field, value, opts$) {
      let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      return multipart_file.MultipartFile.fromBytes(field, value, {filename: filename, contentType: contentType});
    }
    static fromString(field, value, opts$) {
      let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils.encodingForCharset(contentType.parameters[S$.$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(field, encoding.encode(value), {filename: filename, contentType: contentType});
    }
    static ['_#fromString#tearOff'](field, value, opts$) {
      let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      return multipart_file.MultipartFile.fromString(field, value, {filename: filename, contentType: contentType});
    }
    static fromPath(field, filePath, opts$) {
      let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
      let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
      return multipart_file_stub.multipartFileFromPath(field, filePath, {filename: filename, contentType: contentType});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[S$0._isFinalized] = true;
      return this[S$0._stream];
    }
  };
  (multipart_file.MultipartFile.new = function(field, stream, length, opts$) {
    let t204;
    let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
    let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
    this[S$0._isFinalized] = false;
    this[S$0.field] = field;
    this[S$0.length] = length;
    this[S$0.filename] = filename;
    this[S$0._stream] = utils.toByteStream(stream);
    this[S$0.contentType$1] = (t204 = contentType, t204 == null ? new media_type.MediaType.new("application", "octet-stream") : t204);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromPath']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[92]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    field: dart.finalFieldType(core.String),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    contentType: dart.finalFieldType(media_type.MediaType),
    [S$0._stream]: dart.finalFieldType(byte_stream.ByteStream),
    [S$0._isFinalized]: dart.fieldType(core.bool)
  }));
  multipart_request.MultipartRequest = class MultipartRequest extends base_request.BaseRequest {
    get fields() {
      return this[S$0.fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[S$0.files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](method, url) {
      return new multipart_request.MultipartRequest.new(method, url);
    }
    get contentLength() {
      let length = 0;
      this.fields[S$.$forEach](dart.fn((name, value) => {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[S$0._headerForField](name, value))[S$.$length] + convert.utf8.encode(value)[S$.$length] + "\r\n".length);
      }, T$.StringAndStringTovoid()));
      for (let file of this.files) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[S$0._headerForFile](file))[S$.$length] + file.length + "\r\n".length);
      }
      return length + "--".length + 70 + "--\r\n".length;
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "multipart requests."));
    }
    finalize() {
      let boundary = this[S$0._boundaryString]();
      this.headers[S$.$_set]("content-type", "multipart/form-data; boundary=" + boundary);
      super.finalize();
      return new byte_stream.ByteStream.new(this[S$0._finalize](boundary));
    }
    [S$0._finalize](boundary) {
      return new (T$._AsyncStarImplOfListOfint()).new((function* _finalize(stream) {
        let line = C[288] || CT.C288;
        let separator = convert.utf8.encode("--" + boundary + "\r\n");
        let close = convert.utf8.encode("--" + boundary + "--\r\n");
        for (let field of this.fields[S$0.$entries]) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[S$0._headerForField](field.key, field.value)))) return;
          yield;
          if (stream.add(convert.utf8.encode(field.value))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        for (let file of this.files) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[S$0._headerForFile](file)))) return;
          yield;
          if (stream.addStream(file.finalize())) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        if (stream.add(close)) return;
        yield;
      }).bind(this)).stream;
    }
    [S$0._headerForField](name, value) {
      let header = "content-disposition: form-data; name=\"" + this[S$0._browserEncode](name) + "\"";
      if (!utils.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [S$0._headerForFile](file) {
      let header = "content-type: " + dart.str(file.contentType) + "\r\n" + "content-disposition: form-data; name=\"" + this[S$0._browserEncode](file.field) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + this[S$0._browserEncode](dart.nullCheck(file.filename)) + "\"";
      }
      return header + "\r\n\r\n";
    }
    [S$0._browserEncode](value) {
      return value[S$.$replaceAll](multipart_request._newlineRegExp, "%0D%0A")[S$.$replaceAll]("\"", "%22");
    }
    [S$0._boundaryString]() {
      let prefix = "dart-http-boundary-";
      let list = T$.ListOfint().generate(70 - prefix.length, dart.fn(index => boundary_characters.boundaryCharacters[S$.$_get](multipart_request.MultipartRequest._random.nextInt(boundary_characters.boundaryCharacters[S$.$length])), T$.intToint()), {growable: false});
      return prefix + core.String.fromCharCodes(list);
    }
  };
  (multipart_request.MultipartRequest.new = function(method, url) {
    this[S$0.fields] = new (T$.IdentityMapOfString$String()).new();
    this[S$0.files] = T$.JSArrayOfMultipartFile().of([]);
    multipart_request.MultipartRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = multipart_request.MultipartRequest.prototype;
  dart.addTypeTests(multipart_request.MultipartRequest);
  dart.addTypeCaches(multipart_request.MultipartRequest);
  dart.setMethodSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getMethods(multipart_request.MultipartRequest.__proto__),
    [S$0._finalize]: dart.fnType(async.Stream$(core.List$(core.int)), [core.String]),
    [S$0._headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [S$0._headerForFile]: dart.fnType(core.String, [multipart_file.MultipartFile]),
    [S$0._browserEncode]: dart.fnType(core.String, [core.String]),
    [S$0._boundaryString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getGetters(multipart_request.MultipartRequest.__proto__),
    contentLength: core.int
  }));
  dart.setLibraryUri(multipart_request.MultipartRequest, I[93]);
  dart.setFieldSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getFields(multipart_request.MultipartRequest.__proto__),
    fields: dart.finalFieldType(core.Map$(core.String, core.String)),
    files: dart.finalFieldType(core.List$(multipart_file.MultipartFile))
  }));
  dart.setStaticFieldSignature(multipart_request.MultipartRequest, () => ['_boundaryLength', '_random']);
  dart.defineLazy(multipart_request.MultipartRequest, {
    /*multipart_request.MultipartRequest._boundaryLength*/get _boundaryLength() {
      return 70;
    },
    /*multipart_request.MultipartRequest._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  dart.defineLazy(multipart_request, {
    /*multipart_request._newlineRegExp*/get _newlineRegExp() {
      return core.RegExp.new("\\r\\n|\\r|\\n");
    }
  }, false);
  streamed_response.StreamedResponse = class StreamedResponse extends base_response.BaseResponse {
    get stream() {
      return this[S$0.stream];
    }
    set stream(value) {
      super.stream = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts$) {
      let contentLength = opts$ && 'contentLength' in opts$ ? opts$.contentLength : null;
      let request = opts$ && 'request' in opts$ ? opts$.request : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : null;
      let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : null;
      let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
      return new streamed_response.StreamedResponse.new(stream, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
  };
  (streamed_response.StreamedResponse.new = function(stream, statusCode, opts$) {
    let contentLength = opts$ && 'contentLength' in opts$ ? opts$.contentLength : null;
    let request = opts$ && 'request' in opts$ ? opts$.request : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let isRedirect = opts$ && 'isRedirect' in opts$ ? opts$.isRedirect : false;
    let persistentConnection = opts$ && 'persistentConnection' in opts$ ? opts$.persistentConnection : true;
    let reasonPhrase = opts$ && 'reasonPhrase' in opts$ ? opts$.reasonPhrase : null;
    this[S$0.stream] = utils.toByteStream(stream);
    streamed_response.StreamedResponse.__proto__.new.call(this, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = streamed_response.StreamedResponse.prototype;
  dart.addTypeTests(streamed_response.StreamedResponse);
  dart.addTypeCaches(streamed_response.StreamedResponse);
  dart.setLibraryUri(streamed_response.StreamedResponse, I[94]);
  dart.setFieldSignature(streamed_response.StreamedResponse, () => ({
    __proto__: dart.getFields(streamed_response.StreamedResponse.__proto__),
    stream: dart.finalFieldType(byte_stream.ByteStream)
  }));
  dart.defineLazy(version, {
    /*version.version*/get version() {
      return "1.10.25";
    }
  }, false);
  app_links$.AppLinks = class AppLinks extends app_links_platform_interface.AppLinksPlatform {
    static ['_#new#tearOff']() {
      return new app_links$.AppLinks.new();
    }
    getInitialAppLink() {
      return app_links_platform_interface.AppLinksPlatform.instance.getInitialAppLink();
    }
    getInitialAppLinkString() {
      return async.async(T$.StringN(), function* getInitialAppLinkString() {
        return app_links_platform_interface.AppLinksPlatform.instance.getInitialAppLinkString();
      });
    }
    getLatestAppLink() {
      return async.async(T$.UriN(), function* getLatestAppLink() {
        return app_links_platform_interface.AppLinksPlatform.instance.getLatestAppLink();
      });
    }
    getLatestAppLinkString() {
      return async.async(T$.StringN(), function* getLatestAppLinkString() {
        return app_links_platform_interface.AppLinksPlatform.instance.getLatestAppLinkString();
      });
    }
    get stringLinkStream() {
      return app_links_platform_interface.AppLinksPlatform.instance.stringLinkStream;
    }
    get uriLinkStream() {
      return app_links_platform_interface.AppLinksPlatform.instance.uriLinkStream;
    }
    get allStringLinkStream() {
      return app_links_platform_interface.AppLinksPlatform.instance.allStringLinkStream;
    }
    get allUriLinkStream() {
      return app_links_platform_interface.AppLinksPlatform.instance.allUriLinkStream;
    }
  };
  (app_links$.AppLinks.new = function() {
    app_links$.AppLinks.__proto__.new.call(this);
    ;
  }).prototype = app_links$.AppLinks.prototype;
  dart.addTypeTests(app_links$.AppLinks);
  dart.addTypeCaches(app_links$.AppLinks);
  dart.setLibraryUri(app_links$.AppLinks, I[95]);
  digest.Digest = class Digest extends core.Object {
    get bytes() {
      return this[S$0.bytes];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static ['_#new#tearOff'](bytes) {
      return new digest.Digest.new(bytes);
    }
    _equals(other) {
      if (other == null) return false;
      if (digest.Digest.is(other)) {
        let a = this.bytes;
        let b = other.bytes;
        let n = a[S$.$length];
        if (n !== b[S$.$length]) {
          return false;
        }
        let mismatch = 0;
        for (let i = 0; i < n; i = i + 1) {
          mismatch = (mismatch | (a[S$.$_get](i) ^ b[S$.$_get](i)) >>> 0) >>> 0;
        }
        return mismatch === 0;
      }
      return false;
    }
    get hashCode() {
      return core.Object.hashAll(this.bytes);
    }
    toString() {
      return digest._hexEncode(this.bytes);
    }
  };
  (digest.Digest.new = function(bytes) {
    this[S$0.bytes] = bytes;
    ;
  }).prototype = digest.Digest.prototype;
  dart.addTypeTests(digest.Digest);
  dart.addTypeCaches(digest.Digest);
  dart.setLibraryUri(digest.Digest, I[96]);
  dart.setFieldSignature(digest.Digest, () => ({
    __proto__: dart.getFields(digest.Digest.__proto__),
    bytes: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineExtensionMethods(digest.Digest, ['_equals', 'toString']);
  dart.defineExtensionAccessors(digest.Digest, ['hashCode']);
  digest._hexEncode = function _hexEncode(bytes) {
    let t204, t204$;
    let charCodes = _native_typed_data.NativeUint8List.new(bytes[S$.$length] * 2);
    for (let i = 0, j = 0; i < bytes[S$.$length]; i = i + 1) {
      let byte = bytes[S$.$_get](i);
      charCodes[S$.$_set]((t204 = j, j = t204 + 1, t204), "0123456789abcdef"[S$.$codeUnitAt](byte >> 4 & 15));
      charCodes[S$.$_set]((t204$ = j, j = t204$ + 1, t204$), "0123456789abcdef"[S$.$codeUnitAt](byte & 15));
    }
    return core.String.fromCharCodes(charCodes);
  };
  hash.Hash = class Hash extends convert.Converter$(core.List$(core.int), digest.Digest) {
    convert(input) {
      T$.ListOfint().as(input);
      let innerSink = new digest_sink.DigestSink.new();
      let outerSink = this.startChunkedConversion(innerSink);
      outerSink.add(input);
      outerSink.close();
      return innerSink.value;
    }
  };
  (hash.Hash.new = function() {
    hash.Hash.__proto__.new.call(this);
    ;
  }).prototype = hash.Hash.prototype;
  dart.addTypeTests(hash.Hash);
  dart.addTypeCaches(hash.Hash);
  dart.setMethodSignature(hash.Hash, () => ({
    __proto__: dart.getMethods(hash.Hash.__proto__),
    convert: dart.fnType(digest.Digest, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(hash.Hash, I[97]);
  hmac.Hmac = class Hmac extends convert.Converter$(core.List$(core.int), digest.Digest) {
    static ['_#new#tearOff'](hash, key) {
      return new hmac.Hmac.new(hash, key);
    }
    convert(input) {
      T$.ListOfint().as(input);
      let innerSink = new digest_sink.DigestSink.new();
      let outerSink = this.startChunkedConversion(innerSink);
      outerSink.add(input);
      outerSink.close();
      return innerSink.value;
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new hmac._HmacSink.new(sink, this[S$0._hash], this[S$0._key]);
    }
  };
  (hmac.Hmac.new = function(hash, key) {
    this[S$0._hash] = hash;
    this[S$0._key] = _native_typed_data.NativeUint8List.new(hash.blockSize);
    hmac.Hmac.__proto__.new.call(this);
    if (key[S$.$length] > this[S$0._hash].blockSize) key = this[S$0._hash].convert(key).bytes;
    this[S$0._key][S$0.$setRange](0, key[S$.$length], key);
  }).prototype = hmac.Hmac.prototype;
  dart.addTypeTests(hmac.Hmac);
  dart.addTypeCaches(hmac.Hmac);
  dart.setMethodSignature(hmac.Hmac, () => ({
    __proto__: dart.getMethods(hmac.Hmac.__proto__),
    convert: dart.fnType(digest.Digest, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(hmac.Hmac, I[98]);
  dart.setFieldSignature(hmac.Hmac, () => ({
    __proto__: dart.getFields(hmac.Hmac.__proto__),
    [S$0._hash]: dart.finalFieldType(hash.Hash),
    [S$0._key]: dart.finalFieldType(typed_data.Uint8List)
  }));
  hmac._HmacSink = class _HmacSink extends convert.ByteConversionSink {
    get [S$0._innerSink]() {
      let t204;
      t204 = this[S$0.___HmacSink__innerSink];
      return t204 == null ? dart.throw(new _internal.LateError.fieldNI("_innerSink")) : t204;
    }
    set [S$0._innerSink](_innerSink$35param) {
      if (this[S$0.___HmacSink__innerSink] == null)
        this[S$0.___HmacSink__innerSink] = _innerSink$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_innerSink"));
    }
    static ['_#new#tearOff'](sink, hash, key) {
      return new hmac._HmacSink.new(sink, hash, key);
    }
    add(data) {
      T$.ListOfint().as(data);
      if (this[S$0._isClosed]) dart.throw(new core.StateError.new("HMAC is closed"));
      this[S$0._innerSink].add(data);
    }
    addSlice(data, start, end, isLast) {
      if (this[S$0._isClosed]) dart.throw(new core.StateError.new("HMAC is closed"));
      this[S$0._innerSink].addSlice(data, start, end, isLast);
    }
    close() {
      if (this[S$0._isClosed]) return;
      this[S$0._isClosed] = true;
      this[S$0._innerSink].close();
      this[S$0._outerSink].add(this[S$0._innerResultSink].value.bytes);
      this[S$0._outerSink].close();
    }
  };
  (hmac._HmacSink.new = function(sink, hash, key) {
    this[S$0._innerResultSink] = new digest_sink.DigestSink.new();
    this[S$0.___HmacSink__innerSink] = null;
    this[S$0._isClosed] = false;
    this[S$0._outerSink] = hash.startChunkedConversion(sink);
    hmac._HmacSink.__proto__.new.call(this);
    this[S$0._innerSink] = hash.startChunkedConversion(this[S$0._innerResultSink]);
    let padding = _native_typed_data.NativeUint8List.new(key[S$.$length]);
    for (let i = 0; i < padding[S$.$length]; i = i + 1) {
      padding[S$.$_set](i, (92 ^ key[S$.$_get](i)) >>> 0);
    }
    this[S$0._outerSink].add(padding);
    for (let i = 0; i < padding[S$.$length]; i = i + 1) {
      padding[S$.$_set](i, (54 ^ key[S$.$_get](i)) >>> 0);
    }
    this[S$0._innerSink].add(padding);
  }).prototype = hmac._HmacSink.prototype;
  dart.addTypeTests(hmac._HmacSink);
  dart.addTypeCaches(hmac._HmacSink);
  dart.setMethodSignature(hmac._HmacSink, () => ({
    __proto__: dart.getMethods(hmac._HmacSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(hmac._HmacSink, () => ({
    __proto__: dart.getGetters(hmac._HmacSink.__proto__),
    [S$0._innerSink]: convert.ByteConversionSink
  }));
  dart.setSetterSignature(hmac._HmacSink, () => ({
    __proto__: dart.getSetters(hmac._HmacSink.__proto__),
    [S$0._innerSink]: convert.ByteConversionSink
  }));
  dart.setLibraryUri(hmac._HmacSink, I[98]);
  dart.setFieldSignature(hmac._HmacSink, () => ({
    __proto__: dart.getFields(hmac._HmacSink.__proto__),
    [S$0._outerSink]: dart.finalFieldType(convert.ByteConversionSink),
    [S$0._innerResultSink]: dart.finalFieldType(digest_sink.DigestSink),
    [S$0.___HmacSink__innerSink]: dart.fieldType(dart.nullable(convert.ByteConversionSink)),
    [S$0._isClosed]: dart.fieldType(core.bool)
  }));
  md5._MD5 = class _MD5 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new md5._MD5.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new md5._MD5Sink.new(sink));
    }
  };
  (md5._MD5.__ = function() {
    this[S$0.blockSize] = 16 * 4;
    md5._MD5.__proto__.new.call(this);
    ;
  }).prototype = md5._MD5.prototype;
  dart.addTypeTests(md5._MD5);
  dart.addTypeCaches(md5._MD5);
  dart.setMethodSignature(md5._MD5, () => ({
    __proto__: dart.getMethods(md5._MD5.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(md5._MD5, I[99]);
  dart.setFieldSignature(md5._MD5, () => ({
    __proto__: dart.getFields(md5._MD5.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  hash_sink.HashSink = class HashSink extends core.Object {
    add(data) {
      T$.ListOfint().as(data);
      if (this[S$0._isClosed$1]) dart.throw(new core.StateError.new("Hash.add() called after close()."));
      this[S$0._lengthInBytes] = this[S$0._lengthInBytes] + data[S$.$length];
      this[S$0._pendingData].addAll(data);
      this[S$0._iterate]();
    }
    close() {
      if (this[S$0._isClosed$1]) return;
      this[S$0._isClosed$1] = true;
      this[S$0._finalizeData]();
      this[S$0._iterate]();
      if (!this[S$0._pendingData][S$.$isEmpty]) dart.assertFailed(null, I[101], 90, 12, "_pendingData.isEmpty");
      this[S$0._sink].add(new digest.Digest.new(this[S$0._byteDigest]()));
      this[S$0._sink].close();
    }
    [S$0._byteDigest]() {
      if (this[S$0._endian][S$.$_equals](typed_data.Endian.host)) return this.digest[S$0.$buffer][S$0.$asUint8List]();
      let cachedDigest = this.digest;
      let byteDigest = _native_typed_data.NativeUint8List.new(cachedDigest[S$0.$lengthInBytes]);
      let byteData = byteDigest[S$0.$buffer][S$0.$asByteData]();
      for (let i = 0; i < cachedDigest[S$.$length]; i = i + 1) {
        byteData[S$0.$setUint32](i * 4, cachedDigest[S$.$_get](i));
      }
      return byteDigest;
    }
    [S$0._iterate]() {
      let pendingDataBytes = this[S$0._pendingData].buffer[S$0.$asByteData]();
      let pendingDataChunks = (this[S$0._pendingData].length / this[S$0._currentChunk][S$0.$lengthInBytes])[S$0.$truncate]();
      for (let i = 0; i < pendingDataChunks; i = i + 1) {
        for (let j = 0; j < this[S$0._currentChunk][S$.$length]; j = j + 1) {
          this[S$0._currentChunk][S$.$_set](j, pendingDataBytes[S$0.$getUint32](i * this[S$0._currentChunk][S$0.$lengthInBytes] + j * 4, this[S$0._endian]));
        }
        this.updateHash(this[S$0._currentChunk]);
      }
      this[S$0._pendingData][S$0.$removeRange](0, pendingDataChunks * this[S$0._currentChunk][S$0.$lengthInBytes]);
    }
    [S$0._finalizeData]() {
      this[S$0._pendingData].add(128);
      let contentsLength = this[S$0._lengthInBytes] + 1 + this[S$0._signatureBytes];
      let finalizedLength = this[S$0._roundUp](contentsLength, this[S$0._currentChunk][S$0.$lengthInBytes]);
      for (let i = 0; i < finalizedLength - contentsLength; i = i + 1) {
        this[S$0._pendingData].add(0);
      }
      if (this[S$0._lengthInBytes] > 1125899906842623) {
        dart.throw(new core.UnsupportedError.new("Hashing is unsupported for messages with more than 2^53 bits."));
      }
      let lengthInBits = this[S$0._lengthInBytes] * 8;
      let offset = this[S$0._pendingData].length + (this[S$0._signatureBytes] - 8);
      this[S$0._pendingData].addAll(_native_typed_data.NativeUint8List.new(this[S$0._signatureBytes]));
      let byteData = this[S$0._pendingData].buffer[S$0.$asByteData]();
      let highBits = (lengthInBits / 4294967296)[S$0.$truncate]();
      let lowBits = (lengthInBits & 4294967295) >>> 0;
      if (this[S$0._endian][S$.$_equals](typed_data.Endian.big)) {
        byteData[S$0.$setUint32](offset, highBits, this[S$0._endian]);
        byteData[S$0.$setUint32](offset + 4, lowBits, this[S$0._endian]);
      } else {
        byteData[S$0.$setUint32](offset, lowBits, this[S$0._endian]);
        byteData[S$0.$setUint32](offset + 4, highBits, this[S$0._endian]);
      }
    }
    [S$0._roundUp](val, n) {
      return (val + n - 1 & -n) >>> 0;
    }
  };
  (hash_sink.HashSink.new = function(_sink, chunkSizeInWords, opts$) {
    let endian = opts$ && 'endian' in opts$ ? opts$.endian : C[289] || CT.C289;
    let signatureBytes = opts$ && 'signatureBytes' in opts$ ? opts$.signatureBytes : 8;
    this[S$0._lengthInBytes] = 0;
    this[S$0._pendingData] = new typed_buffer.Uint8Buffer.new();
    this[S$0._isClosed$1] = false;
    this[S$0._sink] = _sink;
    this[S$0._endian] = endian;
    if (!(signatureBytes >= 8)) dart.assertFailed(null, I[101], 64, 16, "signatureBytes >= 8");
    this[S$0._signatureBytes] = signatureBytes;
    this[S$0._currentChunk] = _native_typed_data.NativeUint32List.new(chunkSizeInWords);
    ;
  }).prototype = hash_sink.HashSink.prototype;
  dart.addTypeTests(hash_sink.HashSink);
  dart.addTypeCaches(hash_sink.HashSink);
  hash_sink.HashSink[dart.implements] = () => [core.Sink$(core.List$(core.int))];
  dart.setMethodSignature(hash_sink.HashSink, () => ({
    __proto__: dart.getMethods(hash_sink.HashSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [S$0._byteDigest]: dart.fnType(typed_data.Uint8List, []),
    [S$0._iterate]: dart.fnType(dart.void, []),
    [S$0._finalizeData]: dart.fnType(dart.void, []),
    [S$0._roundUp]: dart.fnType(core.int, [core.int, core.int])
  }));
  dart.setLibraryUri(hash_sink.HashSink, I[102]);
  dart.setFieldSignature(hash_sink.HashSink, () => ({
    __proto__: dart.getFields(hash_sink.HashSink.__proto__),
    [S$0._sink]: dart.finalFieldType(core.Sink$(digest.Digest)),
    [S$0._endian]: dart.finalFieldType(typed_data.Endian),
    [S$0._currentChunk]: dart.finalFieldType(typed_data.Uint32List),
    [S$0._lengthInBytes]: dart.fieldType(core.int),
    [S$0._pendingData]: dart.finalFieldType(typed_buffer.Uint8Buffer),
    [S$0._isClosed$1]: dart.fieldType(core.bool),
    [S$0._signatureBytes]: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(hash_sink.HashSink, () => ['_maxMessageLengthInBytes']);
  dart.defineLazy(hash_sink.HashSink, {
    /*hash_sink.HashSink._maxMessageLengthInBytes*/get _maxMessageLengthInBytes() {
      return 1125899906842623;
    }
  }, false);
  md5._MD5Sink = class _MD5Sink extends hash_sink.HashSink {
    get digest() {
      return this[S$0.digest];
    }
    set digest(value) {
      super.digest = value;
    }
    static ['_#new#tearOff'](sink) {
      return new md5._MD5Sink.new(sink);
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 16)) dart.assertFailed(null, I[100], 81, 12, "chunk.length == 16");
      let a = this.digest[S$.$_get](0);
      let b = this.digest[S$.$_get](1);
      let c = this.digest[S$.$_get](2);
      let d = this.digest[S$.$_get](3);
      let e = null;
      let f = null;
      for (let i = 0; i < 64; i = i + 1) {
        if (i < 16) {
          e = (b & c | (~b & 4294967295 & d) >>> 0) >>> 0;
          f = i;
        } else if (i < 32) {
          e = (d & b | (~d & 4294967295 & c) >>> 0) >>> 0;
          f = (5 * i + 1)[S$0.$modulo](16);
        } else if (i < 48) {
          e = (b ^ c ^ d) >>> 0;
          f = (3 * i + 5)[S$0.$modulo](16);
        } else {
          e = (c ^ (b | (~d & 4294967295) >>> 0) >>> 0) >>> 0;
          f = (7 * i)[S$0.$modulo](16);
        }
        let temp = d;
        d = c;
        c = b;
        b = utils$.add32(b, utils$.rotl32(utils$.add32(utils$.add32(a, e), utils$.add32(md5._noise[S$.$_get](i), chunk[S$.$_get](f))), md5._shiftAmounts[S$.$_get](i)));
        a = temp;
      }
      this.digest[S$.$_set](0, utils$.add32(a, this.digest[S$.$_get](0)));
      this.digest[S$.$_set](1, utils$.add32(b, this.digest[S$.$_get](1)));
      this.digest[S$.$_set](2, utils$.add32(c, this.digest[S$.$_get](2)));
      this.digest[S$.$_set](3, utils$.add32(d, this.digest[S$.$_get](3)));
    }
  };
  (md5._MD5Sink.new = function(sink) {
    this[S$0.digest] = _native_typed_data.NativeUint32List.new(4);
    md5._MD5Sink.__proto__.new.call(this, sink, 16, {endian: typed_data.Endian.little});
    this.digest[S$.$_set](0, 1732584193);
    this.digest[S$.$_set](1, 4023233417);
    this.digest[S$.$_set](2, 2562383102);
    this.digest[S$.$_set](3, 271733878);
  }).prototype = md5._MD5Sink.prototype;
  dart.addTypeTests(md5._MD5Sink);
  dart.addTypeCaches(md5._MD5Sink);
  dart.setMethodSignature(md5._MD5Sink, () => ({
    __proto__: dart.getMethods(md5._MD5Sink.__proto__),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setLibraryUri(md5._MD5Sink, I[99]);
  dart.setFieldSignature(md5._MD5Sink, () => ({
    __proto__: dart.getFields(md5._MD5Sink.__proto__),
    digest: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.defineLazy(md5, {
    /*md5.md5*/get md5() {
      return C[290] || CT.C290;
    },
    /*md5._noise*/get _noise() {
      return C[291] || CT.C291;
    },
    /*md5._shiftAmounts*/get _shiftAmounts() {
      return C[292] || CT.C292;
    }
  }, false);
  sha1._Sha1 = class _Sha1 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$1];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha1._Sha1.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha1._Sha1Sink.new(sink));
    }
  };
  (sha1._Sha1.__ = function() {
    this[S$0.blockSize$1] = 16 * 4;
    sha1._Sha1.__proto__.new.call(this);
    ;
  }).prototype = sha1._Sha1.prototype;
  dart.addTypeTests(sha1._Sha1);
  dart.addTypeCaches(sha1._Sha1);
  dart.setMethodSignature(sha1._Sha1, () => ({
    __proto__: dart.getMethods(sha1._Sha1.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha1._Sha1, I[103]);
  dart.setFieldSignature(sha1._Sha1, () => ({
    __proto__: dart.getFields(sha1._Sha1.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha1._Sha1Sink = class _Sha1Sink extends hash_sink.HashSink {
    get digest() {
      return this[S$0.digest$1];
    }
    set digest(value) {
      super.digest = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha1._Sha1Sink.new(sink);
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 16)) dart.assertFailed(null, I[104], 58, 12, "chunk.length == 16");
      let a = this.digest[S$.$_get](0);
      let b = this.digest[S$.$_get](1);
      let c = this.digest[S$.$_get](2);
      let d = this.digest[S$.$_get](3);
      let e = this.digest[S$.$_get](4);
      for (let i = 0; i < 80; i = i + 1) {
        if (i < 16) {
          this[S$0._extended][S$.$_set](i, chunk[S$.$_get](i));
        } else {
          this[S$0._extended][S$.$_set](i, utils$.rotl32((this[S$0._extended][S$.$_get](i - 3) ^ this[S$0._extended][S$.$_get](i - 8) ^ this[S$0._extended][S$.$_get](i - 14) ^ this[S$0._extended][S$.$_get](i - 16)) >>> 0, 1));
        }
        let newA = utils$.add32(utils$.add32(utils$.rotl32(a, 5), e), this[S$0._extended][S$.$_get](i));
        if (i < 20) {
          newA = utils$.add32(utils$.add32(newA, (b & c | (~b & d) >>> 0) >>> 0), 1518500249);
        } else if (i < 40) {
          newA = utils$.add32(utils$.add32(newA, (b ^ c ^ d) >>> 0), 1859775393);
        } else if (i < 60) {
          newA = utils$.add32(utils$.add32(newA, (b & c | (b & d) >>> 0 | (c & d) >>> 0) >>> 0), 2400959708);
        } else {
          newA = utils$.add32(utils$.add32(newA, (b ^ c ^ d) >>> 0), 3395469782);
        }
        e = d;
        d = c;
        c = utils$.rotl32(b, 30);
        b = a;
        a = (newA & 4294967295) >>> 0;
      }
      this.digest[S$.$_set](0, utils$.add32(a, this.digest[S$.$_get](0)));
      this.digest[S$.$_set](1, utils$.add32(b, this.digest[S$.$_get](1)));
      this.digest[S$.$_set](2, utils$.add32(c, this.digest[S$.$_get](2)));
      this.digest[S$.$_set](3, utils$.add32(d, this.digest[S$.$_get](3)));
      this.digest[S$.$_set](4, utils$.add32(e, this.digest[S$.$_get](4)));
    }
  };
  (sha1._Sha1Sink.new = function(sink) {
    this[S$0.digest$1] = _native_typed_data.NativeUint32List.new(5);
    this[S$0._extended] = _native_typed_data.NativeUint32List.new(80);
    sha1._Sha1Sink.__proto__.new.call(this, sink, 16);
    this.digest[S$.$_set](0, 1732584193);
    this.digest[S$.$_set](1, 4023233417);
    this.digest[S$.$_set](2, 2562383102);
    this.digest[S$.$_set](3, 271733878);
    this.digest[S$.$_set](4, 3285377520);
  }).prototype = sha1._Sha1Sink.prototype;
  dart.addTypeTests(sha1._Sha1Sink);
  dart.addTypeCaches(sha1._Sha1Sink);
  dart.setMethodSignature(sha1._Sha1Sink, () => ({
    __proto__: dart.getMethods(sha1._Sha1Sink.__proto__),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setLibraryUri(sha1._Sha1Sink, I[103]);
  dart.setFieldSignature(sha1._Sha1Sink, () => ({
    __proto__: dart.getFields(sha1._Sha1Sink.__proto__),
    digest: dart.finalFieldType(typed_data.Uint32List),
    [S$0._extended]: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.defineLazy(sha1, {
    /*sha1.sha1*/get sha1() {
      return C[293] || CT.C293;
    }
  }, false);
  sha256._Sha256 = class _Sha256 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$2];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha256._Sha256.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha256._Sha256Sink.new(sink));
    }
  };
  (sha256._Sha256.__ = function() {
    this[S$0.blockSize$2] = 16 * 4;
    sha256._Sha256.__proto__.new.call(this);
    ;
  }).prototype = sha256._Sha256.prototype;
  dart.addTypeTests(sha256._Sha256);
  dart.addTypeCaches(sha256._Sha256);
  dart.setMethodSignature(sha256._Sha256, () => ({
    __proto__: dart.getMethods(sha256._Sha256.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha256._Sha256, I[105]);
  dart.setFieldSignature(sha256._Sha256, () => ({
    __proto__: dart.getFields(sha256._Sha256.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha256._Sha224 = class _Sha224 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$3];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha256._Sha224.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha256._Sha224Sink.new(sink));
    }
  };
  (sha256._Sha224.__ = function() {
    this[S$0.blockSize$3] = 16 * 4;
    sha256._Sha224.__proto__.new.call(this);
    ;
  }).prototype = sha256._Sha224.prototype;
  dart.addTypeTests(sha256._Sha224);
  dart.addTypeCaches(sha256._Sha224);
  dart.setMethodSignature(sha256._Sha224, () => ({
    __proto__: dart.getMethods(sha256._Sha224.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha256._Sha224, I[105]);
  dart.setFieldSignature(sha256._Sha224, () => ({
    __proto__: dart.getFields(sha256._Sha224.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha256._Sha32BitSink = class _Sha32BitSink extends hash_sink.HashSink {
    [S$0._rotr32](n, x) {
      return (x[S$0.$rightShift](n) | (x[S$0.$leftShift](32 - n) & 4294967295) >>> 0) >>> 0;
    }
    [S$0._ch](x, y, z) {
      return (x & y ^ (~x & 4294967295 & z) >>> 0) >>> 0;
    }
    [S$0._maj](x, y, z) {
      return (x & y ^ (x & z) >>> 0 ^ (y & z) >>> 0) >>> 0;
    }
    [S$0._bsig0](x) {
      return (this[S$0._rotr32](2, x) ^ this[S$0._rotr32](13, x) ^ this[S$0._rotr32](22, x)) >>> 0;
    }
    [S$0._bsig1](x) {
      return (this[S$0._rotr32](6, x) ^ this[S$0._rotr32](11, x) ^ this[S$0._rotr32](25, x)) >>> 0;
    }
    [S$0._ssig0](x) {
      return (this[S$0._rotr32](7, x) ^ this[S$0._rotr32](18, x) ^ x[S$0.$rightShift](3)) >>> 0;
    }
    [S$0._ssig1](x) {
      return (this[S$0._rotr32](17, x) ^ this[S$0._rotr32](19, x) ^ x[S$0.$rightShift](10)) >>> 0;
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 16)) dart.assertFailed(null, I[106], 95, 12, "chunk.length == 16");
      for (let i = 0; i < 16; i = i + 1) {
        this[S$0._extended$1][S$.$_set](i, chunk[S$.$_get](i));
      }
      for (let i = 16; i < 64; i = i + 1) {
        this[S$0._extended$1][S$.$_set](i, utils$.add32(utils$.add32(this[S$0._ssig1](this[S$0._extended$1][S$.$_get](i - 2)), this[S$0._extended$1][S$.$_get](i - 7)), utils$.add32(this[S$0._ssig0](this[S$0._extended$1][S$.$_get](i - 15)), this[S$0._extended$1][S$.$_get](i - 16))));
      }
      let a = this[S$0._digest][S$.$_get](0);
      let b = this[S$0._digest][S$.$_get](1);
      let c = this[S$0._digest][S$.$_get](2);
      let d = this[S$0._digest][S$.$_get](3);
      let e = this[S$0._digest][S$.$_get](4);
      let f = this[S$0._digest][S$.$_get](5);
      let g = this[S$0._digest][S$.$_get](6);
      let h = this[S$0._digest][S$.$_get](7);
      for (let i = 0; i < 64; i = i + 1) {
        let temp1 = utils$.add32(utils$.add32(h, this[S$0._bsig1](e)), utils$.add32(this[S$0._ch](e, f, g), utils$.add32(sha256._noise[S$.$_get](i), this[S$0._extended$1][S$.$_get](i))));
        let temp2 = utils$.add32(this[S$0._bsig0](a), this[S$0._maj](a, b, c));
        h = g;
        g = f;
        f = e;
        e = utils$.add32(d, temp1);
        d = c;
        c = b;
        b = a;
        a = utils$.add32(temp1, temp2);
      }
      this[S$0._digest][S$.$_set](0, utils$.add32(a, this[S$0._digest][S$.$_get](0)));
      this[S$0._digest][S$.$_set](1, utils$.add32(b, this[S$0._digest][S$.$_get](1)));
      this[S$0._digest][S$.$_set](2, utils$.add32(c, this[S$0._digest][S$.$_get](2)));
      this[S$0._digest][S$.$_set](3, utils$.add32(d, this[S$0._digest][S$.$_get](3)));
      this[S$0._digest][S$.$_set](4, utils$.add32(e, this[S$0._digest][S$.$_get](4)));
      this[S$0._digest][S$.$_set](5, utils$.add32(f, this[S$0._digest][S$.$_get](5)));
      this[S$0._digest][S$.$_set](6, utils$.add32(g, this[S$0._digest][S$.$_get](6)));
      this[S$0._digest][S$.$_set](7, utils$.add32(h, this[S$0._digest][S$.$_get](7)));
    }
  };
  (sha256._Sha32BitSink.new = function(sink, _digest) {
    this[S$0._extended$1] = _native_typed_data.NativeUint32List.new(64);
    this[S$0._digest] = _digest;
    sha256._Sha32BitSink.__proto__.new.call(this, sink, 16);
    ;
  }).prototype = sha256._Sha32BitSink.prototype;
  dart.addTypeTests(sha256._Sha32BitSink);
  dart.addTypeCaches(sha256._Sha32BitSink);
  dart.setMethodSignature(sha256._Sha32BitSink, () => ({
    __proto__: dart.getMethods(sha256._Sha32BitSink.__proto__),
    [S$0._rotr32]: dart.fnType(core.int, [core.int, core.int]),
    [S$0._ch]: dart.fnType(core.int, [core.int, core.int, core.int]),
    [S$0._maj]: dart.fnType(core.int, [core.int, core.int, core.int]),
    [S$0._bsig0]: dart.fnType(core.int, [core.int]),
    [S$0._bsig1]: dart.fnType(core.int, [core.int]),
    [S$0._ssig0]: dart.fnType(core.int, [core.int]),
    [S$0._ssig1]: dart.fnType(core.int, [core.int]),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setLibraryUri(sha256._Sha32BitSink, I[105]);
  dart.setFieldSignature(sha256._Sha32BitSink, () => ({
    __proto__: dart.getFields(sha256._Sha32BitSink.__proto__),
    [S$0._digest]: dart.finalFieldType(typed_data.Uint32List),
    [S$0._extended$1]: dart.finalFieldType(typed_data.Uint32List)
  }));
  sha256._Sha256Sink = class _Sha256Sink extends sha256._Sha32BitSink {
    get digest() {
      return this[S$0._digest];
    }
    static ['_#new#tearOff'](sink) {
      return new sha256._Sha256Sink.new(sink);
    }
  };
  (sha256._Sha256Sink.new = function(sink) {
    sha256._Sha256Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225])));
    ;
  }).prototype = sha256._Sha256Sink.prototype;
  dart.addTypeTests(sha256._Sha256Sink);
  dart.addTypeCaches(sha256._Sha256Sink);
  dart.setGetterSignature(sha256._Sha256Sink, () => ({
    __proto__: dart.getGetters(sha256._Sha256Sink.__proto__),
    digest: typed_data.Uint32List
  }));
  dart.setLibraryUri(sha256._Sha256Sink, I[105]);
  sha256._Sha224Sink = class _Sha224Sink extends sha256._Sha32BitSink {
    get digest() {
      return this[S$0._digest][S$0.$buffer][S$0.$asUint32List](0, 7);
    }
    static ['_#new#tearOff'](sink) {
      return new sha256._Sha224Sink.new(sink);
    }
  };
  (sha256._Sha224Sink.new = function(sink) {
    sha256._Sha224Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428])));
    ;
  }).prototype = sha256._Sha224Sink.prototype;
  dart.addTypeTests(sha256._Sha224Sink);
  dart.addTypeCaches(sha256._Sha224Sink);
  dart.setGetterSignature(sha256._Sha224Sink, () => ({
    __proto__: dart.getGetters(sha256._Sha224Sink.__proto__),
    digest: typed_data.Uint32List
  }));
  dart.setLibraryUri(sha256._Sha224Sink, I[105]);
  dart.defineLazy(sha256, {
    /*sha256.sha256*/get sha256() {
      return C[294] || CT.C294;
    },
    /*sha256.sha224*/get sha224() {
      return C[295] || CT.C295;
    },
    /*sha256._noise*/get _noise() {
      return C[296] || CT.C296;
    }
  }, false);
  sha512._Sha384 = class _Sha384 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$4];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha512._Sha384.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha384Sink.new(sink));
    }
  };
  (sha512._Sha384.__ = function() {
    this[S$0.blockSize$4] = 32 * 4;
    sha512._Sha384.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha384.prototype;
  dart.addTypeTests(sha512._Sha384);
  dart.addTypeCaches(sha512._Sha384);
  dart.setMethodSignature(sha512._Sha384, () => ({
    __proto__: dart.getMethods(sha512._Sha384.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha384, I[107]);
  dart.setFieldSignature(sha512._Sha384, () => ({
    __proto__: dart.getFields(sha512._Sha384.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha512._Sha512 = class _Sha512 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$5];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha512._Sha512.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha512Sink.new(sink));
    }
  };
  (sha512._Sha512.__ = function() {
    this[S$0.blockSize$5] = 32 * 4;
    sha512._Sha512.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha512.prototype;
  dart.addTypeTests(sha512._Sha512);
  dart.addTypeCaches(sha512._Sha512);
  dart.setMethodSignature(sha512._Sha512, () => ({
    __proto__: dart.getMethods(sha512._Sha512.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha512, I[107]);
  dart.setFieldSignature(sha512._Sha512, () => ({
    __proto__: dart.getFields(sha512._Sha512.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha512._Sha512224 = class _Sha512224 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$6];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#new#tearOff']() {
      return new sha512._Sha512224.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha512224Sink.new(sink));
    }
  };
  (sha512._Sha512224.new = function() {
    this[S$0.blockSize$6] = 32 * 4;
    sha512._Sha512224.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha512224.prototype;
  dart.addTypeTests(sha512._Sha512224);
  dart.addTypeCaches(sha512._Sha512224);
  dart.setMethodSignature(sha512._Sha512224, () => ({
    __proto__: dart.getMethods(sha512._Sha512224.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha512224, I[107]);
  dart.setFieldSignature(sha512._Sha512224, () => ({
    __proto__: dart.getFields(sha512._Sha512224.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha512._Sha512256 = class _Sha512256 extends hash.Hash {
    get blockSize() {
      return this[S$0.blockSize$7];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#new#tearOff']() {
      return new sha512._Sha512256.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha512256Sink.new(sink));
    }
  };
  (sha512._Sha512256.new = function() {
    this[S$0.blockSize$7] = 32 * 4;
    sha512._Sha512256.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha512256.prototype;
  dart.addTypeTests(sha512._Sha512256);
  dart.addTypeCaches(sha512._Sha512256);
  dart.setMethodSignature(sha512._Sha512256, () => ({
    __proto__: dart.getMethods(sha512._Sha512256.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha512256, I[107]);
  dart.setFieldSignature(sha512._Sha512256, () => ({
    __proto__: dart.getFields(sha512._Sha512256.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(sha512, {
    /*sha512.sha384*/get sha384() {
      return C[297] || CT.C297;
    },
    /*sha512.sha512*/get sha512() {
      return C[298] || CT.C298;
    },
    /*sha512.sha512224*/get sha512224() {
      return C[299] || CT.C299;
    },
    /*sha512.sha512256*/get sha512256() {
      return C[300] || CT.C300;
    }
  }, false);
  sign_in_with_apple$.SignInWithApple = class SignInWithApple extends core.Object {
    static get channel() {
      return method_channel_sign_in_with_apple.MethodChannelSignInWithApple.as(sign_in_with_apple_platform_interface.SignInWithApplePlatform.instance).channel;
    }
    static isAvailable() {
      return async.async(core.bool, function* isAvailable() {
        return sign_in_with_apple_platform_interface.SignInWithApplePlatform.instance.isAvailable();
      });
    }
    static getAppleIDCredential(opts$) {
      let scopes = opts$ && 'scopes' in opts$ ? opts$.scopes : null;
      let webAuthenticationOptions = opts$ && 'webAuthenticationOptions' in opts$ ? opts$.webAuthenticationOptions : null;
      let nonce = opts$ && 'nonce' in opts$ ? opts$.nonce : null;
      let state = opts$ && 'state' in opts$ ? opts$.state : null;
      return async.async(authorization_credential.AuthorizationCredentialAppleID, function* getAppleIDCredential() {
        return sign_in_with_apple_platform_interface.SignInWithApplePlatform.instance.getAppleIDCredential({scopes: scopes, webAuthenticationOptions: webAuthenticationOptions, nonce: nonce, state: state});
      });
    }
    static getCredentialState(userIdentifier) {
      return async.async(credential_state.CredentialState, function* getCredentialState() {
        return sign_in_with_apple_platform_interface.SignInWithApplePlatform.instance.getCredentialState(userIdentifier);
      });
    }
    static getKeychainCredential() {
      return async.async(authorization_credential.AuthorizationCredentialPassword, function* getKeychainCredential() {
        return sign_in_with_apple_platform_interface.SignInWithApplePlatform.instance.getKeychainCredential();
      });
    }
    static ['_#new#tearOff']() {
      return new sign_in_with_apple$.SignInWithApple.new();
    }
  };
  (sign_in_with_apple$.SignInWithApple.new = function() {
    ;
  }).prototype = sign_in_with_apple$.SignInWithApple.prototype;
  dart.addTypeTests(sign_in_with_apple$.SignInWithApple);
  dart.addTypeCaches(sign_in_with_apple$.SignInWithApple);
  dart.setStaticMethodSignature(sign_in_with_apple$.SignInWithApple, () => ['isAvailable', 'getAppleIDCredential', 'getCredentialState', 'getKeychainCredential']);
  dart.setStaticGetterSignature(sign_in_with_apple$.SignInWithApple, () => ['channel']);
  dart.setLibraryUri(sign_in_with_apple$.SignInWithApple, I[108]);
  apple_logo_painter.AppleLogoPainter = class AppleLogoPainter extends custom_paint.CustomPainter {
    get color() {
      return this[S$0.color];
    }
    set color(value) {
      super.color = value;
    }
    static ['_#new#tearOff'](opts$) {
      let color = opts$ && 'color' in opts$ ? opts$.color : null;
      return new apple_logo_painter.AppleLogoPainter.new({color: color});
    }
    paint(canvas, size) {
      let t204;
      let paint = (t204 = ui.Paint.new(), (() => {
        t204.color = this.color;
        return t204;
      })());
      canvas.drawPath(apple_logo_painter.AppleLogoPainter._getApplePath(size.width, size.height), paint);
    }
    static _getApplePath(w, h) {
      let t204;
      t204 = ui.Path.new();
      return (() => {
        t204.moveTo(w * 0.50779, h * 0.28732);
        t204.cubicTo(w * 0.4593, h * 0.28732, w * 0.38424, h * 0.24241, w * 0.30519, h * 0.24404);
        t204.cubicTo(w * 0.2009, h * 0.24512, w * 0.10525, h * 0.29328, w * 0.05145, h * 0.36957);
        t204.cubicTo(w * -0.05683, h * 0.5227, w * 0.02355, h * 0.74888, w * 0.12916, h * 0.87333);
        t204.cubicTo(w * 0.18097, h * 0.93394, w * 0.24209, h * 1.00211, w * 0.32313, h * 0.99995);
        t204.cubicTo(w * 0.40084, h * 0.99724, w * 0.43007, h * 0.95883, w * 0.52439, h * 0.95883);
        t204.cubicTo(w * 0.61805, h * 0.95883, w * 0.64462, h * 0.99995, w * 0.72699, h * 0.99833);
        t204.cubicTo(w * 0.81069, h * 0.99724, w * 0.86383, h * 0.93664, w * 0.91498, h * 0.8755);
        t204.cubicTo(w * 0.97409, h * 0.80515, w * 0.99867, h * 0.73698, w * 1, h * 0.73319);
        t204.cubicTo(w * 0.99801, h * 0.73265, w * 0.83726, h * 0.68233, w * 0.83526, h * 0.53082);
        t204.cubicTo(w * 0.83394, h * 0.4042, w * 0.96214, h * 0.3436, w * 0.96812, h * 0.34089);
        t204.cubicTo(w * 0.89505, h * 0.25378, w * 0.78279, h * 0.24404, w * 0.7436, h * 0.24187);
        t204.cubicTo(w * 0.6413, h * 0.23538, w * 0.55561, h * 0.28732, w * 0.50779, h * 0.28732);
        t204.close();
        t204.moveTo(w * 0.68049, h * 0.15962);
        t204.cubicTo(w * 0.72367, h * 0.11742, w * 0.75223, h * 0.05844, w * 0.74426, 0);
        t204.cubicTo(w * 0.68249, h * 0.00216, w * 0.60809, h * 0.03355, w * 0.56359, h * 0.07575);
        t204.cubicTo(w * 0.52373, h * 0.11309, w * 0.48919, h * 0.17315, w * 0.49849, h * 0.23051);
        t204.cubicTo(w * 0.56691, h * 0.23484, w * 0.63732, h * 0.20183, w * 0.68049, h * 0.15962);
        t204.close();
        return t204;
      })();
    }
    shouldRepaint(oldDelegate) {
      apple_logo_painter.AppleLogoPainter.as(oldDelegate);
      return !oldDelegate.color._equals(this.color);
    }
  };
  (apple_logo_painter.AppleLogoPainter.new = function(opts$) {
    let color = opts$ && 'color' in opts$ ? opts$.color : null;
    this[S$0.color] = color;
    apple_logo_painter.AppleLogoPainter.__proto__.new.call(this);
    ;
  }).prototype = apple_logo_painter.AppleLogoPainter.prototype;
  dart.addTypeTests(apple_logo_painter.AppleLogoPainter);
  dart.addTypeCaches(apple_logo_painter.AppleLogoPainter);
  dart.setMethodSignature(apple_logo_painter.AppleLogoPainter, () => ({
    __proto__: dart.getMethods(apple_logo_painter.AppleLogoPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(apple_logo_painter.AppleLogoPainter, () => ['_getApplePath']);
  dart.setLibraryUri(apple_logo_painter.AppleLogoPainter, I[109]);
  dart.setFieldSignature(apple_logo_painter.AppleLogoPainter, () => ({
    __proto__: dart.getFields(apple_logo_painter.AppleLogoPainter.__proto__),
    color: dart.finalFieldType(ui.Color)
  }));
  sign_in_with_apple_builder.SignInWithAppleBuilder = class SignInWithAppleBuilder extends framework.StatefulWidget {
    get builder() {
      return this[S$0.builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    get fallbackBuilder() {
      return this[S$0.fallbackBuilder];
    }
    set fallbackBuilder(value) {
      super.fallbackBuilder = value;
    }
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let builder = opts$ && 'builder' in opts$ ? opts$.builder : null;
      let fallbackBuilder = opts$ && 'fallbackBuilder' in opts$ ? opts$.fallbackBuilder : C[301] || CT.C301;
      return new sign_in_with_apple_builder.SignInWithAppleBuilder.new({key: key, builder: builder, fallbackBuilder: fallbackBuilder});
    }
    createState() {
      return new sign_in_with_apple_builder._SignInWithAppleBuilderState.new();
    }
  };
  (sign_in_with_apple_builder.SignInWithAppleBuilder.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let builder = opts$ && 'builder' in opts$ ? opts$.builder : null;
    let fallbackBuilder = opts$ && 'fallbackBuilder' in opts$ ? opts$.fallbackBuilder : C[301] || CT.C301;
    this[S$0.builder$1] = builder;
    this[S$0.fallbackBuilder] = fallbackBuilder;
    sign_in_with_apple_builder.SignInWithAppleBuilder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = sign_in_with_apple_builder.SignInWithAppleBuilder.prototype;
  dart.addTypeTests(sign_in_with_apple_builder.SignInWithAppleBuilder);
  dart.addTypeCaches(sign_in_with_apple_builder.SignInWithAppleBuilder);
  dart.setMethodSignature(sign_in_with_apple_builder.SignInWithAppleBuilder, () => ({
    __proto__: dart.getMethods(sign_in_with_apple_builder.SignInWithAppleBuilder.__proto__),
    createState: dart.fnType(sign_in_with_apple_builder._SignInWithAppleBuilderState, [])
  }));
  dart.setLibraryUri(sign_in_with_apple_builder.SignInWithAppleBuilder, I[110]);
  dart.setFieldSignature(sign_in_with_apple_builder.SignInWithAppleBuilder, () => ({
    __proto__: dart.getFields(sign_in_with_apple_builder.SignInWithAppleBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext])),
    fallbackBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext]))
  }));
  sign_in_with_apple_builder._SignInWithAppleBuilderState = class _SignInWithAppleBuilderState extends framework.State$(sign_in_with_apple_builder.SignInWithAppleBuilder) {
    initState() {
      super.initState();
      this[S$0._isAvailableFuture] = sign_in_with_apple$.SignInWithApple.isAvailable();
    }
    build(context) {
      return new (T$.FutureBuilderOfbool()).new({future: this[S$0._isAvailableFuture], builder: dart.fn((context, snapshot) => {
          let t205, t204, t205$, t204$;
          if (snapshot.hasData && snapshot.data === true) {
            t204 = this.widget;
            t205 = context;
            return t204.builder(t205);
          }
          t204$ = this.widget;
          t205$ = context;
          return t204$.fallbackBuilder(t205$);
        }, T$.BuildContextAndAsyncSnapshotOfboolToWidget())});
    }
    static ['_#new#tearOff']() {
      return new sign_in_with_apple_builder._SignInWithAppleBuilderState.new();
    }
  };
  (sign_in_with_apple_builder._SignInWithAppleBuilderState.new = function() {
    this[S$0._isAvailableFuture] = null;
    sign_in_with_apple_builder._SignInWithAppleBuilderState.__proto__.new.call(this);
    ;
  }).prototype = sign_in_with_apple_builder._SignInWithAppleBuilderState.prototype;
  dart.addTypeTests(sign_in_with_apple_builder._SignInWithAppleBuilderState);
  dart.addTypeCaches(sign_in_with_apple_builder._SignInWithAppleBuilderState);
  dart.setMethodSignature(sign_in_with_apple_builder._SignInWithAppleBuilderState, () => ({
    __proto__: dart.getMethods(sign_in_with_apple_builder._SignInWithAppleBuilderState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(sign_in_with_apple_builder._SignInWithAppleBuilderState, I[110]);
  dart.setFieldSignature(sign_in_with_apple_builder._SignInWithAppleBuilderState, () => ({
    __proto__: dart.getFields(sign_in_with_apple_builder._SignInWithAppleBuilderState.__proto__),
    [S$0._isAvailableFuture]: dart.fieldType(dart.nullable(async.Future$(core.bool)))
  }));
  sign_in_with_apple_builder._fallbackBuilder = function _fallbackBuilder(context) {
    return C[302] || CT.C302;
  };
  sign_in_with_apple_button.SignInWithAppleButton = class SignInWithAppleButton extends framework.StatelessWidget {
    get onPressed() {
      return this[S$0.onPressed];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get text() {
      return this[S$0.text];
    }
    set text(value) {
      super.text = value;
    }
    get height() {
      return this[S$0.height$1];
    }
    set height(value) {
      super.height = value;
    }
    get style() {
      return this[S$0.style];
    }
    set style(value) {
      super.style = value;
    }
    get borderRadius() {
      return this[S$0.borderRadius];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get iconAlignment() {
      return this[S$0.iconAlignment];
    }
    set iconAlignment(value) {
      super.iconAlignment = value;
    }
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let onPressed = opts$ && 'onPressed' in opts$ ? opts$.onPressed : null;
      let text = opts$ && 'text' in opts$ ? opts$.text : "Sign in with Apple";
      let height = opts$ && 'height' in opts$ ? opts$.height : 44;
      let style = opts$ && 'style' in opts$ ? opts$.style : C[303] || CT.C303;
      let borderRadius = opts$ && 'borderRadius' in opts$ ? opts$.borderRadius : C[304] || CT.C304;
      let iconAlignment = opts$ && 'iconAlignment' in opts$ ? opts$.iconAlignment : C[306] || CT.C306;
      return new sign_in_with_apple_button.SignInWithAppleButton.new({key: key, onPressed: onPressed, text: text, height: height, style: style, borderRadius: borderRadius, iconAlignment: iconAlignment});
    }
    get [S$0._backgroundColor]() {
      switch (this.style) {
        case C[303] || CT.C303:
          {
            return colors.Colors.black;
          }
        case C[307] || CT.C307:
        case C[308] || CT.C308:
          {
            return colors.Colors.white;
          }
      }
    }
    get [S$0._contrastColor]() {
      switch (this.style) {
        case C[303] || CT.C303:
          {
            return colors.Colors.white;
          }
        case C[307] || CT.C307:
        case C[308] || CT.C308:
          {
            return colors.Colors.black;
          }
      }
    }
    get [S$0._decoration]() {
      switch (this.style) {
        case C[303] || CT.C303:
        case C[307] || CT.C307:
          {
            return null;
          }
        case C[308] || CT.C308:
          {
            return new box_decoration.BoxDecoration.new({border: box_border.Border.all({width: 1, color: this[S$0._contrastColor]}), borderRadius: this.borderRadius});
          }
      }
    }
    build(context) {
      let fontSize = this.height * 0.43;
      let textWidget = new text.Text.new(this.text, {textAlign: ui.TextAlign.center, style: new text_style.TextStyle.new({inherit: false, fontSize: fontSize, color: this[S$0._contrastColor], fontFamily: ".SF Pro Text", letterSpacing: -0.41})});
      let appleIcon = new container.Container.new({width: 0.6363636363636364 * this.height, height: 0.6363636363636364 * this.height + 2, padding: new edge_insets.EdgeInsets.only({bottom: 4 / 44 * this.height}), child: new basic.Center.new({child: new basic.SizedBox.new({width: fontSize * (25 / 31), height: fontSize, child: new basic.CustomPaint.new({painter: new apple_logo_painter.AppleLogoPainter.new({color: this[S$0._contrastColor]})})})})});
      let children = T$.JSArrayOfWidget().of([]);
      switch (this.iconAlignment) {
        case C[306] || CT.C306:
          {
            children = T$.JSArrayOfWidget().of([appleIcon, new basic.Flexible.new({child: textWidget})]);
            break;
          }
        case C[309] || CT.C309:
          {
            children = T$.JSArrayOfWidget().of([appleIcon, new basic.Expanded.new({child: textWidget}), new basic.SizedBox.new({width: 0.6363636363636364 * this.height})]);
            break;
          }
      }
      return new basic.SizedBox.new({height: this.height, child: new basic.SizedBox.expand({child: new button.CupertinoButton.new({borderRadius: this.borderRadius, padding: edge_insets.EdgeInsets.zero, color: this[S$0._backgroundColor], child: new container.Container.new({decoration: this[S$0._decoration], padding: C[310] || CT.C310, height: this.height, child: new basic.Row.new({children: children, mainAxisAlignment: flex.MainAxisAlignment.center})}), onPressed: this.onPressed})})});
    }
  };
  (sign_in_with_apple_button.SignInWithAppleButton.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let onPressed = opts$ && 'onPressed' in opts$ ? opts$.onPressed : null;
    let text = opts$ && 'text' in opts$ ? opts$.text : "Sign in with Apple";
    let height = opts$ && 'height' in opts$ ? opts$.height : 44;
    let style = opts$ && 'style' in opts$ ? opts$.style : C[303] || CT.C303;
    let borderRadius = opts$ && 'borderRadius' in opts$ ? opts$.borderRadius : C[304] || CT.C304;
    let iconAlignment = opts$ && 'iconAlignment' in opts$ ? opts$.iconAlignment : C[306] || CT.C306;
    this[S$0.onPressed] = onPressed;
    this[S$0.text] = text;
    this[S$0.height$1] = height;
    this[S$0.style] = style;
    this[S$0.borderRadius] = borderRadius;
    this[S$0.iconAlignment] = iconAlignment;
    sign_in_with_apple_button.SignInWithAppleButton.__proto__.new.call(this, {key: key});
    ;
  }).prototype = sign_in_with_apple_button.SignInWithAppleButton.prototype;
  dart.addTypeTests(sign_in_with_apple_button.SignInWithAppleButton);
  dart.addTypeCaches(sign_in_with_apple_button.SignInWithAppleButton);
  dart.setMethodSignature(sign_in_with_apple_button.SignInWithAppleButton, () => ({
    __proto__: dart.getMethods(sign_in_with_apple_button.SignInWithAppleButton.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(sign_in_with_apple_button.SignInWithAppleButton, () => ({
    __proto__: dart.getGetters(sign_in_with_apple_button.SignInWithAppleButton.__proto__),
    [S$0._backgroundColor]: ui.Color,
    [S$0._contrastColor]: ui.Color,
    [S$0._decoration]: dart.nullable(decoration.Decoration)
  }));
  dart.setLibraryUri(sign_in_with_apple_button.SignInWithAppleButton, I[111]);
  dart.setFieldSignature(sign_in_with_apple_button.SignInWithAppleButton, () => ({
    __proto__: dart.getFields(sign_in_with_apple_button.SignInWithAppleButton.__proto__),
    onPressed: dart.finalFieldType(dart.fnType(dart.void, [])),
    text: dart.finalFieldType(core.String),
    height: dart.finalFieldType(core.double),
    style: dart.finalFieldType(sign_in_with_apple_button.SignInWithAppleButtonStyle),
    borderRadius: dart.finalFieldType(border_radius.BorderRadius),
    iconAlignment: dart.finalFieldType(sign_in_with_apple_button.IconAlignment)
  }));
  sign_in_with_apple_button.SignInWithAppleButtonStyle = class SignInWithAppleButtonStyle extends core._Enum {
    [S$._enumToString]() {
      return "SignInWithAppleButtonStyle." + this[S$._name];
    }
  };
  (sign_in_with_apple_button.SignInWithAppleButtonStyle.new = function(index, name) {
    sign_in_with_apple_button.SignInWithAppleButtonStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = sign_in_with_apple_button.SignInWithAppleButtonStyle.prototype;
  dart.addTypeTests(sign_in_with_apple_button.SignInWithAppleButtonStyle);
  dart.addTypeCaches(sign_in_with_apple_button.SignInWithAppleButtonStyle);
  dart.setMethodSignature(sign_in_with_apple_button.SignInWithAppleButtonStyle, () => ({
    __proto__: dart.getMethods(sign_in_with_apple_button.SignInWithAppleButtonStyle.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sign_in_with_apple_button.SignInWithAppleButtonStyle, I[111]);
  dart.setStaticFieldSignature(sign_in_with_apple_button.SignInWithAppleButtonStyle, () => ['values', 'black', 'white', 'whiteOutlined']);
  dart.defineLazy(sign_in_with_apple_button.SignInWithAppleButtonStyle, {
    /*sign_in_with_apple_button.SignInWithAppleButtonStyle.values*/get values() {
      return C[311] || CT.C311;
    },
    /*sign_in_with_apple_button.SignInWithAppleButtonStyle.black*/get black() {
      return C[303] || CT.C303;
    },
    /*sign_in_with_apple_button.SignInWithAppleButtonStyle.white*/get white() {
      return C[307] || CT.C307;
    },
    /*sign_in_with_apple_button.SignInWithAppleButtonStyle.whiteOutlined*/get whiteOutlined() {
      return C[308] || CT.C308;
    }
  }, false);
  sign_in_with_apple_button.IconAlignment = class IconAlignment extends core._Enum {
    [S$._enumToString]() {
      return "IconAlignment." + this[S$._name];
    }
  };
  (sign_in_with_apple_button.IconAlignment.new = function(index, name) {
    sign_in_with_apple_button.IconAlignment.__proto__.new.call(this, index, name);
    ;
  }).prototype = sign_in_with_apple_button.IconAlignment.prototype;
  dart.addTypeTests(sign_in_with_apple_button.IconAlignment);
  dart.addTypeCaches(sign_in_with_apple_button.IconAlignment);
  dart.setMethodSignature(sign_in_with_apple_button.IconAlignment, () => ({
    __proto__: dart.getMethods(sign_in_with_apple_button.IconAlignment.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sign_in_with_apple_button.IconAlignment, I[111]);
  dart.setStaticFieldSignature(sign_in_with_apple_button.IconAlignment, () => ['values', 'center', 'left']);
  dart.defineLazy(sign_in_with_apple_button.IconAlignment, {
    /*sign_in_with_apple_button.IconAlignment.values*/get values() {
      return C[312] || CT.C312;
    },
    /*sign_in_with_apple_button.IconAlignment.center*/get center() {
      return C[306] || CT.C306;
    },
    /*sign_in_with_apple_button.IconAlignment.left*/get left() {
      return C[309] || CT.C309;
    }
  }, false);
  dart.defineLazy(sign_in_with_apple_button, {
    /*sign_in_with_apple_button._appleIconSizeScale*/get _appleIconSizeScale() {
      return 0.6363636363636364;
    }
  }, false);
  url_launcher_string$.launchUrlString = function launchUrlString(urlString, opts$) {
    let mode = opts$ && 'mode' in opts$ ? opts$.mode : C[100] || CT.C100;
    let webViewConfiguration = opts$ && 'webViewConfiguration' in opts$ ? opts$.webViewConfiguration : C[103] || CT.C103;
    let webOnlyWindowName = opts$ && 'webOnlyWindowName' in opts$ ? opts$.webOnlyWindowName : null;
    return async.async(core.bool, function* launchUrlString() {
      if (mode === types$0.LaunchMode.inAppWebView && !(urlString[S$.$startsWith]("https:") || urlString[S$.$startsWith]("http:"))) {
        dart.throw(new core.ArgumentError.value(urlString, "urlString", "To use an in-app web view, you must provide an http(s) URL."));
      }
      return url_launcher_platform.UrlLauncherPlatform.instance.launchUrl(urlString, new types$.LaunchOptions.new({mode: type_conversion.convertLaunchMode(mode), webViewConfiguration: type_conversion.convertConfiguration(webViewConfiguration), webOnlyWindowName: webOnlyWindowName}));
    });
  };
  url_launcher_string$.canLaunchUrlString = function canLaunchUrlString(urlString) {
    return async.async(core.bool, function* canLaunchUrlString() {
      return url_launcher_platform.UrlLauncherPlatform.instance.canLaunch(urlString);
    });
  };
  navigation_delegate.NavigationDelegate = class NavigationDelegate extends core.Object {
    get platform() {
      return this[S$0.platform];
    }
    set platform(value) {
      super.platform = value;
    }
    get onNavigationRequest() {
      return this[S$0.onNavigationRequest];
    }
    set onNavigationRequest(value) {
      super.onNavigationRequest = value;
    }
    get onPageStarted() {
      return this[S$0.onPageStarted];
    }
    set onPageStarted(value) {
      super.onPageStarted = value;
    }
    get onPageFinished() {
      return this[S$0.onPageFinished];
    }
    set onPageFinished(value) {
      super.onPageFinished = value;
    }
    get onProgress() {
      return this[S$0.onProgress];
    }
    set onProgress(value) {
      super.onProgress = value;
    }
    get onWebResourceError() {
      return this[S$0.onWebResourceError];
    }
    set onWebResourceError(value) {
      super.onWebResourceError = value;
    }
    static ['_#new#tearOff'](opts$) {
      let onNavigationRequest = opts$ && 'onNavigationRequest' in opts$ ? opts$.onNavigationRequest : null;
      let onPageStarted = opts$ && 'onPageStarted' in opts$ ? opts$.onPageStarted : null;
      let onPageFinished = opts$ && 'onPageFinished' in opts$ ? opts$.onPageFinished : null;
      let onProgress = opts$ && 'onProgress' in opts$ ? opts$.onProgress : null;
      let onWebResourceError = opts$ && 'onWebResourceError' in opts$ ? opts$.onWebResourceError : null;
      let onUrlChange = opts$ && 'onUrlChange' in opts$ ? opts$.onUrlChange : null;
      return new navigation_delegate.NavigationDelegate.new({onNavigationRequest: onNavigationRequest, onPageStarted: onPageStarted, onPageFinished: onPageFinished, onProgress: onProgress, onWebResourceError: onWebResourceError, onUrlChange: onUrlChange});
    }
    static ['_#fromPlatformCreationParams#tearOff'](params, opts$) {
      let onNavigationRequest = opts$ && 'onNavigationRequest' in opts$ ? opts$.onNavigationRequest : null;
      let onPageStarted = opts$ && 'onPageStarted' in opts$ ? opts$.onPageStarted : null;
      let onPageFinished = opts$ && 'onPageFinished' in opts$ ? opts$.onPageFinished : null;
      let onProgress = opts$ && 'onProgress' in opts$ ? opts$.onProgress : null;
      let onWebResourceError = opts$ && 'onWebResourceError' in opts$ ? opts$.onWebResourceError : null;
      let onUrlChange = opts$ && 'onUrlChange' in opts$ ? opts$.onUrlChange : null;
      return new navigation_delegate.NavigationDelegate.fromPlatformCreationParams(params, {onNavigationRequest: onNavigationRequest, onPageStarted: onPageStarted, onPageFinished: onPageFinished, onProgress: onProgress, onWebResourceError: onWebResourceError, onUrlChange: onUrlChange});
    }
    static ['_#fromPlatform#tearOff'](platform, opts$) {
      let onNavigationRequest = opts$ && 'onNavigationRequest' in opts$ ? opts$.onNavigationRequest : null;
      let onPageStarted = opts$ && 'onPageStarted' in opts$ ? opts$.onPageStarted : null;
      let onPageFinished = opts$ && 'onPageFinished' in opts$ ? opts$.onPageFinished : null;
      let onProgress = opts$ && 'onProgress' in opts$ ? opts$.onProgress : null;
      let onWebResourceError = opts$ && 'onWebResourceError' in opts$ ? opts$.onWebResourceError : null;
      let onUrlChange = opts$ && 'onUrlChange' in opts$ ? opts$.onUrlChange : null;
      return new navigation_delegate.NavigationDelegate.fromPlatform(platform, {onNavigationRequest: onNavigationRequest, onPageStarted: onPageStarted, onPageFinished: onPageFinished, onProgress: onProgress, onWebResourceError: onWebResourceError, onUrlChange: onUrlChange});
    }
  };
  (navigation_delegate.NavigationDelegate.new = function(opts$) {
    let onNavigationRequest = opts$ && 'onNavigationRequest' in opts$ ? opts$.onNavigationRequest : null;
    let onPageStarted = opts$ && 'onPageStarted' in opts$ ? opts$.onPageStarted : null;
    let onPageFinished = opts$ && 'onPageFinished' in opts$ ? opts$.onPageFinished : null;
    let onProgress = opts$ && 'onProgress' in opts$ ? opts$.onProgress : null;
    let onWebResourceError = opts$ && 'onWebResourceError' in opts$ ? opts$.onWebResourceError : null;
    let onUrlChange = opts$ && 'onUrlChange' in opts$ ? opts$.onUrlChange : null;
    navigation_delegate.NavigationDelegate.fromPlatformCreationParams.call(this, C[313] || CT.C313, {onNavigationRequest: onNavigationRequest, onPageStarted: onPageStarted, onPageFinished: onPageFinished, onProgress: onProgress, onWebResourceError: onWebResourceError, onUrlChange: onUrlChange});
  }).prototype = navigation_delegate.NavigationDelegate.prototype;
  (navigation_delegate.NavigationDelegate.fromPlatformCreationParams = function(params, opts$) {
    let onNavigationRequest = opts$ && 'onNavigationRequest' in opts$ ? opts$.onNavigationRequest : null;
    let onPageStarted = opts$ && 'onPageStarted' in opts$ ? opts$.onPageStarted : null;
    let onPageFinished = opts$ && 'onPageFinished' in opts$ ? opts$.onPageFinished : null;
    let onProgress = opts$ && 'onProgress' in opts$ ? opts$.onProgress : null;
    let onWebResourceError = opts$ && 'onWebResourceError' in opts$ ? opts$.onWebResourceError : null;
    let onUrlChange = opts$ && 'onUrlChange' in opts$ ? opts$.onUrlChange : null;
    navigation_delegate.NavigationDelegate.fromPlatform.call(this, platform_navigation_delegate.PlatformNavigationDelegate.new(params), {onNavigationRequest: onNavigationRequest, onPageStarted: onPageStarted, onPageFinished: onPageFinished, onProgress: onProgress, onWebResourceError: onWebResourceError, onUrlChange: onUrlChange});
  }).prototype = navigation_delegate.NavigationDelegate.prototype;
  (navigation_delegate.NavigationDelegate.fromPlatform = function(platform, opts$) {
    let onNavigationRequest = opts$ && 'onNavigationRequest' in opts$ ? opts$.onNavigationRequest : null;
    let onPageStarted = opts$ && 'onPageStarted' in opts$ ? opts$.onPageStarted : null;
    let onPageFinished = opts$ && 'onPageFinished' in opts$ ? opts$.onPageFinished : null;
    let onProgress = opts$ && 'onProgress' in opts$ ? opts$.onProgress : null;
    let onWebResourceError = opts$ && 'onWebResourceError' in opts$ ? opts$.onWebResourceError : null;
    let onUrlChange = opts$ && 'onUrlChange' in opts$ ? opts$.onUrlChange : null;
    this[S$0.platform] = platform;
    this[S$0.onNavigationRequest] = onNavigationRequest;
    this[S$0.onPageStarted] = onPageStarted;
    this[S$0.onPageFinished] = onPageFinished;
    this[S$0.onProgress] = onProgress;
    this[S$0.onWebResourceError] = onWebResourceError;
    if (this.onNavigationRequest != null) {
      this.platform.setOnNavigationRequest(dart.nullCheck(this.onNavigationRequest));
    }
    if (this.onPageStarted != null) {
      this.platform.setOnPageStarted(dart.nullCheck(this.onPageStarted));
    }
    if (this.onPageFinished != null) {
      this.platform.setOnPageFinished(dart.nullCheck(this.onPageFinished));
    }
    if (this.onProgress != null) {
      this.platform.setOnProgress(dart.nullCheck(this.onProgress));
    }
    if (this.onWebResourceError != null) {
      this.platform.setOnWebResourceError(dart.nullCheck(this.onWebResourceError));
    }
    if (onUrlChange != null) {
      this.platform.setOnUrlChange(onUrlChange);
    }
  }).prototype = navigation_delegate.NavigationDelegate.prototype;
  dart.addTypeTests(navigation_delegate.NavigationDelegate);
  dart.addTypeCaches(navigation_delegate.NavigationDelegate);
  dart.setLibraryUri(navigation_delegate.NavigationDelegate, I[112]);
  dart.setFieldSignature(navigation_delegate.NavigationDelegate, () => ({
    __proto__: dart.getFields(navigation_delegate.NavigationDelegate.__proto__),
    platform: dart.finalFieldType(platform_navigation_delegate.PlatformNavigationDelegate),
    onNavigationRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.FutureOr$(navigation_decision.NavigationDecision), [navigation_request.NavigationRequest]))),
    onPageStarted: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onPageFinished: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    onProgress: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    onWebResourceError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [web_resource_error.WebResourceError])))
  }));
  webview_controller.WebViewController = class WebViewController extends core.Object {
    get platform() {
      return this[S$0.platform$1];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#new#tearOff'](opts$) {
      let onPermissionRequest = opts$ && 'onPermissionRequest' in opts$ ? opts$.onPermissionRequest : null;
      return new webview_controller.WebViewController.new({onPermissionRequest: onPermissionRequest});
    }
    static ['_#fromPlatformCreationParams#tearOff'](params, opts$) {
      let onPermissionRequest = opts$ && 'onPermissionRequest' in opts$ ? opts$.onPermissionRequest : null;
      return new webview_controller.WebViewController.fromPlatformCreationParams(params, {onPermissionRequest: onPermissionRequest});
    }
    static ['_#fromPlatform#tearOff'](platform, opts$) {
      let onPermissionRequest = opts$ && 'onPermissionRequest' in opts$ ? opts$.onPermissionRequest : null;
      return new webview_controller.WebViewController.fromPlatform(platform, {onPermissionRequest: onPermissionRequest});
    }
    loadFile(absoluteFilePath) {
      return this.platform.loadFile(absoluteFilePath);
    }
    loadFlutterAsset(key) {
      if (!key[S$.$isNotEmpty]) dart.assertFailed(null, I[113], 143, 12, "key.isNotEmpty");
      return this.platform.loadFlutterAsset(key);
    }
    loadHtmlString(html, opts$) {
      let baseUrl = opts$ && 'baseUrl' in opts$ ? opts$.baseUrl : null;
      if (!html[S$.$isNotEmpty]) dart.assertFailed(null, I[113], 152, 12, "html.isNotEmpty");
      return this.platform.loadHtmlString(html, {baseUrl: baseUrl});
    }
    loadRequest(uri, opts$) {
      let method = opts$ && 'method' in opts$ ? opts$.method : C[315] || CT.C315;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      if (uri.scheme[S$.$isEmpty]) {
        dart.throw(new core.ArgumentError.new("Missing scheme in uri: " + dart.str(uri)));
      }
      return this.platform.loadRequest(new load_request_params.LoadRequestParams.new({uri: uri, method: method, headers: headers, body: body}));
    }
    currentUrl() {
      return this.platform.currentUrl();
    }
    canGoBack() {
      return this.platform.canGoBack();
    }
    canGoForward() {
      return this.platform.canGoForward();
    }
    goBack() {
      return this.platform.goBack();
    }
    goForward() {
      return this.platform.goForward();
    }
    reload() {
      return this.platform.reload();
    }
    setNavigationDelegate(delegate) {
      return this.platform.setPlatformNavigationDelegate(delegate.platform);
    }
    clearCache() {
      return this.platform.clearCache();
    }
    clearLocalStorage() {
      return this.platform.clearLocalStorage();
    }
    runJavaScript(javaScript) {
      return this.platform.runJavaScript(javaScript);
    }
    runJavaScriptReturningResult(javaScript) {
      return this.platform.runJavaScriptReturningResult(javaScript);
    }
    addJavaScriptChannel(name, opts$) {
      let onMessageReceived = opts$ && 'onMessageReceived' in opts$ ? opts$.onMessageReceived : null;
      if (!name[S$.$isNotEmpty]) dart.assertFailed(null, I[113], 293, 12, "name.isNotEmpty");
      return this.platform.addJavaScriptChannel(new platform_webview_controller.JavaScriptChannelParams.new({name: name, onMessageReceived: onMessageReceived}));
    }
    removeJavaScriptChannel(javaScriptChannelName) {
      return this.platform.removeJavaScriptChannel(javaScriptChannelName);
    }
    getTitle() {
      return this.platform.getTitle();
    }
    scrollTo(x, y) {
      return this.platform.scrollTo(x, y);
    }
    scrollBy(x, y) {
      return this.platform.scrollBy(x, y);
    }
    getScrollPosition() {
      return this.platform.getScrollPosition();
    }
    enableZoom(enabled) {
      return this.platform.enableZoom(enabled);
    }
    setBackgroundColor(color) {
      return this.platform.setBackgroundColor(color);
    }
    setJavaScriptMode(javaScriptMode) {
      return this.platform.setJavaScriptMode(javaScriptMode);
    }
    setUserAgent(userAgent) {
      return this.platform.setUserAgent(userAgent);
    }
    setOnConsoleMessage(onConsoleMessage) {
      return this.platform.setOnConsoleMessage(onConsoleMessage);
    }
    getUserAgent() {
      return this.platform.getUserAgent();
    }
  };
  (webview_controller.WebViewController.new = function(opts$) {
    let onPermissionRequest = opts$ && 'onPermissionRequest' in opts$ ? opts$.onPermissionRequest : null;
    webview_controller.WebViewController.fromPlatformCreationParams.call(this, C[314] || CT.C314, {onPermissionRequest: onPermissionRequest});
  }).prototype = webview_controller.WebViewController.prototype;
  (webview_controller.WebViewController.fromPlatformCreationParams = function(params, opts$) {
    let onPermissionRequest = opts$ && 'onPermissionRequest' in opts$ ? opts$.onPermissionRequest : null;
    webview_controller.WebViewController.fromPlatform.call(this, platform_webview_controller.PlatformWebViewController.new(params), {onPermissionRequest: onPermissionRequest});
  }).prototype = webview_controller.WebViewController.prototype;
  (webview_controller.WebViewController.fromPlatform = function(platform, opts$) {
    let onPermissionRequest = opts$ && 'onPermissionRequest' in opts$ ? opts$.onPermissionRequest : null;
    this[S$0.platform$1] = platform;
    if (onPermissionRequest != null) {
      this.platform.setOnPlatformPermissionRequest(dart.fn(request => {
        onPermissionRequest(new webview_controller.WebViewPermissionRequest.__(request, {types: request.types}));
      }, T$.PlatformWebViewPermissionRequestTovoid()));
    }
  }).prototype = webview_controller.WebViewController.prototype;
  dart.addTypeTests(webview_controller.WebViewController);
  dart.addTypeCaches(webview_controller.WebViewController);
  dart.setMethodSignature(webview_controller.WebViewController, () => ({
    __proto__: dart.getMethods(webview_controller.WebViewController.__proto__),
    loadFile: dart.fnType(async.Future$(dart.void), [core.String]),
    loadFlutterAsset: dart.fnType(async.Future$(dart.void), [core.String]),
    loadHtmlString: dart.fnType(async.Future$(dart.void), [core.String], {baseUrl: dart.nullable(core.String)}, {}),
    loadRequest: dart.fnType(async.Future$(dart.void), [core.Uri], {body: dart.nullable(typed_data.Uint8List), headers: core.Map$(core.String, core.String), method: load_request_params.LoadRequestMethod}, {}),
    currentUrl: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    canGoBack: dart.fnType(async.Future$(core.bool), []),
    canGoForward: dart.fnType(async.Future$(core.bool), []),
    goBack: dart.fnType(async.Future$(dart.void), []),
    goForward: dart.fnType(async.Future$(dart.void), []),
    reload: dart.fnType(async.Future$(dart.void), []),
    setNavigationDelegate: dart.fnType(async.Future$(dart.void), [navigation_delegate.NavigationDelegate]),
    clearCache: dart.fnType(async.Future$(dart.void), []),
    clearLocalStorage: dart.fnType(async.Future$(dart.void), []),
    runJavaScript: dart.fnType(async.Future$(dart.void), [core.String]),
    runJavaScriptReturningResult: dart.fnType(async.Future$(core.Object), [core.String]),
    addJavaScriptChannel: dart.fnType(async.Future$(dart.void), [core.String], {}, {onMessageReceived: dart.fnType(dart.void, [javascript_message.JavaScriptMessage])}),
    removeJavaScriptChannel: dart.fnType(async.Future$(dart.void), [core.String]),
    getTitle: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    scrollTo: dart.fnType(async.Future$(dart.void), [core.int, core.int]),
    scrollBy: dart.fnType(async.Future$(dart.void), [core.int, core.int]),
    getScrollPosition: dart.fnType(async.Future$(ui.Offset), []),
    enableZoom: dart.fnType(async.Future$(dart.void), [core.bool]),
    setBackgroundColor: dart.fnType(async.Future$(dart.void), [ui.Color]),
    setJavaScriptMode: dart.fnType(async.Future$(dart.void), [javascript_mode.JavaScriptMode]),
    setUserAgent: dart.fnType(async.Future$(dart.void), [dart.nullable(core.String)]),
    setOnConsoleMessage: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [javascript_console_message.JavaScriptConsoleMessage])]),
    getUserAgent: dart.fnType(async.Future$(dart.nullable(core.String)), [])
  }));
  dart.setLibraryUri(webview_controller.WebViewController, I[114]);
  dart.setFieldSignature(webview_controller.WebViewController, () => ({
    __proto__: dart.getFields(webview_controller.WebViewController.__proto__),
    platform: dart.finalFieldType(platform_webview_controller.PlatformWebViewController)
  }));
  webview_controller.WebViewPermissionRequest = class WebViewPermissionRequest extends core.Object {
    get types() {
      return this[S$0.types];
    }
    set types(value) {
      super.types = value;
    }
    get platform() {
      return this[S$0.platform$2];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#_#tearOff'](platform, opts$) {
      let types = opts$ && 'types' in opts$ ? opts$.types : null;
      return new webview_controller.WebViewPermissionRequest.__(platform, {types: types});
    }
    grant() {
      return this.platform.grant();
    }
    deny() {
      return this.platform.deny();
    }
  };
  (webview_controller.WebViewPermissionRequest.__ = function(platform, opts$) {
    let types = opts$ && 'types' in opts$ ? opts$.types : null;
    this[S$0.platform$2] = platform;
    this[S$0.types] = types;
    ;
  }).prototype = webview_controller.WebViewPermissionRequest.prototype;
  dart.addTypeTests(webview_controller.WebViewPermissionRequest);
  dart.addTypeCaches(webview_controller.WebViewPermissionRequest);
  dart.setMethodSignature(webview_controller.WebViewPermissionRequest, () => ({
    __proto__: dart.getMethods(webview_controller.WebViewPermissionRequest.__proto__),
    grant: dart.fnType(async.Future$(dart.void), []),
    deny: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(webview_controller.WebViewPermissionRequest, I[114]);
  dart.setFieldSignature(webview_controller.WebViewPermissionRequest, () => ({
    __proto__: dart.getFields(webview_controller.WebViewPermissionRequest.__proto__),
    types: dart.finalFieldType(core.Set$(platform_webview_permission_request.WebViewPermissionResourceType)),
    platform: dart.finalFieldType(platform_webview_permission_request.PlatformWebViewPermissionRequest)
  }));
  webview_cookie_manager.WebViewCookieManager = class WebViewCookieManager extends core.Object {
    get platform() {
      return this[S$0.platform$3];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#new#tearOff']() {
      return new webview_cookie_manager.WebViewCookieManager.new();
    }
    static ['_#fromPlatformCreationParams#tearOff'](params) {
      return new webview_cookie_manager.WebViewCookieManager.fromPlatformCreationParams(params);
    }
    static ['_#fromPlatform#tearOff'](platform) {
      return new webview_cookie_manager.WebViewCookieManager.fromPlatform(platform);
    }
    clearCookies() {
      return this.platform.clearCookies();
    }
    setCookie(cookie) {
      return this.platform.setCookie(cookie);
    }
  };
  (webview_cookie_manager.WebViewCookieManager.new = function() {
    webview_cookie_manager.WebViewCookieManager.fromPlatformCreationParams.call(this, C[316] || CT.C316);
  }).prototype = webview_cookie_manager.WebViewCookieManager.prototype;
  (webview_cookie_manager.WebViewCookieManager.fromPlatformCreationParams = function(params) {
    webview_cookie_manager.WebViewCookieManager.fromPlatform.call(this, platform_webview_cookie_manager.PlatformWebViewCookieManager.new(params));
  }).prototype = webview_cookie_manager.WebViewCookieManager.prototype;
  (webview_cookie_manager.WebViewCookieManager.fromPlatform = function(platform) {
    this[S$0.platform$3] = platform;
    ;
  }).prototype = webview_cookie_manager.WebViewCookieManager.prototype;
  dart.addTypeTests(webview_cookie_manager.WebViewCookieManager);
  dart.addTypeCaches(webview_cookie_manager.WebViewCookieManager);
  dart.setMethodSignature(webview_cookie_manager.WebViewCookieManager, () => ({
    __proto__: dart.getMethods(webview_cookie_manager.WebViewCookieManager.__proto__),
    clearCookies: dart.fnType(async.Future$(core.bool), []),
    setCookie: dart.fnType(async.Future$(dart.void), [webview_cookie.WebViewCookie])
  }));
  dart.setLibraryUri(webview_cookie_manager.WebViewCookieManager, I[115]);
  dart.setFieldSignature(webview_cookie_manager.WebViewCookieManager, () => ({
    __proto__: dart.getFields(webview_cookie_manager.WebViewCookieManager.__proto__),
    platform: dart.finalFieldType(platform_webview_cookie_manager.PlatformWebViewCookieManager)
  }));
  webview_widget.WebViewWidget = class WebViewWidget extends framework.StatelessWidget {
    get platform() {
      return this[S$0.platform$4];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let controller = opts$ && 'controller' in opts$ ? opts$.controller : null;
      let layoutDirection = opts$ && 'layoutDirection' in opts$ ? opts$.layoutDirection : C[317] || CT.C317;
      let gestureRecognizers = opts$ && 'gestureRecognizers' in opts$ ? opts$.gestureRecognizers : C[22] || CT.C22;
      return new webview_widget.WebViewWidget.new({key: key, controller: controller, layoutDirection: layoutDirection, gestureRecognizers: gestureRecognizers});
    }
    static ['_#fromPlatformCreationParams#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let params = opts$ && 'params' in opts$ ? opts$.params : null;
      return new webview_widget.WebViewWidget.fromPlatformCreationParams({key: key, params: params});
    }
    static ['_#fromPlatform#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let platform = opts$ && 'platform' in opts$ ? opts$.platform : null;
      return new webview_widget.WebViewWidget.fromPlatform({key: key, platform: platform});
    }
    get layoutDirection() {
      let t209, t208;
      t208 = this[S$0.__WebViewWidget_layoutDirection];
      return t208 == null ? (t209 = this.platform.params.layoutDirection, this[S$0.__WebViewWidget_layoutDirection] == null ? this[S$0.__WebViewWidget_layoutDirection] = t209 : dart.throw(new _internal.LateError.fieldADI("layoutDirection"))) : t208;
    }
    get gestureRecognizers() {
      let t209, t208;
      t208 = this[S$0.__WebViewWidget_gestureRecognizers];
      return t208 == null ? (t209 = this.platform.params.gestureRecognizers, this[S$0.__WebViewWidget_gestureRecognizers] == null ? this[S$0.__WebViewWidget_gestureRecognizers] = t209 : dart.throw(new _internal.LateError.fieldADI("gestureRecognizers"))) : t208;
    }
    build(context) {
      return this.platform.build(context);
    }
  };
  (webview_widget.WebViewWidget.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let controller = opts$ && 'controller' in opts$ ? opts$.controller : null;
    let layoutDirection = opts$ && 'layoutDirection' in opts$ ? opts$.layoutDirection : C[317] || CT.C317;
    let gestureRecognizers = opts$ && 'gestureRecognizers' in opts$ ? opts$.gestureRecognizers : C[22] || CT.C22;
    webview_widget.WebViewWidget.fromPlatformCreationParams.call(this, {key: key, params: new platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams.new({controller: controller.platform, layoutDirection: layoutDirection, gestureRecognizers: gestureRecognizers})});
  }).prototype = webview_widget.WebViewWidget.prototype;
  (webview_widget.WebViewWidget.fromPlatformCreationParams = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let params = opts$ && 'params' in opts$ ? opts$.params : null;
    webview_widget.WebViewWidget.fromPlatform.call(this, {key: key, platform: platform_webview_widget.PlatformWebViewWidget.new(params)});
  }).prototype = webview_widget.WebViewWidget.prototype;
  (webview_widget.WebViewWidget.fromPlatform = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let platform = opts$ && 'platform' in opts$ ? opts$.platform : null;
    this[S$0.__WebViewWidget_layoutDirection] = null;
    this[S$0.__WebViewWidget_gestureRecognizers] = null;
    this[S$0.platform$4] = platform;
    webview_widget.WebViewWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = webview_widget.WebViewWidget.prototype;
  dart.addTypeTests(webview_widget.WebViewWidget);
  dart.addTypeCaches(webview_widget.WebViewWidget);
  dart.setMethodSignature(webview_widget.WebViewWidget, () => ({
    __proto__: dart.getMethods(webview_widget.WebViewWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(webview_widget.WebViewWidget, () => ({
    __proto__: dart.getGetters(webview_widget.WebViewWidget.__proto__),
    layoutDirection: ui.TextDirection,
    gestureRecognizers: core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))
  }));
  dart.setLibraryUri(webview_widget.WebViewWidget, I[116]);
  dart.setFieldSignature(webview_widget.WebViewWidget, () => ({
    __proto__: dart.getFields(webview_widget.WebViewWidget.__proto__),
    platform: dart.finalFieldType(platform_webview_widget.PlatformWebViewWidget),
    [S$0.__WebViewWidget_layoutDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [S$0.__WebViewWidget_gestureRecognizers]: dart.fieldType(dart.nullable(core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer))))
  }));
  type_conversion.convertConfiguration = function convertConfiguration(config) {
    return new types$.InAppWebViewConfiguration.new({enableJavaScript: config.enableJavaScript, enableDomStorage: config.enableDomStorage, headers: config.headers});
  };
  type_conversion.convertLaunchMode = function convertLaunchMode(mode) {
    switch (mode) {
      case C[100] || CT.C100:
        {
          return types$.PreferredLaunchMode.platformDefault;
        }
      case C[101] || CT.C101:
        {
          return types$.PreferredLaunchMode.inAppWebView;
        }
      case C[45] || CT.C45:
        {
          return types$.PreferredLaunchMode.externalApplication;
        }
      case C[102] || CT.C102:
        {
          return types$.PreferredLaunchMode.externalNonBrowserApplication;
        }
    }
  };
  constants$2.Constants = class Constants extends core.Object {
    static ['_#new#tearOff']() {
      return new constants$2.Constants.new();
    }
  };
  (constants$2.Constants.new = function() {
    ;
  }).prototype = constants$2.Constants.prototype;
  dart.addTypeTests(constants$2.Constants);
  dart.addTypeCaches(constants$2.Constants);
  dart.setLibraryUri(constants$2.Constants, I[117]);
  dart.setStaticFieldSignature(constants$2.Constants, () => ['defaultHeaders']);
  dart.defineLazy(constants$2.Constants, {
    /*constants$2.Constants.defaultHeaders*/get defaultHeaders() {
      return C[318] || CT.C318;
    }
  }, false);
  dart.defineLazy(version$, {
    /*version$.version*/get version() {
      return "1.12.6";
    }
  }, false);
  fetch.RequestMethodType = class RequestMethodType extends core._Enum {
    [S$._enumToString]() {
      return "RequestMethodType." + this[S$._name];
    }
  };
  (fetch.RequestMethodType.new = function(index, name) {
    fetch.RequestMethodType.__proto__.new.call(this, index, name);
    ;
  }).prototype = fetch.RequestMethodType.prototype;
  dart.addTypeTests(fetch.RequestMethodType);
  dart.addTypeCaches(fetch.RequestMethodType);
  dart.setMethodSignature(fetch.RequestMethodType, () => ({
    __proto__: dart.getMethods(fetch.RequestMethodType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(fetch.RequestMethodType, I[118]);
  dart.setStaticFieldSignature(fetch.RequestMethodType, () => ['values', 'get', 'post', 'put', 'delete']);
  dart.defineLazy(fetch.RequestMethodType, {
    /*fetch.RequestMethodType.values*/get values() {
      return C[319] || CT.C319;
    },
    /*fetch.RequestMethodType.get*/get get() {
      return C[320] || CT.C320;
    },
    /*fetch.RequestMethodType.post*/get post() {
      return C[321] || CT.C321;
    },
    /*fetch.RequestMethodType.put*/get put() {
      return C[322] || CT.C322;
    },
    /*fetch.RequestMethodType.delete*/get delete() {
      return C[323] || CT.C323;
    }
  }, false);
  fetch.GotrueFetch = class GotrueFetch extends core.Object {
    get httpClient() {
      return this[S$0.httpClient$2];
    }
    set httpClient(value) {
      super.httpClient = value;
    }
    static ['_#new#tearOff'](httpClient = null) {
      return new fetch.GotrueFetch.new(httpClient);
    }
    isSuccessStatusCode(code) {
      return code >= 200 && code <= 299;
    }
    [S$0._handleError](error) {
      let t213, t213$, t213$0, t213$1;
      let errorRes = null;
      function errorRes$35get() {
        let t211;
        t211 = errorRes;
        return t211 == null ? dart.throw(new _internal.LateError.localNI("errorRes")) : t211;
      }
      function errorRes$35set(errorRes$35param) {
        return errorRes = errorRes$35param;
      }
      try {
        let parsedJson = T$.MapOfString$dynamic().as(convert.json.decode(error.body));
        let message = dart.toString((t213$1 = (t213$0 = (t213$ = (t213 = parsedJson[S$.$_get]("msg"), t213 == null ? parsedJson[S$.$_get]("message") : t213), t213$ == null ? parsedJson[S$.$_get]("error_description") : t213$), t213$0 == null ? parsedJson[S$.$_get]("error") : t213$0), t213$1 == null ? error.body : t213$1));
        errorRes$35set(new auth_exception.AuthException.new(message, {statusCode: dart.str(error.statusCode)}));
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          errorRes$35set(new auth_exception.AuthException.new(error.body, {statusCode: dart.str(error.statusCode)}));
        } else
          throw e;
      }
      return errorRes$35get();
    }
    request(url, method, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      return async.async(dart.dynamic, (function* request() {
        let t214, t214$, t214$0, t214$1, t214$2, t214$3, t217, t217$, t217$0, t217$1, t217$2, t217$3, t217$4, t217$5, t217$6, t217$7, t217$8;
        let headers = (t214$ = (t214 = options, t214 == null ? null : t214.headers), t214$ == null ? new (T$.IdentityMapOfString$String()).new() : t214$);
        if ((t214$0 = options, t214$0 == null ? null : t214$0.jwt) != null) {
          headers[S$.$_set]("Authorization", "Bearer " + dart.str(dart.nullCheck(options).jwt));
        }
        let qs = (t214$2 = (t214$1 = options, t214$1 == null ? null : t214$1.query), t214$2 == null ? new (T$.IdentityMapOfString$String()).new() : t214$2);
        if ((t214$3 = options, t214$3 == null ? null : t214$3.redirectTo) != null) {
          qs[S$.$_set]("redirect_to", dart.nullCheck(dart.nullCheck(options).redirectTo));
        }
        let uri = core.Uri.parse(url);
        uri = uri.replace({queryParameters: qs});
        let response = null;
        function response$35get() {
          let t215;
          t215 = response;
          return t215 == null ? dart.throw(new _internal.LateError.localNI("response")) : t215;
        }
        function response$35set(response$35param) {
          if (response == null)
            return response = response$35param;
          else
            dart.throw(new _internal.LateError.localAI("response"));
        }
        let bodyStr = convert.json.encode((t217$ = (t217 = options, t217 == null ? null : t217.body), t217$ == null ? new _js_helper.LinkedMap.new() : t217$));
        if (method !== fetch.RequestMethodType.get) {
          headers[S$.$_set]("Content-Type", "application/json");
        }
        switch (method) {
          case C[320] || CT.C320:
            {
              response$35set(yield (t217$1 = (t217$0 = this.httpClient, t217$0 == null ? null : dart.bind(t217$0, 'get')), t217$1 == null ? C[92] || CT.C92 : t217$1)(uri, {headers: headers}));
              break;
            }
          case C[321] || CT.C321:
            {
              response$35set(yield (t217$3 = (t217$2 = this.httpClient, t217$2 == null ? null : dart.bind(t217$2, 'post')), t217$3 == null ? C[93] || CT.C93 : t217$3)(uri, {headers: headers, body: bodyStr}));
              break;
            }
          case C[322] || CT.C322:
            {
              response$35set(yield (t217$5 = (t217$4 = this.httpClient, t217$4 == null ? null : dart.bind(t217$4, 'put')), t217$5 == null ? C[94] || CT.C94 : t217$5)(uri, {headers: headers, body: bodyStr}));
              break;
            }
          case C[323] || CT.C323:
            {
              response$35set(yield (t217$7 = (t217$6 = this.httpClient, t217$6 == null ? null : dart.bind(t217$6, 'delete')), t217$7 == null ? C[96] || CT.C96 : t217$7)(uri, {headers: headers, body: bodyStr}));
              break;
            }
        }
        if (this.isSuccessStatusCode(response$35get().statusCode)) {
          if ((t217$8 = options, t217$8 == null ? null : t217$8.noResolveJson) === true) {
            return response$35get().body;
          } else {
            return convert.json.decode(convert.utf8.decode(response$35get().bodyBytes));
          }
        } else {
          dart.throw(this[S$0._handleError](response$35get()));
        }
      }).bind(this));
    }
  };
  (fetch.GotrueFetch.new = function(httpClient = null) {
    this[S$0.httpClient$2] = httpClient;
    ;
  }).prototype = fetch.GotrueFetch.prototype;
  dart.addTypeTests(fetch.GotrueFetch);
  dart.addTypeCaches(fetch.GotrueFetch);
  dart.setMethodSignature(fetch.GotrueFetch, () => ({
    __proto__: dart.getMethods(fetch.GotrueFetch.__proto__),
    isSuccessStatusCode: dart.fnType(core.bool, [core.int]),
    [S$0._handleError]: dart.fnType(auth_exception.AuthException, [response$.Response]),
    request: dart.fnType(async.Future, [core.String, fetch.RequestMethodType], {options: dart.nullable(fetch_options.GotrueRequestOptions)}, {})
  }));
  dart.setLibraryUri(fetch.GotrueFetch, I[118]);
  dart.setFieldSignature(fetch.GotrueFetch, () => ({
    __proto__: dart.getFields(fetch.GotrueFetch.__proto__),
    httpClient: dart.finalFieldType(dart.nullable(client$.Client))
  }));
  fetch_options.FetchOptions = class FetchOptions extends core.Object {
    get headers() {
      return this[S$0.headers$10];
    }
    set headers(value) {
      super.headers = value;
    }
    get noResolveJson() {
      return this[S$0.noResolveJson$1];
    }
    set noResolveJson(value) {
      super.noResolveJson = value;
    }
    static ['_#new#tearOff'](headers, opts$) {
      let noResolveJson = opts$ && 'noResolveJson' in opts$ ? opts$.noResolveJson : null;
      return new fetch_options.FetchOptions.new(headers, {noResolveJson: noResolveJson});
    }
  };
  (fetch_options.FetchOptions.new = function(headers, opts$) {
    let t217, t217$;
    let noResolveJson = opts$ && 'noResolveJson' in opts$ ? opts$.noResolveJson : null;
    this[S$0.headers$10] = (t217 = headers, t217 == null ? C[16] || CT.C16 : t217);
    this[S$0.noResolveJson$1] = (t217$ = noResolveJson, t217$ == null ? false : t217$);
    ;
  }).prototype = fetch_options.FetchOptions.prototype;
  dart.addTypeTests(fetch_options.FetchOptions);
  dart.addTypeCaches(fetch_options.FetchOptions);
  dart.setLibraryUri(fetch_options.FetchOptions, I[119]);
  dart.setFieldSignature(fetch_options.FetchOptions, () => ({
    __proto__: dart.getFields(fetch_options.FetchOptions.__proto__),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    noResolveJson: dart.finalFieldType(core.bool)
  }));
  fetch_options.GotrueRequestOptions = class GotrueRequestOptions extends fetch_options.FetchOptions {
    get jwt() {
      return this[S$0.jwt];
    }
    set jwt(value) {
      super.jwt = value;
    }
    get redirectTo() {
      return this[S$0.redirectTo$2];
    }
    set redirectTo(value) {
      super.redirectTo = value;
    }
    get body() {
      return this[S$0.body$1];
    }
    set body(value) {
      super.body = value;
    }
    get query() {
      return this[S$0.query];
    }
    set query(value) {
      super.query = value;
    }
    static ['_#new#tearOff'](opts$) {
      let jwt = opts$ && 'jwt' in opts$ ? opts$.jwt : null;
      let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      let query = opts$ && 'query' in opts$ ? opts$.query : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let noResolveJson = opts$ && 'noResolveJson' in opts$ ? opts$.noResolveJson : null;
      return new fetch_options.GotrueRequestOptions.new({jwt: jwt, redirectTo: redirectTo, body: body, query: query, headers: headers, noResolveJson: noResolveJson});
    }
  };
  (fetch_options.GotrueRequestOptions.new = function(opts$) {
    let jwt = opts$ && 'jwt' in opts$ ? opts$.jwt : null;
    let redirectTo = opts$ && 'redirectTo' in opts$ ? opts$.redirectTo : null;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    let query = opts$ && 'query' in opts$ ? opts$.query : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let noResolveJson = opts$ && 'noResolveJson' in opts$ ? opts$.noResolveJson : null;
    this[S$0.jwt] = jwt;
    this[S$0.redirectTo$2] = redirectTo;
    this[S$0.body$1] = body;
    this[S$0.query] = query;
    fetch_options.GotrueRequestOptions.__proto__.new.call(this, headers, {noResolveJson: noResolveJson});
    ;
  }).prototype = fetch_options.GotrueRequestOptions.prototype;
  dart.addTypeTests(fetch_options.GotrueRequestOptions);
  dart.addTypeCaches(fetch_options.GotrueRequestOptions);
  dart.setLibraryUri(fetch_options.GotrueRequestOptions, I[119]);
  dart.setFieldSignature(fetch_options.GotrueRequestOptions, () => ({
    __proto__: dart.getFields(fetch_options.GotrueRequestOptions.__proto__),
    jwt: dart.finalFieldType(dart.nullable(core.String)),
    redirectTo: dart.finalFieldType(dart.nullable(core.String)),
    body: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    query: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  gotrue_admin_mfa_api.GoTrueAdminMFAApi = class GoTrueAdminMFAApi extends core.Object {
    static ['_#new#tearOff'](opts$) {
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
      let fetch = opts$ && 'fetch' in opts$ ? opts$.fetch : null;
      return new gotrue_admin_mfa_api.GoTrueAdminMFAApi.new({url: url, headers: headers, fetch: fetch});
    }
    listFactors(opts$) {
      let userId = opts$ && 'userId' in opts$ ? opts$.userId : null;
      return async.async(mfa.AuthMFAAdminListFactorsResponse, (function* listFactors() {
        let data = (yield this[S$0._fetch$2].request(this[S$0._url$4] + "/admin/users/" + userId + "/factors", fetch.RequestMethodType.get, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$0._headers$5]})}));
        return new mfa.AuthMFAAdminListFactorsResponse.new({factors: core.List.as(data)[S$.$map](mfa.Factor, dart.fn(e => mfa.Factor.fromJson(T$.MapOfString$dynamic().as(e)), T$.dynamicToFactor()))[S$.$toList]()});
      }).bind(this));
    }
    deleteFactor(opts$) {
      let userId = opts$ && 'userId' in opts$ ? opts$.userId : null;
      let factorId = opts$ && 'factorId' in opts$ ? opts$.factorId : null;
      return async.async(mfa.AuthMFAAdminDeleteFactorResponse, (function* deleteFactor() {
        let data = (yield this[S$0._fetch$2].request(this[S$0._url$4] + "/admin/users/" + userId + "/factors/" + factorId, fetch.RequestMethodType.delete, {options: new fetch_options.GotrueRequestOptions.new({headers: this[S$0._headers$5]})}));
        return mfa.AuthMFAAdminDeleteFactorResponse.fromJson(T$.MapOfString$dynamic().as(data));
      }).bind(this));
    }
  };
  (gotrue_admin_mfa_api.GoTrueAdminMFAApi.new = function(opts$) {
    let url = opts$ && 'url' in opts$ ? opts$.url : null;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : null;
    let fetch = opts$ && 'fetch' in opts$ ? opts$.fetch : null;
    this[S$0._url$4] = url;
    this[S$0._headers$5] = headers;
    this[S$0._fetch$2] = fetch;
    ;
  }).prototype = gotrue_admin_mfa_api.GoTrueAdminMFAApi.prototype;
  dart.addTypeTests(gotrue_admin_mfa_api.GoTrueAdminMFAApi);
  dart.addTypeCaches(gotrue_admin_mfa_api.GoTrueAdminMFAApi);
  dart.setMethodSignature(gotrue_admin_mfa_api.GoTrueAdminMFAApi, () => ({
    __proto__: dart.getMethods(gotrue_admin_mfa_api.GoTrueAdminMFAApi.__proto__),
    listFactors: dart.fnType(async.Future$(mfa.AuthMFAAdminListFactorsResponse), [], {}, {userId: core.String}),
    deleteFactor: dart.fnType(async.Future$(mfa.AuthMFAAdminDeleteFactorResponse), [], {}, {factorId: core.String, userId: core.String})
  }));
  dart.setLibraryUri(gotrue_admin_mfa_api.GoTrueAdminMFAApi, I[120]);
  dart.setFieldSignature(gotrue_admin_mfa_api.GoTrueAdminMFAApi, () => ({
    __proto__: dart.getFields(gotrue_admin_mfa_api.GoTrueAdminMFAApi.__proto__),
    [S$0._url$4]: dart.finalFieldType(core.String),
    [S$0._headers$5]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$0._fetch$2]: dart.finalFieldType(fetch.GotrueFetch)
  }));
  helper.dec2hex = function dec2hex(dec) {
    let radixString = "0" + dec[S$0.$toRadixString](16);
    return radixString[S$.$substring](radixString.length - 2);
  };
  helper.generatePKCEVerifier = function generatePKCEVerifier() {
    let random = math.Random.secure();
    return convert.base64UrlEncode(T$.ListOfint().generate(56, dart.fn(_ => random.nextInt(256), T$.intToint())))[S$.$split]("=")[S$.$_get](0);
  };
  helper.generatePKCEChallenge = function generatePKCEChallenge(verifier) {
    return convert.base64UrlEncode(sha256.sha256.convert(convert.ascii.encode(verifier)).bytes)[S$.$split]("=")[S$.$_get](0);
  };
  jwt_decode.Jwt = class Jwt extends core.Object {
    static parseJwt(token) {
      let parts = token[S$.$split](".");
      if (parts[S$.$length] !== 3) {
        dart.throw(new core.FormatException.new("Invalid token."));
      }
      let payload = jwt_decode.Jwt._decodeBase64(parts[S$.$_get](1));
      let payloadMap = convert.json.decode(payload);
      if (!T$.MapOfString$dynamic().is(payloadMap)) {
        dart.throw(new core.FormatException.new("Invalid payload."));
      }
      return payloadMap;
    }
    static _decodeBase64(str) {
      let output = str[S$.$replaceAll]("-", "+")[S$.$replaceAll]("_", "/");
      switch (output.length[S$0.$modulo](4)) {
        case 0:
          {
            break;
          }
        case 2:
          {
            output = output + "==";
            break;
          }
        case 3:
          {
            output = output + "=";
            break;
          }
        default:
          {
            dart.throw(core.Exception.new("Illegal base64 string."));
          }
      }
      return convert.utf8.decode(convert.base64Url.decode(output));
    }
    static isExpired(token) {
      let expirationDate = jwt_decode.Jwt.getExpiryDate(token);
      if (expirationDate != null) {
        return new core.DateTime.now().isAfter(expirationDate);
      } else {
        return false;
      }
    }
    static getExpiryDate(token) {
      let payload = jwt_decode.Jwt.parseJwt(token);
      if (payload[S$.$_get]("exp") != null) {
        return new core.DateTime.fromMillisecondsSinceEpoch(0, {isUtc: true}).add(new core.Duration.new({seconds: core.int.as(payload[S$.$_get]("exp"))}));
      }
      return null;
    }
    static ['_#new#tearOff']() {
      return new jwt_decode.Jwt.new();
    }
  };
  (jwt_decode.Jwt.new = function() {
    ;
  }).prototype = jwt_decode.Jwt.prototype;
  dart.addTypeTests(jwt_decode.Jwt);
  dart.addTypeCaches(jwt_decode.Jwt);
  dart.setStaticMethodSignature(jwt_decode.Jwt, () => ['parseJwt', '_decodeBase64', 'isExpired', 'getExpiryDate']);
  dart.setLibraryUri(jwt_decode.Jwt, I[121]);
  dart.defineLazy(constants$3, {
    /*constants$3.defaultHeaders*/get defaultHeaders() {
      return C[324] || CT.C324;
    }
  }, false);
  push.Push = class Push extends core.Object {
    get sent() {
      return this[S$0.sent];
    }
    set sent(value) {
      this[S$0.sent] = value;
    }
    get rateLimited() {
      return this[S$0.rateLimited];
    }
    set rateLimited(value) {
      this[S$0.rateLimited] = value;
    }
    get payload() {
      let t217;
      t217 = this[S$0.__Push_payload];
      return t217 == null ? dart.throw(new _internal.LateError.fieldNI("payload")) : t217;
    }
    set payload(payload$35param) {
      this[S$0.__Push_payload] = payload$35param;
    }
    static ['_#new#tearOff'](_channel, _event, payload = C[203] || CT.C203, _timeout = C[117] || CT.C117) {
      return new push.Push.new(_channel, _event, payload, _timeout);
    }
    get ref() {
      return this[S$0._ref];
    }
    get timeout() {
      return this[S$0._timeout$1];
    }
    resend(timeout) {
      this[S$0._timeout$1] = timeout;
      this[S$0._cancelRefEvent]();
      this[S$0._ref] = "";
      this[S$0._refEvent] = null;
      this[S$0._receivedResp] = null;
      this.sent = false;
      this.send();
    }
    send() {
      if (this[S$0._hasReceived]("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      let status = this[S$0._channel$1].socket.push(new message.Message.new({topic: this[S$0._channel$1].topic, event: this[S$0._event], payload: this.payload, ref: this.ref, joinRef: this[S$0._channel$1].joinRef}));
      if (status === "rate limited") {
        this.rateLimited = true;
      }
    }
    updatePayload(payload) {
      this.payload = (() => {
        let t217 = T$.LinkedHashMapOfString$dynamic().of(this.payload);
        t217[S$.$addAll](payload);
        return t217;
      })();
    }
    receive(status, callback) {
      let t218;
      if (this[S$0._hasReceived](status)) {
        callback((t218 = this[S$0._receivedResp], t218 == null ? null : t218[S$.$_get]("response")));
      }
      this[S$0._recHooks][S$.$add](new push.Hook.new(status, callback));
      return this;
    }
    startTimeout() {
      if (this[S$0._timeoutTimer] != null) {
        return;
      }
      this[S$0._ref] = this[S$0._channel$1].socket.makeRef();
      this[S$0._refEvent] = this[S$0._channel$1].replyEventName(this.ref);
      this[S$0._channel$1].onEvents(dart.nullCheck(this[S$0._refEvent]), new realtime_channel.ChannelFilter.new(), dart.fn((payload, ref = null) => {
        this[S$0._cancelRefEvent]();
        this[S$0._cancelTimeout]();
        this[S$0._receivedResp] = T$.MapNOfString$dynamic().as(payload);
        this[S$0._matchReceive](core.String.as(dart.dsend(payload, '_get', ["status"])), dart.dsend(payload, '_get', ["response"]));
      }, T$.dynamicAnddynamicTovoid$1()));
      this[S$0._timeoutTimer] = async.Timer.new(this.timeout, dart.fn(() => {
        this.trigger("timeout", new _js_helper.LinkedMap.new());
      }, T$.VoidTovoid()));
    }
    trigger(status, response) {
      if (this[S$0._refEvent] != null) {
        this[S$0._channel$1].trigger(dart.nullCheck(this[S$0._refEvent]), new (T$.IdentityMapOfString$dynamic()).from(["status", status, "response", response]));
      }
    }
    destroy() {
      this[S$0._cancelRefEvent]();
      this[S$0._cancelTimeout]();
    }
    [S$0._cancelRefEvent]() {
      if (this[S$0._refEvent] == null) {
        return;
      }
      this[S$0._channel$1].off(dart.nullCheck(this[S$0._refEvent]), new (T$.IdentityMapOfString$String()).new());
    }
    [S$0._cancelTimeout]() {
      let t218;
      t218 = this[S$0._timeoutTimer];
      t218 == null ? null : t218.cancel();
      this[S$0._timeoutTimer] = null;
    }
    [S$0._matchReceive](status, response) {
      this[S$0._recHooks][S$.$where](dart.fn(h => h.status === status, T$.HookTobool()))[S$.$forEach](dart.fn(h => {
        let t219, t218;
        t218 = h;
        t219 = response;
        t218.callback(t219);
      }, T$.HookTovoid()));
    }
    [S$0._hasReceived](status) {
      let t218;
      return this[S$0._receivedResp] != null && core.Map.is(this[S$0._receivedResp]) && dart.equals((t218 = this[S$0._receivedResp], t218 == null ? null : t218[S$.$_get]("status")), status);
    }
  };
  (push.Push.new = function(_channel, _event, payload = C[203] || CT.C203, _timeout = C[117] || CT.C117) {
    this[S$0.sent] = false;
    this[S$0._timeoutTimer] = null;
    this[S$0._ref] = "";
    this[S$0._receivedResp] = null;
    this[S$0._recHooks] = T$.JSArrayOfHook().of([]);
    this[S$0._refEvent] = null;
    this[S$0.rateLimited] = false;
    this[S$0.__Push_payload] = null;
    this[S$0._channel$1] = _channel;
    this[S$0._event] = _event;
    this[S$0.__Push_payload] = payload;
    this[S$0._timeout$1] = _timeout;
    ;
  }).prototype = push.Push.prototype;
  dart.addTypeTests(push.Push);
  dart.addTypeCaches(push.Push);
  dart.setMethodSignature(push.Push, () => ({
    __proto__: dart.getMethods(push.Push.__proto__),
    resend: dart.fnType(dart.void, [core.Duration]),
    send: dart.fnType(dart.void, []),
    updatePayload: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    receive: dart.fnType(push.Push, [core.String, dart.fnType(dart.void, [dart.dynamic])]),
    startTimeout: dart.fnType(dart.void, []),
    trigger: dart.fnType(dart.void, [core.String, dart.dynamic]),
    destroy: dart.fnType(dart.void, []),
    [S$0._cancelRefEvent]: dart.fnType(dart.void, []),
    [S$0._cancelTimeout]: dart.fnType(dart.void, []),
    [S$0._matchReceive]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [S$0._hasReceived]: dart.fnType(core.bool, [core.String])
  }));
  dart.setGetterSignature(push.Push, () => ({
    __proto__: dart.getGetters(push.Push.__proto__),
    payload: core.Map$(core.String, dart.dynamic),
    ref: core.String,
    timeout: core.Duration
  }));
  dart.setSetterSignature(push.Push, () => ({
    __proto__: dart.getSetters(push.Push.__proto__),
    payload: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(push.Push, I[122]);
  dart.setFieldSignature(push.Push, () => ({
    __proto__: dart.getFields(push.Push.__proto__),
    sent: dart.fieldType(core.bool),
    [S$0._timeoutTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [S$0._ref]: dart.fieldType(core.String),
    [S$0._receivedResp]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [S$0._recHooks]: dart.finalFieldType(core.List$(push.Hook)),
    [S$0._refEvent]: dart.fieldType(dart.nullable(core.String)),
    rateLimited: dart.fieldType(core.bool),
    [S$0._channel$1]: dart.finalFieldType(realtime_channel.RealtimeChannel),
    [S$0._event]: dart.finalFieldType(constants$0.ChannelEvents),
    [S$0.__Push_payload]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [S$0._timeout$1]: dart.fieldType(core.Duration)
  }));
  push.Hook = class Hook extends core.Object {
    get status() {
      return this[S$0.status$3];
    }
    set status(value) {
      super.status = value;
    }
    get callback() {
      return this[S$0.callback$1];
    }
    set callback(value) {
      super.callback = value;
    }
    static ['_#new#tearOff'](status, callback) {
      return new push.Hook.new(status, callback);
    }
  };
  (push.Hook.new = function(status, callback) {
    this[S$0.status$3] = status;
    this[S$0.callback$1] = callback;
    ;
  }).prototype = push.Hook.prototype;
  dart.addTypeTests(push.Hook);
  dart.addTypeCaches(push.Hook);
  dart.setLibraryUri(push.Hook, I[122]);
  dart.setFieldSignature(push.Hook, () => ({
    __proto__: dart.getFields(push.Hook.__proto__),
    status: dart.finalFieldType(core.String),
    callback: dart.finalFieldType(dart.fnType(dart.void, [dart.dynamic]))
  }));
  retry_timer.RetryTimer = class RetryTimer extends core.Object {
    get callback() {
      return this[S$0.callback$2];
    }
    set callback(value) {
      super.callback = value;
    }
    get timerCalc() {
      return this[S$0.timerCalc];
    }
    set timerCalc(value) {
      super.timerCalc = value;
    }
    static ['_#new#tearOff'](callback, timerCalc) {
      return new retry_timer.RetryTimer.new(callback, timerCalc);
    }
    reset() {
      this[S$0._tries] = 0;
      if (this[S$0._timer] != null) dart.nullCheck(this[S$0._timer]).cancel();
    }
    scheduleTimeout() {
      let t218;
      if (this[S$0._timer] != null) dart.nullCheck(this[S$0._timer]).cancel();
      this[S$0._timer] = async.Timer.new(new core.Duration.new({milliseconds: (t218 = this[S$0._tries] + 1, this.timerCalc(t218))}), dart.fn(() => {
        this[S$0._tries] = this[S$0._tries] + 1;
        this.callback();
      }, T$.VoidTovoid()));
    }
    static createRetryFunction(opts$) {
      let firstDelay = opts$ && 'firstDelay' in opts$ ? opts$.firstDelay : 1000;
      let maxDelay = opts$ && 'maxDelay' in opts$ ? opts$.maxDelay : 10000;
      return dart.fn(tries => {
        let shiftAmount = tries - 1 > 20 ? 20 : tries - 1;
        let delay = firstDelay[S$0.$leftShift](shiftAmount);
        return delay > maxDelay ? maxDelay : delay;
      }, T$.intToint());
    }
  };
  (retry_timer.RetryTimer.new = function(callback, timerCalc) {
    this[S$0._timer] = null;
    this[S$0._tries] = 0;
    this[S$0.callback$2] = callback;
    this[S$0.timerCalc] = timerCalc;
    ;
  }).prototype = retry_timer.RetryTimer.prototype;
  dart.addTypeTests(retry_timer.RetryTimer);
  dart.addTypeCaches(retry_timer.RetryTimer);
  dart.setMethodSignature(retry_timer.RetryTimer, () => ({
    __proto__: dart.getMethods(retry_timer.RetryTimer.__proto__),
    reset: dart.fnType(dart.void, []),
    scheduleTimeout: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(retry_timer.RetryTimer, () => ['createRetryFunction']);
  dart.setLibraryUri(retry_timer.RetryTimer, I[123]);
  dart.setFieldSignature(retry_timer.RetryTimer, () => ({
    __proto__: dart.getFields(retry_timer.RetryTimer.__proto__),
    callback: dart.finalFieldType(dart.fnType(dart.void, [])),
    timerCalc: dart.finalFieldType(dart.fnType(core.int, [core.int])),
    [S$0._timer]: dart.fieldType(dart.nullable(async.Timer)),
    [S$0._tries]: dart.fieldType(core.int)
  }));
  dart.defineLazy(retry_timer, {
    /*retry_timer.maxShift*/get maxShift() {
      return 20;
    }
  }, false);
  message.Message = class Message extends core.Object {
    get topic() {
      return this[S$0.topic$1];
    }
    set topic(value) {
      super.topic = value;
    }
    get event() {
      return this[S$0.event$2];
    }
    set event(value) {
      super.event = value;
    }
    get payload() {
      return this[S$0.payload$1];
    }
    set payload(value) {
      super.payload = value;
    }
    get ref() {
      return this[S$0.ref$1];
    }
    set ref(value) {
      super.ref = value;
    }
    get joinRef() {
      return this[S$0.joinRef$1];
    }
    set joinRef(value) {
      super.joinRef = value;
    }
    static ['_#new#tearOff'](opts$) {
      let topic = opts$ && 'topic' in opts$ ? opts$.topic : null;
      let event = opts$ && 'event' in opts$ ? opts$.event : null;
      let payload = opts$ && 'payload' in opts$ ? opts$.payload : null;
      let ref = opts$ && 'ref' in opts$ ? opts$.ref : null;
      let joinRef = opts$ && 'joinRef' in opts$ ? opts$.joinRef : null;
      return new message.Message.new({topic: topic, event: event, payload: payload, ref: ref, joinRef: joinRef});
    }
    toJson() {
      let t222;
      let processedPayload = null;
      let processedPayload$35isSet = false;
      function processedPayload$35get() {
        return processedPayload$35isSet ? processedPayload : dart.throw(new _internal.LateError.localNI("processedPayload"));
      }
      function processedPayload$35set(processedPayload$35param) {
        if (processedPayload$35isSet)
          dart.throw(new _internal.LateError.localAI("processedPayload"));
        else {
          processedPayload$35isSet = true;
          return processedPayload = processedPayload$35param;
        }
      }
      if (core.Map.is(this.payload)) {
        processedPayload$35set(new (T$.IdentityMapOfString$dynamic()).new());
        for (let outerKey of core.Iterable.as(dart.dload(this.payload, 'keys'))) {
          let outerValue = dart.dsend(this.payload, '_get', [outerKey]);
          if (core.Map.is(outerValue)) {
            for (let innerKey of outerValue[S$.$keys]) {
              let innerValue = outerValue[S$.$_get](innerKey);
              t222 = processedPayload$35get();
              dart.dsend(t222, '_get', [outerKey]) == null ? dart.dsend(t222, '_set', [outerKey, new _js_helper.LinkedMap.new()]) : null;
              if (realtime_channel.Binding.is(innerValue)) {
                dart.dsend(dart.dsend(processedPayload$35get(), '_get', [outerKey]), '_set', [innerKey, new (T$.IdentityMapOfString$dynamic()).from(["type", innerValue.type, "filter", innerValue.filter])]);
              } else {
                dart.dsend(dart.dsend(processedPayload$35get(), '_get', [outerKey]), '_set', [innerKey, innerValue]);
              }
            }
          } else {
            dart.dsend(processedPayload$35get(), '_set', [outerKey, outerValue]);
          }
        }
      } else {
        processedPayload$35set(this.payload);
      }
      return (() => {
        let t222 = new (T$.IdentityMapOfString$dynamic()).new();
        t222[S$.$_set]("topic", this.topic);
        t222[S$.$_set]("event", this.event !== constants$0.ChannelEvents.heartbeat ? constants$0['ChannelEventsExtended|eventName'](this.event) : "heartbeat");
        t222[S$.$_set]("payload", processedPayload$35get());
        t222[S$.$_set]("ref", this.ref);
        if (this.joinRef != null) t222[S$.$_set]("join_ref", this.joinRef);
        return t222;
      })();
    }
  };
  (message.Message.new = function(opts$) {
    let topic = opts$ && 'topic' in opts$ ? opts$.topic : null;
    let event = opts$ && 'event' in opts$ ? opts$.event : null;
    let payload = opts$ && 'payload' in opts$ ? opts$.payload : null;
    let ref = opts$ && 'ref' in opts$ ? opts$.ref : null;
    let joinRef = opts$ && 'joinRef' in opts$ ? opts$.joinRef : null;
    this[S$0.topic$1] = topic;
    this[S$0.event$2] = event;
    this[S$0.payload$1] = payload;
    this[S$0.ref$1] = ref;
    this[S$0.joinRef$1] = joinRef;
    ;
  }).prototype = message.Message.prototype;
  dart.addTypeTests(message.Message);
  dart.addTypeCaches(message.Message);
  dart.setMethodSignature(message.Message, () => ({
    __proto__: dart.getMethods(message.Message.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(message.Message, I[124]);
  dart.setFieldSignature(message.Message, () => ({
    __proto__: dart.getFields(message.Message.__proto__),
    topic: dart.finalFieldType(core.String),
    event: dart.finalFieldType(constants$0.ChannelEvents),
    payload: dart.finalFieldType(dart.dynamic),
    ref: dart.finalFieldType(core.String),
    joinRef: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(version$0, {
    /*version$0.version*/get version() {
      return "1.4.0";
    }
  }, false);
  constants$4.Constants = class Constants extends core.Object {
    static ['_#new#tearOff']() {
      return new constants$4.Constants.new();
    }
  };
  (constants$4.Constants.new = function() {
    ;
  }).prototype = constants$4.Constants.prototype;
  dart.addTypeTests(constants$4.Constants);
  dart.addTypeCaches(constants$4.Constants);
  dart.setLibraryUri(constants$4.Constants, I[125]);
  dart.setStaticFieldSignature(constants$4.Constants, () => ['defaultHeaders']);
  dart.defineLazy(constants$4.Constants, {
    /*constants$4.Constants.defaultHeaders*/get defaultHeaders() {
      return C[325] || CT.C325;
    }
  }, false);
  fetch$.Fetch = class Fetch extends core.Object {
    get httpClient() {
      return this[S$0.httpClient$3];
    }
    set httpClient(value) {
      super.httpClient = value;
    }
    static ['_#new#tearOff'](httpClient = null) {
      return new fetch$.Fetch.new(httpClient);
    }
    [S$0._isSuccessStatusCode](code) {
      return code >= 200 && code <= 299;
    }
    [S$0._parseMediaType](path) {
      let t223;
      let mime = mime_type.lookupMimeType(path);
      return media_type.MediaType.parse((t223 = mime, t223 == null ? "application/octet-stream" : t223));
    }
    [S$0._handleError$1](error, stack) {
      if (response$.Response.is(error)) {
        try {
          let data = T$.MapOfString$dynamic().as(convert.json.decode(error.body));
          return types$3.StorageException.fromJson(data, dart.str(error.statusCode));
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.FormatException.is(_)) {
            return new types$3.StorageException.new(error.body, {statusCode: dart.str(error.statusCode)});
          } else
            throw e;
        }
      } else {
        return new types$3.StorageException.new(dart.toString(error), {statusCode: dart.runtimeType(error).toString()});
      }
    }
    [S$0._handleRequest](method, url, body, options) {
      return async.async(dart.dynamic, (function* _handleRequest() {
        let t224, t224$, t224$0;
        let headers = (t224$ = (t224 = options, t224 == null ? null : t224.headers), t224$ == null ? new (T$.IdentityMapOfString$String()).new() : t224$);
        if (method !== "GET") {
          headers[S$.$_set]("Content-Type", "application/json");
        }
        let request = (t224$0 = new request$.Request.new(method, core.Uri.parse(url)), (() => {
          t224$0.headers[S$.$addAll](headers);
          return t224$0;
        })());
        if (body != null) {
          request.body = convert.json.encode(body);
        }
        let streamedResponse = null;
        if (this.httpClient != null) {
          streamedResponse = (yield dart.nullCheck(this.httpClient).send(request));
        } else {
          streamedResponse = (yield request.send());
        }
        return this[S$0._handleResponse](streamedResponse, options);
      }).bind(this));
    }
    [S$0._handleMultipartRequest](method, url, file, fileOptions, options, retryAttempts, retryController) {
      return async.async(dart.dynamic, (function* _handleMultipartRequest() {
        let t224, t224$, t224$0;
        let headers = (t224$ = (t224 = options, t224 == null ? null : t224.headers), t224$ == null ? new (T$.IdentityMapOfString$String()).new() : t224$);
        let contentType = fileOptions.contentType != null ? media_type.MediaType.parse(dart.nullCheck(fileOptions.contentType)) : this[S$0._parseMediaType](file.path);
        let multipartFile = multipart_file.MultipartFile.fromBytes("", file.readAsBytesSync(), {filename: file.path, contentType: contentType});
        let request = (t224$0 = new multipart_request.MultipartRequest.new(method, core.Uri.parse(url)), (() => {
          t224$0.headers[S$.$addAll](headers);
          t224$0.files[S$.$add](multipartFile);
          t224$0.fields[S$.$_set]("cacheControl", fileOptions.cacheControl);
          t224$0.headers[S$.$_set]("x-upsert", fileOptions.upsert[S$.$toString]());
          return t224$0;
        })());
        let streamedResponse = null;
        let r = new retry.RetryOptions.new({maxAttempts: retryAttempts + 1});
        streamedResponse = (yield r.retry(streamed_response.StreamedResponse, dart.fn(() => async.async(streamed_response.StreamedResponse, (function*() {
          if (this.httpClient != null) {
            return dart.nullCheck(this.httpClient).send(request);
          } else {
            return request.send();
          }
        }).bind(this)), T$.VoidToFutureOfStreamedResponse()), {retryIf: dart.fn(error => {
            let t224;
            return (t224 = retryController, t224 == null ? null : t224.cancelled) !== true && (exception.ClientException.is(error) || async.TimeoutException.is(error));
          }, T$.ExceptionTobool())}));
        return this[S$0._handleResponse](streamedResponse, options);
      }).bind(this));
    }
    [S$0._handleBinaryFileRequest](method, url, data, fileOptions, options, retryAttempts, retryController) {
      return async.async(dart.dynamic, (function* _handleBinaryFileRequest() {
        let t224, t224$, t224$0;
        let headers = (t224$ = (t224 = options, t224 == null ? null : t224.headers), t224$ == null ? new (T$.IdentityMapOfString$String()).new() : t224$);
        let contentType = fileOptions.contentType != null ? media_type.MediaType.parse(dart.nullCheck(fileOptions.contentType)) : this[S$0._parseMediaType](url);
        let multipartFile = multipart_file.MultipartFile.fromBytes("", data, {filename: "", contentType: contentType});
        let request = (t224$0 = new multipart_request.MultipartRequest.new(method, core.Uri.parse(url)), (() => {
          t224$0.headers[S$.$addAll](headers);
          t224$0.files[S$.$add](multipartFile);
          t224$0.fields[S$.$_set]("cacheControl", fileOptions.cacheControl);
          t224$0.headers[S$.$_set]("x-upsert", fileOptions.upsert[S$.$toString]());
          return t224$0;
        })());
        let streamedResponse = null;
        let r = new retry.RetryOptions.new({maxAttempts: retryAttempts + 1});
        streamedResponse = (yield r.retry(streamed_response.StreamedResponse, dart.fn(() => async.async(streamed_response.StreamedResponse, (function*() {
          if (this.httpClient != null) {
            return dart.nullCheck(this.httpClient).send(request);
          } else {
            return request.send();
          }
        }).bind(this)), T$.VoidToFutureOfStreamedResponse()), {retryIf: dart.fn(error => {
            let t224;
            return (t224 = retryController, t224 == null ? null : t224.cancelled) !== true && (exception.ClientException.is(error) || async.TimeoutException.is(error));
          }, T$.ExceptionTobool())}));
        return this[S$0._handleResponse](streamedResponse, options);
      }).bind(this));
    }
    [S$0._handleResponse](streamedResponse, options) {
      return async.async(dart.dynamic, (function* _handleResponse() {
        let t224;
        let response = (yield response$.Response.fromStream(streamedResponse));
        if (this[S$0._isSuccessStatusCode](response.statusCode)) {
          if ((t224 = options, t224 == null ? null : t224.noResolveJson) === true) {
            return response.bodyBytes;
          } else {
            let jsonBody = convert.json.decode(response.body);
            return jsonBody;
          }
        } else {
          dart.throw(this[S$0._handleError$1](response, core.StackTrace.current));
        }
      }).bind(this));
    }
    get(url, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      return async.async(dart.dynamic, (function* get() {
        return this[S$0._handleRequest]("GET", url, null, options);
      }).bind(this));
    }
    post(url, body, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      return async.async(dart.dynamic, (function* post() {
        return this[S$0._handleRequest]("POST", url, body, options);
      }).bind(this));
    }
    put(url, body, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      return async.async(dart.dynamic, (function* put() {
        return this[S$0._handleRequest]("PUT", url, body, options);
      }).bind(this));
    }
    delete(url, body, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      return async.async(dart.dynamic, (function* $delete() {
        return this[S$0._handleRequest]("DELETE", url, body, options);
      }).bind(this));
    }
    postFile(url, file, fileOptions, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(dart.dynamic, (function* postFile() {
        return this[S$0._handleMultipartRequest]("POST", url, file, fileOptions, options, retryAttempts, retryController);
      }).bind(this));
    }
    putFile(url, file, fileOptions, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(dart.dynamic, (function* putFile() {
        return this[S$0._handleMultipartRequest]("PUT", url, file, fileOptions, options, retryAttempts, retryController);
      }).bind(this));
    }
    postBinaryFile(url, data, fileOptions, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(dart.dynamic, (function* postBinaryFile() {
        return this[S$0._handleBinaryFileRequest]("POST", url, data, fileOptions, options, retryAttempts, retryController);
      }).bind(this));
    }
    putBinaryFile(url, data, fileOptions, opts$) {
      let options = opts$ && 'options' in opts$ ? opts$.options : null;
      let retryAttempts = opts$ && 'retryAttempts' in opts$ ? opts$.retryAttempts : null;
      let retryController = opts$ && 'retryController' in opts$ ? opts$.retryController : null;
      return async.async(dart.dynamic, (function* putBinaryFile() {
        return this[S$0._handleBinaryFileRequest]("PUT", url, data, fileOptions, options, retryAttempts, retryController);
      }).bind(this));
    }
  };
  (fetch$.Fetch.new = function(httpClient = null) {
    this[S$0.httpClient$3] = httpClient;
    ;
  }).prototype = fetch$.Fetch.prototype;
  dart.addTypeTests(fetch$.Fetch);
  dart.addTypeCaches(fetch$.Fetch);
  dart.setMethodSignature(fetch$.Fetch, () => ({
    __proto__: dart.getMethods(fetch$.Fetch.__proto__),
    [S$0._isSuccessStatusCode]: dart.fnType(core.bool, [core.int]),
    [S$0._parseMediaType]: dart.fnType(dart.nullable(media_type.MediaType), [core.String]),
    [S$0._handleError$1]: dart.fnType(types$3.StorageException, [dart.dynamic, core.StackTrace]),
    [S$0._handleRequest]: dart.fnType(async.Future, [core.String, core.String, dart.nullable(core.Map$(core.String, dart.dynamic)), dart.nullable(types$3.FetchOptions)]),
    [S$0._handleMultipartRequest]: dart.fnType(async.Future, [core.String, core.String, file_stub.File, types$3.FileOptions, dart.nullable(types$3.FetchOptions), core.int, dart.nullable(types$3.StorageRetryController)]),
    [S$0._handleBinaryFileRequest]: dart.fnType(async.Future, [core.String, core.String, typed_data.Uint8List, types$3.FileOptions, dart.nullable(types$3.FetchOptions), core.int, dart.nullable(types$3.StorageRetryController)]),
    [S$0._handleResponse]: dart.fnType(async.Future, [streamed_response.StreamedResponse, dart.nullable(types$3.FetchOptions)]),
    get: dart.fnType(async.Future, [core.String], {options: dart.nullable(types$3.FetchOptions)}, {}),
    post: dart.fnType(async.Future, [core.String, dart.nullable(core.Map$(core.String, dart.dynamic))], {options: dart.nullable(types$3.FetchOptions)}, {}),
    put: dart.fnType(async.Future, [core.String, dart.nullable(core.Map$(core.String, dart.dynamic))], {options: dart.nullable(types$3.FetchOptions)}, {}),
    delete: dart.fnType(async.Future, [core.String, dart.nullable(core.Map$(core.String, dart.dynamic))], {options: dart.nullable(types$3.FetchOptions)}, {}),
    postFile: dart.fnType(async.Future, [core.String, file_stub.File, types$3.FileOptions], {options: dart.nullable(types$3.FetchOptions)}, {retryAttempts: core.int, retryController: dart.nullable(types$3.StorageRetryController)}),
    putFile: dart.fnType(async.Future, [core.String, file_stub.File, types$3.FileOptions], {options: dart.nullable(types$3.FetchOptions)}, {retryAttempts: core.int, retryController: dart.nullable(types$3.StorageRetryController)}),
    postBinaryFile: dart.fnType(async.Future, [core.String, typed_data.Uint8List, types$3.FileOptions], {options: dart.nullable(types$3.FetchOptions)}, {retryAttempts: core.int, retryController: dart.nullable(types$3.StorageRetryController)}),
    putBinaryFile: dart.fnType(async.Future, [core.String, typed_data.Uint8List, types$3.FileOptions], {options: dart.nullable(types$3.FetchOptions)}, {retryAttempts: core.int, retryController: dart.nullable(types$3.StorageRetryController)})
  }));
  dart.setLibraryUri(fetch$.Fetch, I[126]);
  dart.setFieldSignature(fetch$.Fetch, () => ({
    __proto__: dart.getFields(fetch$.Fetch.__proto__),
    httpClient: dart.finalFieldType(dart.nullable(client$.Client))
  }));
  dart.defineLazy(fetch$, {
    /*fetch$.storageFetch*/get storageFetch() {
      return new fetch$.Fetch.new();
    },
    set storageFetch(value) {}
  }, false);
  file_stub.File = class File extends core.Object {
    get path() {
      return dart.throw(new core.UnimplementedError.new());
    }
    readAsBytesSync() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static ['_#new#tearOff']() {
      return new file_stub.File.new();
    }
  };
  (file_stub.File.new = function() {
    ;
  }).prototype = file_stub.File.prototype;
  dart.addTypeTests(file_stub.File);
  dart.addTypeCaches(file_stub.File);
  dart.setMethodSignature(file_stub.File, () => ({
    __proto__: dart.getMethods(file_stub.File.__proto__),
    readAsBytesSync: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setGetterSignature(file_stub.File, () => ({
    __proto__: dart.getGetters(file_stub.File.__proto__),
    path: core.String
  }));
  dart.setLibraryUri(file_stub.File, I[127]);
  dart.defineLazy(version$1, {
    /*version$1.version*/get version() {
      return "1.11.11";
    }
  }, false);
  _isolates_web.YAJsonIsolate = class YAJsonIsolate extends core.Object {
    initialize() {
      return async.async(dart.void, function* initialize() {
      });
    }
    dispose() {
      return async.async(dart.void, function* dispose() {
      });
    }
    decode(json) {
      return async.async(dart.dynamic, function* decode() {
        yield null;
        return convert.jsonDecode(json);
      });
    }
    encode(json) {
      return async.async(core.String, function* encode() {
        yield null;
        return convert.jsonEncode(json);
      });
    }
    static ['_#new#tearOff']() {
      return new _isolates_web.YAJsonIsolate.new();
    }
  };
  (_isolates_web.YAJsonIsolate.new = function() {
    ;
  }).prototype = _isolates_web.YAJsonIsolate.prototype;
  dart.addTypeTests(_isolates_web.YAJsonIsolate);
  dart.addTypeCaches(_isolates_web.YAJsonIsolate);
  dart.setMethodSignature(_isolates_web.YAJsonIsolate, () => ({
    __proto__: dart.getMethods(_isolates_web.YAJsonIsolate.__proto__),
    initialize: dart.fnType(async.Future$(dart.void), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    decode: dart.fnType(async.Future, [core.String]),
    encode: dart.fnType(async.Future$(core.String), [core.Map])
  }));
  dart.setLibraryUri(_isolates_web.YAJsonIsolate, I[128]);
  default_compaction_strategy.defaultCompactionStrategy = function defaultCompactionStrategy(entries, deletedEntries) {
    return deletedEntries > 60 && deletedEntries / entries > 0.15;
  };
  dart.defineLazy(default_compaction_strategy, {
    /*default_compaction_strategy._deletedRatio*/get _deletedRatio() {
      return 0.15;
    },
    /*default_compaction_strategy._deletedThreshold*/get _deletedThreshold() {
      return 60;
    }
  }, false);
  default_key_comparator.defaultKeyComparator = function defaultKeyComparator(k1, k2) {
    if (core.int.is(k1)) {
      if (core.int.is(k2)) {
        if (dart.notNull(k1) > dart.notNull(k2)) {
          return 1;
        } else if (dart.notNull(k1) < dart.notNull(k2)) {
          return -1;
        } else {
          return 0;
        }
      } else {
        return -1;
      }
    } else if (typeof k2 == 'string') {
      return core.String.as(k1)[S$0.$compareTo](k2);
    } else {
      return 1;
    }
  };
  aes_cbc_pkcs7.AesCbcPkcs7 = class AesCbcPkcs7 extends core.Object {
    get [S$0._encryptionKey]() {
      let t225, t224;
      t224 = this[S$0.__AesCbcPkcs7__encryptionKey];
      return t224 == null ? (t225 = aes_engine.AesEngine.generateWorkingKey(this[S$0._keyBytes], true), this[S$0.__AesCbcPkcs7__encryptionKey] == null ? this[S$0.__AesCbcPkcs7__encryptionKey] = t225 : dart.throw(new _internal.LateError.fieldADI("_encryptionKey"))) : t224;
    }
    get [S$0._decryptionKey]() {
      let t225, t224;
      t224 = this[S$0.__AesCbcPkcs7__decryptionKey];
      return t224 == null ? (t225 = aes_engine.AesEngine.generateWorkingKey(this[S$0._keyBytes], false), this[S$0.__AesCbcPkcs7__decryptionKey] == null ? this[S$0.__AesCbcPkcs7__decryptionKey] = t225 : dart.throw(new _internal.LateError.fieldADI("_decryptionKey"))) : t224;
    }
    static ['_#new#tearOff'](_keyBytes) {
      return new aes_cbc_pkcs7.AesCbcPkcs7.new(_keyBytes);
    }
    encrypt(iv, inp, inpOff, inpLength, out, outOff) {
      let t225, t224, t225$, t224$;
      let cbcV = _native_typed_data.NativeUint8List.fromList(iv);
      let inputBlocks = ((inpLength + 16) / 16)[S$0.$truncate]();
      let remaining = inpLength[S$0.$modulo](16);
      let offset = 0;
      for (let i = 0; i < inputBlocks - 1; i = i + 1) {
        for (let i = 0; i < 16; i = i + 1) {
          t224 = cbcV;
          t225 = i;
          t224[S$.$_set](t225, (t224[S$.$_get](t225) ^ inp[S$.$_get](inpOff + offset + i)) >>> 0);
        }
        aes_engine.AesEngine.encryptBlock(this[S$0._encryptionKey], cbcV, 0, out, outOff + offset);
        cbcV[S$0.$setRange](0, 16, out, outOff + offset);
        offset = offset + 16;
      }
      let lastInputBlock = aes_cbc_pkcs7.AesCbcPkcs7._lastInputBlockBuffer;
      lastInputBlock[S$0.$setRange](0, remaining, inp, inpOff + offset);
      lastInputBlock[S$0.$fillRange](remaining, 16, 16 - remaining);
      for (let i = 0; i < 16; i = i + 1) {
        t224$ = cbcV;
        t225$ = i;
        t224$[S$.$_set](t225$, (t224$[S$.$_get](t225$) ^ lastInputBlock[S$.$_get](i)) >>> 0);
      }
      aes_engine.AesEngine.encryptBlock(this[S$0._encryptionKey], cbcV, 0, out, outOff + offset);
      return offset + 16;
    }
    decrypt(iv, inp, inpOff, inpLength, out, outOff) {
      let t225, t224, t225$, t224$;
      let inputBlocks = ((inpLength + 16 - 1) / 16)[S$0.$truncate]();
      let offset = 0;
      aes_engine.AesEngine.decryptBlock(this[S$0._decryptionKey], inp, inpOff, out, outOff);
      for (let i = 0; i < 16; i = i + 1) {
        t224 = out;
        t225 = outOff + i;
        t224[S$.$_set](t225, (t224[S$.$_get](t225) ^ iv[S$.$_get](i)) >>> 0);
      }
      offset = offset + 16;
      for (let i = 0; i < inputBlocks - 1; i = i + 1) {
        aes_engine.AesEngine.decryptBlock(this[S$0._decryptionKey], inp, inpOff + offset, out, outOff + offset);
        for (let i = 0; i < 16; i = i + 1) {
          t224$ = out;
          t225$ = outOff + offset + i;
          t224$[S$.$_set](t225$, (t224$[S$.$_get](t225$) ^ inp[S$.$_get](inpOff - 16 + offset + i)) >>> 0);
        }
        offset = offset + 16;
      }
      let lastDecryptedByte = out[S$.$_get](outOff + offset - 1);
      if (lastDecryptedByte > 16) {
        dart.throw(new core.ArgumentError.new("Invalid or corrupted pad block"));
      }
      for (let i = 0; i < lastDecryptedByte; i = i + 1) {
        if (out[S$.$_get](outOff + offset - i - 1) !== lastDecryptedByte) {
          dart.throw(new core.ArgumentError.new("Invalid or corrupted pad block"));
        }
      }
      return offset - lastDecryptedByte;
    }
  };
  (aes_cbc_pkcs7.AesCbcPkcs7.new = function(_keyBytes) {
    this[S$0.__AesCbcPkcs7__encryptionKey] = null;
    this[S$0.__AesCbcPkcs7__decryptionKey] = null;
    this[S$0._keyBytes] = _keyBytes;
    ;
  }).prototype = aes_cbc_pkcs7.AesCbcPkcs7.prototype;
  dart.addTypeTests(aes_cbc_pkcs7.AesCbcPkcs7);
  dart.addTypeCaches(aes_cbc_pkcs7.AesCbcPkcs7);
  dart.setMethodSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ({
    __proto__: dart.getMethods(aes_cbc_pkcs7.AesCbcPkcs7.__proto__),
    encrypt: dart.fnType(core.int, [typed_data.Uint8List, typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    decrypt: dart.fnType(core.int, [typed_data.Uint8List, typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int])
  }));
  dart.setGetterSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ({
    __proto__: dart.getGetters(aes_cbc_pkcs7.AesCbcPkcs7.__proto__),
    [S$0._encryptionKey]: core.List$(typed_data.Uint32List),
    [S$0._decryptionKey]: core.List$(typed_data.Uint32List)
  }));
  dart.setLibraryUri(aes_cbc_pkcs7.AesCbcPkcs7, I[129]);
  dart.setFieldSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ({
    __proto__: dart.getFields(aes_cbc_pkcs7.AesCbcPkcs7.__proto__),
    [S$0._keyBytes]: dart.finalFieldType(typed_data.Uint8List),
    [S$0.__AesCbcPkcs7__encryptionKey]: dart.fieldType(dart.nullable(core.List$(typed_data.Uint32List))),
    [S$0.__AesCbcPkcs7__decryptionKey]: dart.fieldType(dart.nullable(core.List$(typed_data.Uint32List)))
  }));
  dart.setStaticFieldSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ['_lastInputBlockBuffer']);
  dart.defineLazy(aes_cbc_pkcs7.AesCbcPkcs7, {
    /*aes_cbc_pkcs7.AesCbcPkcs7._lastInputBlockBuffer*/get _lastInputBlockBuffer() {
      return _native_typed_data.NativeUint8List.new(16);
    }
  }, false);
  crc32.Crc32 = class Crc32 extends core.Object {
    static compute(bytes, opts$) {
      let crc = opts$ && 'crc' in opts$ ? opts$.crc : 0;
      let offset = opts$ && 'offset' in opts$ ? opts$.offset : 0;
      let length = opts$ && 'length' in opts$ ? opts$.length : null;
      crc = (crc ^ 4294967295) >>> 0;
      length == null ? length = bytes[S$.$length] : null;
      for (let i = offset; i < offset + dart.notNull(length); i = i + 1) {
        crc = (crc32.Crc32._table[S$.$_get]((crc ^ bytes[S$.$_get](i)) & 255) ^ crc[S$0.$rightShift](8)) >>> 0;
      }
      return (crc ^ 4294967295) >>> 0;
    }
    static ['_#new#tearOff']() {
      return new crc32.Crc32.new();
    }
  };
  (crc32.Crc32.new = function() {
    ;
  }).prototype = crc32.Crc32.prototype;
  dart.addTypeTests(crc32.Crc32);
  dart.addTypeCaches(crc32.Crc32);
  dart.setStaticMethodSignature(crc32.Crc32, () => ['compute']);
  dart.setLibraryUri(crc32.Crc32, I[130]);
  dart.setStaticFieldSignature(crc32.Crc32, () => ['_table']);
  dart.defineLazy(crc32.Crc32, {
    /*crc32.Crc32._table*/get _table() {
      return C[326] || CT.C326;
    }
  }, false);
  type_registry_impl.TypeRegistryImpl = class TypeRegistryImpl extends core.Object {
    findAdapterForValue(value) {
      let match = null;
      for (let adapter of this[S$0._typeAdapters][S$.$values]) {
        if (adapter.matchesRuntimeType(value)) {
          return adapter;
        }
        if (adapter.matchesType(value) && match == null) {
          match = adapter;
        }
      }
      return match;
    }
    findAdapterForTypeId(typeId) {
      return this[S$0._typeAdapters][S$.$_get](typeId);
    }
    registerAdapter(T, adapter, opts$) {
      let internal = opts$ && 'internal' in opts$ ? opts$.internal : false;
      let override = opts$ && 'override' in opts$ ? opts$.override : false;
      if (dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) || dart.wrapType(T)._equals(dart.wrapType(core.Object))) {
        core.print("Registering type adapters for dynamic type is must be avoided, " + "otherwise all the write requests to Hive will be handled by given " + "adapter. Please explicitly provide adapter type on registerAdapter " + "method to avoid this kind of issues. For example if you want to " + "register MyTypeAdapter for MyType class you can call like this: " + "registerAdapter<MyType>(MyTypeAdapter())");
      }
      let typeId = adapter.typeId;
      if (!internal) {
        if (typeId < 0 || typeId > 223) {
          dart.throw(new hive.HiveError.new("TypeId " + dart.str(typeId) + " not allowed."));
        }
        typeId = typeId + 32;
        let oldAdapter = this.findAdapterForTypeId(typeId);
        if (oldAdapter != null) {
          if (override) {
            core.print("You are trying to override " + dart.runtimeType(oldAdapter).toString() + "with " + adapter[S$0.$runtimeType].toString() + " for typeId: " + dart.str(adapter.typeId) + ". Please note that overriding adapters might " + "cause weird errors. Try to avoid overriding adapters unless not " + "required.");
          } else {
            dart.throw(new hive.HiveError.new("There is already a TypeAdapter for " + "typeId " + dart.str(typeId - 32) + "."));
          }
        }
      }
      let resolved = new (type_registry_impl.ResolvedAdapter$(T)).new(adapter, typeId);
      this[S$0._typeAdapters][S$.$_set](typeId, resolved);
    }
    isAdapterRegistered(typeId, opts$) {
      let internal = opts$ && 'internal' in opts$ ? opts$.internal : false;
      if (!internal) {
        if (typeId < 0 || typeId > 223) {
          dart.throw(new hive.HiveError.new("TypeId " + dart.str(typeId) + " not allowed."));
        }
        typeId = typeId + 32;
      }
      return this.findAdapterForTypeId(typeId) != null;
    }
    resetAdapters() {
      this[S$0._typeAdapters][S$.$clear]();
    }
    ignoreTypeId(T, typeId) {
      this.registerAdapter(dart.nullable(T), new (ignored_type_adapter.IgnoredTypeAdapter$(T)).new(typeId));
    }
    static ['_#new#tearOff']() {
      return new type_registry_impl.TypeRegistryImpl.new();
    }
  };
  (type_registry_impl.TypeRegistryImpl.new = function() {
    this[S$0._typeAdapters] = new (T$.IdentityMapOfint$ResolvedAdapter()).new();
    ;
  }).prototype = type_registry_impl.TypeRegistryImpl.prototype;
  dart.addTypeTests(type_registry_impl.TypeRegistryImpl);
  dart.addTypeCaches(type_registry_impl.TypeRegistryImpl);
  type_registry_impl.TypeRegistryImpl[dart.implements] = () => [hive.TypeRegistry];
  dart.setMethodSignature(type_registry_impl.TypeRegistryImpl, () => ({
    __proto__: dart.getMethods(type_registry_impl.TypeRegistryImpl.__proto__),
    findAdapterForValue: dart.fnType(dart.nullable(type_registry_impl.ResolvedAdapter), [dart.dynamic]),
    findAdapterForTypeId: dart.fnType(dart.nullable(type_registry_impl.ResolvedAdapter), [core.int]),
    registerAdapter: dart.gFnType(T => [dart.void, [hive.TypeAdapter$(T)], {internal: core.bool, override: core.bool}, {}], T => [dart.nullable(core.Object)]),
    isAdapterRegistered: dart.fnType(core.bool, [core.int], {internal: core.bool}, {}),
    resetAdapters: dart.fnType(dart.void, []),
    ignoreTypeId: dart.gFnType(T => [dart.void, [core.int]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(type_registry_impl.TypeRegistryImpl, I[132]);
  dart.setFieldSignature(type_registry_impl.TypeRegistryImpl, () => ({
    __proto__: dart.getFields(type_registry_impl.TypeRegistryImpl.__proto__),
    [S$0._typeAdapters]: dart.finalFieldType(core.Map$(core.int, type_registry_impl.ResolvedAdapter))
  }));
  dart.setStaticFieldSignature(type_registry_impl.TypeRegistryImpl, () => ['nullImpl', 'reservedTypeIds']);
  dart.defineLazy(type_registry_impl.TypeRegistryImpl, {
    /*type_registry_impl.TypeRegistryImpl.nullImpl*/get nullImpl() {
      return C[329] || CT.C329;
    },
    /*type_registry_impl.TypeRegistryImpl.reservedTypeIds*/get reservedTypeIds() {
      return 32;
    }
  }, false);
  hive_impl.HiveImpl = class HiveImpl extends type_registry_impl.TypeRegistryImpl {
    get homePath() {
      return this[S$0.homePath];
    }
    set homePath(value) {
      this[S$0.homePath] = value;
    }
    static ['_#new#tearOff']() {
      return new hive_impl.HiveImpl.new();
    }
    get [S$0._manager]() {
      let t224;
      t224 = this[S$0._managerOverride];
      return t224 == null ? hive_impl.HiveImpl._defaultBackendManager : t224;
    }
    [S$0._registerDefaultAdapters]() {
      this.registerAdapter(core.DateTime, new date_time_adapter.DateTimeWithTimezoneAdapter.new(), {internal: true});
      this.registerAdapter(date_time_adapter.DateTimeWithoutTZ, new (T$.DateTimeAdapterOfDateTimeWithoutTZ()).new(), {internal: true});
      this.registerAdapter(core.BigInt, new big_int_adapter.BigIntAdapter.new(), {internal: true});
    }
    init(path, opts$) {
      let backendPreference = opts$ && 'backendPreference' in opts$ ? opts$.backendPreference : C[282] || CT.C282;
      this.homePath = path;
      this[S$0._managerOverride] = backend_manager.BackendManager.select(backendPreference);
    }
    [S$0._openBox](E, name, lazy, cipher, comparator, compaction, recovery, path, bytes, collection) {
      return async.async(hive.BoxBase$(E), (function* _openBox() {
        let t224, t225;
        if (!(path == null || bytes == null)) dart.assertFailed(null, I[131], 72, 12, "path == null || bytes == null");
        if (!(name.length <= 255 && extensions['StringX|get#isAscii'](name))) dart.assertFailed("Box names need to be ASCII Strings with a max length of 255.", I[131], 73, 12, "name.length <= 255 && name.isAscii");
        name = name[S$.$toLowerCase]();
        if (this.isBoxOpen(name)) {
          if (lazy) {
            return this.lazyBox(E, name);
          } else {
            return this.box(E, name);
          }
        } else {
          if (this[S$0._openingBoxes][S$.$containsKey](name)) {
            yield this[S$0._openingBoxes][S$.$_get](name);
            if (lazy) {
              return this.lazyBox(E, name);
            } else {
              return this.box(E, name);
            }
          }
          let completer = async.Completer.new();
          this[S$0._openingBoxes][S$.$_set](name, completer.future);
          let newBox = null;
          try {
            let backend = null;
            if (bytes != null) {
              backend = new storage_backend_memory.StorageBackendMemory.new(bytes, cipher);
            } else {
              backend = (yield this[S$0._manager].open(name, (t224 = path, t224 == null ? this.homePath : t224), recovery, cipher, collection));
            }
            if (lazy) {
              newBox = new (lazy_box_impl.LazyBoxImpl$(E)).new(this, name, comparator, compaction, backend);
            } else {
              newBox = new (box_impl.BoxImpl$(E)).new(this, name, comparator, compaction, backend);
            }
            yield newBox.initialize();
            this[S$0._boxes][S$.$_set](name, newBox);
            completer.complete();
            return newBox;
          } catch (e) {
            let error = dart.getThrown(e);
            let stackTrace = dart.stackTrace(e);
            if (core.Object.is(error)) {
              t225 = newBox;
              t225 == null ? null : t225.close();
              completer.completeError(error, stackTrace);
              dart.rethrow(e);
            } else
              throw e;
          } finally {
            this[S$0._openingBoxes][S$.$remove](name);
          }
        }
      }).bind(this));
    }
    openBox(E, name, opts$) {
      let encryptionCipher = opts$ && 'encryptionCipher' in opts$ ? opts$.encryptionCipher : null;
      let keyComparator = opts$ && 'keyComparator' in opts$ ? opts$.keyComparator : C[327] || CT.C327;
      let compactionStrategy = opts$ && 'compactionStrategy' in opts$ ? opts$.compactionStrategy : C[328] || CT.C328;
      let crashRecovery = opts$ && 'crashRecovery' in opts$ ? opts$.crashRecovery : true;
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let bytes = opts$ && 'bytes' in opts$ ? opts$.bytes : null;
      let collection = opts$ && 'collection' in opts$ ? opts$.collection : null;
      let encryptionKey = opts$ && 'encryptionKey' in opts$ ? opts$.encryptionKey : null;
      return async.async(hive.Box$(E), (function* openBox() {
        if (encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(encryptionKey);
        }
        return hive.Box$(E).as(yield this[S$0._openBox](E, name, false, encryptionCipher, keyComparator, compactionStrategy, crashRecovery, path, bytes, collection));
      }).bind(this));
    }
    openLazyBox(E, name, opts$) {
      let encryptionCipher = opts$ && 'encryptionCipher' in opts$ ? opts$.encryptionCipher : null;
      let keyComparator = opts$ && 'keyComparator' in opts$ ? opts$.keyComparator : C[327] || CT.C327;
      let compactionStrategy = opts$ && 'compactionStrategy' in opts$ ? opts$.compactionStrategy : C[328] || CT.C328;
      let crashRecovery = opts$ && 'crashRecovery' in opts$ ? opts$.crashRecovery : true;
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let collection = opts$ && 'collection' in opts$ ? opts$.collection : null;
      let encryptionKey = opts$ && 'encryptionKey' in opts$ ? opts$.encryptionKey : null;
      return async.async(hive.LazyBox$(E), (function* openLazyBox() {
        if (encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(encryptionKey);
        }
        return hive.LazyBox$(E).as(yield this[S$0._openBox](E, name, true, encryptionCipher, keyComparator, compactionStrategy, crashRecovery, path, null, collection));
      }).bind(this));
    }
    [S$0._getBoxInternal](E, name, lazy = null) {
      let lowerCaseName = name[S$.$toLowerCase]();
      let box = this[S$0._boxes][S$.$_get](lowerCaseName);
      if (box != null) {
        if ((lazy == null || box.lazy === lazy) && box.valueType._equals(dart.wrapType(E))) {
          return hive.BoxBase$(E).as(box);
        } else {
          let typeName = hive.LazyBox.is(box) ? "LazyBox<" + dart.str(box.valueType) + ">" : "Box<" + dart.str(box.valueType) + ">";
          dart.throw(new hive.HiveError.new("The box \"" + lowerCaseName + "\" is already open " + "and of type " + typeName + "."));
        }
      } else {
        dart.throw(new hive.HiveError.new("Box not found. Did you forget to call Hive.openBox()?"));
      }
    }
    getBoxWithoutCheckInternal(name) {
      let lowerCaseName = name[S$.$toLowerCase]();
      return this[S$0._boxes][S$.$_get](lowerCaseName);
    }
    box(E, name) {
      return hive.Box$(E).as(this[S$0._getBoxInternal](E, name, false));
    }
    lazyBox(E, name) {
      return hive.LazyBox$(E).as(this[S$0._getBoxInternal](E, name, true));
    }
    isBoxOpen(name) {
      return this[S$0._boxes][S$.$containsKey](name[S$.$toLowerCase]());
    }
    close() {
      let closeFutures = this[S$0._boxes][S$.$values][S$.$map](T$.FutureOfvoid(), dart.fn(box => box.close(), T$.BoxBaseImplToFutureOfvoid()));
      return async.Future.wait(dart.void, closeFutures);
    }
    unregisterBox(name) {
      name = name[S$.$toLowerCase]();
      this[S$0._openingBoxes][S$.$remove](name);
      this[S$0._boxes][S$.$remove](name);
    }
    deleteBoxFromDisk(name, opts$) {
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let collection = opts$ && 'collection' in opts$ ? opts$.collection : null;
      return async.async(dart.void, (function* deleteBoxFromDisk() {
        let t225;
        let lowerCaseName = name[S$.$toLowerCase]();
        let box = this[S$0._boxes][S$.$_get](lowerCaseName);
        if (box != null) {
          yield box.deleteFromDisk();
        } else {
          yield this[S$0._manager].deleteBox(lowerCaseName, (t225 = path, t225 == null ? this.homePath : t225), collection);
        }
      }).bind(this));
    }
    deleteFromDisk() {
      let deleteFutures = this[S$0._boxes][S$.$values][S$.$toList]()[S$.$map](T$.FutureOfvoid(), dart.fn(box => box.deleteFromDisk(), T$.BoxBaseImplToFutureOfvoid()));
      return async.Future.wait(dart.void, deleteFutures);
    }
    generateSecureKey() {
      return extensions['RandomX|nextBytes'](this[S$0._secureRandom], 32);
    }
    boxExists(name, opts$) {
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let collection = opts$ && 'collection' in opts$ ? opts$.collection : null;
      return async.async(core.bool, (function* boxExists() {
        let t225;
        let lowerCaseName = name[S$.$toLowerCase]();
        return yield this[S$0._manager].boxExists(lowerCaseName, (t225 = path, t225 == null ? this.homePath : t225), collection);
      }).bind(this));
    }
  };
  (hive_impl.HiveImpl.new = function() {
    this[S$0._boxes] = new (T$.IdentityMapOfString$BoxBaseImpl()).new();
    this[S$0._openingBoxes] = new (T$.IdentityMapOfString$Future()).new();
    this[S$0._managerOverride] = null;
    this[S$0._secureRandom] = math.Random.secure();
    this[S$0.homePath] = null;
    hive_impl.HiveImpl.__proto__.new.call(this);
    this[S$0._registerDefaultAdapters]();
  }).prototype = hive_impl.HiveImpl.prototype;
  dart.addTypeTests(hive_impl.HiveImpl);
  dart.addTypeCaches(hive_impl.HiveImpl);
  hive_impl.HiveImpl[dart.implements] = () => [hive.HiveInterface];
  dart.setMethodSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getMethods(hive_impl.HiveImpl.__proto__),
    [S$0._registerDefaultAdapters]: dart.fnType(dart.void, []),
    init: dart.fnType(dart.void, [dart.nullable(core.String)], {backendPreference: hive.HiveStorageBackendPreference}, {}),
    [S$0._openBox]: dart.gFnType(E => [async.Future$(hive.BoxBase$(E)), [core.String, core.bool, dart.nullable(hive.HiveCipher), dart.fnType(core.int, [dart.dynamic, dart.dynamic]), dart.fnType(core.bool, [core.int, core.int]), core.bool, dart.nullable(core.String), dart.nullable(typed_data.Uint8List), dart.nullable(core.String)]], E => [dart.nullable(core.Object)]),
    openBox: dart.gFnType(E => [async.Future$(hive.Box$(E)), [core.String], {bytes: dart.nullable(typed_data.Uint8List), collection: dart.nullable(core.String), compactionStrategy: dart.fnType(core.bool, [core.int, core.int]), crashRecovery: core.bool, encryptionCipher: dart.nullable(hive.HiveCipher), encryptionKey: dart.nullable(core.List$(core.int)), keyComparator: dart.fnType(core.int, [dart.dynamic, dart.dynamic]), path: dart.nullable(core.String)}, {}], E => [dart.nullable(core.Object)]),
    openLazyBox: dart.gFnType(E => [async.Future$(hive.LazyBox$(E)), [core.String], {collection: dart.nullable(core.String), compactionStrategy: dart.fnType(core.bool, [core.int, core.int]), crashRecovery: core.bool, encryptionCipher: dart.nullable(hive.HiveCipher), encryptionKey: dart.nullable(core.List$(core.int)), keyComparator: dart.fnType(core.int, [dart.dynamic, dart.dynamic]), path: dart.nullable(core.String)}, {}], E => [dart.nullable(core.Object)]),
    [S$0._getBoxInternal]: dart.gFnType(E => [hive.BoxBase$(E), [core.String], [dart.nullable(core.bool)]], E => [dart.nullable(core.Object)]),
    getBoxWithoutCheckInternal: dart.fnType(dart.nullable(hive.BoxBase), [core.String]),
    box: dart.gFnType(E => [hive.Box$(E), [core.String]], E => [dart.nullable(core.Object)]),
    lazyBox: dart.gFnType(E => [hive.LazyBox$(E), [core.String]], E => [dart.nullable(core.Object)]),
    isBoxOpen: dart.fnType(core.bool, [core.String]),
    close: dart.fnType(async.Future$(dart.void), []),
    unregisterBox: dart.fnType(dart.void, [core.String]),
    deleteBoxFromDisk: dart.fnType(async.Future$(dart.void), [core.String], {collection: dart.nullable(core.String), path: dart.nullable(core.String)}, {}),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    generateSecureKey: dart.fnType(core.List$(core.int), []),
    boxExists: dart.fnType(async.Future$(core.bool), [core.String], {collection: dart.nullable(core.String), path: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getGetters(hive_impl.HiveImpl.__proto__),
    [S$0._manager]: storage_backend.BackendManagerInterface
  }));
  dart.setLibraryUri(hive_impl.HiveImpl, I[133]);
  dart.setFieldSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getFields(hive_impl.HiveImpl.__proto__),
    [S$0._boxes]: dart.finalFieldType(collection.HashMap$(core.String, box_base_impl.BoxBaseImpl)),
    [S$0._openingBoxes]: dart.finalFieldType(collection.HashMap$(core.String, async.Future)),
    [S$0._managerOverride]: dart.fieldType(dart.nullable(storage_backend.BackendManagerInterface)),
    [S$0._secureRandom]: dart.finalFieldType(math.Random),
    homePath: dart.fieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(hive_impl.HiveImpl, () => ['_defaultBackendManager']);
  dart.defineLazy(hive_impl.HiveImpl, {
    /*hive_impl.HiveImpl._defaultBackendManager*/get _defaultBackendManager() {
      return backend_manager.BackendManager.select();
    }
  }, false);
  const _is_HiveCollectionMixin_default = Symbol('_is_HiveCollectionMixin_default');
  hive_collection_mixin.HiveCollectionMixin$ = dart.generic(E => {
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    class HiveCollectionMixin extends core.Object {
      get keys() {
        return new _js_helper.SyncIterable.new((function* keys() {
          for (let value of this) {
            yield value.key;
          }
        }).bind(this));
      }
      deleteAllFromHive() {
        return this.box.deleteAll(this.keys);
      }
      deleteFirstFromHive() {
        return this[S$.$first].delete();
      }
      deleteLastFromHive() {
        return this[S$.$last].delete();
      }
      deleteFromHive(index) {
        return this[S$.$_get](index).delete();
      }
      toMap() {
        let map = new (__t$LinkedMapOfdynamic$E()).new();
        for (let item of this) {
          map[S$.$_set](item.key, item);
        }
        return map;
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[S$0.$iterator]);
      }
    }
    (HiveCollectionMixin.new = function() {
      ;
    }).prototype = HiveCollectionMixin.prototype;
    dart.addTypeTests(HiveCollectionMixin);
    HiveCollectionMixin.prototype[_is_HiveCollectionMixin_default] = true;
    dart.addTypeCaches(HiveCollectionMixin);
    HiveCollectionMixin[dart.implements] = () => [hive.HiveCollection$(E)];
    dart.setMethodSignature(HiveCollectionMixin, () => ({
      __proto__: dart.getMethods(HiveCollectionMixin.__proto__),
      deleteAllFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteFirstFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteLastFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteFromHive: dart.fnType(async.Future$(dart.void), [core.int]),
      toMap: dart.fnType(core.Map$(dart.dynamic, E), [])
    }));
    dart.setGetterSignature(HiveCollectionMixin, () => ({
      __proto__: dart.getGetters(HiveCollectionMixin.__proto__),
      keys: core.Iterable
    }));
    dart.setLibraryUri(HiveCollectionMixin, I[134]);
    return HiveCollectionMixin;
  });
  hive_collection_mixin.HiveCollectionMixin = hive_collection_mixin.HiveCollectionMixin$();
  dart.addTypeTests(hive_collection_mixin.HiveCollectionMixin, _is_HiveCollectionMixin_default);
  const _is_DelegatingListViewMixin_default = Symbol('_is_DelegatingListViewMixin_default');
  delegating_list_view_mixin.DelegatingListViewMixin$ = dart.generic(E => {
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$VoidToE = () => (__t$VoidToE = dart.constFn(dart.fnType(E, [])))();
    var __t$VoidToNE = () => (__t$VoidToNE = dart.constFn(dart.nullable(__t$VoidToE())))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$EAndEToE = () => (__t$EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    class DelegatingListViewMixin extends core.Object {
      get first() {
        return this.delegate[S$.$first];
      }
      get last() {
        return this.delegate[S$.$last];
      }
      get length() {
        return this.delegate[S$.$length];
      }
      ['+'](other) {
        __t$ListOfE().as(other);
        return this.delegate[S$0.$plus](other);
      }
      _get(index) {
        return this.delegate[S$.$_get](index);
      }
      any(test) {
        return this.delegate[S$.$any](test);
      }
      asMap() {
        return this.delegate[S$0.$asMap]();
      }
      cast(R) {
        return this.delegate[S$.$cast](R);
      }
      contains(element) {
        return this.delegate[S$.$contains](element);
      }
      elementAt(index) {
        return this.delegate[S$0.$elementAt](index);
      }
      every(test) {
        return this.delegate[S$.$every](test);
      }
      expand(T, f) {
        return this.delegate[S$0.$expand](T, f);
      }
      firstWhere(test, opts$) {
        let orElse = opts$ && 'orElse' in opts$ ? opts$.orElse : null;
        __t$VoidToNE().as(orElse);
        return this.delegate[S$.$firstWhere](test, {orElse: orElse});
      }
      fold(T, initialValue, combine) {
        return this.delegate[S$.$fold](T, initialValue, combine);
      }
      followedBy(other) {
        __t$IterableOfE().as(other);
        return this.delegate[S$0.$followedBy](other);
      }
      forEach(f) {
        return this.delegate[S$.$forEach](f);
      }
      getRange(start, end) {
        return this.delegate[S$0.$getRange](start, end);
      }
      indexOf(element, start = 0) {
        return this.delegate[S$0.$indexOf](E.as(element), start);
      }
      indexWhere(test, start = 0) {
        return this.delegate[S$0.$indexWhere](test, start);
      }
      get isEmpty() {
        return this.delegate[S$.$isEmpty];
      }
      get isNotEmpty() {
        return this.delegate[S$.$isNotEmpty];
      }
      get iterator() {
        return this.delegate[S$0.$iterator];
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[S$0.$iterator]);
      }
      join(separator = "") {
        return this.delegate[S$.$join](separator);
      }
      lastIndexOf(element, start = null) {
        return this.delegate[S$0.$lastIndexOf](E.as(element), start);
      }
      lastIndexWhere(test, start = null) {
        return this.delegate[S$0.$lastIndexWhere](test, start);
      }
      lastWhere(test, opts$) {
        let orElse = opts$ && 'orElse' in opts$ ? opts$.orElse : null;
        __t$VoidToNE().as(orElse);
        return this.delegate[S$0.$lastWhere](test, {orElse: orElse});
      }
      map(T, f) {
        return this.delegate[S$.$map](T, f);
      }
      reduce(combine) {
        __t$EAndEToE().as(combine);
        return this.delegate[S$0.$reduce](combine);
      }
      get reversed() {
        return this.delegate[S$0.$reversed];
      }
      get single() {
        return this.delegate[S$0.$single];
      }
      singleWhere(test, opts$) {
        let orElse = opts$ && 'orElse' in opts$ ? opts$.orElse : null;
        __t$VoidToNE().as(orElse);
        return this.delegate[S$0.$singleWhere](test, {orElse: orElse});
      }
      skip(count) {
        return this.delegate[S$0.$skip](count);
      }
      skipWhile(test) {
        return this.delegate[S$0.$skipWhile](test);
      }
      sublist(start, end = null) {
        return this.delegate[S$0.$sublist](start, end);
      }
      take(count) {
        return this.delegate[S$0.$take](count);
      }
      takeWhile(test) {
        return this.delegate[S$0.$takeWhile](test);
      }
      toList(opts$) {
        let growable = opts$ && 'growable' in opts$ ? opts$.growable : true;
        return this.delegate[S$.$toList]({growable: growable});
      }
      toSet() {
        return this.delegate[S$.$toSet]();
      }
      where(test) {
        return this.delegate[S$.$where](test);
      }
      whereType(T) {
        return this.delegate[S$0.$whereType](T);
      }
    }
    (DelegatingListViewMixin.new = function() {
      ;
    }).prototype = DelegatingListViewMixin.prototype;
    DelegatingListViewMixin.prototype[dart.isList] = true;
    dart.addTypeTests(DelegatingListViewMixin);
    DelegatingListViewMixin.prototype[_is_DelegatingListViewMixin_default] = true;
    dart.addTypeCaches(DelegatingListViewMixin);
    DelegatingListViewMixin[dart.implements] = () => [core.List$(E)];
    dart.setMethodSignature(DelegatingListViewMixin, () => ({
      __proto__: dart.getMethods(DelegatingListViewMixin.__proto__),
      '+': dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      [S$0.$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [S$.$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      asMap: dart.fnType(core.Map$(core.int, E), []),
      [S$0.$asMap]: dart.fnType(core.Map$(core.int, E), []),
      cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [S$.$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [S$.$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      elementAt: dart.fnType(E, [core.int]),
      [S$0.$elementAt]: dart.fnType(E, [core.int]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [S$.$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [S$0.$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [S$.$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [S$.$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [S$0.$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [S$.$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      getRange: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      [S$0.$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      indexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      [S$0.$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      indexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      [S$0.$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      join: dart.fnType(core.String, [], [core.String]),
      [S$.$join]: dart.fnType(core.String, [], [core.String]),
      lastIndexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      [S$0.$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      lastIndexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      [S$0.$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [S$0.$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [S$.$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [S$0.$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [S$0.$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [S$0.$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [S$0.$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      sublist: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      [S$0.$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [S$0.$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [S$0.$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [S$.$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      toSet: dart.fnType(core.Set$(E), []),
      [S$.$toSet]: dart.fnType(core.Set$(E), []),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [S$.$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [S$0.$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DelegatingListViewMixin, () => ({
      __proto__: dart.getGetters(DelegatingListViewMixin.__proto__),
      first: E,
      [S$.$first]: E,
      last: E,
      [S$.$last]: E,
      length: core.int,
      [S$.$length]: core.int,
      isEmpty: core.bool,
      [S$.$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [S$.$isNotEmpty]: core.bool,
      iterator: core.Iterator$(E),
      [S$0.$iterator]: core.Iterator$(E),
      reversed: core.Iterable$(E),
      [S$0.$reversed]: core.Iterable$(E),
      single: E,
      [S$0.$single]: E
    }));
    dart.setLibraryUri(DelegatingListViewMixin, I[135]);
    dart.defineExtensionMethods(DelegatingListViewMixin, [
      '+',
      '_get',
      'any',
      'asMap',
      'cast',
      'contains',
      'elementAt',
      'every',
      'expand',
      'firstWhere',
      'fold',
      'followedBy',
      'forEach',
      'getRange',
      'indexOf',
      'indexWhere',
      'join',
      'lastIndexOf',
      'lastIndexWhere',
      'lastWhere',
      'map',
      'reduce',
      'singleWhere',
      'skip',
      'skipWhile',
      'sublist',
      'take',
      'takeWhile',
      'toList',
      'toSet',
      'where',
      'whereType'
    ]);
    dart.defineExtensionAccessors(DelegatingListViewMixin, [
      'first',
      'last',
      'length',
      'isEmpty',
      'isNotEmpty',
      'iterator',
      'reversed',
      'single'
    ]);
    return DelegatingListViewMixin;
  });
  delegating_list_view_mixin.DelegatingListViewMixin = delegating_list_view_mixin.DelegatingListViewMixin$();
  dart.addTypeTests(delegating_list_view_mixin.DelegatingListViewMixin, _is_DelegatingListViewMixin_default);
  const _is_HiveListImpl_default = Symbol('_is_HiveListImpl_default');
  hive_list_impl.HiveListImpl$ = dart.generic(E => {
    var __t$JSArrayOfE = () => (__t$JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    const Object_HiveCollectionMixin$36 = class Object_HiveCollectionMixin extends core.Object {};
    (Object_HiveCollectionMixin$36.new = function() {
    }).prototype = Object_HiveCollectionMixin$36.prototype;
    dart.applyMixin(Object_HiveCollectionMixin$36, hive_collection_mixin.HiveCollectionMixin$(E));
    const Object_ListMixin$36 = class Object_ListMixin extends Object_HiveCollectionMixin$36 {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    const Object_DelegatingListViewMixin$36 = class Object_DelegatingListViewMixin extends Object_ListMixin$36 {};
    (Object_DelegatingListViewMixin$36.new = function() {
    }).prototype = Object_DelegatingListViewMixin$36.prototype;
    dart.applyMixin(Object_DelegatingListViewMixin$36, delegating_list_view_mixin.DelegatingListViewMixin$(E));
    class HiveListImpl extends Object_DelegatingListViewMixin$36 {
      get boxName() {
        return this[S$0.boxName];
      }
      set boxName(value) {
        super.boxName = value;
      }
      static ['_#new#tearOff'](E, box, opts$) {
        let objects = opts$ && 'objects' in opts$ ? opts$.objects : null;
        return new (hive_list_impl.HiveListImpl$(E)).new(box, {objects: objects});
      }
      static ['_#lazy#tearOff'](E, boxName, keys) {
        return new (hive_list_impl.HiveListImpl$(E)).lazy(boxName, keys);
      }
      get keys() {
        if (this[S$0._delegate] == null) {
          return dart.nullCheck(this[S$0._keys]);
        } else {
          return super.keys;
        }
      }
      get box() {
        if (this[S$0._box] == null) {
          let box = hive_impl.HiveImpl.as(this[S$0._hive]).getBoxWithoutCheckInternal(this.boxName);
          if (box == null) {
            dart.throw(new hive.HiveError.new("To use this list, you have to open the box \"" + this.boxName + "\" first."));
          } else if (!hive.Box.is(box)) {
            dart.throw(new hive.HiveError.new("The box \"" + this.boxName + "\" is a lazy box. " + "You can only use HiveLists with normal boxes."));
          } else {
            this[S$0._box] = box;
          }
        }
        return dart.nullCheck(this[S$0._box]);
      }
      get delegate() {
        if (this[S$0._disposed]) {
          dart.throw(new hive.HiveError.new("HiveList has already been disposed."));
        }
        if (this[S$0._invalidated]) {
          let retained = __t$JSArrayOfE().of([]);
          for (let obj of dart.nullCheck(this[S$0._delegate])) {
            if (hive_object['HiveObjectInternal|isInHiveList'](obj, this)) {
              retained[S$.$add](obj);
            }
          }
          this[S$0._delegate] = retained;
          this[S$0._invalidated] = false;
        } else if (this[S$0._delegate] == null) {
          let list = __t$JSArrayOfE().of([]);
          for (let key of dart.nullCheck(this[S$0._keys])) {
            if (this.box.containsKey(key)) {
              let obj = E.as(this.box.get(key));
              hive_object['HiveObjectInternal|linkHiveList'](obj, this);
              list[S$.$add](obj);
            }
          }
          this[S$0._delegate] = list;
        }
        return dart.nullCheck(this[S$0._delegate]);
      }
      dispose() {
        if (this[S$0._delegate] != null) {
          for (let element of dart.nullCheck(this[S$0._delegate])) {
            hive_object['HiveObjectInternal|unlinkHiveList'](element, this);
          }
          this[S$0._delegate] = null;
        }
        this[S$0._disposed] = true;
      }
      invalidate() {
        if (this[S$0._delegate] != null) {
          this[S$0._invalidated] = true;
        }
      }
      [S$0._checkElementIsValid](obj) {
        if (!dart.equals(obj.box, this.box)) {
          dart.throw(new hive.HiveError.new("HiveObjects needs to be in the box \"" + this.boxName + "\"."));
        }
      }
      set length(newLength) {
        if (newLength < this.delegate[S$.$length]) {
          for (let i = newLength; i < this.delegate[S$.$length]; i = i + 1) {
            hive_object['HiveObjectInternal|unlinkHiveList'](this.delegate[S$.$_get](i), this);
          }
        }
        this.delegate[S$.$length] = newLength;
      }
      get length() {
        return super.length;
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        this[S$0._checkElementIsValid](value);
        hive_object['HiveObjectInternal|linkHiveList'](value, this);
        let oldValue = this.delegate[S$.$_get](index);
        this.delegate[S$.$_set](index, value);
        hive_object['HiveObjectInternal|unlinkHiveList'](oldValue, this);
        return value$;
      }
      add(element) {
        E.as(element);
        this[S$0._checkElementIsValid](element);
        hive_object['HiveObjectInternal|linkHiveList'](element, this);
        this.delegate[S$.$add](element);
      }
      addAll(iterable) {
        __t$IterableOfE().as(iterable);
        for (let element of iterable) {
          this[S$0._checkElementIsValid](element);
          hive_object['HiveObjectInternal|linkHiveList'](element, this);
        }
        this.delegate[S$.$addAll](iterable);
      }
      castHiveList(T) {
        if (this[S$0._delegate] != null) {
          return new (hive_list_impl.HiveListImpl$(T)).new(this.box, {objects: dart.nullCheck(this[S$0._delegate])[S$.$cast](T)});
        } else {
          return new (hive_list_impl.HiveListImpl$(T)).lazy(this.boxName, this[S$0._keys]);
        }
      }
      set debugHive(hive) {
        return this[S$0._hive] = hive;
      }
    }
    (HiveListImpl.new = function(box, opts$) {
      let objects = opts$ && 'objects' in opts$ ? opts$.objects : null;
      this[S$0._hive] = hive.Hive;
      this[S$0._invalidated] = false;
      this[S$0._disposed] = false;
      this[S$0.boxName] = box.name;
      this[S$0._keys] = null;
      this[S$0._delegate] = __t$JSArrayOfE().of([]);
      this[S$0._box] = box;
      if (objects != null) {
        this.addAll(objects);
      }
    }).prototype = HiveListImpl.prototype;
    (HiveListImpl.lazy = function(boxName, keys) {
      this[S$0._hive] = hive.Hive;
      this[S$0._invalidated] = false;
      this[S$0._disposed] = false;
      this[S$0._box] = null;
      this[S$0._delegate] = null;
      this[S$0.boxName] = boxName;
      this[S$0._keys] = keys;
      ;
    }).prototype = HiveListImpl.prototype;
    dart.addTypeTests(HiveListImpl);
    HiveListImpl.prototype[_is_HiveListImpl_default] = true;
    dart.addTypeCaches(HiveListImpl);
    HiveListImpl[dart.implements] = () => [hive.HiveList$(E)];
    dart.setMethodSignature(HiveListImpl, () => ({
      __proto__: dart.getMethods(HiveListImpl.__proto__),
      dispose: dart.fnType(dart.void, []),
      invalidate: dart.fnType(dart.void, []),
      [S$0._checkElementIsValid]: dart.fnType(dart.void, [E]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      castHiveList: dart.gFnType(T => [hive.HiveList$(T), []], T => [hive_object.HiveObjectMixin])
    }));
    dart.setGetterSignature(HiveListImpl, () => ({
      __proto__: dart.getGetters(HiveListImpl.__proto__),
      box: hive.Box,
      delegate: core.List$(E)
    }));
    dart.setSetterSignature(HiveListImpl, () => ({
      __proto__: dart.getSetters(HiveListImpl.__proto__),
      length: core.int,
      [S$.$length]: core.int,
      debugHive: hive.HiveInterface
    }));
    dart.setLibraryUri(HiveListImpl, I[136]);
    dart.setFieldSignature(HiveListImpl, () => ({
      __proto__: dart.getFields(HiveListImpl.__proto__),
      boxName: dart.finalFieldType(core.String),
      [S$0._keys]: dart.finalFieldType(dart.nullable(core.List)),
      [S$0._hive]: dart.fieldType(hive.HiveInterface),
      [S$0._delegate]: dart.fieldType(dart.nullable(core.List$(E))),
      [S$0._box]: dart.fieldType(dart.nullable(hive.Box)),
      [S$0._invalidated]: dart.fieldType(core.bool),
      [S$0._disposed]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(HiveListImpl, ['_set', 'add', 'addAll']);
    dart.defineExtensionAccessors(HiveListImpl, ['length']);
    return HiveListImpl;
  });
  hive_list_impl.HiveListImpl = hive_list_impl.HiveListImpl$();
  dart.addTypeTests(hive_list_impl.HiveListImpl, _is_HiveListImpl_default);
  hive_object.HiveObjectMixin = class HiveObjectMixin extends core.Object {};
  hive_object.HiveObjectMixin[dart.mixinOn] = Object => class HiveObjectMixin extends Object {
    get [S$0._box$2]() {
      return this[S$0._box$1];
    }
    set [S$0._box$2](value) {
      this[S$0._box$1] = value;
    }
    get [S$0._key$2]() {
      return this[S$0._key$1];
    }
    set [S$0._key$2](value) {
      this[S$0._key$1] = value;
    }
    get [S$0._hiveLists$1]() {
      return this[S$0._hiveLists];
    }
    set [S$0._hiveLists$1](value) {
      super[S$0._hiveLists$1] = value;
    }
    get box() {
      return this[S$0._box$2];
    }
    get key() {
      return this[S$0._key$2];
    }
    [S$0._requireInitialized]() {
      if (this[S$0._box$2] == null) {
        dart.throw(new hive.HiveError.new("This object is currently not in a box."));
      }
    }
    save() {
      this[S$0._requireInitialized]();
      return dart.nullCheck(this[S$0._box$2]).put(this[S$0._key$2], this);
    }
    delete() {
      this[S$0._requireInitialized]();
      return dart.nullCheck(this[S$0._box$2]).delete(this[S$0._key$2]);
    }
    get isInBox() {
      if (this[S$0._box$2] != null) {
        if (dart.nullCheck(this[S$0._box$2]).lazy) {
          return dart.nullCheck(this[S$0._box$2]).containsKey(this[S$0._key$2]);
        } else {
          return true;
        }
      }
      return false;
    }
  };
  (hive_object.HiveObjectMixin[dart.mixinNew] = function() {
    this[S$0._box$1] = null;
    this[S$0._key$1] = null;
    this[S$0._hiveLists] = new (T$.LinkedMapOfHiveListOfHiveObjectMixin$int()).new();
  }).prototype = hive_object.HiveObjectMixin.prototype;
  dart.addTypeTests(hive_object.HiveObjectMixin);
  dart.addTypeCaches(hive_object.HiveObjectMixin);
  hive_object.HiveObjectMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getMethods(hive_object.HiveObjectMixin.__proto__),
    [S$0._requireInitialized]: dart.fnType(dart.void, []),
    save: dart.fnType(async.Future$(dart.void), []),
    delete: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getGetters(hive_object.HiveObjectMixin.__proto__),
    box: dart.nullable(hive.BoxBase),
    key: dart.dynamic,
    isInBox: core.bool
  }));
  dart.setLibraryUri(hive_object.HiveObjectMixin, I[137]);
  dart.setFieldSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getFields(hive_object.HiveObjectMixin.__proto__),
    [S$0._box$2]: dart.fieldType(dart.nullable(hive.BoxBase)),
    [S$0._key$2]: dart.fieldType(dart.dynamic),
    [S$0._hiveLists$1]: dart.finalFieldType(core.Map$(hive.HiveList$(hive_object.HiveObjectMixin), core.int))
  }));
  const Object_HiveObjectMixin$36 = class Object_HiveObjectMixin extends core.Object {};
  (Object_HiveObjectMixin$36.new = function() {
    hive_object.HiveObjectMixin[dart.mixinNew].call(this);
  }).prototype = Object_HiveObjectMixin$36.prototype;
  dart.applyMixin(Object_HiveObjectMixin$36, hive_object.HiveObjectMixin);
  hive_object.HiveObject = class HiveObject extends Object_HiveObjectMixin$36 {};
  (hive_object.HiveObject.new = function() {
    hive_object.HiveObject.__proto__.new.call(this);
    ;
  }).prototype = hive_object.HiveObject.prototype;
  dart.addTypeTests(hive_object.HiveObject);
  dart.addTypeCaches(hive_object.HiveObject);
  dart.setLibraryUri(hive_object.HiveObject, I[137]);
  hive_object['HiveObjectInternal|init'] = function HiveObjectInternal$124init($this, key, box) {
    if ($this[S$0._box$2] != null) {
      if (!dart.equals($this[S$0._box$2], box)) {
        dart.throw(new hive.HiveError.new("The same instance of an HiveObject cannot " + "be stored in two different boxes."));
      } else if (!dart.equals($this[S$0._key$2], key)) {
        dart.throw(new hive.HiveError.new("The same instance of an HiveObject cannot " + "be stored with two different keys (\"" + dart.str($this[S$0._key$2]) + "\" and \"" + dart.str(key) + "\")."));
      }
    }
    $this[S$0._box$2] = box;
    $this[S$0._key$2] = key;
  };
  hive_object['HiveObjectInternal|get#init'] = function HiveObjectInternal$124get$35init($this) {
    return dart.fn((key, box) => hive_object['HiveObjectInternal|init']($this, key, box), T$.dynamicAndBoxBaseTovoid());
  };
  hive_object['HiveObjectInternal|dispose'] = function HiveObjectInternal$124dispose($this) {
    for (let list of $this[S$0._hiveLists$1][S$.$keys]) {
      T$.HiveListImplOfHiveObjectMixin().as(list).invalidate();
    }
    $this[S$0._hiveLists$1][S$.$clear]();
    $this[S$0._box$2] = null;
    $this[S$0._key$2] = null;
  };
  hive_object['HiveObjectInternal|get#dispose'] = function HiveObjectInternal$124get$35dispose($this) {
    return dart.fn(() => hive_object['HiveObjectInternal|dispose']($this), T$.VoidTovoid());
  };
  hive_object['HiveObjectInternal|linkHiveList'] = function HiveObjectInternal$124linkHiveList($this, list) {
    let t230;
    $this[S$0._requireInitialized]();
    $this[S$0._hiveLists$1][S$.$_set](list, dart.notNull((t230 = $this[S$0._hiveLists$1][S$.$_get](list), t230 == null ? 0 : t230)) + 1);
  };
  hive_object['HiveObjectInternal|get#linkHiveList'] = function HiveObjectInternal$124get$35linkHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|linkHiveList']($this, list), T$.HiveListOfHiveObjectMixinTovoid());
  };
  hive_object['HiveObjectInternal|unlinkHiveList'] = function HiveObjectInternal$124unlinkHiveList($this, list) {
    let t234, t233, t232;
    let currentIndex = dart.nullCheck($this[S$0._hiveLists$1][S$.$_get](list));
    let newIndex = (t232 = $this[S$0._hiveLists$1], t233 = list, t234 = currentIndex - 1, t232[S$.$_set](t233, t234), t234);
    if (newIndex <= 0) {
      $this[S$0._hiveLists$1][S$.$remove](list);
    }
  };
  hive_object['HiveObjectInternal|get#unlinkHiveList'] = function HiveObjectInternal$124get$35unlinkHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|unlinkHiveList']($this, list), T$.HiveListOfHiveObjectMixinTovoid());
  };
  hive_object['HiveObjectInternal|isInHiveList'] = function HiveObjectInternal$124isInHiveList($this, list) {
    return $this[S$0._hiveLists$1][S$.$containsKey](list);
  };
  hive_object['HiveObjectInternal|get#isInHiveList'] = function HiveObjectInternal$124get$35isInHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|isInHiveList']($this, list), T$.HiveListOfHiveObjectMixinTobool());
  };
  hive_object['HiveObjectInternal|get#debugHiveLists'] = function HiveObjectInternal$124get$35debugHiveLists($this) {
    return $this[S$0._hiveLists$1];
  };
  extensions['StringX|get#isAscii'] = function StringX$124get$35isAscii($this) {
    for (let cu of $this[S$0.$codeUnits]) {
      if (cu > 127) return false;
    }
    return true;
  };
  extensions['ListIntX|readUint32'] = function ListIntX$124readUint32($this, offset) {
    return ($this[S$.$_get](offset) | $this[S$.$_get](offset + 1) << 8 >>> 0 | $this[S$.$_get](offset + 2) << 16 >>> 0 | $this[S$.$_get](offset + 3) << 24 >>> 0) >>> 0;
  };
  extensions['ListIntX|get#readUint32'] = function ListIntX$124get$35readUint32($this) {
    return dart.fn(offset => extensions['ListIntX|readUint32']($this, offset), T$.intToint());
  };
  extensions['ListIntX|writeUint32'] = function ListIntX$124writeUint32($this, offset, value) {
    $this[S$.$_set](offset, value);
    $this[S$.$_set](offset + 1, value[S$0.$rightShift](8));
    $this[S$.$_set](offset + 2, value[S$0.$rightShift](16));
    $this[S$.$_set](offset + 3, value[S$0.$rightShift](24));
  };
  extensions['ListIntX|get#writeUint32'] = function ListIntX$124get$35writeUint32($this) {
    return dart.fn((offset, value) => extensions['ListIntX|writeUint32']($this, offset, value), T$.intAndintTovoid());
  };
  extensions['Uint8ListX|view'] = function Uint8ListX$124view($this, offset, bytes) {
    return typed_data.Uint8List.view($this[S$0.$buffer], $this[S$0.$offsetInBytes] + offset, bytes);
  };
  extensions['Uint8ListX|get#view'] = function Uint8ListX$124get$35view($this) {
    return dart.fn((offset, bytes) => extensions['Uint8ListX|view']($this, offset, bytes), T$.intAndintToUint8List());
  };
  extensions['RandomX|nextBytes'] = function RandomX$124nextBytes($this, bytes) {
    let buffer = _native_typed_data.NativeUint8List.new(bytes);
    for (let i = 0; i < bytes; i = i + 1) {
      buffer[S$.$_set](i, $this.nextInt(255 + 1));
    }
    return buffer;
  };
  extensions['RandomX|get#nextBytes'] = function RandomX$124get$35nextBytes($this) {
    return dart.fn(bytes => extensions['RandomX|nextBytes']($this, bytes), T$.intToUint8List());
  };
  box_collection_indexed_db.BoxCollection = class BoxCollection extends core.Object {
    get boxNames() {
      return this[S$0.boxNames];
    }
    set boxNames(value) {
      super.boxNames = value;
    }
    static ['_#new#tearOff'](_db, boxNames) {
      return new box_collection_indexed_db.BoxCollection.new(_db, boxNames);
    }
    static open(name, boxNames, opts$) {
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      return async.async(box_collection_indexed_db.BoxCollection, function* open() {
        let factory = html.window[S$0.$indexedDB];
        if (factory == null) {
          dart.throw(core.Exception.new("Unable to open FluffyBox collection - IndexedDB not supported in this browser!"));
        }
        let _db = (yield factory[S$.$open](name, {version: 1, onUpgradeNeeded: dart.fn(event => {
            let _db = event[S$.$target][S$0.$result];
            for (let name of boxNames) {
              dart.dsend(_db, 'createObjectStore', [name], {autoIncrement: true});
            }
          }, T$.VersionChangeEventTovoid())}));
        return new box_collection_indexed_db.BoxCollection.new(_db, boxNames);
      });
    }
    get name() {
      return dart.nullCheck(this[S$0._db].name);
    }
    openBox(V, name, opts$) {
      let preload = opts$ && 'preload' in opts$ ? opts$.preload : false;
      let boxCreator = opts$ && 'boxCreator' in opts$ ? opts$.boxCreator : null;
      return async.async(box_collection_indexed_db.CollectionBox$(V), (function* openBox() {
        let t245, t245$;
        if (!this.boxNames.contains(name)) {
          dart.throw(core.Exception.new("Box with name " + name + " is not in the known box names of this collection."));
        }
        let i = this[S$0._openBoxes][S$0.$indexWhere](dart.fn(box => box.name === name, T$.CollectionBoxTobool()));
        if (i !== -1) {
          return box_collection_indexed_db.CollectionBox$(V).as(this[S$0._openBoxes][S$.$_get](i));
        }
        let box = (t245$ = dart.nullable(box_collection_indexed_db.CollectionBox$(V)).as((t245 = boxCreator, t245 == null ? null : t245(name, this))), t245$ == null ? new (box_collection_indexed_db.CollectionBox$(V)).new(name, this) : t245$);
        if (preload) {
          box[S$0._cache][S$.$addAll](yield box.getAllValues());
        }
        this[S$0._openBoxes][S$.$add](box);
        return box;
      }).bind(this));
    }
    transaction(action, opts$) {
      let boxNames = opts$ && 'boxNames' in opts$ ? opts$.boxNames : null;
      let readOnly = opts$ && 'readOnly' in opts$ ? opts$.readOnly : false;
      return async.async(dart.void, (function* transaction() {
        let t245;
        boxNames == null ? boxNames = this.boxNames[S$.$toList]() : null;
        if (this[S$0._txnCache] != null) {
          yield action();
          return;
        }
        this[S$0._txnCache] = T$.JSArrayOfTransactionToFutureOfvoid().of([]);
        yield action();
        let cache = T$.ListOfTransactionToFutureOfvoid().from((t245 = this[S$0._txnCache], t245 == null ? [] : t245));
        this[S$0._txnCache] = null;
        if (cache[S$.$isEmpty]) return;
        let txn = this[S$0._db][S$0.$transaction](boxNames, readOnly ? "readonly" : "readwrite");
        for (let fun of cache) {
          fun(txn);
        }
        yield txn[S$0.$completed];
        return;
      }).bind(this));
    }
    close() {
      return this[S$0._db].close();
    }
    deleteFromDisk() {
      return async.async(dart.void, (function* deleteFromDisk() {
        let factory = html.window[S$0.$indexedDB];
        for (let box of this[S$0._openBoxes]) {
          box[S$0._cache][S$.$clear]();
          box[S$0._cachedKeys] = null;
        }
        this[S$0._openBoxes][S$.$clear]();
        this[S$0._db].close();
        if (factory == null || this[S$0._db].name == null) {
          dart.throw(core.Exception.new("Unable to delete fluffybox collection"));
        }
        factory[S$0.$deleteDatabase](dart.nullCheck(this[S$0._db].name));
      }).bind(this));
    }
  };
  (box_collection_indexed_db.BoxCollection.new = function(_db, boxNames) {
    this[S$0._openBoxes] = T$.JSArrayOfCollectionBox().of([]);
    this[S$0._txnCache] = null;
    this[S$0._db] = _db;
    this[S$0.boxNames] = boxNames;
    ;
  }).prototype = box_collection_indexed_db.BoxCollection.prototype;
  dart.addTypeTests(box_collection_indexed_db.BoxCollection);
  dart.addTypeCaches(box_collection_indexed_db.BoxCollection);
  box_collection_indexed_db.BoxCollection[dart.implements] = () => [box_collection_stub.BoxCollection];
  dart.setMethodSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getMethods(box_collection_indexed_db.BoxCollection.__proto__),
    openBox: dart.gFnType(V => [async.Future$(box_collection_indexed_db.CollectionBox$(V)), [core.String], {boxCreator: dart.nullable(dart.fnType(box_collection_stub.CollectionBox$(V), [core.String, box_collection_indexed_db.BoxCollection])), preload: core.bool}, {}], V => [dart.nullable(core.Object)]),
    transaction: dart.fnType(async.Future$(dart.void), [dart.fnType(async.Future$(dart.void), [])], {boxNames: dart.nullable(core.List$(core.String)), readOnly: core.bool}, {}),
    close: dart.fnType(dart.void, []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(box_collection_indexed_db.BoxCollection, () => ['open']);
  dart.setGetterSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getGetters(box_collection_indexed_db.BoxCollection.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(box_collection_indexed_db.BoxCollection, I[138]);
  dart.setFieldSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getFields(box_collection_indexed_db.BoxCollection.__proto__),
    [S$0._db]: dart.finalFieldType(indexed_db.Database),
    boxNames: dart.finalFieldType(core.Set$(core.String)),
    [S$0._openBoxes]: dart.finalFieldType(core.List$(box_collection_indexed_db.CollectionBox)),
    [S$0._txnCache]: dart.fieldType(dart.nullable(core.List$(dart.fnType(async.Future$(dart.void), [indexed_db.Transaction]))))
  }));
  const _is_CollectionBox_default = Symbol('_is_CollectionBox_default');
  box_collection_indexed_db.CollectionBox$ = dart.generic(V => {
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    var __t$IdentityMapOfString$VN = () => (__t$IdentityMapOfString$VN = dart.constFn(_js_helper.IdentityMap$(core.String, __t$VN())))();
    var __t$IdentityMapOfString$V = () => (__t$IdentityMapOfString$V = dart.constFn(_js_helper.IdentityMap$(core.String, V)))();
    var __t$MapOfString$V = () => (__t$MapOfString$V = dart.constFn(core.Map$(core.String, V)))();
    var __t$StringToVN = () => (__t$StringToVN = dart.constFn(dart.fnType(__t$VN(), [core.String])))();
    var __t$ListOfVN = () => (__t$ListOfVN = dart.constFn(core.List$(__t$VN())))();
    class CollectionBox extends core.Object {
      get name() {
        return this[S$0.name$3];
      }
      set name(value) {
        super.name = value;
      }
      get boxCollection() {
        return this[S$0.boxCollection];
      }
      set boxCollection(value) {
        super.boxCollection = value;
      }
      static ['_#new#tearOff'](V, name, boxCollection) {
        return new (box_collection_indexed_db.CollectionBox$(V)).new(name, boxCollection);
      }
      getAllKeys(txn = null) {
        return async.async(T$.ListOfString(), (function* getAllKeys() {
          let cachedKey = this[S$0._cachedKeys];
          if (cachedKey != null) return cachedKey[S$.$toList]();
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readonly") : null;
          let store = txn[S$0.$objectStore](this.name);
          let request = store[S$0.$getAllKeys](null);
          yield request[S$0.$onSuccess].first;
          let keys = T$.ListOfString().from(core.Iterable.as(dart.dgsend(request[S$0.$result], [core.String], 'cast', [])));
          this[S$0._cachedKeys] = keys[S$.$toSet]();
          return keys;
        }).bind(this));
      }
      getAllValues(txn = null) {
        return async.async(__t$MapOfString$V(), (function* getAllValues() {
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readonly") : null;
          let store = txn[S$0.$objectStore](this.name);
          let map = new (__t$IdentityMapOfString$V()).new();
          let cursorStream = store[S$0.$openCursor]({autoAdvance: true});
          let iter = async.StreamIterator.new(cursorStream);
          try {
            while (yield iter.moveNext()) {
              let cursor = iter.current;
              {
                map[S$.$_set](core.String.as(cursor.key), V.as(cursor[S$0.$value]));
              }
            }
          } finally {
            yield iter.cancel();
          }
          return map;
        }).bind(this));
      }
      get(key, txn = null) {
        return async.async(__t$VN(), (function* get() {
          if (this[S$0._cache][S$.$containsKey](key)) return this[S$0._cache][S$.$_get](key);
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readonly") : null;
          let store = txn[S$0.$objectStore](this.name);
          this[S$0._cache][S$.$_set](key, __t$VN().as(yield store[S$0.$getObject](key)));
          return this[S$0._cache][S$.$_get](key);
        }).bind(this));
      }
      getAll(keys, txn = null) {
        return async.async(__t$ListOfVN(), (function* getAll() {
          if (!keys[S$.$any](dart.fn(key => !this[S$0._cache][S$.$containsKey](key), T$.StringTobool()))) {
            return keys[S$.$map](__t$VN(), dart.fn(key => this[S$0._cache][S$.$_get](key), __t$StringToVN()))[S$.$toList]();
          }
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readonly") : null;
          let store = txn[S$0.$objectStore](this.name);
          let list = (yield async.Future.wait(dart.dynamic, keys[S$.$map](async.Future, dart.bind(store, S$0.$getObject))));
          for (let i = 0; i < keys[S$.$length]; i = i + 1) {
            this[S$0._cache][S$.$_set](keys[S$.$_get](i), __t$VN().as(list[S$.$_get](i)));
          }
          return list[S$.$cast](__t$VN());
        }).bind(this));
      }
      put(key, val, transaction = null) {
        V.as(val);
        return async.async(dart.void, (function* put() {
          let t245, t245$;
          let txn = null;
          if (indexed_db.Transaction.is(transaction)) {
            txn = transaction;
          }
          if (val == null) {
            return this.delete(key, txn);
          }
          let txnCache = this.boxCollection[S$0._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.fn(txn => this.put(key, val, txn), T$.TransactionToFutureOfvoid()));
            this[S$0._cache][S$.$_set](key, val);
            t245 = this[S$0._cachedKeys];
            t245 == null ? null : t245.add(key);
            return;
          }
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readwrite") : null;
          let store = txn[S$0.$objectStore](this.name);
          yield store[S$0.$put](val, key);
          this[S$0._cache][S$.$_set](key, val);
          t245$ = this[S$0._cachedKeys];
          t245$ == null ? null : t245$.add(key);
          return;
        }).bind(this));
      }
      delete(key, txn = null) {
        return async.async(dart.void, (function* $delete() {
          let t245, t245$;
          let txnCache = this.boxCollection[S$0._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.fn(txn => this.delete(key, txn), T$.TransactionToFutureOfvoid()));
            this[S$0._cache][S$.$_set](key, null);
            t245 = this[S$0._cachedKeys];
            t245 == null ? null : t245.remove(key);
            return;
          }
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readwrite") : null;
          let store = txn[S$0.$objectStore](this.name);
          yield store[S$0.$delete](key);
          this[S$0._cache][S$.$_set](key, null);
          t245$ = this[S$0._cachedKeys];
          t245$ == null ? null : t245$.remove(key);
          return;
        }).bind(this));
      }
      deleteAll(keys, txn = null) {
        return async.async(dart.void, (function* deleteAll() {
          let t245, t245$;
          let txnCache = this.boxCollection[S$0._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.fn(txn => this.deleteAll(keys, txn), T$.TransactionToFutureOfvoid()));
            for (let key of keys) {
              this[S$0._cache][S$.$_set](key, null);
            }
            t245 = this[S$0._cachedKeys];
            t245 == null ? null : t245.removeAll(keys);
            return;
          }
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readwrite") : null;
          let store = txn[S$0.$objectStore](this.name);
          for (let key of keys) {
            yield store[S$0.$delete](key);
            this[S$0._cache][S$.$_set](key, null);
            t245$ = this[S$0._cachedKeys];
            t245$ == null ? null : t245$.removeAll(keys);
          }
          return;
        }).bind(this));
      }
      clear(txn = null) {
        return async.async(dart.void, (function* clear() {
          let txnCache = this.boxCollection[S$0._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.bind(this, 'clear'));
            this[S$0._cache][S$.$clear]();
            this[S$0._cachedKeys] = null;
            return;
          }
          txn == null ? txn = this.boxCollection[S$0._db][S$0.$transaction](this.name, "readwrite") : null;
          let store = txn[S$0.$objectStore](this.name);
          yield store[S$.$clear]();
          this[S$0._cache][S$.$clear]();
          this[S$0._cachedKeys] = null;
          return;
        }).bind(this));
      }
      flush() {
        return T$.FutureOfvoid().value();
      }
    }
    (CollectionBox.new = function(name, boxCollection) {
      this[S$0._cache] = new (__t$IdentityMapOfString$VN()).new();
      this[S$0._cachedKeys] = null;
      this[S$0.name$3] = name;
      this[S$0.boxCollection] = boxCollection;
      if (!(typeof dart.wrapType(V) == 'string' || core.int.is(dart.wrapType(V)) || core.Object.is(dart.wrapType(V)) || T$.ListOfObjectN().is(dart.wrapType(V)) || T$.MapOfString$ObjectN().is(dart.wrapType(V)) || typeof dart.wrapType(V) == 'number')) {
        dart.throw(core.Exception.new("Value type " + dart.str(dart.wrapType(V)[S$0.$runtimeType]) + " is not one of the allowed value types {String, int, double, List<Object?>, Map<String, Object?>}."));
      }
    }).prototype = CollectionBox.prototype;
    dart.addTypeTests(CollectionBox);
    CollectionBox.prototype[_is_CollectionBox_default] = true;
    dart.addTypeCaches(CollectionBox);
    CollectionBox[dart.implements] = () => [box_collection_stub.CollectionBox$(V)];
    dart.setMethodSignature(CollectionBox, () => ({
      __proto__: dart.getMethods(CollectionBox.__proto__),
      getAllKeys: dart.fnType(async.Future$(core.List$(core.String)), [], [dart.nullable(indexed_db.Transaction)]),
      getAllValues: dart.fnType(async.Future$(core.Map$(core.String, V)), [], [dart.nullable(indexed_db.Transaction)]),
      get: dart.fnType(async.Future$(dart.nullable(V)), [core.String], [dart.nullable(indexed_db.Transaction)]),
      getAll: dart.fnType(async.Future$(core.List$(dart.nullable(V))), [core.List$(core.String)], [dart.nullable(indexed_db.Transaction)]),
      put: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(core.Object)], [dart.nullable(core.Object)]),
      delete: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(indexed_db.Transaction)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.List$(core.String)], [dart.nullable(indexed_db.Transaction)]),
      clear: dart.fnType(async.Future$(dart.void), [], [dart.nullable(indexed_db.Transaction)]),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(CollectionBox, I[138]);
    dart.setFieldSignature(CollectionBox, () => ({
      __proto__: dart.getFields(CollectionBox.__proto__),
      name: dart.finalFieldType(core.String),
      boxCollection: dart.finalFieldType(box_collection_indexed_db.BoxCollection),
      [S$0._cache]: dart.finalFieldType(core.Map$(core.String, dart.nullable(V))),
      [S$0._cachedKeys]: dart.fieldType(dart.nullable(core.Set$(core.String)))
    }));
    return CollectionBox;
  });
  box_collection_indexed_db.CollectionBox = box_collection_indexed_db.CollectionBox$();
  dart.addTypeTests(box_collection_indexed_db.CollectionBox, _is_CollectionBox_default);
  browser_client.BrowserClient = class BrowserClient extends base_client.BaseClient {
    get withCredentials() {
      return this[S$0.withCredentials];
    }
    set withCredentials(value) {
      this[S$0.withCredentials] = value;
    }
    send(request) {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let t245;
        if (this[S$0._isClosed$2]) {
          dart.throw(new exception.ClientException.new("HTTP request failed. Client is already closed.", request.url));
        }
        let bytes = (yield request.finalize().toBytes());
        let xhr = html.HttpRequest.new();
        this[S$0._xhrs].add(xhr);
        t245 = xhr;
        (() => {
          t245.open(request.method, dart.str(request.url), {async: true});
          t245[S$0.$responseType] = "arraybuffer";
          t245.withCredentials = this.withCredentials;
          return t245;
        })();
        request.headers[S$.$forEach](dart.bind(xhr, 'setRequestHeader'));
        let completer = T$.CompleterOfStreamedResponse().new();
        async.unawaited(xhr[S$0.$onLoad].first.then(dart.void, dart.fn(_ => {
          let body = typed_data.ByteBuffer.as(xhr[S$0.$response])[S$0.$asUint8List]();
          completer.complete(new streamed_response.StreamedResponse.new(byte_stream.ByteStream.fromBytes(body), dart.nullCheck(xhr.status), {contentLength: body[S$.$length], request: request, headers: xhr[S$0.$responseHeaders], reasonPhrase: xhr.statusText}));
        }, T$.ProgressEventToNull())));
        async.unawaited(xhr[S$0.$onError].first.then(dart.void, dart.fn(_ => {
          completer.completeError(new exception.ClientException.new("XMLHttpRequest error.", request.url), core.StackTrace.current);
        }, T$.ProgressEventToNull())));
        xhr.send(bytes);
        try {
          return yield completer.future;
        } finally {
          this[S$0._xhrs].remove(xhr);
        }
      }).bind(this));
    }
    close() {
      this[S$0._isClosed$2] = true;
      for (let xhr of this[S$0._xhrs]) {
        xhr.abort();
      }
      this[S$0._xhrs].clear();
    }
    static ['_#new#tearOff']() {
      return new browser_client.BrowserClient.new();
    }
  };
  (browser_client.BrowserClient.new = function() {
    this[S$0._xhrs] = T$.LinkedHashSetOfHttpRequest().new();
    this[S$0.withCredentials] = false;
    this[S$0._isClosed$2] = false;
    ;
  }).prototype = browser_client.BrowserClient.prototype;
  dart.addTypeTests(browser_client.BrowserClient);
  dart.addTypeCaches(browser_client.BrowserClient);
  dart.setMethodSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getMethods(browser_client.BrowserClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])
  }));
  dart.setLibraryUri(browser_client.BrowserClient, I[139]);
  dart.setFieldSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getFields(browser_client.BrowserClient.__proto__),
    [S$0._xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool),
    [S$0._isClosed$2]: dart.fieldType(core.bool)
  }));
  browser_client.createClient = function createClient() {
    ;
    return new browser_client.BrowserClient.new();
  };
  utils.mapToQuery = function mapToQuery(map, opts$) {
    let encoding = opts$ && 'encoding' in opts$ ? opts$.encoding : null;
    let pairs = T$.JSArrayOfListOfString().of([]);
    map[S$.$forEach](dart.fn((key, value) => {
      let t245, t245$;
      return pairs[S$.$add](T$.JSArrayOfString().of([core.Uri.encodeQueryComponent(key, {encoding: (t245 = encoding, t245 == null ? convert.utf8 : t245)}), core.Uri.encodeQueryComponent(value, {encoding: (t245$ = encoding, t245$ == null ? convert.utf8 : t245$)})]));
    }, T$.StringAndStringTovoid()));
    return pairs[S$.$map](core.String, dart.fn(pair => pair[S$.$_get](0) + "=" + pair[S$.$_get](1), T$.ListOfStringToString()))[S$.$join]("&");
  };
  utils.encodingForCharset = function encodingForCharset(charset, fallback = C[330] || CT.C330) {
    let t245;
    if (charset == null) return fallback;
    t245 = convert.Encoding.getByName(charset);
    return t245 == null ? fallback : t245;
  };
  utils.requiredEncodingForCharset = function requiredEncodingForCharset(charset) {
    let t245;
    t245 = convert.Encoding.getByName(charset);
    return t245 == null ? dart.throw(new core.FormatException.new("Unsupported encoding \"" + charset + "\".")) : t245;
  };
  utils.isPlainAscii = function isPlainAscii(string) {
    return utils._asciiOnly.hasMatch(string);
  };
  utils.toUint8List = function toUint8List(input) {
    if (typed_data.Uint8List.is(input)) return input;
    if (typed_data.TypedData.is(input)) {
      return typed_data.Uint8List.view(typed_data.TypedData.as(input)[S$0.$buffer]);
    }
    return _native_typed_data.NativeUint8List.fromList(input);
  };
  utils.toByteStream = function toByteStream(stream) {
    if (byte_stream.ByteStream.is(stream)) return stream;
    return new byte_stream.ByteStream.new(stream);
  };
  utils.onDone = function onDone(T, stream, onDone) {
    return stream.transform(T, new (async._StreamHandlerTransformer$(T, T)).new({handleDone: dart.fn(sink => {
        sink.close();
        onDone();
      }, dart.fnType(dart.void, [async.EventSink$(T)]))}));
  };
  dart.defineLazy(utils, {
    /*utils._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    }
  }, false);
  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(field, filePath, opts$) {
    let filename = opts$ && 'filename' in opts$ ? opts$.filename : null;
    let contentType = opts$ && 'contentType' in opts$ ? opts$.contentType : null;
    return dart.throw(new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available."));
  };
  dart.defineLazy(boundary_characters, {
    /*boundary_characters.boundaryCharacters*/get boundaryCharacters() {
      return C[331] || CT.C331;
    }
  }, false);
  digest_sink.DigestSink = class DigestSink extends core.Object {
    get value() {
      return dart.nullCheck(this[S$0._value]);
    }
    add(value) {
      digest.Digest.as(value);
      if (this[S$0._value] != null) dart.throw(new core.StateError.new("add may only be called once."));
      this[S$0._value] = value;
    }
    close() {
      if (this[S$0._value] == null) dart.throw(new core.StateError.new("add must be called once."));
    }
    static ['_#new#tearOff']() {
      return new digest_sink.DigestSink.new();
    }
  };
  (digest_sink.DigestSink.new = function() {
    this[S$0._value] = null;
    ;
  }).prototype = digest_sink.DigestSink.prototype;
  dart.addTypeTests(digest_sink.DigestSink);
  dart.addTypeCaches(digest_sink.DigestSink);
  digest_sink.DigestSink[dart.implements] = () => [core.Sink$(digest.Digest)];
  dart.setMethodSignature(digest_sink.DigestSink, () => ({
    __proto__: dart.getMethods(digest_sink.DigestSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(digest_sink.DigestSink, () => ({
    __proto__: dart.getGetters(digest_sink.DigestSink.__proto__),
    value: digest.Digest
  }));
  dart.setLibraryUri(digest_sink.DigestSink, I[140]);
  dart.setFieldSignature(digest_sink.DigestSink, () => ({
    __proto__: dart.getFields(digest_sink.DigestSink.__proto__),
    [S$0._value]: dart.fieldType(dart.nullable(digest.Digest))
  }));
  utils$.add32 = function add32(x, y) {
    return (x + y & 4294967295) >>> 0;
  };
  utils$.rotl32 = function rotl32(val, shift) {
    let modShift = shift & 31;
    return (val[S$0.$leftShift](modShift) & 4294967295 | ((val & 4294967295) >>> 0)[S$0.$rightShift](32 - modShift)) >>> 0;
  };
  dart.defineLazy(utils$, {
    /*utils$.mask32*/get mask32() {
      return 4294967295;
    },
    /*utils$.bitsPerByte*/get bitsPerByte() {
      return 8;
    },
    /*utils$.bytesPerWord*/get bytesPerWord() {
      return 4;
    }
  }, false);
  sha512_slowsinks._Sha64BitSink = class _Sha64BitSink extends hash_sink.HashSink {
    get digest() {
      return typed_data.Uint32List.view(this[S$0._digest$1][S$0.$buffer], 0, this.digestBytes);
    }
    [S$0._shr](bits, word, offset, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, bits < 32 && bits >= 0 ? word[S$.$_get](0 + offset)[S$0.$rightShift](bits) : 0);
      ret[S$.$_set](1 + offsetR, bits > 32 ? word[S$.$_get](0 + offset)[S$0.$rightShift](bits - 32) : bits === 32 ? word[S$.$_get](0 + offset) : bits >= 0 ? (word[S$.$_get](0 + offset)[S$0.$leftShift](32 - bits) | word[S$.$_get](1 + offset)[S$0.$rightShift](bits)) >>> 0 : 0);
    }
    [S$0._shl](bits, word, offset, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, bits > 32 ? word[S$.$_get](1 + offset)[S$0.$leftShift](bits - 32) : bits === 32 ? word[S$.$_get](1 + offset) : bits >= 0 ? (word[S$.$_get](0 + offset)[S$0.$leftShift](bits) | word[S$.$_get](1 + offset)[S$0.$rightShift](32 - bits)) >>> 0 : 0);
      ret[S$.$_set](1 + offsetR, bits < 32 && bits >= 0 ? word[S$.$_get](1 + offset)[S$0.$leftShift](bits) : 0);
    }
    [S$0._or](word1, offset1, word2, offset2, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (word1[S$.$_get](0 + offset1) | word2[S$.$_get](0 + offset2)) >>> 0);
      ret[S$.$_set](1 + offsetR, (word1[S$.$_get](1 + offset1) | word2[S$.$_get](1 + offset2)) >>> 0);
    }
    [S$0._xor](word1, offset1, word2, offset2, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (word1[S$.$_get](0 + offset1) ^ word2[S$.$_get](0 + offset2)) >>> 0);
      ret[S$.$_set](1 + offsetR, (word1[S$.$_get](1 + offset1) ^ word2[S$.$_get](1 + offset2)) >>> 0);
    }
    [S$0._add](word1, offset1, word2, offset2, ret, offsetR) {
      ret[S$.$_set](1 + offsetR, word1[S$.$_get](1 + offset1) + word2[S$.$_get](1 + offset2));
      ret[S$.$_set](0 + offsetR, word1[S$.$_get](0 + offset1) + word2[S$.$_get](0 + offset2) + (ret[S$.$_get](1 + offsetR) < word1[S$.$_get](1 + offset1) ? 1 : 0));
    }
    [S$0._addTo2](word1, offset1, word2, offset2) {
      let t246, t245, t246$, t245$;
      let addTemp = word1[S$.$_get](1 + offset1);
      t245 = word1;
      t246 = 1 + offset1;
      t245[S$.$_set](t246, t245[S$.$_get](t246) + word2[S$.$_get](1 + offset2));
      t245$ = word1;
      t246$ = 0 + offset1;
      t245$[S$.$_set](t246$, t245$[S$.$_get](t246$) + (word2[S$.$_get](0 + offset2) + (word1[S$.$_get](1 + offset1) < addTemp ? 1 : 0)));
    }
    [S$0._rotr](bits, word, offset, ret, offsetR) {
      this[S$0._shr](bits, word, offset, this[S$0._nums], 0);
      this[S$0._shl](64 - bits, word, offset, this[S$0._nums], 2);
      this[S$0._or](this[S$0._nums], 0, this[S$0._nums], 2, ret, offsetR);
    }
    [S$0._bsig0$1](word, offset, ret, offsetR) {
      this[S$0._rotr](28, word, offset, this[S$0._nums], 4);
      this[S$0._rotr](34, word, offset, this[S$0._nums], 6);
      this[S$0._rotr](39, word, offset, this[S$0._nums], 8);
      this[S$0._xor](this[S$0._nums], 6, this[S$0._nums], 8, this[S$0._nums], 10);
      this[S$0._xor](this[S$0._nums], 4, this[S$0._nums], 10, ret, offsetR);
    }
    [S$0._bsig1$1](word, offset, ret, offsetR) {
      this[S$0._rotr](14, word, offset, this[S$0._nums], 4);
      this[S$0._rotr](18, word, offset, this[S$0._nums], 6);
      this[S$0._rotr](41, word, offset, this[S$0._nums], 8);
      this[S$0._xor](this[S$0._nums], 6, this[S$0._nums], 8, this[S$0._nums], 10);
      this[S$0._xor](this[S$0._nums], 4, this[S$0._nums], 10, ret, offsetR);
    }
    [S$0._ssig0$1](word, offset, ret, offsetR) {
      this[S$0._rotr](1, word, offset, this[S$0._nums], 4);
      this[S$0._rotr](8, word, offset, this[S$0._nums], 6);
      this[S$0._shr](7, word, offset, this[S$0._nums], 8);
      this[S$0._xor](this[S$0._nums], 6, this[S$0._nums], 8, this[S$0._nums], 10);
      this[S$0._xor](this[S$0._nums], 4, this[S$0._nums], 10, ret, offsetR);
    }
    [S$0._ssig1$1](word, offset, ret, offsetR) {
      this[S$0._rotr](19, word, offset, this[S$0._nums], 4);
      this[S$0._rotr](61, word, offset, this[S$0._nums], 6);
      this[S$0._shr](6, word, offset, this[S$0._nums], 8);
      this[S$0._xor](this[S$0._nums], 6, this[S$0._nums], 8, this[S$0._nums], 10);
      this[S$0._xor](this[S$0._nums], 4, this[S$0._nums], 10, ret, offsetR);
    }
    [S$0._ch$1](x, offsetX, y, offsetY, z, offsetZ, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (x[S$.$_get](0 + offsetX) & (y[S$.$_get](0 + offsetY) ^ z[S$.$_get](0 + offsetZ)) >>> 0 ^ z[S$.$_get](0 + offsetZ)) >>> 0);
      ret[S$.$_set](1 + offsetR, (x[S$.$_get](1 + offsetX) & (y[S$.$_get](1 + offsetY) ^ z[S$.$_get](1 + offsetZ)) >>> 0 ^ z[S$.$_get](1 + offsetZ)) >>> 0);
    }
    [S$0._maj$1](x, offsetX, y, offsetY, z, offsetZ, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (x[S$.$_get](0 + offsetX) & (y[S$.$_get](0 + offsetY) | z[S$.$_get](0 + offsetZ)) >>> 0 | (y[S$.$_get](0 + offsetY) & z[S$.$_get](0 + offsetZ)) >>> 0) >>> 0);
      ret[S$.$_set](1 + offsetR, (x[S$.$_get](1 + offsetX) & (y[S$.$_get](1 + offsetY) | z[S$.$_get](1 + offsetZ)) >>> 0 | (y[S$.$_get](1 + offsetY) & z[S$.$_get](1 + offsetZ)) >>> 0) >>> 0);
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 32)) dart.assertFailed(null, I[141], 213, 12, "chunk.length == 32");
      for (let i = 0; i < 32; i = i + 1) {
        this[S$0._extended$2][S$.$_set](i, chunk[S$.$_get](i));
      }
      for (let i = 32; i < 160; i = i + 2) {
        this[S$0._ssig1$1](this[S$0._extended$2], i - 2 * 2, this[S$0._nums], 28);
        this[S$0._add](this[S$0._nums], 28, this[S$0._extended$2], i - 7 * 2, this[S$0._nums], 30);
        this[S$0._ssig0$1](this[S$0._extended$2], i - 15 * 2, this[S$0._nums], 28);
        this[S$0._add](this[S$0._nums], 28, this[S$0._extended$2], i - 16 * 2, this[S$0._nums], 32);
        this[S$0._add](this[S$0._nums], 30, this[S$0._nums], 32, this[S$0._extended$2], i);
      }
      this[S$0._nums][S$0.$setRange](12, 26 + 2, this[S$0._digest$1]);
      for (let i = 0; i < 160; i = i + 2) {
        this[S$0._bsig1$1](this[S$0._nums], 20, this[S$0._nums], 28);
        this[S$0._add](this[S$0._nums], 26, this[S$0._nums], 28, this[S$0._nums], 30);
        this[S$0._ch$1](this[S$0._nums], 20, this[S$0._nums], 22, this[S$0._nums], 24, this[S$0._nums], 32);
        this[S$0._add](this[S$0._nums], 30, this[S$0._nums], 32, this[S$0._nums], 34);
        this[S$0._add](sha512_slowsinks._noise32, i, this[S$0._extended$2], i, this[S$0._nums], 36);
        this[S$0._add](this[S$0._nums], 34, this[S$0._nums], 36, this[S$0._nums], 28);
        this[S$0._bsig0$1](this[S$0._nums], 12, this[S$0._nums], 32);
        this[S$0._maj$1](this[S$0._nums], 12, this[S$0._nums], 14, this[S$0._nums], 16, this[S$0._nums], 34);
        this[S$0._add](this[S$0._nums], 32, this[S$0._nums], 34, this[S$0._nums], 30);
        this[S$0._nums][S$.$_set](26, this[S$0._nums][S$.$_get](24));
        this[S$0._nums][S$.$_set](26 + 1, this[S$0._nums][S$.$_get](24 + 1));
        this[S$0._nums][S$.$_set](24, this[S$0._nums][S$.$_get](22));
        this[S$0._nums][S$.$_set](24 + 1, this[S$0._nums][S$.$_get](22 + 1));
        this[S$0._nums][S$.$_set](22, this[S$0._nums][S$.$_get](20));
        this[S$0._nums][S$.$_set](22 + 1, this[S$0._nums][S$.$_get](20 + 1));
        this[S$0._add](this[S$0._nums], 18, this[S$0._nums], 28, this[S$0._nums], 20);
        this[S$0._nums][S$.$_set](18, this[S$0._nums][S$.$_get](16));
        this[S$0._nums][S$.$_set](18 + 1, this[S$0._nums][S$.$_get](16 + 1));
        this[S$0._nums][S$.$_set](16, this[S$0._nums][S$.$_get](14));
        this[S$0._nums][S$.$_set](16 + 1, this[S$0._nums][S$.$_get](14 + 1));
        this[S$0._nums][S$.$_set](14, this[S$0._nums][S$.$_get](12));
        this[S$0._nums][S$.$_set](14 + 1, this[S$0._nums][S$.$_get](12 + 1));
        this[S$0._add](this[S$0._nums], 28, this[S$0._nums], 30, this[S$0._nums], 12);
      }
      this[S$0._addTo2](this[S$0._digest$1], 0, this[S$0._nums], 12);
      this[S$0._addTo2](this[S$0._digest$1], 2, this[S$0._nums], 14);
      this[S$0._addTo2](this[S$0._digest$1], 4, this[S$0._nums], 16);
      this[S$0._addTo2](this[S$0._digest$1], 6, this[S$0._nums], 18);
      this[S$0._addTo2](this[S$0._digest$1], 8, this[S$0._nums], 20);
      this[S$0._addTo2](this[S$0._digest$1], 10, this[S$0._nums], 22);
      this[S$0._addTo2](this[S$0._digest$1], 12, this[S$0._nums], 24);
      this[S$0._addTo2](this[S$0._digest$1], 14, this[S$0._nums], 26);
    }
  };
  (sha512_slowsinks._Sha64BitSink.new = function(sink, _digest) {
    this[S$0._extended$2] = _native_typed_data.NativeUint32List.new(160);
    this[S$0._nums] = _native_typed_data.NativeUint32List.new(12 + 16 + 10);
    this[S$0._digest$1] = _digest;
    sha512_slowsinks._Sha64BitSink.__proto__.new.call(this, sink, 32, {signatureBytes: 16});
    ;
  }).prototype = sha512_slowsinks._Sha64BitSink.prototype;
  dart.addTypeTests(sha512_slowsinks._Sha64BitSink);
  dart.addTypeCaches(sha512_slowsinks._Sha64BitSink);
  dart.setMethodSignature(sha512_slowsinks._Sha64BitSink, () => ({
    __proto__: dart.getMethods(sha512_slowsinks._Sha64BitSink.__proto__),
    [S$0._shr]: dart.fnType(dart.void, [core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._shl]: dart.fnType(dart.void, [core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._or]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._xor]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._add]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._addTo2]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._rotr]: dart.fnType(dart.void, [core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._bsig0$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._bsig1$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._ssig0$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._ssig1$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._ch$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$0._maj$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setGetterSignature(sha512_slowsinks._Sha64BitSink, () => ({
    __proto__: dart.getGetters(sha512_slowsinks._Sha64BitSink.__proto__),
    digest: typed_data.Uint32List
  }));
  dart.setLibraryUri(sha512_slowsinks._Sha64BitSink, I[142]);
  dart.setFieldSignature(sha512_slowsinks._Sha64BitSink, () => ({
    __proto__: dart.getFields(sha512_slowsinks._Sha64BitSink.__proto__),
    [S$0._digest$1]: dart.finalFieldType(typed_data.Uint32List),
    [S$0._extended$2]: dart.finalFieldType(typed_data.Uint32List),
    [S$0._nums]: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.setStaticFieldSignature(sha512_slowsinks._Sha64BitSink, () => ['_rotrIndex1', '_rotrIndex2', '_sigIndex1', '_sigIndex2', '_sigIndex3', '_sigIndex4', '_aIndex', '_bIndex', '_cIndex', '_dIndex', '_eIndex', '_fIndex', '_gIndex', '_hIndex', '_tmp1', '_tmp2', '_tmp3', '_tmp4', '_tmp5']);
  dart.defineLazy(sha512_slowsinks._Sha64BitSink, {
    /*sha512_slowsinks._Sha64BitSink._rotrIndex1*/get _rotrIndex1() {
      return 0;
    },
    /*sha512_slowsinks._Sha64BitSink._rotrIndex2*/get _rotrIndex2() {
      return 2;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex1*/get _sigIndex1() {
      return 4;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex2*/get _sigIndex2() {
      return 6;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex3*/get _sigIndex3() {
      return 8;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex4*/get _sigIndex4() {
      return 10;
    },
    /*sha512_slowsinks._Sha64BitSink._aIndex*/get _aIndex() {
      return 12;
    },
    /*sha512_slowsinks._Sha64BitSink._bIndex*/get _bIndex() {
      return 14;
    },
    /*sha512_slowsinks._Sha64BitSink._cIndex*/get _cIndex() {
      return 16;
    },
    /*sha512_slowsinks._Sha64BitSink._dIndex*/get _dIndex() {
      return 18;
    },
    /*sha512_slowsinks._Sha64BitSink._eIndex*/get _eIndex() {
      return 20;
    },
    /*sha512_slowsinks._Sha64BitSink._fIndex*/get _fIndex() {
      return 22;
    },
    /*sha512_slowsinks._Sha64BitSink._gIndex*/get _gIndex() {
      return 24;
    },
    /*sha512_slowsinks._Sha64BitSink._hIndex*/get _hIndex() {
      return 26;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp1*/get _tmp1() {
      return 28;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp2*/get _tmp2() {
      return 30;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp3*/get _tmp3() {
      return 32;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp4*/get _tmp4() {
      return 34;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp5*/get _tmp5() {
      return 36;
    }
  }, false);
  sha512_slowsinks.Sha384Sink = class Sha384Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$0.digestBytes];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha384Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha384Sink.new = function(sink) {
    this[S$0.digestBytes] = 12;
    sha512_slowsinks.Sha384Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428])));
    ;
  }).prototype = sha512_slowsinks.Sha384Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha384Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha384Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha384Sink, I[142]);
  dart.setFieldSignature(sha512_slowsinks.Sha384Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha384Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  sha512_slowsinks.Sha512Sink = class Sha512Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$0.digestBytes$1];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha512Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha512Sink.new = function(sink) {
    this[S$0.digestBytes$1] = 16;
    sha512_slowsinks.Sha512Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209])));
    ;
  }).prototype = sha512_slowsinks.Sha512Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha512Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha512Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha512Sink, I[142]);
  dart.setFieldSignature(sha512_slowsinks.Sha512Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha512Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  sha512_slowsinks.Sha512224Sink = class Sha512224Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$0.digestBytes$2];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha512224Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha512224Sink.new = function(sink) {
    this[S$0.digestBytes$2] = 7;
    sha512_slowsinks.Sha512224Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([2352822216, 424955298, 1944164710, 2312950998, 502970286, 855612546, 1738396948, 1479516111, 258812777, 2077511080, 2011393907, 79989058, 1067287976, 1780299464, 286451373, 2446758561])));
    ;
  }).prototype = sha512_slowsinks.Sha512224Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha512224Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha512224Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha512224Sink, I[142]);
  dart.setFieldSignature(sha512_slowsinks.Sha512224Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha512224Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  sha512_slowsinks.Sha512256Sink = class Sha512256Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$0.digestBytes$3];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha512256Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha512256Sink.new = function(sink) {
    this[S$0.digestBytes$3] = 8;
    sha512_slowsinks.Sha512256Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882])));
    ;
  }).prototype = sha512_slowsinks.Sha512256Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha512256Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha512256Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha512256Sink, I[142]);
  dart.setFieldSignature(sha512_slowsinks.Sha512256Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha512256Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(sha512_slowsinks, {
    /*sha512_slowsinks._noise32*/get _noise32() {
      return _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591]));
    }
  }, false);
  platform_navigation_delegate.PlatformNavigationDelegate = class PlatformNavigationDelegate extends plugin_platform_interface.PlatformInterface {
    get params() {
      return this[S$0.params$2];
    }
    set params(value) {
      super.params = value;
    }
    static new(params) {
      if (!(webview_platform.WebViewPlatform.instance != null)) dart.assertFailed("A platform implementation for `webview_flutter` has not been set. Please " + "ensure that an implementation of `WebViewPlatform` has been set to " + "`WebViewPlatform.instance` before use. For unit testing, " + "`WebViewPlatform.instance` can be set with your own test implementation.", I[143], 43, 7, "WebViewPlatform.instance != null");
      let callbackDelegate = dart.nullCheck(webview_platform.WebViewPlatform.instance).createPlatformNavigationDelegate(params);
      plugin_platform_interface.PlatformInterface.verify(callbackDelegate, platform_navigation_delegate.PlatformNavigationDelegate._token);
      return callbackDelegate;
    }
    static ['_#new#tearOff'](params) {
      return platform_navigation_delegate.PlatformNavigationDelegate.new(params);
    }
    setOnNavigationRequest(onNavigationRequest) {
      dart.throw(new core.UnimplementedError.new("setOnNavigationRequest is not implemented on the current platform."));
    }
    setOnPageStarted(onPageStarted) {
      dart.throw(new core.UnimplementedError.new("setOnPageStarted is not implemented on the current platform."));
    }
    setOnPageFinished(onPageFinished) {
      dart.throw(new core.UnimplementedError.new("setOnPageFinished is not implemented on the current platform."));
    }
    setOnHttpError(onHttpError) {
      dart.throw(new core.UnimplementedError.new("setOnHttpError is not implemented on the current platform."));
    }
    setOnProgress(onProgress) {
      dart.throw(new core.UnimplementedError.new("setOnProgress is not implemented on the current platform."));
    }
    setOnWebResourceError(onWebResourceError) {
      dart.throw(new core.UnimplementedError.new("setOnWebResourceError is not implemented on the current platform."));
    }
    setOnUrlChange(onUrlChange) {
      dart.throw(new core.UnimplementedError.new("setOnUrlChange is not implemented on the current platform."));
    }
  };
  (platform_navigation_delegate.PlatformNavigationDelegate.implementation = function(params) {
    this[S$0.params$2] = params;
    platform_navigation_delegate.PlatformNavigationDelegate.__proto__.new.call(this, {token: platform_navigation_delegate.PlatformNavigationDelegate._token});
    ;
  }).prototype = platform_navigation_delegate.PlatformNavigationDelegate.prototype;
  dart.addTypeTests(platform_navigation_delegate.PlatformNavigationDelegate);
  dart.addTypeCaches(platform_navigation_delegate.PlatformNavigationDelegate);
  dart.setMethodSignature(platform_navigation_delegate.PlatformNavigationDelegate, () => ({
    __proto__: dart.getMethods(platform_navigation_delegate.PlatformNavigationDelegate.__proto__),
    setOnNavigationRequest: dart.fnType(async.Future$(dart.void), [dart.fnType(async.FutureOr$(navigation_decision.NavigationDecision), [navigation_request.NavigationRequest])]),
    setOnPageStarted: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [core.String])]),
    setOnPageFinished: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [core.String])]),
    setOnHttpError: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [http_response_error.HttpResponseError])]),
    setOnProgress: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [core.int])]),
    setOnWebResourceError: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [web_resource_error.WebResourceError])]),
    setOnUrlChange: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [url_change.UrlChange])])
  }));
  dart.setStaticMethodSignature(platform_navigation_delegate.PlatformNavigationDelegate, () => ['new']);
  dart.setLibraryUri(platform_navigation_delegate.PlatformNavigationDelegate, I[144]);
  dart.setFieldSignature(platform_navigation_delegate.PlatformNavigationDelegate, () => ({
    __proto__: dart.getFields(platform_navigation_delegate.PlatformNavigationDelegate.__proto__),
    params: dart.finalFieldType(platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams)
  }));
  dart.setStaticFieldSignature(platform_navigation_delegate.PlatformNavigationDelegate, () => ['_token']);
  dart.defineLazy(platform_navigation_delegate.PlatformNavigationDelegate, {
    /*platform_navigation_delegate.PlatformNavigationDelegate._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_webview_controller.PlatformWebViewController = class PlatformWebViewController extends plugin_platform_interface.PlatformInterface {
    get params() {
      return this[S$0.params$3];
    }
    set params(value) {
      super.params = value;
    }
    static new(params) {
      if (!(webview_platform.WebViewPlatform.instance != null)) dart.assertFailed("A platform implementation for `webview_flutter` has not been set. Please " + "ensure that an implementation of `WebViewPlatform` has been set to " + "`WebViewPlatform.instance` before use. For unit testing, " + "`WebViewPlatform.instance` can be set with your own test implementation.", I[145], 26, 7, "WebViewPlatform.instance != null");
      let webViewControllerDelegate = dart.nullCheck(webview_platform.WebViewPlatform.instance).createPlatformWebViewController(params);
      plugin_platform_interface.PlatformInterface.verify(webViewControllerDelegate, platform_webview_controller.PlatformWebViewController._token);
      return webViewControllerDelegate;
    }
    static ['_#new#tearOff'](params) {
      return platform_webview_controller.PlatformWebViewController.new(params);
    }
    loadFile(absoluteFilePath) {
      dart.throw(new core.UnimplementedError.new("loadFile is not implemented on the current platform"));
    }
    loadFlutterAsset(key) {
      dart.throw(new core.UnimplementedError.new("loadFlutterAsset is not implemented on the current platform"));
    }
    loadHtmlString(html, opts$) {
      let baseUrl = opts$ && 'baseUrl' in opts$ ? opts$.baseUrl : null;
      dart.throw(new core.UnimplementedError.new("loadHtmlString is not implemented on the current platform"));
    }
    loadRequest(params) {
      dart.throw(new core.UnimplementedError.new("loadRequest is not implemented on the current platform"));
    }
    currentUrl() {
      dart.throw(new core.UnimplementedError.new("currentUrl is not implemented on the current platform"));
    }
    canGoBack() {
      dart.throw(new core.UnimplementedError.new("canGoBack is not implemented on the current platform"));
    }
    canGoForward() {
      dart.throw(new core.UnimplementedError.new("canGoForward is not implemented on the current platform"));
    }
    goBack() {
      dart.throw(new core.UnimplementedError.new("goBack is not implemented on the current platform"));
    }
    goForward() {
      dart.throw(new core.UnimplementedError.new("goForward is not implemented on the current platform"));
    }
    reload() {
      dart.throw(new core.UnimplementedError.new("reload is not implemented on the current platform"));
    }
    clearCache() {
      dart.throw(new core.UnimplementedError.new("clearCache is not implemented on the current platform"));
    }
    clearLocalStorage() {
      dart.throw(new core.UnimplementedError.new("clearLocalStorage is not implemented on the current platform"));
    }
    setPlatformNavigationDelegate(handler) {
      dart.throw(new core.UnimplementedError.new("setPlatformNavigationDelegate is not implemented on the current platform"));
    }
    runJavaScript(javaScript) {
      dart.throw(new core.UnimplementedError.new("runJavaScript is not implemented on the current platform"));
    }
    runJavaScriptReturningResult(javaScript) {
      dart.throw(new core.UnimplementedError.new("runJavaScriptReturningResult is not implemented on the current platform"));
    }
    addJavaScriptChannel(javaScriptChannelParams) {
      dart.throw(new core.UnimplementedError.new("addJavaScriptChannel is not implemented on the current platform"));
    }
    removeJavaScriptChannel(javaScriptChannelName) {
      dart.throw(new core.UnimplementedError.new("removeJavaScriptChannel is not implemented on the current platform"));
    }
    getTitle() {
      dart.throw(new core.UnimplementedError.new("getTitle is not implemented on the current platform"));
    }
    scrollTo(x, y) {
      dart.throw(new core.UnimplementedError.new("scrollTo is not implemented on the current platform"));
    }
    scrollBy(x, y) {
      dart.throw(new core.UnimplementedError.new("scrollBy is not implemented on the current platform"));
    }
    getScrollPosition() {
      dart.throw(new core.UnimplementedError.new("getScrollPosition is not implemented on the current platform"));
    }
    enableZoom(enabled) {
      dart.throw(new core.UnimplementedError.new("enableZoom is not implemented on the current platform"));
    }
    setBackgroundColor(color) {
      dart.throw(new core.UnimplementedError.new("setBackgroundColor is not implemented on the current platform"));
    }
    setJavaScriptMode(javaScriptMode) {
      dart.throw(new core.UnimplementedError.new("setJavaScriptMode is not implemented on the current platform"));
    }
    setUserAgent(userAgent) {
      dart.throw(new core.UnimplementedError.new("setUserAgent is not implemented on the current platform"));
    }
    setOnPlatformPermissionRequest(onPermissionRequest) {
      dart.throw(new core.UnimplementedError.new("setOnPermissionRequest is not implemented on the current platform"));
    }
    getUserAgent() {
      dart.throw(new core.UnimplementedError.new("getUserAgent is not implemented on the current platform"));
    }
    setOnConsoleMessage(onConsoleMessage) {
      dart.throw(new core.UnimplementedError.new("setOnConsoleMessage is not implemented on the current platform"));
    }
  };
  (platform_webview_controller.PlatformWebViewController.implementation = function(params) {
    this[S$0.params$3] = params;
    platform_webview_controller.PlatformWebViewController.__proto__.new.call(this, {token: platform_webview_controller.PlatformWebViewController._token});
    ;
  }).prototype = platform_webview_controller.PlatformWebViewController.prototype;
  dart.addTypeTests(platform_webview_controller.PlatformWebViewController);
  dart.addTypeCaches(platform_webview_controller.PlatformWebViewController);
  dart.setMethodSignature(platform_webview_controller.PlatformWebViewController, () => ({
    __proto__: dart.getMethods(platform_webview_controller.PlatformWebViewController.__proto__),
    loadFile: dart.fnType(async.Future$(dart.void), [core.String]),
    loadFlutterAsset: dart.fnType(async.Future$(dart.void), [core.String]),
    loadHtmlString: dart.fnType(async.Future$(dart.void), [core.String], {baseUrl: dart.nullable(core.String)}, {}),
    loadRequest: dart.fnType(async.Future$(dart.void), [load_request_params.LoadRequestParams]),
    currentUrl: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    canGoBack: dart.fnType(async.Future$(core.bool), []),
    canGoForward: dart.fnType(async.Future$(core.bool), []),
    goBack: dart.fnType(async.Future$(dart.void), []),
    goForward: dart.fnType(async.Future$(dart.void), []),
    reload: dart.fnType(async.Future$(dart.void), []),
    clearCache: dart.fnType(async.Future$(dart.void), []),
    clearLocalStorage: dart.fnType(async.Future$(dart.void), []),
    setPlatformNavigationDelegate: dart.fnType(async.Future$(dart.void), [platform_navigation_delegate.PlatformNavigationDelegate]),
    runJavaScript: dart.fnType(async.Future$(dart.void), [core.String]),
    runJavaScriptReturningResult: dart.fnType(async.Future$(core.Object), [core.String]),
    addJavaScriptChannel: dart.fnType(async.Future$(dart.void), [platform_webview_controller.JavaScriptChannelParams]),
    removeJavaScriptChannel: dart.fnType(async.Future$(dart.void), [core.String]),
    getTitle: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    scrollTo: dart.fnType(async.Future$(dart.void), [core.int, core.int]),
    scrollBy: dart.fnType(async.Future$(dart.void), [core.int, core.int]),
    getScrollPosition: dart.fnType(async.Future$(ui.Offset), []),
    enableZoom: dart.fnType(async.Future$(dart.void), [core.bool]),
    setBackgroundColor: dart.fnType(async.Future$(dart.void), [ui.Color]),
    setJavaScriptMode: dart.fnType(async.Future$(dart.void), [javascript_mode.JavaScriptMode]),
    setUserAgent: dart.fnType(async.Future$(dart.void), [dart.nullable(core.String)]),
    setOnPlatformPermissionRequest: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [platform_webview_permission_request.PlatformWebViewPermissionRequest])]),
    getUserAgent: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    setOnConsoleMessage: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [javascript_console_message.JavaScriptConsoleMessage])])
  }));
  dart.setStaticMethodSignature(platform_webview_controller.PlatformWebViewController, () => ['new']);
  dart.setLibraryUri(platform_webview_controller.PlatformWebViewController, I[146]);
  dart.setFieldSignature(platform_webview_controller.PlatformWebViewController, () => ({
    __proto__: dart.getFields(platform_webview_controller.PlatformWebViewController.__proto__),
    params: dart.finalFieldType(platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams)
  }));
  dart.setStaticFieldSignature(platform_webview_controller.PlatformWebViewController, () => ['_token']);
  dart.defineLazy(platform_webview_controller.PlatformWebViewController, {
    /*platform_webview_controller.PlatformWebViewController._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_webview_controller.JavaScriptChannelParams = class JavaScriptChannelParams extends core.Object {
    get name() {
      return this[S$0.name$4];
    }
    set name(value) {
      super.name = value;
    }
    get onMessageReceived() {
      return this[S$0.onMessageReceived];
    }
    set onMessageReceived(value) {
      super.onMessageReceived = value;
    }
    static ['_#new#tearOff'](opts$) {
      let name = opts$ && 'name' in opts$ ? opts$.name : null;
      let onMessageReceived = opts$ && 'onMessageReceived' in opts$ ? opts$.onMessageReceived : null;
      return new platform_webview_controller.JavaScriptChannelParams.new({name: name, onMessageReceived: onMessageReceived});
    }
  };
  (platform_webview_controller.JavaScriptChannelParams.new = function(opts$) {
    let name = opts$ && 'name' in opts$ ? opts$.name : null;
    let onMessageReceived = opts$ && 'onMessageReceived' in opts$ ? opts$.onMessageReceived : null;
    this[S$0.name$4] = name;
    this[S$0.onMessageReceived] = onMessageReceived;
    ;
  }).prototype = platform_webview_controller.JavaScriptChannelParams.prototype;
  dart.addTypeTests(platform_webview_controller.JavaScriptChannelParams);
  dart.addTypeCaches(platform_webview_controller.JavaScriptChannelParams);
  dart.setLibraryUri(platform_webview_controller.JavaScriptChannelParams, I[146]);
  dart.setFieldSignature(platform_webview_controller.JavaScriptChannelParams, () => ({
    __proto__: dart.getFields(platform_webview_controller.JavaScriptChannelParams.__proto__),
    name: dart.finalFieldType(core.String),
    onMessageReceived: dart.finalFieldType(dart.fnType(dart.void, [javascript_message.JavaScriptMessage]))
  }));
  platform_webview_cookie_manager.PlatformWebViewCookieManager = class PlatformWebViewCookieManager extends plugin_platform_interface.PlatformInterface {
    get params() {
      return this[S$0.params$4];
    }
    set params(value) {
      super.params = value;
    }
    static new(params) {
      if (!(webview_platform.WebViewPlatform.instance != null)) dart.assertFailed("A platform implementation for `webview_flutter` has not been set. Please " + "ensure that an implementation of `WebViewPlatform` has been set to " + "`WebViewPlatform.instance` before use. For unit testing, " + "`WebViewPlatform.instance` can be set with your own test implementation.", I[147], 24, 7, "WebViewPlatform.instance != null");
      let cookieManagerDelegate = dart.nullCheck(webview_platform.WebViewPlatform.instance).createPlatformCookieManager(params);
      plugin_platform_interface.PlatformInterface.verify(cookieManagerDelegate, platform_webview_cookie_manager.PlatformWebViewCookieManager._token);
      return cookieManagerDelegate;
    }
    static ['_#new#tearOff'](params) {
      return platform_webview_cookie_manager.PlatformWebViewCookieManager.new(params);
    }
    clearCookies() {
      dart.throw(new core.UnimplementedError.new("clearCookies is not implemented on the current platform"));
    }
    setCookie(cookie) {
      dart.throw(new core.UnimplementedError.new("setCookie is not implemented on the current platform"));
    }
  };
  (platform_webview_cookie_manager.PlatformWebViewCookieManager.implementation = function(params) {
    this[S$0.params$4] = params;
    platform_webview_cookie_manager.PlatformWebViewCookieManager.__proto__.new.call(this, {token: platform_webview_cookie_manager.PlatformWebViewCookieManager._token});
    ;
  }).prototype = platform_webview_cookie_manager.PlatformWebViewCookieManager.prototype;
  dart.addTypeTests(platform_webview_cookie_manager.PlatformWebViewCookieManager);
  dart.addTypeCaches(platform_webview_cookie_manager.PlatformWebViewCookieManager);
  dart.setMethodSignature(platform_webview_cookie_manager.PlatformWebViewCookieManager, () => ({
    __proto__: dart.getMethods(platform_webview_cookie_manager.PlatformWebViewCookieManager.__proto__),
    clearCookies: dart.fnType(async.Future$(core.bool), []),
    setCookie: dart.fnType(async.Future$(dart.void), [webview_cookie.WebViewCookie])
  }));
  dart.setStaticMethodSignature(platform_webview_cookie_manager.PlatformWebViewCookieManager, () => ['new']);
  dart.setLibraryUri(platform_webview_cookie_manager.PlatformWebViewCookieManager, I[148]);
  dart.setFieldSignature(platform_webview_cookie_manager.PlatformWebViewCookieManager, () => ({
    __proto__: dart.getFields(platform_webview_cookie_manager.PlatformWebViewCookieManager.__proto__),
    params: dart.finalFieldType(platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams)
  }));
  dart.setStaticFieldSignature(platform_webview_cookie_manager.PlatformWebViewCookieManager, () => ['_token']);
  dart.defineLazy(platform_webview_cookie_manager.PlatformWebViewCookieManager, {
    /*platform_webview_cookie_manager.PlatformWebViewCookieManager._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_webview_widget.PlatformWebViewWidget = class PlatformWebViewWidget extends plugin_platform_interface.PlatformInterface {
    get params() {
      return this[S$0.params$5];
    }
    set params(value) {
      super.params = value;
    }
    static new(params) {
      if (!(webview_platform.WebViewPlatform.instance != null)) dart.assertFailed("A platform implementation for `webview_flutter` has not been set. Please " + "ensure that an implementation of `WebViewPlatform` has been set to " + "`WebViewPlatform.instance` before use. For unit testing, " + "`WebViewPlatform.instance` can be set with your own test implementation.", I[149], 16, 7, "WebViewPlatform.instance != null");
      let webViewWidgetDelegate = dart.nullCheck(webview_platform.WebViewPlatform.instance).createPlatformWebViewWidget(params);
      plugin_platform_interface.PlatformInterface.verify(webViewWidgetDelegate, platform_webview_widget.PlatformWebViewWidget._token);
      return webViewWidgetDelegate;
    }
    static ['_#new#tearOff'](params) {
      return platform_webview_widget.PlatformWebViewWidget.new(params);
    }
  };
  (platform_webview_widget.PlatformWebViewWidget.implementation = function(params) {
    this[S$0.params$5] = params;
    platform_webview_widget.PlatformWebViewWidget.__proto__.new.call(this, {token: platform_webview_widget.PlatformWebViewWidget._token});
    ;
  }).prototype = platform_webview_widget.PlatformWebViewWidget.prototype;
  dart.addTypeTests(platform_webview_widget.PlatformWebViewWidget);
  dart.addTypeCaches(platform_webview_widget.PlatformWebViewWidget);
  dart.setStaticMethodSignature(platform_webview_widget.PlatformWebViewWidget, () => ['new']);
  dart.setLibraryUri(platform_webview_widget.PlatformWebViewWidget, I[150]);
  dart.setFieldSignature(platform_webview_widget.PlatformWebViewWidget, () => ({
    __proto__: dart.getFields(platform_webview_widget.PlatformWebViewWidget.__proto__),
    params: dart.finalFieldType(platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams)
  }));
  dart.setStaticFieldSignature(platform_webview_widget.PlatformWebViewWidget, () => ['_token']);
  dart.defineLazy(platform_webview_widget.PlatformWebViewWidget, {
    /*platform_webview_widget.PlatformWebViewWidget._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  webview_platform.WebViewPlatform = class WebViewPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return webview_platform.WebViewPlatform._instance;
    }
    static set instance(instance) {
      if (instance == null) {
        dart.throw(new core.AssertionError.new("Platform interfaces can only be set to a non-null instance"));
      }
      plugin_platform_interface.PlatformInterface.verify(instance, webview_platform.WebViewPlatform._token);
      webview_platform.WebViewPlatform._instance = instance;
    }
    createPlatformCookieManager(params) {
      dart.throw(new core.UnimplementedError.new("createPlatformCookieManager is not implemented on the current platform."));
    }
    createPlatformNavigationDelegate(params) {
      dart.throw(new core.UnimplementedError.new("createPlatformNavigationDelegate is not implemented on the current platform."));
    }
    createPlatformWebViewController(params) {
      dart.throw(new core.UnimplementedError.new("createPlatformWebViewController is not implemented on the current platform."));
    }
    createPlatformWebViewWidget(params) {
      dart.throw(new core.UnimplementedError.new("createPlatformWebViewWidget is not implemented on the current platform."));
    }
  };
  (webview_platform.WebViewPlatform.new = function() {
    webview_platform.WebViewPlatform.__proto__.new.call(this, {token: webview_platform.WebViewPlatform._token});
    ;
  }).prototype = webview_platform.WebViewPlatform.prototype;
  dart.addTypeTests(webview_platform.WebViewPlatform);
  dart.addTypeCaches(webview_platform.WebViewPlatform);
  dart.setMethodSignature(webview_platform.WebViewPlatform, () => ({
    __proto__: dart.getMethods(webview_platform.WebViewPlatform.__proto__),
    createPlatformCookieManager: dart.fnType(platform_webview_cookie_manager.PlatformWebViewCookieManager, [platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams]),
    createPlatformNavigationDelegate: dart.fnType(platform_navigation_delegate.PlatformNavigationDelegate, [platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams]),
    createPlatformWebViewController: dart.fnType(platform_webview_controller.PlatformWebViewController, [platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams]),
    createPlatformWebViewWidget: dart.fnType(platform_webview_widget.PlatformWebViewWidget, [platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams])
  }));
  dart.setStaticGetterSignature(webview_platform.WebViewPlatform, () => ['instance']);
  dart.setStaticSetterSignature(webview_platform.WebViewPlatform, () => ['instance']);
  dart.setLibraryUri(webview_platform.WebViewPlatform, I[151]);
  dart.setStaticFieldSignature(webview_platform.WebViewPlatform, () => ['_token', '_instance']);
  dart.defineLazy(webview_platform.WebViewPlatform, {
    /*webview_platform.WebViewPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*webview_platform.WebViewPlatform._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  dart.defineLazy(version$2, {
    /*version$2.version*/get version() {
      return "1.3.2";
    }
  }, false);
  const _is_Subject_default = Symbol('_is_Subject_default');
  subject.Subject$ = dart.generic(T => {
    var __t$_StreamSinkWrapperOfT = () => (__t$_StreamSinkWrapperOfT = dart.constFn(subject._StreamSinkWrapper$(T)))();
    var __t$_SubjectStreamOfT = () => (__t$_SubjectStreamOfT = dart.constFn(subject._SubjectStream$(T)))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    class Subject extends async.StreamView$(T) {
      get sink() {
        return new (__t$_StreamSinkWrapperOfT()).new(this);
      }
      get onListen() {
        return this[S$0._controller$3].onListen;
      }
      set onListen(onListenHandler) {
        this[S$0._controller$3].onListen = onListenHandler;
      }
      get stream() {
        return new (__t$_SubjectStreamOfT()).new(this);
      }
      get onPause() {
        return dart.throw(new core.UnsupportedError.new("Subjects do not support pause callbacks"));
      }
      set onPause(onPauseHandler) {
        return dart.throw(new core.UnsupportedError.new("Subjects do not support pause callbacks"));
      }
      get onResume() {
        return dart.throw(new core.UnsupportedError.new("Subjects do not support resume callbacks"));
      }
      set onResume(onResumeHandler) {
        return dart.throw(new core.UnsupportedError.new("Subjects do not support resume callbacks"));
      }
      get onCancel() {
        return this[S$0._controller$3].onCancel;
      }
      set onCancel(onCancelHandler) {
        this[S$0._controller$3].onCancel = onCancelHandler;
      }
      get isClosed() {
        return this[S$0._controller$3].isClosed;
      }
      get isPaused() {
        return this[S$0._controller$3].isPaused;
      }
      get hasListener() {
        return this[S$0._controller$3].hasListener;
      }
      get done() {
        return this[S$0._controller$3].done;
      }
      addError(error, stackTrace = null) {
        if (this[S$0._isAddingStreamItems]) {
          dart.throw(new core.StateError.new("You cannot add an error while items are being added from addStream"));
        }
        this[S$0._addError](error, stackTrace);
      }
      [S$0._addError](error, stackTrace = null) {
        if (!this[S$0._controller$3].isClosed) {
          this.onAddError(error, stackTrace);
        }
        this[S$0._controller$3].addError(error, stackTrace);
      }
      onAddError(error, stackTrace = null) {
      }
      addStream(source, opts$) {
        __t$StreamOfT().as(source);
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        if (this[S$0._isAddingStreamItems]) {
          dart.throw(new core.StateError.new("You cannot add items while items are being added from addStream"));
        }
        this[S$0._isAddingStreamItems] = true;
        let completer = T$.CompleterOfvoid().new();
        const complete = () => {
          if (!completer.isCompleted) {
            this[S$0._isAddingStreamItems] = false;
            completer.complete();
          }
        };
        dart.fn(complete, T$.VoidTovoid());
        source.listen(dart.bind(this, S$0._add$1), {onError: cancelOnError === true ? dart.fn((e, s) => {
            this[S$0._addError](e, s);
            complete();
          }, T$.ObjectAndStackTraceToNull()) : dart.bind(this, S$0._addError), onDone: complete, cancelOnError: cancelOnError});
        return completer.future;
      }
      add(event) {
        T.as(event);
        if (this[S$0._isAddingStreamItems]) {
          dart.throw(new core.StateError.new("You cannot add items while items are being added from addStream"));
        }
        this[S$0._add$1](event);
      }
      [S$0._add$1](event) {
        T.as(event);
        if (!this[S$0._controller$3].isClosed) {
          this.onAdd(event);
        }
        this[S$0._controller$3].add(event);
      }
      onAdd(event) {
        T.as(event);
      }
      close() {
        if (this[S$0._isAddingStreamItems]) {
          dart.throw(new core.StateError.new("You cannot close the subject while items are being added from addStream"));
        }
        return this[S$0._controller$3].close();
      }
    }
    (Subject.new = function(controller, stream) {
      this[S$0._isAddingStreamItems] = false;
      this[S$0._controller$3] = controller;
      if (!stream.isBroadcast) dart.assertFailed("Subject requires a broadcast stream", I[152], 25, 16, "stream.isBroadcast");
      Subject.__proto__.new.call(this, stream);
      ;
    }).prototype = Subject.prototype;
    dart.addTypeTests(Subject);
    Subject.prototype[_is_Subject_default] = true;
    dart.addTypeCaches(Subject);
    Subject[dart.implements] = () => [async.StreamController$(T)];
    dart.setMethodSignature(Subject, () => ({
      __proto__: dart.getMethods(Subject.__proto__),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      [S$0._addError]: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      onAddError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      addStream: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)], {cancelOnError: dart.nullable(core.bool)}, {}),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._add$1]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onAdd: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      close: dart.fnType(async.Future, [])
    }));
    dart.setGetterSignature(Subject, () => ({
      __proto__: dart.getGetters(Subject.__proto__),
      sink: async.StreamSink$(T),
      onListen: dart.nullable(dart.fnType(dart.void, [])),
      stream: async.Stream$(T),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, []),
      onCancel: dart.nullable(dart.fnType(dart.void, [])),
      isClosed: core.bool,
      isPaused: core.bool,
      hasListener: core.bool,
      done: async.Future
    }));
    dart.setSetterSignature(Subject, () => ({
      __proto__: dart.getSetters(Subject.__proto__),
      onListen: dart.nullable(dart.fnType(dart.void, [])),
      onPause: dart.nullable(dart.fnType(dart.void, [])),
      onResume: dart.nullable(dart.fnType(dart.void, [])),
      onCancel: dart.nullable(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(Subject, I[153]);
    dart.setFieldSignature(Subject, () => ({
      __proto__: dart.getFields(Subject.__proto__),
      [S$0._controller$3]: dart.finalFieldType(async.StreamController$(T)),
      [S$0._isAddingStreamItems]: dart.fieldType(core.bool)
    }));
    return Subject;
  });
  subject.Subject = subject.Subject$();
  dart.addTypeTests(subject.Subject, _is_Subject_default);
  const _is_BehaviorSubject_default = Symbol('_is_BehaviorSubject_default');
  behavior_subject.BehaviorSubject$ = dart.generic(T => {
    var __t$_BehaviorSubjectStreamOfT = () => (__t$_BehaviorSubjectStreamOfT = dart.constFn(behavior_subject._BehaviorSubjectStream$(T)))();
    class BehaviorSubject extends subject.Subject$(T) {
      static ['_#_#tearOff'](T, controller, stream, _wrapper) {
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, stream, _wrapper);
      }
      static new(opts$) {
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(T)).new();
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, rx.Rx.defer(T, behavior_subject.BehaviorSubject._deferStream(T, wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static ['_#new#tearOff'](T, opts$) {
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return behavior_subject.BehaviorSubject$(T).new({onListen: onListen, onCancel: onCancel, sync: sync});
      }
      static seeded(seedValue, opts$) {
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(T)).seeded(seedValue);
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, rx.Rx.defer(T, behavior_subject.BehaviorSubject._deferStream(T, wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static ['_#seeded#tearOff'](T, seedValue, opts$) {
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return behavior_subject.BehaviorSubject$(T).seeded(seedValue, {onListen: onListen, onCancel: onCancel, sync: sync});
      }
      static _deferStream(T, wrapper, controller, sync) {
        return dart.fn(() => {
          let errorAndStackTrace = wrapper.errorAndStackTrace;
          if (errorAndStackTrace != null && !wrapper.isValue) {
            return controller.stream.transform(T, new (start_with_error.StartWithErrorStreamTransformer$(T)).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          }
          let value = wrapper.value;
          if (empty.isNotEmpty(value) && wrapper.isValue) {
            return controller.stream.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(T.as(value)));
          }
          return controller.stream;
        }, dart.fnType(async.Stream$(T), []));
      }
      onAdd(event) {
        T.as(event);
        return this[S$0._wrapper].setValue(event);
      }
      onAddError(error, stackTrace = null) {
        return this[S$0._wrapper].setError(error, stackTrace);
      }
      get stream() {
        return new (__t$_BehaviorSubjectStreamOfT()).new(this);
      }
      get hasValue() {
        return empty.isNotEmpty(this[S$0._wrapper].value);
      }
      get value() {
        let value = this[S$0._wrapper].value;
        if (empty.isNotEmpty(value)) {
          return T.as(value);
        }
        dart.throw(value_stream.ValueStreamError.hasNoValue());
      }
      get valueOrNull() {
        return empty.unbox(T, this[S$0._wrapper].value);
      }
      set value(newValue) {
        T.as(newValue);
        return this.add(newValue);
      }
      get hasError() {
        return this[S$0._wrapper].errorAndStackTrace != null;
      }
      get errorOrNull() {
        let t245;
        t245 = this[S$0._wrapper].errorAndStackTrace;
        return t245 == null ? null : t245.error;
      }
      get error() {
        let errorAndSt = this[S$0._wrapper].errorAndStackTrace;
        if (errorAndSt != null) {
          return errorAndSt.error;
        }
        dart.throw(value_stream.ValueStreamError.hasNoError());
      }
      get stackTrace() {
        let t245;
        t245 = this[S$0._wrapper].errorAndStackTrace;
        return t245 == null ? null : t245.stackTrace;
      }
    }
    (BehaviorSubject.__ = function(controller, stream, _wrapper) {
      this[S$0._wrapper] = _wrapper;
      BehaviorSubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = BehaviorSubject.prototype;
    dart.addTypeTests(BehaviorSubject);
    BehaviorSubject.prototype[_is_BehaviorSubject_default] = true;
    dart.addTypeCaches(BehaviorSubject);
    BehaviorSubject[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setStaticMethodSignature(BehaviorSubject, () => ['new', 'seeded', '_deferStream']);
    dart.setGetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getGetters(BehaviorSubject.__proto__),
      stream: value_stream.ValueStream$(T),
      hasValue: core.bool,
      value: T,
      valueOrNull: dart.nullable(T),
      hasError: core.bool,
      errorOrNull: dart.nullable(core.Object),
      error: core.Object,
      stackTrace: dart.nullable(core.StackTrace)
    }));
    dart.setSetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getSetters(BehaviorSubject.__proto__),
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BehaviorSubject, I[154]);
    dart.setFieldSignature(BehaviorSubject, () => ({
      __proto__: dart.getFields(BehaviorSubject.__proto__),
      [S$0._wrapper]: dart.finalFieldType(behavior_subject._Wrapper$(T))
    }));
    return BehaviorSubject;
  });
  behavior_subject.BehaviorSubject = behavior_subject.BehaviorSubject$();
  dart.addTypeTests(behavior_subject.BehaviorSubject, _is_BehaviorSubject_default);
  const _is__Wrapper_default = Symbol('_is__Wrapper_default');
  behavior_subject._Wrapper$ = dart.generic(T => {
    class _Wrapper extends core.Object {
      static ['_#new#tearOff'](T) {
        return new (behavior_subject._Wrapper$(T)).new();
      }
      static ['_#seeded#tearOff'](T, value) {
        return new (behavior_subject._Wrapper$(T)).seeded(value);
      }
      setValue(event) {
        T.as(event);
        this.value = event;
        this.isValue = true;
      }
      setError(error, stackTrace) {
        this.errorAndStackTrace = new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace);
        this.isValue = false;
      }
    }
    (_Wrapper.new = function() {
      this.value = empty.EMPTY;
      this.errorAndStackTrace = null;
      this.isValue = false;
      ;
    }).prototype = _Wrapper.prototype;
    (_Wrapper.seeded = function(value) {
      this.value = empty.EMPTY;
      this.errorAndStackTrace = null;
      this.value = value;
      this.isValue = true;
      ;
    }).prototype = _Wrapper.prototype;
    dart.addTypeTests(_Wrapper);
    _Wrapper.prototype[_is__Wrapper_default] = true;
    dart.addTypeCaches(_Wrapper);
    dart.setMethodSignature(_Wrapper, () => ({
      __proto__: dart.getMethods(_Wrapper.__proto__),
      setValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      setError: dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])
    }));
    dart.setLibraryUri(_Wrapper, I[154]);
    dart.setFieldSignature(_Wrapper, () => ({
      __proto__: dart.getFields(_Wrapper.__proto__),
      isValue: dart.fieldType(core.bool),
      value: dart.fieldType(dart.nullable(core.Object)),
      errorAndStackTrace: dart.fieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Wrapper;
  });
  behavior_subject._Wrapper = behavior_subject._Wrapper$();
  dart.addTypeTests(behavior_subject._Wrapper, _is__Wrapper_default);
  const _is__BehaviorSubjectStream_default = Symbol('_is__BehaviorSubjectStream_default');
  behavior_subject._BehaviorSubjectStream$ = dart.generic(T => {
    class _BehaviorSubjectStream extends async.Stream$(T) {
      static ['_#new#tearOff'](T, _subject) {
        return new (behavior_subject._BehaviorSubjectStream$(T)).new(_subject);
      }
      get isBroadcast() {
        return true;
      }
      get hashCode() {
        return (this[S$0._subject][S$.$hashCode] ^ 892482866) >>> 0;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        return behavior_subject._BehaviorSubjectStream.is(other) && other[S$0._subject] === this[S$0._subject];
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$0._subject].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      get error() {
        return this[S$0._subject].error;
      }
      get errorOrNull() {
        return this[S$0._subject].errorOrNull;
      }
      get hasError() {
        return this[S$0._subject].hasError;
      }
      get hasValue() {
        return this[S$0._subject].hasValue;
      }
      get stackTrace() {
        return this[S$0._subject].stackTrace;
      }
      get value() {
        return this[S$0._subject].value;
      }
      get valueOrNull() {
        return this[S$0._subject].valueOrNull;
      }
    }
    (_BehaviorSubjectStream.new = function(_subject) {
      this[S$0._subject] = _subject;
      _BehaviorSubjectStream.__proto__.new.call(this);
      ;
    }).prototype = _BehaviorSubjectStream.prototype;
    dart.addTypeTests(_BehaviorSubjectStream);
    _BehaviorSubjectStream.prototype[_is__BehaviorSubjectStream_default] = true;
    dart.addTypeCaches(_BehaviorSubjectStream);
    _BehaviorSubjectStream[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setMethodSignature(_BehaviorSubjectStream, () => ({
      __proto__: dart.getMethods(_BehaviorSubjectStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setGetterSignature(_BehaviorSubjectStream, () => ({
      __proto__: dart.getGetters(_BehaviorSubjectStream.__proto__),
      error: core.Object,
      errorOrNull: dart.nullable(core.Object),
      hasError: core.bool,
      hasValue: core.bool,
      stackTrace: dart.nullable(core.StackTrace),
      value: T,
      valueOrNull: dart.nullable(T)
    }));
    dart.setLibraryUri(_BehaviorSubjectStream, I[154]);
    dart.setFieldSignature(_BehaviorSubjectStream, () => ({
      __proto__: dart.getFields(_BehaviorSubjectStream.__proto__),
      [S$0._subject]: dart.finalFieldType(behavior_subject.BehaviorSubject$(T))
    }));
    dart.defineExtensionMethods(_BehaviorSubjectStream, ['_equals']);
    dart.defineExtensionAccessors(_BehaviorSubjectStream, ['hashCode']);
    return _BehaviorSubjectStream;
  });
  behavior_subject._BehaviorSubjectStream = behavior_subject._BehaviorSubjectStream$();
  dart.addTypeTests(behavior_subject._BehaviorSubjectStream, _is__BehaviorSubjectStream_default);
  const _is_PublishSubject_default = Symbol('_is_PublishSubject_default');
  publish_subject.PublishSubject$ = dart.generic(T => {
    class PublishSubject extends subject.Subject$(T) {
      static ['_#_#tearOff'](T, controller, stream) {
        return new (publish_subject.PublishSubject$(T)).__(controller, stream);
      }
      static new(opts$) {
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        return new (publish_subject.PublishSubject$(T)).__(controller, controller.stream);
      }
      static ['_#new#tearOff'](T, opts$) {
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return publish_subject.PublishSubject$(T).new({onListen: onListen, onCancel: onCancel, sync: sync});
      }
    }
    (PublishSubject.__ = function(controller, stream) {
      PublishSubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = PublishSubject.prototype;
    dart.addTypeTests(PublishSubject);
    PublishSubject.prototype[_is_PublishSubject_default] = true;
    dart.addTypeCaches(PublishSubject);
    dart.setStaticMethodSignature(PublishSubject, () => ['new']);
    dart.setLibraryUri(PublishSubject, I[155]);
    return PublishSubject;
  });
  publish_subject.PublishSubject = publish_subject.PublishSubject$();
  dart.addTypeTests(publish_subject.PublishSubject, _is_PublishSubject_default);
  const _is_ReplaySubject_default = Symbol('_is_ReplaySubject_default');
  replay_subject.ReplaySubject$ = dart.generic(T => {
    var __t$_EventOfT = () => (__t$_EventOfT = dart.constFn(replay_subject._Event$(T)))();
    var __t$_EventOfTTobool = () => (__t$_EventOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$_EventOfT()])))();
    var __t$_EventOfTToT = () => (__t$_EventOfTToT = dart.constFn(dart.fnType(T, [__t$_EventOfT()])))();
    var __t$_EventOfTToObjectN = () => (__t$_EventOfTToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [__t$_EventOfT()])))();
    var __t$_EventOfTToErrorAndStackTraceN = () => (__t$_EventOfTToErrorAndStackTraceN = dart.constFn(dart.fnType(T$.ErrorAndStackTraceN(), [__t$_EventOfT()])))();
    var __t$_ReplaySubjectStreamOfT = () => (__t$_ReplaySubjectStreamOfT = dart.constFn(replay_subject._ReplaySubjectStream$(T)))();
    class ReplaySubject extends subject.Subject$(T) {
      static new(opts$) {
        let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let queue = new (collection.ListQueue$(replay_subject._Event$(T))).new();
        return new (replay_subject.ReplaySubject$(T)).__(controller, rx.Rx.defer(T, dart.fn(() => queue[S$.$toList]({growable: false})[S$0.$reversed][S$.$fold](async.Stream$(T), controller.stream, dart.fn((stream, event) => {
          let errorAndStackTrace = event.errorAndStackTrace;
          if (errorAndStackTrace != null) {
            return stream.transform(T, new (start_with_error.StartWithErrorStreamTransformer$(T)).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          } else {
            return stream.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(T.as(event.data)));
          }
        }, dart.fnType(async.Stream$(T), [async.Stream$(T), replay_subject._Event$(T)]))), dart.fnType(async.Stream$(T), [])), {reusable: true}), queue, maxSize);
      }
      static ['_#new#tearOff'](T, opts$) {
        let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return replay_subject.ReplaySubject$(T).new({maxSize: maxSize, onListen: onListen, onCancel: onCancel, sync: sync});
      }
      static ['_#_#tearOff'](T, controller, stream, _queue, _maxSize) {
        return new (replay_subject.ReplaySubject$(T)).__(controller, stream, _queue, _maxSize);
      }
      onAdd(event) {
        T.as(event);
        if (this[S$0._queue][S$.$length] === this[S$0._maxSize]) {
          this[S$0._queue].removeFirst();
        }
        this[S$0._queue].add(__t$_EventOfT().data(event));
      }
      onAddError(error, stackTrace = null) {
        if (this[S$0._queue][S$.$length] === this[S$0._maxSize]) {
          this[S$0._queue].removeFirst();
        }
        this[S$0._queue].add(__t$_EventOfT().error(new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace)));
      }
      get values() {
        return this[S$0._queue][S$.$where](dart.fn(event => event.errorAndStackTrace == null, __t$_EventOfTTobool()))[S$.$map](T, dart.fn(event => T.as(event.data), __t$_EventOfTToT()))[S$.$toList]({growable: false});
      }
      get errors() {
        return collection_extensions['MapNotNullIterableExtension|mapNotNull'](__t$_EventOfT(), core.Object, this[S$0._queue], dart.fn(event => {
          let t245;
          t245 = event.errorAndStackTrace;
          return t245 == null ? null : t245.error;
        }, __t$_EventOfTToObjectN()))[S$.$toList]({growable: false});
      }
      get stackTraces() {
        return collection_extensions['MapNotNullIterableExtension|mapNotNull'](__t$_EventOfT(), error_and_stacktrace.ErrorAndStackTrace, this[S$0._queue], dart.fn(event => event.errorAndStackTrace, __t$_EventOfTToErrorAndStackTraceN()))[S$.$map](T$.StackTraceN(), dart.fn(errorAndStackTrace => errorAndStackTrace.stackTrace, T$.ErrorAndStackTraceToStackTraceN()))[S$.$toList]({growable: false});
      }
      get stream() {
        return new (__t$_ReplaySubjectStreamOfT()).new(this);
      }
    }
    (ReplaySubject.__ = function(controller, stream, _queue, _maxSize) {
      this[S$0._queue] = _queue;
      this[S$0._maxSize] = _maxSize;
      ReplaySubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = ReplaySubject.prototype;
    dart.addTypeTests(ReplaySubject);
    ReplaySubject.prototype[_is_ReplaySubject_default] = true;
    dart.addTypeCaches(ReplaySubject);
    ReplaySubject[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setStaticMethodSignature(ReplaySubject, () => ['new']);
    dart.setGetterSignature(ReplaySubject, () => ({
      __proto__: dart.getGetters(ReplaySubject.__proto__),
      values: core.List$(T),
      errors: core.List$(core.Object),
      stackTraces: core.List$(dart.nullable(core.StackTrace)),
      stream: replay_stream.ReplayStream$(T)
    }));
    dart.setLibraryUri(ReplaySubject, I[156]);
    dart.setFieldSignature(ReplaySubject, () => ({
      __proto__: dart.getFields(ReplaySubject.__proto__),
      [S$0._queue]: dart.finalFieldType(collection.Queue$(replay_subject._Event$(T))),
      [S$0._maxSize]: dart.finalFieldType(dart.nullable(core.int))
    }));
    return ReplaySubject;
  });
  replay_subject.ReplaySubject = replay_subject.ReplaySubject$();
  dart.addTypeTests(replay_subject.ReplaySubject, _is_ReplaySubject_default);
  const _is__Event_default = Symbol('_is__Event_default');
  replay_subject._Event$ = dart.generic(T => {
    class _Event extends core.Object {
      static ['_#_#tearOff'](T, opts$) {
        let data = opts$ && 'data' in opts$ ? opts$.data : null;
        let errorAndStackTrace = opts$ && 'errorAndStackTrace' in opts$ ? opts$.errorAndStackTrace : null;
        return new (replay_subject._Event$(T)).__({data: data, errorAndStackTrace: errorAndStackTrace});
      }
      static data(data) {
        return new (replay_subject._Event$(T)).__({data: data, errorAndStackTrace: null});
      }
      static ['_#data#tearOff'](T, data) {
        return replay_subject._Event$(T).data(data);
      }
      static error(e) {
        return new (replay_subject._Event$(T)).__({errorAndStackTrace: e, data: empty.EMPTY});
      }
      static ['_#error#tearOff'](T, e) {
        return replay_subject._Event$(T).error(e);
      }
    }
    (_Event.__ = function(opts$) {
      let data = opts$ && 'data' in opts$ ? opts$.data : null;
      let errorAndStackTrace = opts$ && 'errorAndStackTrace' in opts$ ? opts$.errorAndStackTrace : null;
      this.data = data;
      this.errorAndStackTrace = errorAndStackTrace;
      ;
    }).prototype = _Event.prototype;
    dart.addTypeTests(_Event);
    _Event.prototype[_is__Event_default] = true;
    dart.addTypeCaches(_Event);
    dart.setStaticMethodSignature(_Event, () => ['data', 'error']);
    dart.setLibraryUri(_Event, I[156]);
    dart.setFieldSignature(_Event, () => ({
      __proto__: dart.getFields(_Event.__proto__),
      data: dart.finalFieldType(dart.nullable(core.Object)),
      errorAndStackTrace: dart.finalFieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Event;
  });
  replay_subject._Event = replay_subject._Event$();
  dart.addTypeTests(replay_subject._Event, _is__Event_default);
  const _is__ReplaySubjectStream_default = Symbol('_is__ReplaySubjectStream_default');
  replay_subject._ReplaySubjectStream$ = dart.generic(T => {
    class _ReplaySubjectStream extends async.Stream$(T) {
      static ['_#new#tearOff'](T, _subject) {
        return new (replay_subject._ReplaySubjectStream$(T)).new(_subject);
      }
      get isBroadcast() {
        return true;
      }
      get values() {
        return this[S$0._subject$1].values;
      }
      get errors() {
        return this[S$0._subject$1].errors;
      }
      get stackTraces() {
        return this[S$0._subject$1].stackTraces;
      }
      get hashCode() {
        return (this[S$0._subject$1][S$.$hashCode] ^ 892482866) >>> 0;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        return replay_subject._ReplaySubjectStream.is(other) && other[S$0._subject$1] === this[S$0._subject$1];
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$0._subject$1].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
    }
    (_ReplaySubjectStream.new = function(_subject) {
      this[S$0._subject$1] = _subject;
      _ReplaySubjectStream.__proto__.new.call(this);
      ;
    }).prototype = _ReplaySubjectStream.prototype;
    dart.addTypeTests(_ReplaySubjectStream);
    _ReplaySubjectStream.prototype[_is__ReplaySubjectStream_default] = true;
    dart.addTypeCaches(_ReplaySubjectStream);
    _ReplaySubjectStream[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setMethodSignature(_ReplaySubjectStream, () => ({
      __proto__: dart.getMethods(_ReplaySubjectStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setGetterSignature(_ReplaySubjectStream, () => ({
      __proto__: dart.getGetters(_ReplaySubjectStream.__proto__),
      values: core.List$(T),
      errors: core.List$(core.Object),
      stackTraces: core.List$(dart.nullable(core.StackTrace))
    }));
    dart.setLibraryUri(_ReplaySubjectStream, I[156]);
    dart.setFieldSignature(_ReplaySubjectStream, () => ({
      __proto__: dart.getFields(_ReplaySubjectStream.__proto__),
      [S$0._subject$1]: dart.finalFieldType(replay_subject.ReplaySubject$(T))
    }));
    dart.defineExtensionMethods(_ReplaySubjectStream, ['_equals']);
    dart.defineExtensionAccessors(_ReplaySubjectStream, ['hashCode']);
    return _ReplaySubjectStream;
  });
  replay_subject._ReplaySubjectStream = replay_subject._ReplaySubjectStream$();
  dart.addTypeTests(replay_subject._ReplaySubjectStream, _is__ReplaySubjectStream_default);
  const _is__SubjectStream_default = Symbol('_is__SubjectStream_default');
  subject._SubjectStream$ = dart.generic(T => {
    class _SubjectStream extends async.Stream$(T) {
      static ['_#new#tearOff'](T, _subject) {
        return new (subject._SubjectStream$(T)).new(_subject);
      }
      get isBroadcast() {
        return true;
      }
      get hashCode() {
        return (this[S$0._subject$2][S$.$hashCode] ^ 892482866) >>> 0;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        return subject._SubjectStream.is(other) && other[S$0._subject$2] === this[S$0._subject$2];
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$0._subject$2].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
    }
    (_SubjectStream.new = function(_subject) {
      this[S$0._subject$2] = _subject;
      _SubjectStream.__proto__.new.call(this);
      ;
    }).prototype = _SubjectStream.prototype;
    dart.addTypeTests(_SubjectStream);
    _SubjectStream.prototype[_is__SubjectStream_default] = true;
    dart.addTypeCaches(_SubjectStream);
    dart.setMethodSignature(_SubjectStream, () => ({
      __proto__: dart.getMethods(_SubjectStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(_SubjectStream, I[153]);
    dart.setFieldSignature(_SubjectStream, () => ({
      __proto__: dart.getFields(_SubjectStream.__proto__),
      [S$0._subject$2]: dart.finalFieldType(subject.Subject$(T))
    }));
    dart.defineExtensionMethods(_SubjectStream, ['_equals']);
    dart.defineExtensionAccessors(_SubjectStream, ['hashCode']);
    return _SubjectStream;
  });
  subject._SubjectStream = subject._SubjectStream$();
  dart.addTypeTests(subject._SubjectStream, _is__SubjectStream_default);
  const _is__StreamSinkWrapper_default = Symbol('_is__StreamSinkWrapper_default');
  subject._StreamSinkWrapper$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    class _StreamSinkWrapper extends core.Object {
      static ['_#new#tearOff'](T, _target) {
        return new (subject._StreamSinkWrapper$(T)).new(_target);
      }
      add(data) {
        T.as(data);
        this[S$0._target].add(data);
      }
      addError(error, stackTrace = null) {
        this[S$0._target].addError(error, stackTrace);
      }
      close() {
        return this[S$0._target].close();
      }
      addStream(source) {
        __t$StreamOfT().as(source);
        return this[S$0._target].addStream(source);
      }
      get done() {
        return this[S$0._target].done;
      }
    }
    (_StreamSinkWrapper.new = function(_target) {
      this[S$0._target] = _target;
      ;
    }).prototype = _StreamSinkWrapper.prototype;
    dart.addTypeTests(_StreamSinkWrapper);
    _StreamSinkWrapper.prototype[_is__StreamSinkWrapper_default] = true;
    dart.addTypeCaches(_StreamSinkWrapper);
    _StreamSinkWrapper[dart.implements] = () => [async.StreamSink$(T)];
    dart.setMethodSignature(_StreamSinkWrapper, () => ({
      __proto__: dart.getMethods(_StreamSinkWrapper.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(async.Future, []),
      addStream: dart.fnType(async.Future, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_StreamSinkWrapper, () => ({
      __proto__: dart.getGetters(_StreamSinkWrapper.__proto__),
      done: async.Future
    }));
    dart.setLibraryUri(_StreamSinkWrapper, I[153]);
    dart.setFieldSignature(_StreamSinkWrapper, () => ({
      __proto__: dart.getFields(_StreamSinkWrapper.__proto__),
      [S$0._target]: dart.finalFieldType(async.StreamController$(T))
    }));
    return _StreamSinkWrapper;
  });
  subject._StreamSinkWrapper = subject._StreamSinkWrapper$();
  dart.addTypeTests(subject._StreamSinkWrapper, _is__StreamSinkWrapper_default);
  dart.defineLazy(version$3, {
    /*version$3.version*/get version() {
      return "1.5.2";
    }
  }, false);
  websocket_web.createWebSocketClient = function createWebSocketClient(url, headers) {
    return new html$.HtmlWebSocketChannel.connect(url);
  };
  channel$.WebSocketChannel = class WebSocketChannel extends stream_channel.StreamChannelMixin {
    get ready() {
      return this[S$0.ready];
    }
    set ready(value) {
      super.ready = value;
    }
    get protocol() {
      return this[S$0._webSocket].protocol;
    }
    get closeCode() {
      return this[S$0._webSocket].closeCode;
    }
    get closeReason() {
      return this[S$0._webSocket].closeReason;
    }
    get stream() {
      return new async.StreamView.new(this[S$0._webSocket]);
    }
    get sink() {
      return new channel$.WebSocketSink.__(this[S$0._webSocket]);
    }
    static signKey(key) {
      return convert.base64.encode(sha1.sha1.convert((key + web_socket_impl.webSocketGUID)[S$0.$codeUnits]).bytes);
    }
    static ['_#new#tearOff'](channel, opts$) {
      let protocol = opts$ && 'protocol' in opts$ ? opts$.protocol : null;
      let pingInterval = opts$ && 'pingInterval' in opts$ ? opts$.pingInterval : null;
      let serverSide = opts$ && 'serverSide' in opts$ ? opts$.serverSide : true;
      return new channel$.WebSocketChannel.new(channel, {protocol: protocol, pingInterval: pingInterval, serverSide: serverSide});
    }
    static connect(uri, opts$) {
      let protocols = opts$ && 'protocols' in opts$ ? opts$.protocols : null;
      return _connect_html.connect(uri, {protocols: protocols});
    }
    static ['_#connect#tearOff'](uri, opts$) {
      let protocols = opts$ && 'protocols' in opts$ ? opts$.protocols : null;
      return channel$.WebSocketChannel.connect(uri, {protocols: protocols});
    }
  };
  (channel$.WebSocketChannel.new = function(channel, opts$) {
    let t245;
    let protocol = opts$ && 'protocol' in opts$ ? opts$.protocol : null;
    let pingInterval = opts$ && 'pingInterval' in opts$ ? opts$.pingInterval : null;
    let serverSide = opts$ && 'serverSide' in opts$ ? opts$.serverSide : true;
    this[S$0.ready] = T$.FutureOfvoid().value();
    this[S$0._webSocket] = (t245 = new web_socket_impl.WebSocketImpl.fromSocket(channel.stream, channel.sink, protocol, serverSide), (() => {
      t245.pingInterval = pingInterval;
      return t245;
    })());
    ;
  }).prototype = channel$.WebSocketChannel.prototype;
  dart.addTypeTests(channel$.WebSocketChannel);
  dart.addTypeCaches(channel$.WebSocketChannel);
  dart.setStaticMethodSignature(channel$.WebSocketChannel, () => ['signKey', 'connect']);
  dart.setGetterSignature(channel$.WebSocketChannel, () => ({
    __proto__: dart.getGetters(channel$.WebSocketChannel.__proto__),
    protocol: dart.nullable(core.String),
    closeCode: dart.nullable(core.int),
    closeReason: dart.nullable(core.String),
    stream: async.Stream,
    sink: channel$.WebSocketSink
  }));
  dart.setLibraryUri(channel$.WebSocketChannel, I[157]);
  dart.setFieldSignature(channel$.WebSocketChannel, () => ({
    __proto__: dart.getFields(channel$.WebSocketChannel.__proto__),
    [S$0._webSocket]: dart.finalFieldType(web_socket_impl.WebSocketImpl),
    ready: dart.finalFieldType(async.Future$(dart.void))
  }));
  channel$.WebSocketSink = class WebSocketSink extends stream_sink.DelegatingStreamSink {
    static ['_#_#tearOff'](webSocket) {
      return new channel$.WebSocketSink.__(webSocket);
    }
    close(closeCode = null, closeReason = null) {
      return this[S$0._webSocket].close(closeCode, closeReason);
    }
  };
  (channel$.WebSocketSink.__ = function(webSocket) {
    this[S$0._webSocket] = webSocket;
    channel$.WebSocketSink.__proto__.new.call(this, webSocket);
    ;
  }).prototype = channel$.WebSocketSink.prototype;
  dart.addTypeTests(channel$.WebSocketSink);
  dart.addTypeCaches(channel$.WebSocketSink);
  dart.setMethodSignature(channel$.WebSocketSink, () => ({
    __proto__: dart.getMethods(channel$.WebSocketSink.__proto__),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setLibraryUri(channel$.WebSocketSink, I[157]);
  dart.setFieldSignature(channel$.WebSocketSink, () => ({
    __proto__: dart.getFields(channel$.WebSocketSink.__proto__),
    [S$0._webSocket]: dart.finalFieldType(web_socket_impl.WebSocketImpl)
  }));
  exception$.WebSocketChannelException = class WebSocketChannelException extends core.Object {
    get message() {
      return this[S$0.message$9];
    }
    set message(value) {
      super.message = value;
    }
    get inner() {
      return this[S$0.inner];
    }
    set inner(value) {
      super.inner = value;
    }
    static ['_#new#tearOff'](message = null) {
      return new exception$.WebSocketChannelException.new(message);
    }
    static ['_#from#tearOff'](inner) {
      return new exception$.WebSocketChannelException.from(inner);
    }
    toString() {
      return this.message == null ? "WebSocketChannelException" : "WebSocketChannelException: " + dart.str(this.message);
    }
  };
  (exception$.WebSocketChannelException.new = function(message = null) {
    this[S$0.message$9] = message;
    this[S$0.inner] = null;
    ;
  }).prototype = exception$.WebSocketChannelException.prototype;
  (exception$.WebSocketChannelException.from = function(inner) {
    this[S$0.inner] = inner;
    this[S$0.message$9] = dart.toString(inner);
    ;
  }).prototype = exception$.WebSocketChannelException.prototype;
  dart.addTypeTests(exception$.WebSocketChannelException);
  dart.addTypeCaches(exception$.WebSocketChannelException);
  exception$.WebSocketChannelException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception$.WebSocketChannelException, I[158]);
  dart.setFieldSignature(exception$.WebSocketChannelException, () => ({
    __proto__: dart.getFields(exception$.WebSocketChannelException.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String)),
    inner: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(exception$.WebSocketChannelException, ['toString']);
  dart.defineLazy(version$4, {
    /*version$4.version*/get version() {
      return "1.5.4";
    }
  }, false);
  retry.RetryOptions = class RetryOptions extends core.Object {
    get delayFactor() {
      return this[S$0.delayFactor];
    }
    set delayFactor(value) {
      super.delayFactor = value;
    }
    get randomizationFactor() {
      return this[S$0.randomizationFactor];
    }
    set randomizationFactor(value) {
      super.randomizationFactor = value;
    }
    get maxDelay() {
      return this[S$0.maxDelay];
    }
    set maxDelay(value) {
      super.maxDelay = value;
    }
    get maxAttempts() {
      return this[S$0.maxAttempts];
    }
    set maxAttempts(value) {
      super.maxAttempts = value;
    }
    static ['_#new#tearOff'](opts$) {
      let delayFactor = opts$ && 'delayFactor' in opts$ ? opts$.delayFactor : C[118] || CT.C118;
      let randomizationFactor = opts$ && 'randomizationFactor' in opts$ ? opts$.randomizationFactor : 0.25;
      let maxDelay = opts$ && 'maxDelay' in opts$ ? opts$.maxDelay : C[332] || CT.C332;
      let maxAttempts = opts$ && 'maxAttempts' in opts$ ? opts$.maxAttempts : 8;
      return new retry.RetryOptions.new({delayFactor: delayFactor, randomizationFactor: randomizationFactor, maxDelay: maxDelay, maxAttempts: maxAttempts});
    }
    delay(attempt) {
      if (!(attempt >= 0)) dart.assertFailed("attempt cannot be negative", I[159], 102, 12, "attempt >= 0");
      if (attempt <= 0) {
        return core.Duration.zero;
      }
      let rf = this.randomizationFactor * (retry._rand.nextDouble() * 2 - 1) + 1;
      let exp = math.min(core.int, attempt, 31);
      let delay = this.delayFactor['*'](math.pow(2, exp))['*'](rf);
      return delay['<'](this.maxDelay) ? delay : this.maxDelay;
    }
    retry(T, fn, opts$) {
      let retryIf = opts$ && 'retryIf' in opts$ ? opts$.retryIf : null;
      let onRetry = opts$ && 'onRetry' in opts$ ? opts$.onRetry : null;
      return async.async(T, (function* retry() {
        let attempt = 0;
        while (true) {
          attempt = attempt + 1;
          try {
            return yield fn();
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Exception.is(e)) {
              if (attempt >= this.maxAttempts || retryIf != null && !(yield retryIf(e))) {
                dart.rethrow(e$);
              }
              if (onRetry != null) {
                yield onRetry(e);
              }
            } else
              throw e$;
          }
          yield async.Future.delayed(this.delay(attempt));
        }
      }).bind(this));
    }
  };
  (retry.RetryOptions.new = function(opts$) {
    let delayFactor = opts$ && 'delayFactor' in opts$ ? opts$.delayFactor : C[118] || CT.C118;
    let randomizationFactor = opts$ && 'randomizationFactor' in opts$ ? opts$.randomizationFactor : 0.25;
    let maxDelay = opts$ && 'maxDelay' in opts$ ? opts$.maxDelay : C[332] || CT.C332;
    let maxAttempts = opts$ && 'maxAttempts' in opts$ ? opts$.maxAttempts : 8;
    this[S$0.delayFactor] = delayFactor;
    this[S$0.randomizationFactor] = randomizationFactor;
    this[S$0.maxDelay] = maxDelay;
    this[S$0.maxAttempts] = maxAttempts;
    ;
  }).prototype = retry.RetryOptions.prototype;
  dart.addTypeTests(retry.RetryOptions);
  dart.addTypeCaches(retry.RetryOptions);
  dart.setMethodSignature(retry.RetryOptions, () => ({
    __proto__: dart.getMethods(retry.RetryOptions.__proto__),
    delay: dart.fnType(core.Duration, [core.int]),
    retry: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])], {onRetry: dart.nullable(dart.fnType(dart.void, [core.Exception])), retryIf: dart.nullable(dart.fnType(async.FutureOr$(core.bool), [core.Exception]))}, {}], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(retry.RetryOptions, I[160]);
  dart.setFieldSignature(retry.RetryOptions, () => ({
    __proto__: dart.getFields(retry.RetryOptions.__proto__),
    delayFactor: dart.finalFieldType(core.Duration),
    randomizationFactor: dart.finalFieldType(core.double),
    maxDelay: dart.finalFieldType(core.Duration),
    maxAttempts: dart.finalFieldType(core.int)
  }));
  retry.retry = function retry$0(T, fn, opts$) {
    let delayFactor = opts$ && 'delayFactor' in opts$ ? opts$.delayFactor : C[118] || CT.C118;
    let randomizationFactor = opts$ && 'randomizationFactor' in opts$ ? opts$.randomizationFactor : 0.25;
    let maxDelay = opts$ && 'maxDelay' in opts$ ? opts$.maxDelay : C[332] || CT.C332;
    let maxAttempts = opts$ && 'maxAttempts' in opts$ ? opts$.maxAttempts : 8;
    let retryIf = opts$ && 'retryIf' in opts$ ? opts$.retryIf : null;
    let onRetry = opts$ && 'onRetry' in opts$ ? opts$.onRetry : null;
    return new retry.RetryOptions.new({delayFactor: delayFactor, randomizationFactor: randomizationFactor, maxDelay: maxDelay, maxAttempts: maxAttempts}).retry(T, fn, {retryIf: retryIf, onRetry: onRetry});
  };
  dart.defineLazy(retry, {
    /*retry._rand*/get _rand() {
      return math.Random.new();
    }
  }, false);
  rx.Rx = class Rx extends core.Object {
    static combineLatest(T, R, streams, combiner) {
      return new (combine_latest.CombineLatestStream$(T, R)).new(streams, combiner);
    }
    static combineLatestList(T, streams) {
      return combine_latest.CombineLatestStream.list(T, streams);
    }
    static combineLatest2(A, B, T, streamA, streamB, combiner) {
      return combine_latest.CombineLatestStream.combine2(A, B, T, streamA, streamB, combiner);
    }
    static combineLatest3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return combine_latest.CombineLatestStream.combine3(A, B, C, T, streamA, streamB, streamC, combiner);
    }
    static combineLatest4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return combine_latest.CombineLatestStream.combine4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner);
    }
    static combineLatest5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return combine_latest.CombineLatestStream.combine5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static combineLatest6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return combine_latest.CombineLatestStream.combine6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static combineLatest7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return combine_latest.CombineLatestStream.combine7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static combineLatest8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return combine_latest.CombineLatestStream.combine8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static combineLatest9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return combine_latest.CombineLatestStream.combine9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static concat(T, streams) {
      return new (concat.ConcatStream$(T)).new(streams);
    }
    static concatEager(T, streams) {
      return new (concat_eager.ConcatEagerStream$(T)).new(streams);
    }
    static defer(T, streamFactory, opts$) {
      let reusable = opts$ && 'reusable' in opts$ ? opts$.reusable : false;
      return new (defer.DeferStream$(T)).new(streamFactory, {reusable: reusable});
    }
    static forkJoin(T, R, streams, combiner) {
      return new (fork_join.ForkJoinStream$(T, R)).new(streams, combiner);
    }
    static forkJoinList(T, streams) {
      return fork_join.ForkJoinStream.list(T, streams);
    }
    static forkJoin2(A, B, T, streamA, streamB, combiner) {
      return fork_join.ForkJoinStream.combine2(A, B, T, streamA, streamB, combiner);
    }
    static forkJoin3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return fork_join.ForkJoinStream.combine3(A, B, C, T, streamA, streamB, streamC, combiner);
    }
    static forkJoin4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return fork_join.ForkJoinStream.combine4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner);
    }
    static forkJoin5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return fork_join.ForkJoinStream.combine5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static forkJoin6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return fork_join.ForkJoinStream.combine6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static forkJoin7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return fork_join.ForkJoinStream.combine7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static forkJoin8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return fork_join.ForkJoinStream.combine8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static forkJoin9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return fork_join.ForkJoinStream.combine9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static fromCallable(T, callable, opts$) {
      let reusable = opts$ && 'reusable' in opts$ ? opts$.reusable : false;
      return new (from_callable.FromCallableStream$(T)).new(callable, {reusable: reusable});
    }
    static merge(T, streams) {
      return new (merge.MergeStream$(T)).new(streams);
    }
    static never(T) {
      return new (never.NeverStream$(T)).new();
    }
    static race(T, streams) {
      return new (race.RaceStream$(T)).new(streams);
    }
    static range(startInclusive, endInclusive) {
      return new range.RangeStream.new(startInclusive, endInclusive);
    }
    static repeat(T, streamFactory, count = null) {
      return new (repeat.RepeatStream$(T)).new(streamFactory, count);
    }
    static retry(T, streamFactory, count = null) {
      return new (retry$.RetryStream$(T)).new(streamFactory, count);
    }
    static retryWhen(T, streamFactory, retryWhenFactory) {
      return new (retry_when.RetryWhenStream$(T)).new(streamFactory, retryWhenFactory);
    }
    static sequenceEqual(A, B, stream, other, opts$) {
      let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
      let errorEquals = opts$ && 'errorEquals' in opts$ ? opts$.errorEquals : null;
      return new (sequence_equal.SequenceEqualStream$(A, B)).new(stream, other, {dataEquals: equals, errorEquals: errorEquals});
    }
    static switchLatest(T, streams) {
      return new (switch_latest.SwitchLatestStream$(T)).new(streams);
    }
    static timer(T, value, duration) {
      return new (timer.TimerStream$(T)).new(value, duration);
    }
    static using(T, R, resourceFactory, streamFactory, disposer) {
      return new (using.UsingStream$(T, R)).new(resourceFactory, streamFactory, disposer);
    }
    static zip2(A, B, T, streamA, streamB, zipper) {
      return zip.ZipStream.zip2(A, B, T, streamA, streamB, zipper);
    }
    static zip(T, R, streams, zipper) {
      return new (zip.ZipStream$(T, R)).new(streams, zipper);
    }
    static zipList(T, streams) {
      return zip.ZipStream.list(T, streams);
    }
    static zip3(A, B, C, T, streamA, streamB, streamC, zipper) {
      return zip.ZipStream.zip3(A, B, C, T, streamA, streamB, streamC, zipper);
    }
    static zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper) {
      return zip.ZipStream.zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper);
    }
    static zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper) {
      return zip.ZipStream.zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper);
    }
    static zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper) {
      return zip.ZipStream.zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper);
    }
    static zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper) {
      return zip.ZipStream.zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper);
    }
    static zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper) {
      return zip.ZipStream.zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper);
    }
    static zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper) {
      return zip.ZipStream.zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper);
    }
  };
  (rx.Rx.new = function() {
    ;
  }).prototype = rx.Rx.prototype;
  dart.addTypeTests(rx.Rx);
  dart.addTypeCaches(rx.Rx);
  dart.setStaticMethodSignature(rx.Rx, () => ['combineLatest', 'combineLatestList', 'combineLatest2', 'combineLatest3', 'combineLatest4', 'combineLatest5', 'combineLatest6', 'combineLatest7', 'combineLatest8', 'combineLatest9', 'concat', 'concatEager', 'defer', 'forkJoin', 'forkJoinList', 'forkJoin2', 'forkJoin3', 'forkJoin4', 'forkJoin5', 'forkJoin6', 'forkJoin7', 'forkJoin8', 'forkJoin9', 'fromCallable', 'merge', 'never', 'race', 'range', 'repeat', 'retry', 'retryWhen', 'sequenceEqual', 'switchLatest', 'timer', 'using', 'zip2', 'zip', 'zipList', 'zip3', 'zip4', 'zip5', 'zip6', 'zip7', 'zip8', 'zip9']);
  dart.setLibraryUri(rx.Rx, I[161]);
  aes_engine.AesEngine = class AesEngine extends core.Object {
    static generateWorkingKey(key, forEncryption) {
      let w = T$.ListOfUint32List().generate(14 + 1, dart.fn(_ => _native_typed_data.NativeUint32List.new(4), T$.intToUint32List()));
      let t0 = extensions['ListIntX|readUint32'](key, 0);
      let t1 = extensions['ListIntX|readUint32'](key, 4);
      let t2 = extensions['ListIntX|readUint32'](key, 8);
      let t3 = extensions['ListIntX|readUint32'](key, 12);
      let t4 = extensions['ListIntX|readUint32'](key, 16);
      let t5 = extensions['ListIntX|readUint32'](key, 20);
      let t6 = extensions['ListIntX|readUint32'](key, 24);
      let t7 = extensions['ListIntX|readUint32'](key, 28);
      w[S$.$_get](0)[S$.$_set](0, t0);
      w[S$.$_get](0)[S$.$_set](1, t1);
      w[S$.$_get](0)[S$.$_set](2, t2);
      w[S$.$_get](0)[S$.$_set](3, t3);
      w[S$.$_get](1)[S$.$_set](0, t4);
      w[S$.$_get](1)[S$.$_set](1, t5);
      w[S$.$_get](1)[S$.$_set](2, t6);
      w[S$.$_get](1)[S$.$_set](3, t7);
      let u = null;
      let rcon = 1;
      for (let i = 2; i < 14; i = i + 2) {
        u = (aes_engine._subWord((t7[S$0.$rightShift](8) | ((t7 & 255) >>> 0 << 24 & 4294967295) >>> 0) >>> 0) ^ rcon) >>> 0;
        rcon = rcon << 1 >>> 0;
        t0 = (t0 ^ u) >>> 0;
        w[S$.$_get](i)[S$.$_set](0, t0);
        t1 = (t1 ^ t0) >>> 0;
        w[S$.$_get](i)[S$.$_set](1, t1);
        t2 = (t2 ^ t1) >>> 0;
        w[S$.$_get](i)[S$.$_set](2, t2);
        t3 = (t3 ^ t2) >>> 0;
        w[S$.$_get](i)[S$.$_set](3, t3);
        u = aes_engine._subWord(t3);
        t4 = (t4 ^ u) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](0, t4);
        t5 = (t5 ^ t4) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](1, t5);
        t6 = (t6 ^ t5) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](2, t6);
        t7 = (t7 ^ t6) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](3, t7);
      }
      u = (aes_engine._subWord((t7[S$0.$rightShift](8) | ((t7 & 255) >>> 0 << 24 & 4294967295) >>> 0) >>> 0) ^ rcon) >>> 0;
      t0 = (t0 ^ u) >>> 0;
      w[S$.$_get](14)[S$.$_set](0, t0);
      t1 = (t1 ^ t0) >>> 0;
      w[S$.$_get](14)[S$.$_set](1, t1);
      t2 = (t2 ^ t1) >>> 0;
      w[S$.$_get](14)[S$.$_set](2, t2);
      t3 = (t3 ^ t2) >>> 0;
      w[S$.$_get](14)[S$.$_set](3, t3);
      if (!forEncryption) {
        for (let j = 1; j < 14; j = j + 1) {
          for (let i = 0; i < 4; i = i + 1) {
            w[S$.$_get](j)[S$.$_set](i, aes_engine._invMcol(w[S$.$_get](j)[S$.$_get](i)));
          }
        }
      }
      return w;
    }
    static encryptBlock(workingKey, inp, inpOff, out, outOff) {
      let c0 = (extensions['ListIntX|readUint32'](inp, inpOff) ^ workingKey[S$.$_get](0)[S$.$_get](0)) >>> 0;
      let c1 = (extensions['ListIntX|readUint32'](inp, inpOff + 4) ^ workingKey[S$.$_get](0)[S$.$_get](1)) >>> 0;
      let c2 = (extensions['ListIntX|readUint32'](inp, inpOff + 8) ^ workingKey[S$.$_get](0)[S$.$_get](2)) >>> 0;
      let c3 = (extensions['ListIntX|readUint32'](inp, inpOff + 12) ^ workingKey[S$.$_get](0)[S$.$_get](3)) >>> 0;
      let r0 = null;
      let r1 = null;
      let r2 = null;
      let r3 = null;
      let r = 1;
      while (r < 14 - 1) {
        r0 = (aes_tables.table0[S$.$_get](c0 & 255) ^ aes_tables.table1[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c3[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        r1 = (aes_tables.table0[S$.$_get](c1 & 255) ^ aes_tables.table1[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c0[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        r2 = (aes_tables.table0[S$.$_get](c2 & 255) ^ aes_tables.table1[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c1[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        r3 = (aes_tables.table0[S$.$_get](c3 & 255) ^ aes_tables.table1[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c2[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r + 1;
        c0 = (aes_tables.table0[S$.$_get](r0 & 255) ^ aes_tables.table1[S$.$_get](r1 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r2 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r3[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        c1 = (aes_tables.table0[S$.$_get](r1 & 255) ^ aes_tables.table1[S$.$_get](r2 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r3 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r0[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        c2 = (aes_tables.table0[S$.$_get](r2 & 255) ^ aes_tables.table1[S$.$_get](r3 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r0 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r1[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        c3 = (aes_tables.table0[S$.$_get](r3 & 255) ^ aes_tables.table1[S$.$_get](r0 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r1 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r2[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r + 1;
      }
      r0 = (aes_tables.table0[S$.$_get](c0 & 255) ^ aes_tables.table1[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c3[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
      r1 = (aes_tables.table0[S$.$_get](c1 & 255) ^ aes_tables.table1[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c0[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
      r2 = (aes_tables.table0[S$.$_get](c2 & 255) ^ aes_tables.table1[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c1[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
      r3 = (aes_tables.table0[S$.$_get](c3 & 255) ^ aes_tables.table1[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c2[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
      r = r + 1;
      c0 = (aes_tables.sBox[S$.$_get](r0 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r1 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r2 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r3[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
      c1 = (aes_tables.sBox[S$.$_get](r1 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r2 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r3 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r0[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
      c2 = (aes_tables.sBox[S$.$_get](r2 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r3 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r0 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r1[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
      c3 = (aes_tables.sBox[S$.$_get](r3 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r0 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r1 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r2[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
      extensions['ListIntX|writeUint32'](out, outOff, c0);
      extensions['ListIntX|writeUint32'](out, outOff + 4, c1);
      extensions['ListIntX|writeUint32'](out, outOff + 8, c2);
      extensions['ListIntX|writeUint32'](out, outOff + 12, c3);
    }
    static decryptBlock(workingKey, inp, inpOff, out, outOff) {
      let c0 = (extensions['ListIntX|readUint32'](inp, inpOff) ^ workingKey[S$.$_get](14)[S$.$_get](0)) >>> 0;
      let c1 = (extensions['ListIntX|readUint32'](inp, inpOff + 4) ^ workingKey[S$.$_get](14)[S$.$_get](1)) >>> 0;
      let c2 = (extensions['ListIntX|readUint32'](inp, inpOff + 8) ^ workingKey[S$.$_get](14)[S$.$_get](2)) >>> 0;
      let c3 = (extensions['ListIntX|readUint32'](inp, inpOff + 12) ^ workingKey[S$.$_get](14)[S$.$_get](3)) >>> 0;
      let r0 = null;
      let r1 = null;
      let r2 = null;
      let r3 = null;
      let r = 14 - 1;
      while (r > 1) {
        r0 = (aes_tables.table0Inv[S$.$_get](c0 & 255) ^ aes_tables.table1Inv[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c1[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        r1 = (aes_tables.table0Inv[S$.$_get](c1 & 255) ^ aes_tables.table1Inv[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c2[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        r2 = (aes_tables.table0Inv[S$.$_get](c2 & 255) ^ aes_tables.table1Inv[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c3[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        r3 = (aes_tables.table0Inv[S$.$_get](c3 & 255) ^ aes_tables.table1Inv[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c0[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r - 1;
        c0 = (aes_tables.table0Inv[S$.$_get](r0 & 255) ^ aes_tables.table1Inv[S$.$_get](r3 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r2 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r1[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        c1 = (aes_tables.table0Inv[S$.$_get](r1 & 255) ^ aes_tables.table1Inv[S$.$_get](r0 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r3 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r2[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        c2 = (aes_tables.table0Inv[S$.$_get](r2 & 255) ^ aes_tables.table1Inv[S$.$_get](r1 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r0 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r3[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        c3 = (aes_tables.table0Inv[S$.$_get](r3 & 255) ^ aes_tables.table1Inv[S$.$_get](r2 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r1 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r0[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r - 1;
      }
      r0 = (aes_tables.table0Inv[S$.$_get](c0 & 255) ^ aes_tables.table1Inv[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c1[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
      r1 = (aes_tables.table0Inv[S$.$_get](c1 & 255) ^ aes_tables.table1Inv[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c2[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
      r2 = (aes_tables.table0Inv[S$.$_get](c2 & 255) ^ aes_tables.table1Inv[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c3[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
      r3 = (aes_tables.table0Inv[S$.$_get](c3 & 255) ^ aes_tables.table1Inv[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c0[S$0.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
      c0 = (aes_tables.sBoxInv[S$.$_get](r0 & 255) ^ aes_tables.sBoxInv[S$.$_get](r3 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r2 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r1[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](0)) >>> 0;
      c1 = (aes_tables.sBoxInv[S$.$_get](r1 & 255) & 255 ^ aes_tables.sBoxInv[S$.$_get](r0 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r3 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r2[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](1)) >>> 0;
      c2 = (aes_tables.sBoxInv[S$.$_get](r2 & 255) & 255 ^ aes_tables.sBoxInv[S$.$_get](r1 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r0 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r3[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](2)) >>> 0;
      c3 = (aes_tables.sBoxInv[S$.$_get](r3 & 255) & 255 ^ aes_tables.sBoxInv[S$.$_get](r2 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r1 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r0[S$0.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](3)) >>> 0;
      extensions['ListIntX|writeUint32'](out, outOff, c0);
      extensions['ListIntX|writeUint32'](out, outOff + 4, c1);
      extensions['ListIntX|writeUint32'](out, outOff + 8, c2);
      extensions['ListIntX|writeUint32'](out, outOff + 12, c3);
    }
    static ['_#new#tearOff']() {
      return new aes_engine.AesEngine.new();
    }
  };
  (aes_engine.AesEngine.new = function() {
    ;
  }).prototype = aes_engine.AesEngine.prototype;
  dart.addTypeTests(aes_engine.AesEngine);
  dart.addTypeCaches(aes_engine.AesEngine);
  dart.setStaticMethodSignature(aes_engine.AesEngine, () => ['generateWorkingKey', 'encryptBlock', 'decryptBlock']);
  dart.setLibraryUri(aes_engine.AesEngine, I[162]);
  aes_engine._subWord = function _subWord(x) {
    return (aes_tables.sBox[S$.$_get](x & 255) | aes_tables.sBox[S$.$_get](x >> 8 & 255) << 8 >>> 0 | aes_tables.sBox[S$.$_get](x >> 16 & 255) << 16 >>> 0 | aes_tables.sBox[S$.$_get](x[S$0.$rightShift](24) & 255) << 24 >>> 0) >>> 0;
  };
  aes_engine._invMcol = function _invMcol(x) {
    let f2 = ((x & 2139062143) >>> 0 << 1 ^ ((x & 2155905152) >>> 7) * 27) >>> 0;
    let f4 = ((f2 & 2139062143) >>> 0 << 1 ^ ((f2 & 2155905152) >>> 7) * 27) >>> 0;
    let f8 = ((f4 & 2139062143) >>> 0 << 1 ^ ((f4 & 2155905152) >>> 7) * 27) >>> 0;
    let f9 = (x ^ f8) >>> 0;
    let s1 = ((f2 ^ f9) >>> 8 | (((f2 ^ f9) & 255) >>> 0 << 24 & 4294967295) >>> 0) >>> 0;
    let s2 = ((f4 ^ f9) >>> 16 | (((f4 ^ f9) & 65535) >>> 0 << 16 & 4294967295) >>> 0) >>> 0;
    let s3 = (f9[S$0.$rightShift](24) | ((f9 & 4294967295) >>> 0 << 8 & 4294967295) >>> 0) >>> 0;
    return (f2 ^ f4 ^ f8 ^ s1 ^ s2 ^ s3) >>> 0;
  };
  dart.defineLazy(aes_engine, {
    /*aes_engine.aesBlockSize*/get aesBlockSize() {
      return 16;
    },
    /*aes_engine.rounds*/get rounds() {
      return 14;
    },
    /*aes_engine._m1*/get _m1() {
      return 2155905152;
    },
    /*aes_engine._m2*/get _m2() {
      return 2139062143;
    },
    /*aes_engine._m3*/get _m3() {
      return 27;
    },
    /*aes_engine._mask8*/get _mask8() {
      return 255;
    },
    /*aes_engine._mask16*/get _mask16() {
      return 65535;
    },
    /*aes_engine._mask32*/get _mask32() {
      return 4294967295;
    }
  }, false);
  big_int_adapter.BigIntAdapter = class BigIntAdapter extends hive.TypeAdapter$(core.BigInt) {
    get typeId() {
      return this[S$0.typeId$1];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let len = reader.readByte();
      let intStr = reader.readString(len);
      return core.BigInt.parse(intStr);
    }
    write(writer, obj) {
      core.BigInt.as(obj);
      let intStr = obj.toString();
      writer.writeByte(intStr.length);
      writer.writeString(intStr, {writeByteCount: false});
    }
    static ['_#new#tearOff']() {
      return new big_int_adapter.BigIntAdapter.new();
    }
  };
  (big_int_adapter.BigIntAdapter.new = function() {
    this[S$0.typeId$1] = 17;
    ;
  }).prototype = big_int_adapter.BigIntAdapter.prototype;
  dart.addTypeTests(big_int_adapter.BigIntAdapter);
  dart.addTypeCaches(big_int_adapter.BigIntAdapter);
  dart.setMethodSignature(big_int_adapter.BigIntAdapter, () => ({
    __proto__: dart.getMethods(big_int_adapter.BigIntAdapter.__proto__),
    read: dart.fnType(core.BigInt, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(big_int_adapter.BigIntAdapter, I[163]);
  dart.setFieldSignature(big_int_adapter.BigIntAdapter, () => ({
    __proto__: dart.getFields(big_int_adapter.BigIntAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  const _is_DateTimeAdapter_default = Symbol('_is_DateTimeAdapter_default');
  date_time_adapter.DateTimeAdapter$ = dart.generic(T => {
    class DateTimeAdapter extends hive.TypeAdapter$(T) {
      get typeId() {
        return this[S$0.typeId$2];
      }
      set typeId(value) {
        super.typeId = value;
      }
      read(reader) {
        let millis = reader.readInt();
        return T.as(new date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch(millis));
      }
      write(writer, obj) {
        core.DateTime.as(obj);
        writer.writeInt(obj.millisecondsSinceEpoch);
      }
      static ['_#new#tearOff'](T) {
        return new (date_time_adapter.DateTimeAdapter$(T)).new();
      }
    }
    (DateTimeAdapter.new = function() {
      this[S$0.typeId$2] = 16;
      ;
    }).prototype = DateTimeAdapter.prototype;
    dart.addTypeTests(DateTimeAdapter);
    DateTimeAdapter.prototype[_is_DateTimeAdapter_default] = true;
    dart.addTypeCaches(DateTimeAdapter);
    dart.setMethodSignature(DateTimeAdapter, () => ({
      __proto__: dart.getMethods(DateTimeAdapter.__proto__),
      read: dart.fnType(T, [hive.BinaryReader]),
      write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DateTimeAdapter, I[164]);
    dart.setFieldSignature(DateTimeAdapter, () => ({
      __proto__: dart.getFields(DateTimeAdapter.__proto__),
      typeId: dart.finalFieldType(core.int)
    }));
    return DateTimeAdapter;
  });
  date_time_adapter.DateTimeAdapter = date_time_adapter.DateTimeAdapter$();
  dart.addTypeTests(date_time_adapter.DateTimeAdapter, _is_DateTimeAdapter_default);
  date_time_adapter.DateTimeWithoutTZ = class DateTimeWithoutTZ extends core.DateTime {
    static ['_#fromMillisecondsSinceEpoch#tearOff'](millisecondsSinceEpoch) {
      return new date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);
    }
  };
  (date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch) {
    date_time_adapter.DateTimeWithoutTZ.__proto__.fromMillisecondsSinceEpoch.call(this, millisecondsSinceEpoch);
    ;
  }).prototype = date_time_adapter.DateTimeWithoutTZ.prototype;
  dart.addTypeTests(date_time_adapter.DateTimeWithoutTZ);
  dart.addTypeCaches(date_time_adapter.DateTimeWithoutTZ);
  dart.setLibraryUri(date_time_adapter.DateTimeWithoutTZ, I[164]);
  date_time_adapter.DateTimeWithTimezoneAdapter = class DateTimeWithTimezoneAdapter extends hive.TypeAdapter$(core.DateTime) {
    get typeId() {
      return this[S$0.typeId$3];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let millis = reader.readInt();
      let isUtc = reader.readBool();
      return new core.DateTime.fromMillisecondsSinceEpoch(millis, {isUtc: isUtc});
    }
    write(writer, obj) {
      core.DateTime.as(obj);
      writer.writeInt(obj.millisecondsSinceEpoch);
      writer.writeBool(obj.isUtc);
    }
    static ['_#new#tearOff']() {
      return new date_time_adapter.DateTimeWithTimezoneAdapter.new();
    }
  };
  (date_time_adapter.DateTimeWithTimezoneAdapter.new = function() {
    this[S$0.typeId$3] = 18;
    ;
  }).prototype = date_time_adapter.DateTimeWithTimezoneAdapter.prototype;
  dart.addTypeTests(date_time_adapter.DateTimeWithTimezoneAdapter);
  dart.addTypeCaches(date_time_adapter.DateTimeWithTimezoneAdapter);
  dart.setMethodSignature(date_time_adapter.DateTimeWithTimezoneAdapter, () => ({
    __proto__: dart.getMethods(date_time_adapter.DateTimeWithTimezoneAdapter.__proto__),
    read: dart.fnType(core.DateTime, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(date_time_adapter.DateTimeWithTimezoneAdapter, I[164]);
  dart.setFieldSignature(date_time_adapter.DateTimeWithTimezoneAdapter, () => ({
    __proto__: dart.getFields(date_time_adapter.DateTimeWithTimezoneAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  storage_backend.StorageBackend = class StorageBackend extends core.Object {};
  (storage_backend.StorageBackend.new = function() {
    ;
  }).prototype = storage_backend.StorageBackend.prototype;
  dart.addTypeTests(storage_backend.StorageBackend);
  dart.addTypeCaches(storage_backend.StorageBackend);
  dart.setLibraryUri(storage_backend.StorageBackend, I[165]);
  storage_backend_memory.StorageBackendMemory = class StorageBackendMemory extends storage_backend.StorageBackend {
    get supportsCompaction() {
      return this[S$0.supportsCompaction];
    }
    set supportsCompaction(value) {
      this[S$0.supportsCompaction] = value;
    }
    static ['_#new#tearOff'](bytes, _cipher) {
      return new storage_backend_memory.StorageBackendMemory.new(bytes, _cipher);
    }
    get path() {
      return null;
    }
    initialize(registry, keystore, lazy) {
      let recoveryOffset = this[S$0._frameHelper].framesFromBytes(dart.nullCheck(this[S$0._bytes]), keystore, registry, this[S$0._cipher$1]);
      if (recoveryOffset !== -1) {
        dart.throw(new hive.HiveError.new("Wrong checksum in bytes. Box may be corrupted."));
      }
      this[S$0._bytes] = null;
      return T$.FutureOfvoid().value();
    }
    readValue(frame) {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    writeFrames(frames) {
      return T$.FutureOfvoid().value();
    }
    compact(frames) {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    clear() {
      return T$.FutureOfvoid().value();
    }
    close() {
      return T$.FutureOfvoid().value();
    }
    deleteFromDisk() {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    flush() {
      return T$.FutureOfvoid().value();
    }
  };
  (storage_backend_memory.StorageBackendMemory.new = function(bytes, _cipher) {
    this[S$0.supportsCompaction] = false;
    this[S$0._cipher$1] = _cipher;
    this[S$0._bytes] = bytes;
    this[S$0._frameHelper] = new frame_helper.FrameHelper.new();
    ;
  }).prototype = storage_backend_memory.StorageBackendMemory.prototype;
  dart.addTypeTests(storage_backend_memory.StorageBackendMemory);
  dart.addTypeCaches(storage_backend_memory.StorageBackendMemory);
  dart.setMethodSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getMethods(storage_backend_memory.StorageBackendMemory.__proto__),
    initialize: dart.fnType(async.Future$(dart.void), [hive.TypeRegistry, dart.nullable(keystore$.Keystore), core.bool]),
    readValue: dart.fnType(async.Future, [frame$.Frame]),
    writeFrames: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
    compact: dart.fnType(async.Future$(core.List$(frame$.Frame)), [core.Iterable$(frame$.Frame)]),
    clear: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    flush: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getGetters(storage_backend_memory.StorageBackendMemory.__proto__),
    path: dart.nullable(core.String)
  }));
  dart.setLibraryUri(storage_backend_memory.StorageBackendMemory, I[166]);
  dart.setFieldSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getFields(storage_backend_memory.StorageBackendMemory.__proto__),
    [S$0._cipher$1]: dart.finalFieldType(dart.nullable(hive.HiveCipher)),
    [S$0._frameHelper]: dart.finalFieldType(frame_helper.FrameHelper),
    [S$0._bytes]: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    supportsCompaction: dart.fieldType(core.bool)
  }));
  const _is_BoxBaseImpl_default = Symbol('_is_BoxBaseImpl_default');
  box_base_impl.BoxBaseImpl$ = dart.generic(E => {
    var __t$KeystoreOfE = () => (__t$KeystoreOfE = dart.constFn(keystore$.Keystore$(E)))();
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$IdentityMapOfint$E = () => (__t$IdentityMapOfint$E = dart.constFn(_js_helper.IdentityMap$(core.int, E)))();
    class BoxBaseImpl extends core.Object {
      get name() {
        return this[S$0.name$5];
      }
      set name(value) {
        super.name = value;
      }
      get hive() {
        return this[S$0.hive];
      }
      set hive(value) {
        super.hive = value;
      }
      get backend() {
        return this[S$0.backend];
      }
      set backend(value) {
        super.backend = value;
      }
      static nullImpl(E) {
        return new (box_base_impl._NullBoxBase$(E)).new();
      }
      get keystore() {
        let t246;
        t246 = this[S$0.__BoxBaseImpl_keystore];
        return t246 == null ? dart.throw(new _internal.LateError.fieldNI("keystore")) : t246;
      }
      set keystore(keystore$35param) {
        __t$KeystoreOfE().as(keystore$35param);
        this[S$0.__BoxBaseImpl_keystore] = keystore$35param;
      }
      get valueType() {
        return dart.wrapType(E);
      }
      get isOpen() {
        return this[S$0._open];
      }
      get path() {
        return this.backend.path;
      }
      get keys() {
        this.checkOpen();
        return this.keystore.getKeys();
      }
      get length() {
        this.checkOpen();
        return this.keystore.length;
      }
      get isEmpty() {
        return this.length === 0;
      }
      get isNotEmpty() {
        return this.length > 0;
      }
      checkOpen() {
        if (!this[S$0._open]) {
          dart.throw(new hive.HiveError.new("Box has already been closed."));
        }
      }
      watch(opts$) {
        let key = opts$ && 'key' in opts$ ? opts$.key : null;
        this.checkOpen();
        return this.keystore.watch({key: key});
      }
      keyAt(index) {
        this.checkOpen();
        return dart.nullCheck(this.keystore.getAt(index)).key;
      }
      initialize() {
        return this.backend.initialize(this.hive, this.keystore, this.lazy);
      }
      containsKey(key) {
        this.checkOpen();
        return this.keystore.containsKey(key);
      }
      put(key, value) {
        E.as(value);
        return this.putAll(new (__t$LinkedMapOfdynamic$E()).from([key, value]));
      }
      delete(key) {
        return this.deleteAll([key]);
      }
      add(value) {
        E.as(value);
        return async.async(core.int, (function* add() {
          let key = this.keystore.autoIncrement();
          yield this.put(key, value);
          return key;
        }).bind(this));
      }
      addAll(values) {
        __t$IterableOfE().as(values);
        return async.async(T$.IterableOfint(), (function* addAll() {
          let entries = new (__t$IdentityMapOfint$E()).new();
          for (let value of values) {
            entries[S$.$_set](this.keystore.autoIncrement(), value);
          }
          yield this.putAll(entries);
          return entries[S$.$keys];
        }).bind(this));
      }
      putAt(index, value) {
        E.as(value);
        return this.putAll(new (__t$LinkedMapOfdynamic$E()).from([dart.nullCheck(this.keystore.getAt(index)).key, value]));
      }
      deleteAt(index) {
        return this.delete(dart.nullCheck(this.keystore.getAt(index)).key);
      }
      clear() {
        return async.async(core.int, (function* clear() {
          this.checkOpen();
          yield this.backend.clear();
          return this.keystore.clear();
        }).bind(this));
      }
      compact() {
        return async.async(dart.void, (function* compact() {
          this.checkOpen();
          if (!this.backend.supportsCompaction) return;
          if (this.keystore.deletedEntries === 0) return;
          yield this.backend.compact(this.keystore.frames);
          this.keystore.resetDeletedEntries();
        }).bind(this));
      }
      performCompactionIfNeeded() {
        let t247, t246;
        if (t246 = this.keystore.length, t247 = this.keystore.deletedEntries, this[S$0._compactionStrategy](t246, t247)) {
          return this.compact();
        }
        return T$.FutureOfvoid().value();
      }
      close() {
        return async.async(dart.void, (function* close() {
          if (!this[S$0._open]) return;
          this[S$0._open] = false;
          yield this.keystore.close();
          this.hive.unregisterBox(this.name);
          yield this.backend.close();
        }).bind(this));
      }
      deleteFromDisk() {
        return async.async(dart.void, (function* deleteFromDisk() {
          if (this[S$0._open]) {
            this[S$0._open] = false;
            yield this.keystore.close();
            this.hive.unregisterBox(this.name);
          }
          yield this.backend.deleteFromDisk();
        }).bind(this));
      }
    }
    (BoxBaseImpl.new = function(hive, name, keyComparator, _compactionStrategy, backend) {
      this[S$0.__BoxBaseImpl_keystore] = null;
      this[S$0._open] = true;
      this[S$0.hive] = hive;
      this[S$0.name$5] = name;
      this[S$0._compactionStrategy] = _compactionStrategy;
      this[S$0.backend] = backend;
      this.keystore = new (__t$KeystoreOfE()).new(this, new change_notifier$.ChangeNotifier.new(), keyComparator);
    }).prototype = BoxBaseImpl.prototype;
    dart.addTypeTests(BoxBaseImpl);
    BoxBaseImpl.prototype[_is_BoxBaseImpl_default] = true;
    dart.addTypeCaches(BoxBaseImpl);
    BoxBaseImpl[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setMethodSignature(BoxBaseImpl, () => ({
      __proto__: dart.getMethods(BoxBaseImpl.__proto__),
      checkOpen: dart.fnType(dart.void, []),
      watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
      keyAt: dart.fnType(dart.dynamic, [core.int]),
      initialize: dart.fnType(async.Future$(dart.void), []),
      containsKey: dart.fnType(core.bool, [dart.dynamic]),
      put: dart.fnType(async.Future$(dart.void), [dart.dynamic, dart.nullable(core.Object)]),
      delete: dart.fnType(async.Future$(dart.void), [dart.dynamic]),
      add: dart.fnType(async.Future$(core.int), [dart.nullable(core.Object)]),
      addAll: dart.fnType(async.Future$(core.Iterable$(core.int)), [dart.nullable(core.Object)]),
      putAt: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.Object)]),
      deleteAt: dart.fnType(async.Future$(dart.void), [core.int]),
      clear: dart.fnType(async.Future$(core.int), []),
      compact: dart.fnType(async.Future$(dart.void), []),
      performCompactionIfNeeded: dart.fnType(async.Future$(dart.void), []),
      close: dart.fnType(async.Future$(dart.void), []),
      deleteFromDisk: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setStaticMethodSignature(BoxBaseImpl, () => ['nullImpl']);
    dart.setGetterSignature(BoxBaseImpl, () => ({
      __proto__: dart.getGetters(BoxBaseImpl.__proto__),
      keystore: keystore$.Keystore$(E),
      valueType: core.Type,
      isOpen: core.bool,
      path: dart.nullable(core.String),
      keys: core.Iterable,
      length: core.int,
      isEmpty: core.bool,
      isNotEmpty: core.bool
    }));
    dart.setSetterSignature(BoxBaseImpl, () => ({
      __proto__: dart.getSetters(BoxBaseImpl.__proto__),
      keystore: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BoxBaseImpl, I[167]);
    dart.setFieldSignature(BoxBaseImpl, () => ({
      __proto__: dart.getFields(BoxBaseImpl.__proto__),
      name: dart.finalFieldType(core.String),
      hive: dart.finalFieldType(hive_impl.HiveImpl),
      [S$0._compactionStrategy]: dart.finalFieldType(dart.fnType(core.bool, [core.int, core.int])),
      backend: dart.finalFieldType(storage_backend.StorageBackend),
      [S$0.__BoxBaseImpl_keystore]: dart.fieldType(dart.nullable(keystore$.Keystore$(E))),
      [S$0._open]: dart.fieldType(core.bool)
    }));
    return BoxBaseImpl;
  });
  box_base_impl.BoxBaseImpl = box_base_impl.BoxBaseImpl$();
  dart.addTypeTests(box_base_impl.BoxBaseImpl, _is_BoxBaseImpl_default);
  const _is__NullBoxBase_default = Symbol('_is__NullBoxBase_default');
  box_base_impl._NullBoxBase$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$MapOfdynamic$E = () => (__t$MapOfdynamic$E = dart.constFn(core.Map$(dart.dynamic, E)))();
    class _NullBoxBase extends core.Object {
      add(value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      addAll(values) {
        __t$IterableOfE().as(values);
        return dart.throw(new core.UnimplementedError.new());
      }
      clear() {
        return dart.throw(new core.UnimplementedError.new());
      }
      close() {
        return dart.throw(new core.UnimplementedError.new());
      }
      compact() {
        return dart.throw(new core.UnimplementedError.new());
      }
      containsKey(key) {
        return dart.throw(new core.UnimplementedError.new());
      }
      delete(key) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteAll(keys) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteAt(index) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteFromDisk() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isEmpty() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isNotEmpty() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isOpen() {
        return dart.throw(new core.UnimplementedError.new());
      }
      keyAt(index) {
        return dart.throw(new core.UnimplementedError.new());
      }
      get keys() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get lazy() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get length() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get name() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get path() {
        return dart.throw(new core.UnimplementedError.new());
      }
      put(key, value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      putAll(entries) {
        __t$MapOfdynamic$E().as(entries);
        return dart.throw(new core.UnimplementedError.new());
      }
      putAt(index, value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      watch(opts$) {
        let key = opts$ && 'key' in opts$ ? opts$.key : null;
        return dart.throw(new core.UnimplementedError.new());
      }
      flush() {
        return dart.throw(new core.UnimplementedError.new());
      }
      static ['_#new#tearOff'](E) {
        return new (box_base_impl._NullBoxBase$(E)).new();
      }
    }
    (_NullBoxBase.new = function() {
      ;
    }).prototype = _NullBoxBase.prototype;
    dart.addTypeTests(_NullBoxBase);
    _NullBoxBase.prototype[_is__NullBoxBase_default] = true;
    dart.addTypeCaches(_NullBoxBase);
    _NullBoxBase[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setMethodSignature(_NullBoxBase, () => ({
      __proto__: dart.getMethods(_NullBoxBase.__proto__),
      add: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.Never, []),
      close: dart.fnType(dart.Never, []),
      compact: dart.fnType(dart.Never, []),
      containsKey: dart.fnType(dart.Never, [dart.dynamic]),
      delete: dart.fnType(dart.Never, [dart.dynamic]),
      deleteAll: dart.fnType(dart.Never, [core.Iterable]),
      deleteAt: dart.fnType(dart.Never, [core.int]),
      deleteFromDisk: dart.fnType(dart.Never, []),
      keyAt: dart.fnType(dart.Never, [core.int]),
      put: dart.fnType(dart.Never, [dart.dynamic, dart.nullable(core.Object)]),
      putAll: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      putAt: dart.fnType(dart.Never, [core.int, dart.nullable(core.Object)]),
      watch: dart.fnType(dart.Never, [], {key: dart.dynamic}, {}),
      flush: dart.fnType(dart.Never, [])
    }));
    dart.setGetterSignature(_NullBoxBase, () => ({
      __proto__: dart.getGetters(_NullBoxBase.__proto__),
      isEmpty: dart.Never,
      isNotEmpty: dart.Never,
      isOpen: dart.Never,
      keys: dart.Never,
      lazy: dart.Never,
      length: dart.Never,
      name: dart.Never,
      path: dart.Never
    }));
    dart.setLibraryUri(_NullBoxBase, I[167]);
    return _NullBoxBase;
  });
  box_base_impl._NullBoxBase = box_base_impl._NullBoxBase$();
  dart.addTypeTests(box_base_impl._NullBoxBase, _is__NullBoxBase_default);
  const _is_BoxImpl_default = Symbol('_is_BoxImpl_default');
  box_impl.BoxImpl$ = dart.generic(E => {
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    var __t$MapOfdynamic$E = () => (__t$MapOfdynamic$E = dart.constFn(core.Map$(dart.dynamic, E)))();
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    class BoxImpl extends box_base_impl.BoxBaseImpl$(E) {
      get lazy() {
        return this[S$0.lazy];
      }
      set lazy(value) {
        super.lazy = value;
      }
      static ['_#new#tearOff'](E, hive, name, keyComparator, compactionStrategy, backend) {
        return new (box_impl.BoxImpl$(E)).new(hive, name, keyComparator, compactionStrategy, backend);
      }
      get values() {
        this.checkOpen();
        return this.keystore.getValues();
      }
      valuesBetween(opts$) {
        let startKey = opts$ && 'startKey' in opts$ ? opts$.startKey : null;
        let endKey = opts$ && 'endKey' in opts$ ? opts$.endKey : null;
        this.checkOpen();
        return this.keystore.getValuesBetween(startKey, endKey);
      }
      get(key, opts$) {
        let defaultValue = opts$ && 'defaultValue' in opts$ ? opts$.defaultValue : null;
        __t$EN().as(defaultValue);
        this.checkOpen();
        let frame = this.keystore.get(key);
        if (frame != null) {
          return __t$EN().as(frame.value);
        } else {
          if (defaultValue != null && hive_object.HiveObjectMixin.is(defaultValue)) {
            hive_object['HiveObjectInternal|init'](defaultValue, key, this);
          }
          return defaultValue;
        }
      }
      getAt(index) {
        let t246;
        this.checkOpen();
        return __t$EN().as((t246 = this.keystore.getAt(index), t246 == null ? null : t246.value));
      }
      putAll(kvPairs) {
        __t$MapOfdynamic$E().as(kvPairs);
        let frames = T$.JSArrayOfFrame().of([]);
        for (let key of kvPairs[S$.$keys]) {
          frames[S$.$add](new frame$.Frame.new(key, kvPairs[S$.$_get](key)));
        }
        return this[S$0._writeFrames](frames);
      }
      deleteAll(keys) {
        let frames = T$.JSArrayOfFrame().of([]);
        for (let key of keys) {
          if (this.keystore.containsKey(key)) {
            frames[S$.$add](new frame$.Frame.deleted(key));
          }
        }
        return this[S$0._writeFrames](frames);
      }
      [S$0._writeFrames](frames) {
        return async.async(dart.void, (function* _writeFrames() {
          this.checkOpen();
          if (!this.keystore.beginTransaction(frames)) return;
          try {
            yield this.backend.writeFrames(frames);
            this.keystore.commitTransaction();
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              this.keystore.cancelTransaction();
              dart.rethrow(e$);
            } else
              throw e$;
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      toMap() {
        let map = new (__t$LinkedMapOfdynamic$E()).new();
        for (let frame of this.keystore.frames) {
          map[S$.$_set](frame.key, E.as(frame.value));
        }
        return map;
      }
      flush() {
        return async.async(dart.void, (function* flush() {
          yield this.backend.flush();
        }).bind(this));
      }
    }
    (BoxImpl.new = function(hive, name, keyComparator, compactionStrategy, backend) {
      this[S$0.lazy] = false;
      BoxImpl.__proto__.new.call(this, hive, name, keyComparator, compactionStrategy, backend);
      ;
    }).prototype = BoxImpl.prototype;
    dart.addTypeTests(BoxImpl);
    BoxImpl.prototype[_is_BoxImpl_default] = true;
    dart.addTypeCaches(BoxImpl);
    BoxImpl[dart.implements] = () => [hive.Box$(E)];
    dart.setMethodSignature(BoxImpl, () => ({
      __proto__: dart.getMethods(BoxImpl.__proto__),
      valuesBetween: dart.fnType(core.Iterable$(E), [], {endKey: dart.dynamic, startKey: dart.dynamic}, {}),
      get: dart.fnType(dart.nullable(E), [dart.dynamic], {defaultValue: dart.nullable(core.Object)}, {}),
      getAt: dart.fnType(dart.nullable(E), [core.int]),
      putAll: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.Iterable]),
      [S$0._writeFrames]: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
      toMap: dart.fnType(core.Map$(dart.dynamic, E), []),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setGetterSignature(BoxImpl, () => ({
      __proto__: dart.getGetters(BoxImpl.__proto__),
      values: core.Iterable$(E)
    }));
    dart.setLibraryUri(BoxImpl, I[168]);
    dart.setFieldSignature(BoxImpl, () => ({
      __proto__: dart.getFields(BoxImpl.__proto__),
      lazy: dart.finalFieldType(core.bool)
    }));
    return BoxImpl;
  });
  box_impl.BoxImpl = box_impl.BoxImpl$();
  dart.addTypeTests(box_impl.BoxImpl, _is_BoxImpl_default);
  const _is_LazyBoxImpl_default = Symbol('_is_LazyBoxImpl_default');
  lazy_box_impl.LazyBoxImpl$ = dart.generic(E => {
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    class LazyBoxImpl extends box_base_impl.BoxBaseImpl$(E) {
      get lazy() {
        return this[S$0.lazy$1];
      }
      set lazy(value) {
        super.lazy = value;
      }
      static ['_#new#tearOff'](E, hive, name, keyComparator, compactionStrategy, backend) {
        return new (lazy_box_impl.LazyBoxImpl$(E)).new(hive, name, keyComparator, compactionStrategy, backend);
      }
      get(key, opts$) {
        let defaultValue = opts$ && 'defaultValue' in opts$ ? opts$.defaultValue : null;
        __t$EN().as(defaultValue);
        return async.async(__t$EN(), (function* get() {
          this.checkOpen();
          let frame = this.keystore.get(key);
          if (frame != null) {
            let value = (yield this.backend.readValue(frame));
            if (hive_object.HiveObjectMixin.is(value)) {
              hive_object['HiveObjectInternal|init'](value, key, this);
            }
            return __t$EN().as(value);
          } else {
            if (defaultValue != null && hive_object.HiveObjectMixin.is(defaultValue)) {
              hive_object['HiveObjectInternal|init'](defaultValue, key, this);
            }
            return defaultValue;
          }
        }).bind(this));
      }
      getAt(index) {
        return this.get(this.keystore.keyAt(index));
      }
      putAll(kvPairs) {
        core.Map.as(kvPairs);
        return async.async(dart.void, (function* putAll() {
          this.checkOpen();
          let frames = T$.JSArrayOfFrame().of([]);
          for (let key of kvPairs[S$.$keys]) {
            frames[S$.$add](new frame$.Frame.new(key, kvPairs[S$.$_get](key)));
            if (core.int.is(key)) {
              this.keystore.updateAutoIncrement(key);
            }
          }
          if (frames[S$.$isEmpty]) return;
          yield this.backend.writeFrames(frames);
          for (let frame of frames) {
            if (hive_object.HiveObjectMixin.is(frame.value)) {
              hive_object['HiveObjectInternal|init'](hive_object.HiveObjectMixin.as(frame.value), frame.key, this);
            }
            this.keystore.insert(frame, {lazy: true});
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      deleteAll(keys) {
        return async.async(dart.void, (function* deleteAll() {
          this.checkOpen();
          let frames = T$.JSArrayOfFrame().of([]);
          for (let key of keys) {
            if (this.keystore.containsKey(key)) {
              frames[S$.$add](new frame$.Frame.deleted(key));
            }
          }
          if (frames[S$.$isEmpty]) return;
          yield this.backend.writeFrames(frames);
          for (let frame of frames) {
            this.keystore.insert(frame);
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      flush() {
        return async.async(dart.void, (function* flush() {
          yield this.backend.flush();
        }).bind(this));
      }
    }
    (LazyBoxImpl.new = function(hive, name, keyComparator, compactionStrategy, backend) {
      this[S$0.lazy$1] = true;
      LazyBoxImpl.__proto__.new.call(this, hive, name, keyComparator, compactionStrategy, backend);
      ;
    }).prototype = LazyBoxImpl.prototype;
    dart.addTypeTests(LazyBoxImpl);
    LazyBoxImpl.prototype[_is_LazyBoxImpl_default] = true;
    dart.addTypeCaches(LazyBoxImpl);
    LazyBoxImpl[dart.implements] = () => [hive.LazyBox$(E)];
    dart.setMethodSignature(LazyBoxImpl, () => ({
      __proto__: dart.getMethods(LazyBoxImpl.__proto__),
      get: dart.fnType(async.Future$(dart.nullable(E)), [dart.dynamic], {defaultValue: dart.nullable(core.Object)}, {}),
      getAt: dart.fnType(async.Future$(dart.nullable(E)), [core.int]),
      putAll: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.Iterable]),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(LazyBoxImpl, I[169]);
    dart.setFieldSignature(LazyBoxImpl, () => ({
      __proto__: dart.getFields(LazyBoxImpl.__proto__),
      lazy: dart.finalFieldType(core.bool)
    }));
    return LazyBoxImpl;
  });
  lazy_box_impl.LazyBoxImpl = lazy_box_impl.LazyBoxImpl$();
  dart.addTypeTests(lazy_box_impl.LazyBoxImpl, _is_LazyBoxImpl_default);
  const _is_ResolvedAdapter_default = Symbol('_is_ResolvedAdapter_default');
  type_registry_impl.ResolvedAdapter$ = dart.generic(T => {
    class ResolvedAdapter extends core.Object {
      get adapter() {
        return this[S$0.adapter];
      }
      set adapter(value) {
        super.adapter = value;
      }
      get typeId() {
        return this[S$0.typeId$4];
      }
      set typeId(value) {
        super.typeId = value;
      }
      static ['_#new#tearOff'](T, adapter, typeId) {
        return new (type_registry_impl.ResolvedAdapter$(T)).new(adapter, typeId);
      }
      matchesRuntimeType(value) {
        return dart.runtimeType(value)._equals(dart.wrapType(T));
      }
      matchesType(value) {
        return T.is(value);
      }
    }
    (ResolvedAdapter.new = function(adapter, typeId) {
      this[S$0.adapter] = adapter;
      this[S$0.typeId$4] = typeId;
      ;
    }).prototype = ResolvedAdapter.prototype;
    dart.addTypeTests(ResolvedAdapter);
    ResolvedAdapter.prototype[_is_ResolvedAdapter_default] = true;
    dart.addTypeCaches(ResolvedAdapter);
    dart.setMethodSignature(ResolvedAdapter, () => ({
      __proto__: dart.getMethods(ResolvedAdapter.__proto__),
      matchesRuntimeType: dart.fnType(core.bool, [dart.dynamic]),
      matchesType: dart.fnType(core.bool, [dart.dynamic])
    }));
    dart.setLibraryUri(ResolvedAdapter, I[132]);
    dart.setFieldSignature(ResolvedAdapter, () => ({
      __proto__: dart.getFields(ResolvedAdapter.__proto__),
      adapter: dart.finalFieldType(hive.TypeAdapter),
      typeId: dart.finalFieldType(core.int)
    }));
    return ResolvedAdapter;
  });
  type_registry_impl.ResolvedAdapter = type_registry_impl.ResolvedAdapter$();
  dart.addTypeTests(type_registry_impl.ResolvedAdapter, _is_ResolvedAdapter_default);
  type_registry_impl._NullTypeRegistry = class _NullTypeRegistry extends core.Object {
    static ['_#new#tearOff']() {
      return new type_registry_impl._NullTypeRegistry.new();
    }
    get [S$0._typeAdapters]() {
      return dart.throw(new core.UnimplementedError.new());
    }
    findAdapterForTypeId(typeId) {
      return dart.throw(new core.UnimplementedError.new());
    }
    findAdapterForValue(value) {
      return dart.throw(new core.UnimplementedError.new());
    }
    ignoreTypeId(T, typeId) {
      return dart.throw(new core.UnimplementedError.new());
    }
    isAdapterRegistered(typeId, opts$) {
      let internal = opts$ && 'internal' in opts$ ? opts$.internal : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    registerAdapter(T, adapter, opts$) {
      let internal = opts$ && 'internal' in opts$ ? opts$.internal : false;
      let override = opts$ && 'override' in opts$ ? opts$.override : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    resetAdapters() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (type_registry_impl._NullTypeRegistry.new = function() {
    ;
  }).prototype = type_registry_impl._NullTypeRegistry.prototype;
  dart.addTypeTests(type_registry_impl._NullTypeRegistry);
  dart.addTypeCaches(type_registry_impl._NullTypeRegistry);
  type_registry_impl._NullTypeRegistry[dart.implements] = () => [type_registry_impl.TypeRegistryImpl];
  dart.setMethodSignature(type_registry_impl._NullTypeRegistry, () => ({
    __proto__: dart.getMethods(type_registry_impl._NullTypeRegistry.__proto__),
    findAdapterForTypeId: dart.fnType(dart.Never, [core.int]),
    findAdapterForValue: dart.fnType(dart.Never, [dart.dynamic]),
    ignoreTypeId: dart.gFnType(T => [dart.Never, [core.int]], T => [dart.nullable(core.Object)]),
    isAdapterRegistered: dart.fnType(dart.Never, [core.int], {internal: core.bool}, {}),
    registerAdapter: dart.gFnType(T => [dart.Never, [hive.TypeAdapter$(T)], {internal: core.bool, override: core.bool}, {}], T => [dart.nullable(core.Object)]),
    resetAdapters: dart.fnType(dart.Never, [])
  }));
  dart.setGetterSignature(type_registry_impl._NullTypeRegistry, () => ({
    __proto__: dart.getGetters(type_registry_impl._NullTypeRegistry.__proto__),
    [S$0._typeAdapters]: dart.Never
  }));
  dart.setLibraryUri(type_registry_impl._NullTypeRegistry, I[132]);
  storage_backend.BackendManagerInterface = class BackendManagerInterface extends core.Object {};
  (storage_backend.BackendManagerInterface.new = function() {
    ;
  }).prototype = storage_backend.BackendManagerInterface.prototype;
  dart.addTypeTests(storage_backend.BackendManagerInterface);
  dart.addTypeCaches(storage_backend.BackendManagerInterface);
  dart.setLibraryUri(storage_backend.BackendManagerInterface, I[165]);
  box_collection_stub.BoxCollection = class BoxCollection extends core.Object {
    static open(name, boxNames, opts$) {
      let path = opts$ && 'path' in opts$ ? opts$.path : null;
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (box_collection_stub.BoxCollection.new = function() {
    ;
  }).prototype = box_collection_stub.BoxCollection.prototype;
  dart.addTypeTests(box_collection_stub.BoxCollection);
  dart.addTypeCaches(box_collection_stub.BoxCollection);
  dart.setStaticMethodSignature(box_collection_stub.BoxCollection, () => ['open']);
  dart.setLibraryUri(box_collection_stub.BoxCollection, I[170]);
  const _is_CollectionBox_default$ = Symbol('_is_CollectionBox_default');
  box_collection_stub.CollectionBox$ = dart.generic(V => {
    class CollectionBox extends core.Object {}
    (CollectionBox.new = function() {
      ;
    }).prototype = CollectionBox.prototype;
    dart.addTypeTests(CollectionBox);
    CollectionBox.prototype[_is_CollectionBox_default$] = true;
    dart.addTypeCaches(CollectionBox);
    dart.setLibraryUri(CollectionBox, I[170]);
    return CollectionBox;
  });
  box_collection_stub.CollectionBox = box_collection_stub.CollectionBox$();
  dart.addTypeTests(box_collection_stub.CollectionBox, _is_CollectionBox_default$);
  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {
    get scheme() {
      return this[S$0.scheme];
    }
    set scheme(value) {
      super.scheme = value;
    }
    get parameters() {
      return this[S$0.parameters];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static parseHeader(header) {
      return utils$1.wrapFormatException(T$.ListOfAuthenticationChallenge(), "authentication header", header, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(header);
        scanner.scan(scan$.whitespace);
        let challenges = scan$.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {
          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: "\" \" or \"=\""});
          let params = new (T$.IdentityMapOfString$String()).new();
          while (scanner.scan(",")) {
            scanner.scan(scan$.whitespace);
          }
          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);
          let beforeComma = scanner.position;
          while (scanner.scan(",")) {
            scanner.scan(scan$.whitespace);
            if (scanner.matches(",") || scanner.isDone) continue;
            scanner.expect(scan$.token, {name: "a token"});
            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
            scanner.scan(scan$.whitespace);
            if (!scanner.scan("=")) {
              scanner.position = beforeComma;
              break;
            }
            scanner.scan(scan$.whitespace);
            if (scanner.scan(scan$.token)) {
              params[S$.$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
            } else {
              params[S$.$_set](name, scan$.expectQuotedString(scanner, {name: "a token or a quoted string"}));
            }
            scanner.scan(scan$.whitespace);
            beforeComma = scanner.position;
          }
          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
        }, T$.VoidToAuthenticationChallenge()));
        scanner.expectDone();
        return challenges;
      }, T$.VoidToListOfAuthenticationChallenge()));
    }
    static parse(challenge) {
      return utils$1.wrapFormatException(authentication_challenge.AuthenticationChallenge, "authentication challenge", challenge, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(challenge);
        scanner.scan(scan$.whitespace);
        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);
        let params = new (T$.IdentityMapOfString$String()).new();
        scan$.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T$.VoidTovoid()));
        scanner.expectDone();
        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
      }, T$.VoidToAuthenticationChallenge()));
    }
    static ['_#parse#tearOff'](challenge) {
      return authentication_challenge.AuthenticationChallenge.parse(challenge);
    }
    static _scanScheme(scanner, opts$) {
      let whitespaceName = opts$ && 'whitespaceName' in opts$ ? opts$.whitespaceName : null;
      scanner.expect(scan$.token, {name: "a token"});
      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[S$.$toLowerCase]();
      scanner.scan(scan$.whitespace);
      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[S$.$contains](" ")) {
        scanner.expect(" ", {name: whitespaceName});
      }
      return scheme;
    }
    static _scanAuthParam(scanner, params) {
      scanner.expect(scan$.token, {name: "a token"});
      let name = dart.nullCheck(scanner.lastMatch)._get(0);
      scanner.scan(scan$.whitespace);
      scanner.expect("=");
      scanner.scan(scan$.whitespace);
      if (scanner.scan(scan$.token)) {
        params[S$.$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));
      } else {
        params[S$.$_set](name, scan$.expectQuotedString(scanner, {name: "a token or a quoted string"}));
      }
      scanner.scan(scan$.whitespace);
    }
    static ['_#new#tearOff'](scheme, parameters) {
      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);
    }
  };
  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {
    this[S$0.scheme] = scheme;
    this[S$0.parameters] = new (T$.UnmodifiableMapViewOfString$String()).new(new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;
  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);
  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);
  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);
  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[171]);
  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({
    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),
    scheme: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');
  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {
    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {
      static ['_#new#tearOff'](V) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();
      }
      static ['_#from#tearOff'](V, other) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);
      }
    }
    (CaseInsensitiveMap.new = function() {
      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[S$.$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    (CaseInsensitiveMap.from = function(other) {
      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[S$.$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    dart.addTypeTests(CaseInsensitiveMap);
    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;
    dart.addTypeCaches(CaseInsensitiveMap);
    dart.setLibraryUri(CaseInsensitiveMap, I[172]);
    return CaseInsensitiveMap;
  });
  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();
  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);
  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get encoder() {
      return encoder.chunkedCodingEncoder;
    }
    get decoder() {
      return decoder.chunkedCodingDecoder;
    }
    static ['_#_#tearOff']() {
      return new chunked_coding.ChunkedCodingCodec.__();
    }
  };
  (chunked_coding.ChunkedCodingCodec.__ = function() {
    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);
    ;
  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;
  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);
  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);
  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({
    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),
    encoder: encoder.ChunkedCodingEncoder,
    decoder: decoder.ChunkedCodingDecoder
  }));
  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[173]);
  dart.defineLazy(chunked_coding, {
    /*chunked_coding.chunkedCoding*/get chunkedCoding() {
      return C[333] || CT.C333;
    }
  }, false);
  http_date.formatHttpDate = function formatHttpDate(date) {
    let t247;
    date = date.toUtc();
    let buffer = (t247 = new core.StringBuffer.new(), (() => {
      t247.write(http_date._weekdays[S$.$_get](date.weekday - 1));
      t247.write(", ");
      t247.write(date.day <= 9 ? "0" : "");
      t247.write(date.day[S$.$toString]());
      t247.write(" ");
      t247.write(http_date._months[S$.$_get](date.month - 1));
      t247.write(" ");
      t247.write(date.year[S$.$toString]());
      t247.write(date.hour <= 9 ? " 0" : " ");
      t247.write(date.hour[S$.$toString]());
      t247.write(date.minute <= 9 ? ":0" : ":");
      t247.write(date.minute[S$.$toString]());
      t247.write(date.second <= 9 ? ":0" : ":");
      t247.write(date.second[S$.$toString]());
      t247.write(" GMT");
      return t247;
    })());
    return buffer.toString();
  };
  http_date.parseHttpDate = function parseHttpDate(date) {
    return utils$1.wrapFormatException(core.DateTime, "HTTP date", date, dart.fn(() => {
      let scanner = new string_scanner.StringScanner.new(date);
      if (scanner.scan(http_date._longWeekdayRegExp)) {
        scanner.expect(", ");
        let day = http_date._parseInt(scanner, 2);
        scanner.expect("-");
        let month = http_date._parseMonth(scanner);
        scanner.expect("-");
        let year = 1900 + http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(http_date._shortWeekdayRegExp);
      if (scanner.scan(", ")) {
        let day = http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let month = http_date._parseMonth(scanner);
        scanner.expect(" ");
        let year = http_date._parseInt(scanner, 4);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(" ");
      let month = http_date._parseMonth(scanner);
      scanner.expect(" ");
      let day = scanner.scan(" ") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);
      scanner.expect(" ");
      let time = http_date._parseTime(scanner);
      scanner.expect(" ");
      let year = http_date._parseInt(scanner, 4);
      scanner.expectDone();
      return http_date._makeDateTime(year, month, day, time);
    }, T$.VoidToDateTime()));
  };
  http_date._parseMonth = function _parseMonth(scanner) {
    scanner.expect(http_date._monthRegExp);
    return http_date._months[S$0.$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;
  };
  http_date._parseInt = function _parseInt(scanner, digits) {
    scanner.expect(http_date._digitRegExp);
    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {
      scanner.error("expected a " + dart.str(digits) + "-digit number.");
    }
    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
  };
  http_date._parseTime = function _parseTime(scanner) {
    let hours = http_date._parseInt(scanner, 2);
    if (hours >= 24) scanner.error("hours may not be greater than 24.");
    scanner.expect(":");
    let minutes = http_date._parseInt(scanner, 2);
    if (minutes >= 60) scanner.error("minutes may not be greater than 60.");
    scanner.expect(":");
    let seconds = http_date._parseInt(scanner, 2);
    if (seconds >= 60) scanner.error("seconds may not be greater than 60.");
    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);
  };
  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {
    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);
    if (dateTime.month !== month) {
      dart.throw(new core.FormatException.new("invalid day '" + dart.str(day) + "' for month '" + dart.str(month) + "'."));
    }
    return dateTime;
  };
  dart.defineLazy(http_date, {
    /*http_date._weekdays*/get _weekdays() {
      return C[334] || CT.C334;
    },
    /*http_date._months*/get _months() {
      return C[335] || CT.C335;
    },
    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {
      return core.RegExp.new("Mon|Tue|Wed|Thu|Fri|Sat|Sun");
    },
    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {
      return core.RegExp.new("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday");
    },
    /*http_date._monthRegExp*/get _monthRegExp() {
      return core.RegExp.new("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec");
    },
    /*http_date._digitRegExp*/get _digitRegExp() {
      return core.RegExp.new("\\d+");
    }
  }, false);
  media_type.MediaType = class MediaType extends core.Object {
    get type() {
      return this[S$0.type$3];
    }
    set type(value) {
      super.type = value;
    }
    get subtype() {
      return this[S$0.subtype];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get parameters() {
      return this[S$0.parameters$1];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get mimeType() {
      return this.type + "/" + this.subtype;
    }
    static parse(mediaType) {
      return utils$1.wrapFormatException(media_type.MediaType, "media type", mediaType, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(mediaType);
        scanner.scan(scan$.whitespace);
        scanner.expect(scan$.token);
        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.expect("/");
        scanner.expect(scan$.token);
        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.scan(scan$.whitespace);
        let parameters = new (T$.IdentityMapOfString$String()).new();
        while (scanner.scan(";")) {
          scanner.scan(scan$.whitespace);
          scanner.expect(scan$.token);
          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          scanner.expect("=");
          let value = null;
          if (scanner.scan(scan$.token)) {
            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          } else {
            value = scan$.expectQuotedString(scanner);
          }
          scanner.scan(scan$.whitespace);
          parameters[S$.$_set](attribute, value);
        }
        scanner.expectDone();
        return new media_type.MediaType.new(type, subtype, parameters);
      }, T$.VoidToMediaType()));
    }
    static ['_#parse#tearOff'](mediaType) {
      return media_type.MediaType.parse(mediaType);
    }
    static ['_#new#tearOff'](type, subtype, parameters = null) {
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    change(opts$) {
      let type = opts$ && 'type' in opts$ ? opts$.type : null;
      let subtype = opts$ && 'subtype' in opts$ ? opts$.subtype : null;
      let mimeType = opts$ && 'mimeType' in opts$ ? opts$.mimeType : null;
      let parameters = opts$ && 'parameters' in opts$ ? opts$.parameters : null;
      let clearParameters = opts$ && 'clearParameters' in opts$ ? opts$.clearParameters : false;
      if (mimeType != null) {
        if (type != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [type] and [mimeType]."));
        } else if (subtype != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [subtype] and " + "[mimeType]."));
        }
        let segments = mimeType[S$.$split]("/");
        if (segments[S$.$length] !== 2) {
          dart.throw(new core.FormatException.new("Invalid mime type \"" + dart.str(mimeType) + "\"."));
        }
        type = segments[S$.$_get](0);
        subtype = segments[S$.$_get](1);
      }
      type == null ? type = this.type : null;
      subtype == null ? subtype = this.subtype : null;
      parameters == null ? parameters = new (T$.IdentityMapOfString$String()).new() : null;
      if (!clearParameters) {
        let newParameters = parameters;
        parameters = T$.LinkedHashMapOfString$String().from(this.parameters);
        parameters[S$.$addAll](newParameters);
      }
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    toString() {
      let t247;
      let buffer = (t247 = new core.StringBuffer.new(), (() => {
        t247.write(this.type);
        t247.write("/");
        t247.write(this.subtype);
        return t247;
      })());
      this.parameters[S$.$forEach](dart.fn((attribute, value) => {
        let t247;
        buffer.write("; " + attribute + "=");
        if (scan$.nonToken.hasMatch(value)) {
          t247 = buffer;
          (() => {
            t247.write("\"");
            t247.write(value[S$0.$replaceAllMapped](media_type._escapedChar, dart.fn(match => "\\" + dart.str(match._get(0)), T$.MatchToString())));
            t247.write("\"");
            return t247;
          })();
        } else {
          buffer.write(value);
        }
      }, T$.StringAndStringTovoid()));
      return buffer.toString();
    }
  };
  (media_type.MediaType.new = function(type, subtype, parameters = null) {
    this[S$0.type$3] = type[S$.$toLowerCase]();
    this[S$0.subtype] = subtype[S$.$toLowerCase]();
    this[S$0.parameters$1] = new (T$.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T$.IdentityMapOfString$String()).new() : new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = media_type.MediaType.prototype;
  dart.addTypeTests(media_type.MediaType);
  dart.addTypeCaches(media_type.MediaType);
  dart.setMethodSignature(media_type.MediaType, () => ({
    __proto__: dart.getMethods(media_type.MediaType.__proto__),
    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);
  dart.setGetterSignature(media_type.MediaType, () => ({
    __proto__: dart.getGetters(media_type.MediaType.__proto__),
    mimeType: core.String
  }));
  dart.setLibraryUri(media_type.MediaType, I[174]);
  dart.setFieldSignature(media_type.MediaType, () => ({
    __proto__: dart.getFields(media_type.MediaType.__proto__),
    type: dart.finalFieldType(core.String),
    subtype: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  dart.defineExtensionMethods(media_type.MediaType, ['toString']);
  dart.defineLazy(media_type, {
    /*media_type._escapedChar*/get _escapedChar() {
      return core.RegExp.new("[\"\\x00-\\x1F\\x7F]");
    }
  }, false);
  http_response_error.HttpResponseError = class HttpResponseError extends core.Object {
    get statusCode() {
      return this[S$0.statusCode$3];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    static ['_#new#tearOff'](opts$) {
      let statusCode = opts$ && 'statusCode' in opts$ ? opts$.statusCode : null;
      return new http_response_error.HttpResponseError.new({statusCode: statusCode});
    }
  };
  (http_response_error.HttpResponseError.new = function(opts$) {
    let statusCode = opts$ && 'statusCode' in opts$ ? opts$.statusCode : null;
    this[S$0.statusCode$3] = statusCode;
    ;
  }).prototype = http_response_error.HttpResponseError.prototype;
  dart.addTypeTests(http_response_error.HttpResponseError);
  dart.addTypeCaches(http_response_error.HttpResponseError);
  dart.setLibraryUri(http_response_error.HttpResponseError, I[175]);
  dart.setFieldSignature(http_response_error.HttpResponseError, () => ({
    __proto__: dart.getFields(http_response_error.HttpResponseError.__proto__),
    statusCode: dart.finalFieldType(core.int)
  }));
  javascript_console_message.JavaScriptConsoleMessage = class JavaScriptConsoleMessage extends core.Object {
    get level() {
      return this[S$0.level];
    }
    set level(value) {
      super.level = value;
    }
    get message() {
      return this[S$0.message$10];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](opts$) {
      let level = opts$ && 'level' in opts$ ? opts$.level : null;
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      return new javascript_console_message.JavaScriptConsoleMessage.new({level: level, message: message});
    }
  };
  (javascript_console_message.JavaScriptConsoleMessage.new = function(opts$) {
    let level = opts$ && 'level' in opts$ ? opts$.level : null;
    let message = opts$ && 'message' in opts$ ? opts$.message : null;
    this[S$0.level] = level;
    this[S$0.message$10] = message;
    ;
  }).prototype = javascript_console_message.JavaScriptConsoleMessage.prototype;
  dart.addTypeTests(javascript_console_message.JavaScriptConsoleMessage);
  dart.addTypeCaches(javascript_console_message.JavaScriptConsoleMessage);
  dart.setLibraryUri(javascript_console_message.JavaScriptConsoleMessage, I[176]);
  dart.setFieldSignature(javascript_console_message.JavaScriptConsoleMessage, () => ({
    __proto__: dart.getFields(javascript_console_message.JavaScriptConsoleMessage.__proto__),
    level: dart.finalFieldType(javascript_log_level.JavaScriptLogLevel),
    message: dart.finalFieldType(core.String)
  }));
  javascript_log_level.JavaScriptLogLevel = class JavaScriptLogLevel extends core._Enum {
    [S$._enumToString]() {
      return "JavaScriptLogLevel." + this[S$._name];
    }
  };
  (javascript_log_level.JavaScriptLogLevel.new = function(index, name) {
    javascript_log_level.JavaScriptLogLevel.__proto__.new.call(this, index, name);
    ;
  }).prototype = javascript_log_level.JavaScriptLogLevel.prototype;
  dart.addTypeTests(javascript_log_level.JavaScriptLogLevel);
  dart.addTypeCaches(javascript_log_level.JavaScriptLogLevel);
  dart.setMethodSignature(javascript_log_level.JavaScriptLogLevel, () => ({
    __proto__: dart.getMethods(javascript_log_level.JavaScriptLogLevel.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(javascript_log_level.JavaScriptLogLevel, I[177]);
  dart.setStaticFieldSignature(javascript_log_level.JavaScriptLogLevel, () => ['values', 'error', 'warning', 'debug', 'info', 'log']);
  dart.defineLazy(javascript_log_level.JavaScriptLogLevel, {
    /*javascript_log_level.JavaScriptLogLevel.values*/get values() {
      return C[336] || CT.C336;
    },
    /*javascript_log_level.JavaScriptLogLevel.error*/get error() {
      return C[337] || CT.C337;
    },
    /*javascript_log_level.JavaScriptLogLevel.warning*/get warning() {
      return C[338] || CT.C338;
    },
    /*javascript_log_level.JavaScriptLogLevel.debug*/get debug() {
      return C[339] || CT.C339;
    },
    /*javascript_log_level.JavaScriptLogLevel.info*/get info() {
      return C[340] || CT.C340;
    },
    /*javascript_log_level.JavaScriptLogLevel.log*/get log() {
      return C[341] || CT.C341;
    }
  }, false);
  javascript_message.JavaScriptMessage = class JavaScriptMessage extends core.Object {
    get message() {
      return this[S$0.message$11];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](opts$) {
      let message = opts$ && 'message' in opts$ ? opts$.message : null;
      return new javascript_message.JavaScriptMessage.new({message: message});
    }
  };
  (javascript_message.JavaScriptMessage.new = function(opts$) {
    let message = opts$ && 'message' in opts$ ? opts$.message : null;
    this[S$0.message$11] = message;
    ;
  }).prototype = javascript_message.JavaScriptMessage.prototype;
  dart.addTypeTests(javascript_message.JavaScriptMessage);
  dart.addTypeCaches(javascript_message.JavaScriptMessage);
  dart.setLibraryUri(javascript_message.JavaScriptMessage, I[178]);
  dart.setFieldSignature(javascript_message.JavaScriptMessage, () => ({
    __proto__: dart.getFields(javascript_message.JavaScriptMessage.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  javascript_mode.JavaScriptMode = class JavaScriptMode extends core._Enum {
    [S$._enumToString]() {
      return "JavaScriptMode." + this[S$._name];
    }
  };
  (javascript_mode.JavaScriptMode.new = function(index, name) {
    javascript_mode.JavaScriptMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = javascript_mode.JavaScriptMode.prototype;
  dart.addTypeTests(javascript_mode.JavaScriptMode);
  dart.addTypeCaches(javascript_mode.JavaScriptMode);
  dart.setMethodSignature(javascript_mode.JavaScriptMode, () => ({
    __proto__: dart.getMethods(javascript_mode.JavaScriptMode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(javascript_mode.JavaScriptMode, I[179]);
  dart.setStaticFieldSignature(javascript_mode.JavaScriptMode, () => ['values', 'disabled', 'unrestricted']);
  dart.defineLazy(javascript_mode.JavaScriptMode, {
    /*javascript_mode.JavaScriptMode.values*/get values() {
      return C[342] || CT.C342;
    },
    /*javascript_mode.JavaScriptMode.disabled*/get disabled() {
      return C[343] || CT.C343;
    },
    /*javascript_mode.JavaScriptMode.unrestricted*/get unrestricted() {
      return C[344] || CT.C344;
    }
  }, false);
  load_request_params.LoadRequestMethod = class LoadRequestMethod extends core._Enum {
    [S$._enumToString]() {
      return "LoadRequestMethod." + this[S$._name];
    }
  };
  (load_request_params.LoadRequestMethod.new = function(index, name) {
    load_request_params.LoadRequestMethod.__proto__.new.call(this, index, name);
    ;
  }).prototype = load_request_params.LoadRequestMethod.prototype;
  dart.addTypeTests(load_request_params.LoadRequestMethod);
  dart.addTypeCaches(load_request_params.LoadRequestMethod);
  dart.setMethodSignature(load_request_params.LoadRequestMethod, () => ({
    __proto__: dart.getMethods(load_request_params.LoadRequestMethod.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(load_request_params.LoadRequestMethod, I[180]);
  dart.setStaticFieldSignature(load_request_params.LoadRequestMethod, () => ['values', 'get', 'post']);
  dart.defineLazy(load_request_params.LoadRequestMethod, {
    /*load_request_params.LoadRequestMethod.values*/get values() {
      return C[345] || CT.C345;
    },
    /*load_request_params.LoadRequestMethod.get*/get get() {
      return C[315] || CT.C315;
    },
    /*load_request_params.LoadRequestMethod.post*/get post() {
      return C[346] || CT.C346;
    }
  }, false);
  load_request_params.LoadRequestParams = class LoadRequestParams extends core.Object {
    get uri() {
      return this[S$0.uri$2];
    }
    set uri(value) {
      super.uri = value;
    }
    get method() {
      return this[S$0.method$2];
    }
    set method(value) {
      super.method = value;
    }
    get headers() {
      return this[S$0.headers$11];
    }
    set headers(value) {
      super.headers = value;
    }
    get body() {
      return this[S$0.body$2];
    }
    set body(value) {
      super.body = value;
    }
    static ['_#new#tearOff'](opts$) {
      let uri = opts$ && 'uri' in opts$ ? opts$.uri : null;
      let method = opts$ && 'method' in opts$ ? opts$.method : C[315] || CT.C315;
      let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
      let body = opts$ && 'body' in opts$ ? opts$.body : null;
      return new load_request_params.LoadRequestParams.new({uri: uri, method: method, headers: headers, body: body});
    }
  };
  (load_request_params.LoadRequestParams.new = function(opts$) {
    let uri = opts$ && 'uri' in opts$ ? opts$.uri : null;
    let method = opts$ && 'method' in opts$ ? opts$.method : C[315] || CT.C315;
    let headers = opts$ && 'headers' in opts$ ? opts$.headers : C[16] || CT.C16;
    let body = opts$ && 'body' in opts$ ? opts$.body : null;
    this[S$0.uri$2] = uri;
    this[S$0.method$2] = method;
    this[S$0.headers$11] = headers;
    this[S$0.body$2] = body;
    ;
  }).prototype = load_request_params.LoadRequestParams.prototype;
  dart.addTypeTests(load_request_params.LoadRequestParams);
  dart.addTypeCaches(load_request_params.LoadRequestParams);
  dart.setLibraryUri(load_request_params.LoadRequestParams, I[180]);
  dart.setFieldSignature(load_request_params.LoadRequestParams, () => ({
    __proto__: dart.getFields(load_request_params.LoadRequestParams.__proto__),
    uri: dart.finalFieldType(core.Uri),
    method: dart.finalFieldType(load_request_params.LoadRequestMethod),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    body: dart.finalFieldType(dart.nullable(typed_data.Uint8List))
  }));
  load_request_params['LoadRequestMethodExtensions|serialize'] = function LoadRequestMethodExtensions$124serialize($this) {
    switch ($this) {
      case C[315] || CT.C315:
        {
          return "get";
        }
      case C[346] || CT.C346:
        {
          return "post";
        }
    }
  };
  load_request_params['LoadRequestMethodExtensions|get#serialize'] = function LoadRequestMethodExtensions$124get$35serialize($this) {
    return dart.fn(() => load_request_params['LoadRequestMethodExtensions|serialize']($this), T$.VoidToString());
  };
  navigation_decision.NavigationDecision = class NavigationDecision extends core._Enum {
    [S$._enumToString]() {
      return "NavigationDecision." + this[S$._name];
    }
  };
  (navigation_decision.NavigationDecision.new = function(index, name) {
    navigation_decision.NavigationDecision.__proto__.new.call(this, index, name);
    ;
  }).prototype = navigation_decision.NavigationDecision.prototype;
  dart.addTypeTests(navigation_decision.NavigationDecision);
  dart.addTypeCaches(navigation_decision.NavigationDecision);
  dart.setMethodSignature(navigation_decision.NavigationDecision, () => ({
    __proto__: dart.getMethods(navigation_decision.NavigationDecision.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(navigation_decision.NavigationDecision, I[181]);
  dart.setStaticFieldSignature(navigation_decision.NavigationDecision, () => ['values', 'prevent', 'navigate']);
  dart.defineLazy(navigation_decision.NavigationDecision, {
    /*navigation_decision.NavigationDecision.values*/get values() {
      return C[347] || CT.C347;
    },
    /*navigation_decision.NavigationDecision.prevent*/get prevent() {
      return C[348] || CT.C348;
    },
    /*navigation_decision.NavigationDecision.navigate*/get navigate() {
      return C[349] || CT.C349;
    }
  }, false);
  navigation_request.NavigationRequest = class NavigationRequest extends core.Object {
    get url() {
      return this[S$0.url$5];
    }
    set url(value) {
      super.url = value;
    }
    get isMainFrame() {
      return this[S$0.isMainFrame];
    }
    set isMainFrame(value) {
      super.isMainFrame = value;
    }
    static ['_#new#tearOff'](opts$) {
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      let isMainFrame = opts$ && 'isMainFrame' in opts$ ? opts$.isMainFrame : null;
      return new navigation_request.NavigationRequest.new({url: url, isMainFrame: isMainFrame});
    }
  };
  (navigation_request.NavigationRequest.new = function(opts$) {
    let url = opts$ && 'url' in opts$ ? opts$.url : null;
    let isMainFrame = opts$ && 'isMainFrame' in opts$ ? opts$.isMainFrame : null;
    this[S$0.url$5] = url;
    this[S$0.isMainFrame] = isMainFrame;
    ;
  }).prototype = navigation_request.NavigationRequest.prototype;
  dart.addTypeTests(navigation_request.NavigationRequest);
  dart.addTypeCaches(navigation_request.NavigationRequest);
  dart.setLibraryUri(navigation_request.NavigationRequest, I[182]);
  dart.setFieldSignature(navigation_request.NavigationRequest, () => ({
    __proto__: dart.getFields(navigation_request.NavigationRequest.__proto__),
    url: dart.finalFieldType(core.String),
    isMainFrame: dart.finalFieldType(core.bool)
  }));
  platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams = class PlatformNavigationDelegateCreationParams extends core.Object {
    static ['_#new#tearOff']() {
      return new platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams.new();
    }
  };
  (platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams.new = function() {
    ;
  }).prototype = platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams.prototype;
  dart.addTypeTests(platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams);
  dart.addTypeCaches(platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams);
  dart.setLibraryUri(platform_navigation_delegate_creation_params.PlatformNavigationDelegateCreationParams, I[183]);
  platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams = class PlatformWebViewControllerCreationParams extends core.Object {
    static ['_#new#tearOff']() {
      return new platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams.new();
    }
  };
  (platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams.new = function() {
    ;
  }).prototype = platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams.prototype;
  dart.addTypeTests(platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams);
  dart.addTypeCaches(platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams);
  dart.setLibraryUri(platform_webview_controller_creation_params.PlatformWebViewControllerCreationParams, I[184]);
  platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams = class PlatformWebViewCookieManagerCreationParams extends core.Object {
    static ['_#new#tearOff']() {
      return new platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams.new();
    }
  };
  (platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams.new = function() {
    ;
  }).prototype = platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams.prototype;
  dart.addTypeTests(platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams);
  dart.addTypeCaches(platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams);
  dart.setLibraryUri(platform_webview_cookie_manager_creation_params.PlatformWebViewCookieManagerCreationParams, I[185]);
  platform_webview_permission_request.WebViewPermissionResourceType = class WebViewPermissionResourceType extends core.Object {
    get name() {
      return this[S$0.name$6];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new platform_webview_permission_request.WebViewPermissionResourceType.new(name);
    }
  };
  (platform_webview_permission_request.WebViewPermissionResourceType.new = function(name) {
    this[S$0.name$6] = name;
    ;
  }).prototype = platform_webview_permission_request.WebViewPermissionResourceType.prototype;
  dart.addTypeTests(platform_webview_permission_request.WebViewPermissionResourceType);
  dart.addTypeCaches(platform_webview_permission_request.WebViewPermissionResourceType);
  dart.setLibraryUri(platform_webview_permission_request.WebViewPermissionResourceType, I[186]);
  dart.setFieldSignature(platform_webview_permission_request.WebViewPermissionResourceType, () => ({
    __proto__: dart.getFields(platform_webview_permission_request.WebViewPermissionResourceType.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(platform_webview_permission_request.WebViewPermissionResourceType, () => ['camera', 'microphone']);
  dart.defineLazy(platform_webview_permission_request.WebViewPermissionResourceType, {
    /*platform_webview_permission_request.WebViewPermissionResourceType.camera*/get camera() {
      return C[350] || CT.C350;
    },
    /*platform_webview_permission_request.WebViewPermissionResourceType.microphone*/get microphone() {
      return C[351] || CT.C351;
    }
  }, false);
  platform_webview_permission_request.PlatformWebViewPermissionRequest = class PlatformWebViewPermissionRequest extends core.Object {
    get types() {
      return this[S$0.types$1];
    }
    set types(value) {
      super.types = value;
    }
  };
  (platform_webview_permission_request.PlatformWebViewPermissionRequest.new = function(opts$) {
    let types = opts$ && 'types' in opts$ ? opts$.types : null;
    this[S$0.types$1] = types;
    ;
  }).prototype = platform_webview_permission_request.PlatformWebViewPermissionRequest.prototype;
  dart.addTypeTests(platform_webview_permission_request.PlatformWebViewPermissionRequest);
  dart.addTypeCaches(platform_webview_permission_request.PlatformWebViewPermissionRequest);
  dart.setLibraryUri(platform_webview_permission_request.PlatformWebViewPermissionRequest, I[186]);
  dart.setFieldSignature(platform_webview_permission_request.PlatformWebViewPermissionRequest, () => ({
    __proto__: dart.getFields(platform_webview_permission_request.PlatformWebViewPermissionRequest.__proto__),
    types: dart.finalFieldType(core.Set$(platform_webview_permission_request.WebViewPermissionResourceType))
  }));
  platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams = class PlatformWebViewWidgetCreationParams extends core.Object {
    get key() {
      return this[S$0.key$2];
    }
    set key(value) {
      super.key = value;
    }
    get controller() {
      return this[S$0.controller];
    }
    set controller(value) {
      super.controller = value;
    }
    get layoutDirection() {
      return this[S$0.layoutDirection];
    }
    set layoutDirection(value) {
      super.layoutDirection = value;
    }
    get gestureRecognizers() {
      return this[S$0.gestureRecognizers];
    }
    set gestureRecognizers(value) {
      super.gestureRecognizers = value;
    }
    static ['_#new#tearOff'](opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      let controller = opts$ && 'controller' in opts$ ? opts$.controller : null;
      let layoutDirection = opts$ && 'layoutDirection' in opts$ ? opts$.layoutDirection : C[317] || CT.C317;
      let gestureRecognizers = opts$ && 'gestureRecognizers' in opts$ ? opts$.gestureRecognizers : C[22] || CT.C22;
      return new platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams.new({key: key, controller: controller, layoutDirection: layoutDirection, gestureRecognizers: gestureRecognizers});
    }
  };
  (platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams.new = function(opts$) {
    let key = opts$ && 'key' in opts$ ? opts$.key : null;
    let controller = opts$ && 'controller' in opts$ ? opts$.controller : null;
    let layoutDirection = opts$ && 'layoutDirection' in opts$ ? opts$.layoutDirection : C[317] || CT.C317;
    let gestureRecognizers = opts$ && 'gestureRecognizers' in opts$ ? opts$.gestureRecognizers : C[22] || CT.C22;
    this[S$0.key$2] = key;
    this[S$0.controller] = controller;
    this[S$0.layoutDirection] = layoutDirection;
    this[S$0.gestureRecognizers] = gestureRecognizers;
    ;
  }).prototype = platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams.prototype;
  dart.addTypeTests(platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams);
  dart.addTypeCaches(platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams);
  dart.setLibraryUri(platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams, I[187]);
  dart.setFieldSignature(platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams, () => ({
    __proto__: dart.getFields(platform_webview_widget_creation_params.PlatformWebViewWidgetCreationParams.__proto__),
    key: dart.finalFieldType(dart.nullable(key.Key)),
    controller: dart.finalFieldType(platform_webview_controller.PlatformWebViewController),
    layoutDirection: dart.finalFieldType(ui.TextDirection),
    gestureRecognizers: dart.finalFieldType(core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))
  }));
  url_change.UrlChange = class UrlChange extends core.Object {
    get url() {
      return this[S$0.url$6];
    }
    set url(value) {
      super.url = value;
    }
    static ['_#new#tearOff'](opts$) {
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      return new url_change.UrlChange.new({url: url});
    }
  };
  (url_change.UrlChange.new = function(opts$) {
    let url = opts$ && 'url' in opts$ ? opts$.url : null;
    this[S$0.url$6] = url;
    ;
  }).prototype = url_change.UrlChange.prototype;
  dart.addTypeTests(url_change.UrlChange);
  dart.addTypeCaches(url_change.UrlChange);
  dart.setLibraryUri(url_change.UrlChange, I[188]);
  dart.setFieldSignature(url_change.UrlChange, () => ({
    __proto__: dart.getFields(url_change.UrlChange.__proto__),
    url: dart.finalFieldType(dart.nullable(core.String))
  }));
  web_resource_error.WebResourceErrorType = class WebResourceErrorType extends core._Enum {
    [S$._enumToString]() {
      return "WebResourceErrorType." + this[S$._name];
    }
  };
  (web_resource_error.WebResourceErrorType.new = function(index, name) {
    web_resource_error.WebResourceErrorType.__proto__.new.call(this, index, name);
    ;
  }).prototype = web_resource_error.WebResourceErrorType.prototype;
  dart.addTypeTests(web_resource_error.WebResourceErrorType);
  dart.addTypeCaches(web_resource_error.WebResourceErrorType);
  dart.setMethodSignature(web_resource_error.WebResourceErrorType, () => ({
    __proto__: dart.getMethods(web_resource_error.WebResourceErrorType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(web_resource_error.WebResourceErrorType, I[189]);
  dart.setStaticFieldSignature(web_resource_error.WebResourceErrorType, () => ['values', 'authentication', 'badUrl', 'connect', 'failedSslHandshake', 'file', 'fileNotFound', 'hostLookup', 'io', 'proxyAuthentication', 'redirectLoop', 'timeout', 'tooManyRequests', 'unknown', 'unsafeResource', 'unsupportedAuthScheme', 'unsupportedScheme', 'webContentProcessTerminated', 'webViewInvalidated', 'javaScriptExceptionOccurred', 'javaScriptResultTypeIsUnsupported']);
  dart.defineLazy(web_resource_error.WebResourceErrorType, {
    /*web_resource_error.WebResourceErrorType.values*/get values() {
      return C[352] || CT.C352;
    },
    /*web_resource_error.WebResourceErrorType.authentication*/get authentication() {
      return C[353] || CT.C353;
    },
    /*web_resource_error.WebResourceErrorType.badUrl*/get badUrl() {
      return C[354] || CT.C354;
    },
    /*web_resource_error.WebResourceErrorType.connect*/get connect() {
      return C[355] || CT.C355;
    },
    /*web_resource_error.WebResourceErrorType.failedSslHandshake*/get failedSslHandshake() {
      return C[356] || CT.C356;
    },
    /*web_resource_error.WebResourceErrorType.file*/get file() {
      return C[357] || CT.C357;
    },
    /*web_resource_error.WebResourceErrorType.fileNotFound*/get fileNotFound() {
      return C[358] || CT.C358;
    },
    /*web_resource_error.WebResourceErrorType.hostLookup*/get hostLookup() {
      return C[359] || CT.C359;
    },
    /*web_resource_error.WebResourceErrorType.io*/get io() {
      return C[360] || CT.C360;
    },
    /*web_resource_error.WebResourceErrorType.proxyAuthentication*/get proxyAuthentication() {
      return C[361] || CT.C361;
    },
    /*web_resource_error.WebResourceErrorType.redirectLoop*/get redirectLoop() {
      return C[362] || CT.C362;
    },
    /*web_resource_error.WebResourceErrorType.timeout*/get timeout() {
      return C[363] || CT.C363;
    },
    /*web_resource_error.WebResourceErrorType.tooManyRequests*/get tooManyRequests() {
      return C[364] || CT.C364;
    },
    /*web_resource_error.WebResourceErrorType.unknown*/get unknown() {
      return C[365] || CT.C365;
    },
    /*web_resource_error.WebResourceErrorType.unsafeResource*/get unsafeResource() {
      return C[366] || CT.C366;
    },
    /*web_resource_error.WebResourceErrorType.unsupportedAuthScheme*/get unsupportedAuthScheme() {
      return C[367] || CT.C367;
    },
    /*web_resource_error.WebResourceErrorType.unsupportedScheme*/get unsupportedScheme() {
      return C[368] || CT.C368;
    },
    /*web_resource_error.WebResourceErrorType.webContentProcessTerminated*/get webContentProcessTerminated() {
      return C[369] || CT.C369;
    },
    /*web_resource_error.WebResourceErrorType.webViewInvalidated*/get webViewInvalidated() {
      return C[370] || CT.C370;
    },
    /*web_resource_error.WebResourceErrorType.javaScriptExceptionOccurred*/get javaScriptExceptionOccurred() {
      return C[371] || CT.C371;
    },
    /*web_resource_error.WebResourceErrorType.javaScriptResultTypeIsUnsupported*/get javaScriptResultTypeIsUnsupported() {
      return C[372] || CT.C372;
    }
  }, false);
  web_resource_error.WebResourceError = class WebResourceError extends core.Object {
    get errorCode() {
      return this[S$0.errorCode];
    }
    set errorCode(value) {
      super.errorCode = value;
    }
    get description() {
      return this[S$0.description];
    }
    set description(value) {
      super.description = value;
    }
    get errorType() {
      return this[S$0.errorType];
    }
    set errorType(value) {
      super.errorType = value;
    }
    get isForMainFrame() {
      return this[S$0.isForMainFrame];
    }
    set isForMainFrame(value) {
      super.isForMainFrame = value;
    }
    get url() {
      return this[S$0.url$7];
    }
    set url(value) {
      super.url = value;
    }
    static ['_#new#tearOff'](opts$) {
      let errorCode = opts$ && 'errorCode' in opts$ ? opts$.errorCode : null;
      let description = opts$ && 'description' in opts$ ? opts$.description : null;
      let errorType = opts$ && 'errorType' in opts$ ? opts$.errorType : null;
      let isForMainFrame = opts$ && 'isForMainFrame' in opts$ ? opts$.isForMainFrame : null;
      let url = opts$ && 'url' in opts$ ? opts$.url : null;
      return new web_resource_error.WebResourceError.new({errorCode: errorCode, description: description, errorType: errorType, isForMainFrame: isForMainFrame, url: url});
    }
  };
  (web_resource_error.WebResourceError.new = function(opts$) {
    let errorCode = opts$ && 'errorCode' in opts$ ? opts$.errorCode : null;
    let description = opts$ && 'description' in opts$ ? opts$.description : null;
    let errorType = opts$ && 'errorType' in opts$ ? opts$.errorType : null;
    let isForMainFrame = opts$ && 'isForMainFrame' in opts$ ? opts$.isForMainFrame : null;
    let url = opts$ && 'url' in opts$ ? opts$.url : null;
    this[S$0.errorCode] = errorCode;
    this[S$0.description] = description;
    this[S$0.errorType] = errorType;
    this[S$0.isForMainFrame] = isForMainFrame;
    this[S$0.url$7] = url;
    ;
  }).prototype = web_resource_error.WebResourceError.prototype;
  dart.addTypeTests(web_resource_error.WebResourceError);
  dart.addTypeCaches(web_resource_error.WebResourceError);
  dart.setLibraryUri(web_resource_error.WebResourceError, I[189]);
  dart.setFieldSignature(web_resource_error.WebResourceError, () => ({
    __proto__: dart.getFields(web_resource_error.WebResourceError.__proto__),
    errorCode: dart.finalFieldType(core.int),
    description: dart.finalFieldType(core.String),
    errorType: dart.finalFieldType(dart.nullable(web_resource_error.WebResourceErrorType)),
    isForMainFrame: dart.finalFieldType(dart.nullable(core.bool)),
    url: dart.finalFieldType(dart.nullable(core.String))
  }));
  webview_cookie.WebViewCookie = class WebViewCookie extends core.Object {
    get name() {
      return this[S$0.name$7];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[S$0.value$1];
    }
    set value(value) {
      super.value = value;
    }
    get domain() {
      return this[S$0.domain];
    }
    set domain(value) {
      super.domain = value;
    }
    get path() {
      return this[S$0.path$1];
    }
    set path(value) {
      super.path = value;
    }
    static ['_#new#tearOff'](opts$) {
      let name = opts$ && 'name' in opts$ ? opts$.name : null;
      let value = opts$ && 'value' in opts$ ? opts$.value : null;
      let domain = opts$ && 'domain' in opts$ ? opts$.domain : null;
      let path = opts$ && 'path' in opts$ ? opts$.path : "/";
      return new webview_cookie.WebViewCookie.new({name: name, value: value, domain: domain, path: path});
    }
  };
  (webview_cookie.WebViewCookie.new = function(opts$) {
    let name = opts$ && 'name' in opts$ ? opts$.name : null;
    let value = opts$ && 'value' in opts$ ? opts$.value : null;
    let domain = opts$ && 'domain' in opts$ ? opts$.domain : null;
    let path = opts$ && 'path' in opts$ ? opts$.path : "/";
    this[S$0.name$7] = name;
    this[S$0.value$1] = value;
    this[S$0.domain] = domain;
    this[S$0.path$1] = path;
    ;
  }).prototype = webview_cookie.WebViewCookie.prototype;
  dart.addTypeTests(webview_cookie.WebViewCookie);
  dart.addTypeCaches(webview_cookie.WebViewCookie);
  dart.setLibraryUri(webview_cookie.WebViewCookie, I[190]);
  dart.setFieldSignature(webview_cookie.WebViewCookie, () => ({
    __proto__: dart.getFields(webview_cookie.WebViewCookie.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String),
    domain: dart.finalFieldType(core.String),
    path: dart.finalFieldType(core.String)
  }));
  const _is_ValueStream_default = Symbol('_is_ValueStream_default');
  value_stream.ValueStream$ = dart.generic(T => {
    class ValueStream extends core.Object {}
    (ValueStream.new = function() {
      ;
    }).prototype = ValueStream.prototype;
    ValueStream.prototype[dart.isStream] = true;
    dart.addTypeTests(ValueStream);
    ValueStream.prototype[_is_ValueStream_default] = true;
    dart.addTypeCaches(ValueStream);
    ValueStream[dart.implements] = () => [async.Stream$(T)];
    dart.setLibraryUri(ValueStream, I[191]);
    return ValueStream;
  });
  value_stream.ValueStream = value_stream.ValueStream$();
  dart.addTypeTests(value_stream.ValueStream, _is_ValueStream_default);
  value_stream._MissingCase = class _MissingCase extends core._Enum {
    [S$._enumToString]() {
      return "_MissingCase." + this[S$._name];
    }
  };
  (value_stream._MissingCase.new = function(index, name) {
    value_stream._MissingCase.__proto__.new.call(this, index, name);
    ;
  }).prototype = value_stream._MissingCase.prototype;
  dart.addTypeTests(value_stream._MissingCase);
  dart.addTypeCaches(value_stream._MissingCase);
  dart.setMethodSignature(value_stream._MissingCase, () => ({
    __proto__: dart.getMethods(value_stream._MissingCase.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(value_stream._MissingCase, I[191]);
  dart.setStaticFieldSignature(value_stream._MissingCase, () => ['values', 'value', 'error']);
  dart.defineLazy(value_stream._MissingCase, {
    /*value_stream._MissingCase.values*/get values() {
      return C[373] || CT.C373;
    },
    /*value_stream._MissingCase.value*/get value() {
      return C[374] || CT.C374;
    },
    /*value_stream._MissingCase.error*/get error() {
      return C[375] || CT.C375;
    }
  }, false);
  value_stream.ValueStreamError = class ValueStreamError extends core.Error {
    static ['_#_#tearOff'](_missingCase) {
      return new value_stream.ValueStreamError.__(_missingCase);
    }
    static hasNoValue() {
      return new value_stream.ValueStreamError.__(value_stream._MissingCase.value);
    }
    static ['_#hasNoValue#tearOff']() {
      return value_stream.ValueStreamError.hasNoValue();
    }
    static hasNoError() {
      return new value_stream.ValueStreamError.__(value_stream._MissingCase.error);
    }
    static ['_#hasNoError#tearOff']() {
      return value_stream.ValueStreamError.hasNoError();
    }
    toString() {
      switch (this[S$0._missingCase]) {
        case C[374] || CT.C374:
          {
            return "ValueStream has no value. You should check ValueStream.hasValue " + "before accessing ValueStream.value, or use ValueStream.valueOrNull instead.";
          }
        case C[375] || CT.C375:
          {
            return "ValueStream has no error. You should check ValueStream.hasError " + "before accessing ValueStream.error, or use ValueStream.errorOrNull instead.";
          }
      }
    }
  };
  (value_stream.ValueStreamError.__ = function(_missingCase) {
    this[S$0._missingCase] = _missingCase;
    value_stream.ValueStreamError.__proto__.new.call(this);
    ;
  }).prototype = value_stream.ValueStreamError.prototype;
  dart.addTypeTests(value_stream.ValueStreamError);
  dart.addTypeCaches(value_stream.ValueStreamError);
  dart.setStaticMethodSignature(value_stream.ValueStreamError, () => ['hasNoValue', 'hasNoError']);
  dart.setLibraryUri(value_stream.ValueStreamError, I[191]);
  dart.setFieldSignature(value_stream.ValueStreamError, () => ({
    __proto__: dart.getFields(value_stream.ValueStreamError.__proto__),
    [S$0._missingCase]: dart.finalFieldType(value_stream._MissingCase)
  }));
  dart.defineExtensionMethods(value_stream.ValueStreamError, ['toString']);
  const _is_ForwardingSink_default = Symbol('_is_ForwardingSink_default');
  forwarding_sink.ForwardingSink$ = dart.generic((T, R) => {
    var __t$EventSinkOfR = () => (__t$EventSinkOfR = dart.constFn(async.EventSink$(R)))();
    class ForwardingSink extends core.Object {
      get sink() {
        let t261;
        t261 = this[S$1._sink$1];
        return t261 == null ? dart.throw(new core.StateError.new("Must call setSink(sink) before accessing!")) : t261;
      }
      setSink(sink) {
        __t$EventSinkOfR().as(sink);
        return this[S$1._sink$1] = sink;
      }
    }
    (ForwardingSink.new = function() {
      this[S$1._sink$1] = null;
      ;
    }).prototype = ForwardingSink.prototype;
    dart.addTypeTests(ForwardingSink);
    ForwardingSink.prototype[_is_ForwardingSink_default] = true;
    dart.addTypeCaches(ForwardingSink);
    dart.setMethodSignature(ForwardingSink, () => ({
      __proto__: dart.getMethods(ForwardingSink.__proto__),
      setSink: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ForwardingSink, () => ({
      __proto__: dart.getGetters(ForwardingSink.__proto__),
      sink: async.EventSink$(R)
    }));
    dart.setLibraryUri(ForwardingSink, I[192]);
    dart.setFieldSignature(ForwardingSink, () => ({
      __proto__: dart.getFields(ForwardingSink.__proto__),
      [S$1._sink$1]: dart.fieldType(dart.nullable(async.EventSink$(R)))
    }));
    return ForwardingSink;
  });
  forwarding_sink.ForwardingSink = forwarding_sink.ForwardingSink$();
  dart.addTypeTests(forwarding_sink.ForwardingSink, _is_ForwardingSink_default);
  const _is__StartWithStreamSink_default = Symbol('_is__StartWithStreamSink_default');
  start_with._StartWithStreamSink$ = dart.generic(S => {
    class _StartWithStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _startValue) {
        return new (start_with._StartWithStreamSink$(S)).new(_startValue);
      }
      onData(data) {
        S.as(data);
        return this.sink.add(data);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        return this.sink.close();
      }
      onCancel() {
      }
      onListen() {
        this.sink.add(this[S$0._startValue]);
      }
      onPause() {
      }
      onResume() {
      }
    }
    (_StartWithStreamSink.new = function(_startValue) {
      this[S$0._startValue] = _startValue;
      _StartWithStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _StartWithStreamSink.prototype;
    dart.addTypeTests(_StartWithStreamSink);
    _StartWithStreamSink.prototype[_is__StartWithStreamSink_default] = true;
    dart.addTypeCaches(_StartWithStreamSink);
    dart.setMethodSignature(_StartWithStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.dynamic, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_StartWithStreamSink, I[193]);
    dart.setFieldSignature(_StartWithStreamSink, () => ({
      __proto__: dart.getFields(_StartWithStreamSink.__proto__),
      [S$0._startValue]: dart.finalFieldType(S)
    }));
    return _StartWithStreamSink;
  });
  start_with._StartWithStreamSink = start_with._StartWithStreamSink$();
  dart.addTypeTests(start_with._StartWithStreamSink, _is__StartWithStreamSink_default);
  const _is_StartWithStreamTransformer_default = Symbol('_is_StartWithStreamTransformer_default');
  start_with.StartWithStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_StartWithStreamSinkOfS = () => (__t$_StartWithStreamSinkOfS = dart.constFn(start_with._StartWithStreamSink$(S)))();
    var __t$VoidTo_StartWithStreamSinkOfS = () => (__t$VoidTo_StartWithStreamSinkOfS = dart.constFn(dart.fnType(__t$_StartWithStreamSinkOfS(), [])))();
    class StartWithStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get startValue() {
        return this[S$1.startValue];
      }
      set startValue(value) {
        super.startValue = value;
      }
      static ['_#new#tearOff'](S, startValue) {
        return new (start_with.StartWithStreamTransformer$(S)).new(startValue);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_StartWithStreamSinkOfS()).new(this.startValue), __t$VoidTo_StartWithStreamSinkOfS()));
      }
    }
    (StartWithStreamTransformer.new = function(startValue) {
      this[S$1.startValue] = startValue;
      StartWithStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithStreamTransformer.prototype;
    dart.addTypeTests(StartWithStreamTransformer);
    StartWithStreamTransformer.prototype[_is_StartWithStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithStreamTransformer);
    dart.setMethodSignature(StartWithStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StartWithStreamTransformer, I[193]);
    dart.setFieldSignature(StartWithStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithStreamTransformer.__proto__),
      startValue: dart.finalFieldType(S)
    }));
    return StartWithStreamTransformer;
  });
  start_with.StartWithStreamTransformer = start_with.StartWithStreamTransformer$();
  dart.addTypeTests(start_with.StartWithStreamTransformer, _is_StartWithStreamTransformer_default);
  start_with['StartWithExtension|startWith'] = function StartWithExtension$124startWith(T, $this, startValue) {
    return new (start_with.StartWithStreamTransformer$(T)).new(startValue).bind($this);
  };
  start_with['StartWithExtension|get#startWith'] = function StartWithExtension$124get$35startWith(T, $this) {
    return dart.fn(startValue => start_with['StartWithExtension|startWith'](T, $this, startValue), dart.fnType(async.Stream$(T), [T]));
  };
  const _is__StartWithErrorStreamSink_default = Symbol('_is__StartWithErrorStreamSink_default');
  start_with_error._StartWithErrorStreamSink$ = dart.generic(S => {
    class _StartWithErrorStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _e, _st) {
        return new (start_with_error._StartWithErrorStreamSink$(S)).new(_e, _st);
      }
      onData(data) {
        S.as(data);
        return this.sink.add(data);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        return this.sink.close();
      }
      onCancel() {
      }
      onListen() {
        this.sink.addError(this[S$1._e], this[S$1._st]);
      }
      onPause() {
      }
      onResume() {
      }
    }
    (_StartWithErrorStreamSink.new = function(_e, _st) {
      this[S$1._e] = _e;
      this[S$1._st] = _st;
      _StartWithErrorStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _StartWithErrorStreamSink.prototype;
    dart.addTypeTests(_StartWithErrorStreamSink);
    _StartWithErrorStreamSink.prototype[_is__StartWithErrorStreamSink_default] = true;
    dart.addTypeCaches(_StartWithErrorStreamSink);
    dart.setMethodSignature(_StartWithErrorStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithErrorStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.dynamic, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_StartWithErrorStreamSink, I[194]);
    dart.setFieldSignature(_StartWithErrorStreamSink, () => ({
      __proto__: dart.getFields(_StartWithErrorStreamSink.__proto__),
      [S$1._e]: dart.finalFieldType(core.Object),
      [S$1._st]: dart.finalFieldType(dart.nullable(core.StackTrace))
    }));
    return _StartWithErrorStreamSink;
  });
  start_with_error._StartWithErrorStreamSink = start_with_error._StartWithErrorStreamSink$();
  dart.addTypeTests(start_with_error._StartWithErrorStreamSink, _is__StartWithErrorStreamSink_default);
  const _is_StartWithErrorStreamTransformer_default = Symbol('_is_StartWithErrorStreamTransformer_default');
  start_with_error.StartWithErrorStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_StartWithErrorStreamSinkOfS = () => (__t$_StartWithErrorStreamSinkOfS = dart.constFn(start_with_error._StartWithErrorStreamSink$(S)))();
    var __t$VoidTo_StartWithErrorStreamSinkOfS = () => (__t$VoidTo_StartWithErrorStreamSinkOfS = dart.constFn(dart.fnType(__t$_StartWithErrorStreamSinkOfS(), [])))();
    class StartWithErrorStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get error() {
        return this[S$1.error$2];
      }
      set error(value) {
        super.error = value;
      }
      get stackTrace() {
        return this[S$1.stackTrace];
      }
      set stackTrace(value) {
        super.stackTrace = value;
      }
      static ['_#new#tearOff'](S, error, stackTrace = null) {
        return new (start_with_error.StartWithErrorStreamTransformer$(S)).new(error, stackTrace);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_StartWithErrorStreamSinkOfS()).new(this.error, this.stackTrace), __t$VoidTo_StartWithErrorStreamSinkOfS()));
      }
    }
    (StartWithErrorStreamTransformer.new = function(error, stackTrace = null) {
      this[S$1.error$2] = error;
      this[S$1.stackTrace] = stackTrace;
      StartWithErrorStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithErrorStreamTransformer.prototype;
    dart.addTypeTests(StartWithErrorStreamTransformer);
    StartWithErrorStreamTransformer.prototype[_is_StartWithErrorStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithErrorStreamTransformer);
    dart.setMethodSignature(StartWithErrorStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithErrorStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StartWithErrorStreamTransformer, I[194]);
    dart.setFieldSignature(StartWithErrorStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithErrorStreamTransformer.__proto__),
      error: dart.finalFieldType(core.Object),
      stackTrace: dart.finalFieldType(dart.nullable(core.StackTrace))
    }));
    return StartWithErrorStreamTransformer;
  });
  start_with_error.StartWithErrorStreamTransformer = start_with_error.StartWithErrorStreamTransformer$();
  dart.addTypeTests(start_with_error.StartWithErrorStreamTransformer, _is_StartWithErrorStreamTransformer_default);
  empty._Empty = class _Empty extends core.Object {
    static ['_#new#tearOff']() {
      return new empty._Empty.new();
    }
    toString() {
      return "<<EMPTY>>";
    }
  };
  (empty._Empty.new = function() {
    ;
  }).prototype = empty._Empty.prototype;
  dart.addTypeTests(empty._Empty);
  dart.addTypeCaches(empty._Empty);
  dart.setLibraryUri(empty._Empty, I[195]);
  dart.defineExtensionMethods(empty._Empty, ['toString']);
  empty.unbox = function unbox(T, o) {
    return core.identical(o, empty.EMPTY) ? null : T.as(o);
  };
  empty.isNotEmpty = function isNotEmpty(o) {
    return !core.identical(o, empty.EMPTY);
  };
  dart.defineLazy(empty, {
    /*empty.EMPTY*/get EMPTY() {
      return C[376] || CT.C376;
    }
  }, false);
  error_and_stacktrace.ErrorAndStackTrace = class ErrorAndStackTrace extends core.Object {
    get error() {
      return this[S$1.error$3];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[S$1.stackTrace$1];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    static ['_#new#tearOff'](error, stackTrace) {
      return new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace);
    }
    toString() {
      return "ErrorAndStackTrace{error: " + dart.str(this.error) + ", stacktrace: " + dart.str(this.stackTrace) + "}";
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || error_and_stacktrace.ErrorAndStackTrace.is(other) && this[S$0.$runtimeType]._equals(other[S$0.$runtimeType]) && this.error[S$.$_equals](other.error) && dart.equals(this.stackTrace, other.stackTrace);
    }
    get hashCode() {
      return (this.error[S$.$hashCode] ^ dart.hashCode(this.stackTrace)) >>> 0;
    }
  };
  (error_and_stacktrace.ErrorAndStackTrace.new = function(error, stackTrace) {
    this[S$1.error$3] = error;
    this[S$1.stackTrace$1] = stackTrace;
    ;
  }).prototype = error_and_stacktrace.ErrorAndStackTrace.prototype;
  dart.addTypeTests(error_and_stacktrace.ErrorAndStackTrace);
  dart.addTypeCaches(error_and_stacktrace.ErrorAndStackTrace);
  dart.setLibraryUri(error_and_stacktrace.ErrorAndStackTrace, I[196]);
  dart.setFieldSignature(error_and_stacktrace.ErrorAndStackTrace, () => ({
    __proto__: dart.getFields(error_and_stacktrace.ErrorAndStackTrace.__proto__),
    error: dart.finalFieldType(core.Object),
    stackTrace: dart.finalFieldType(dart.nullable(core.StackTrace))
  }));
  dart.defineExtensionMethods(error_and_stacktrace.ErrorAndStackTrace, ['toString', '_equals']);
  dart.defineExtensionAccessors(error_and_stacktrace.ErrorAndStackTrace, ['hashCode']);
  const _is_ReplayStream_default = Symbol('_is_ReplayStream_default');
  replay_stream.ReplayStream$ = dart.generic(T => {
    class ReplayStream extends core.Object {}
    (ReplayStream.new = function() {
      ;
    }).prototype = ReplayStream.prototype;
    ReplayStream.prototype[dart.isStream] = true;
    dart.addTypeTests(ReplayStream);
    ReplayStream.prototype[_is_ReplayStream_default] = true;
    dart.addTypeCaches(ReplayStream);
    ReplayStream[dart.implements] = () => [async.Stream$(T)];
    dart.setLibraryUri(ReplayStream, I[197]);
    return ReplayStream;
  });
  replay_stream.ReplayStream = replay_stream.ReplayStream$();
  dart.addTypeTests(replay_stream.ReplayStream, _is_ReplayStream_default);
  collection_extensions['MapNotNullIterableExtension|mapNotNull'] = function MapNotNullIterableExtension$124mapNotNull(T, R, $this, transform) {
    return new (_js_helper.SyncIterable$(R)).new(function* MapNotNullIterableExtension$124mapNotNull() {
      for (let e of $this) {
        let v = transform(e);
        if (v != null) {
          yield v;
        }
      }
    });
  };
  collection_extensions['MapNotNullIterableExtension|get#mapNotNull'] = function MapNotNullIterableExtension$124get$35mapNotNull(T, $this) {
    return dart.fn((R, transform) => collection_extensions['MapNotNullIterableExtension|mapNotNull'](T, R, $this, transform), dart.gFnType(R => {
      var __t$IterableOfR = () => (__t$IterableOfR = dart.constFn(core.Iterable$(R)))();
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [__t$IterableOfR(), [dart.fnType(__t$RN(), [T])]];
    }, R => {
      var __t$IterableOfR = () => (__t$IterableOfR = dart.constFn(core.Iterable$(R)))();
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [T$.ObjectN()];
    }));
  };
  collection_extensions['MapNotNullIterableExtension|mapIndexed'] = function MapNotNullIterableExtension$124mapIndexed(T, R, $this, transform) {
    return new (_js_helper.SyncIterable$(R)).new(function* MapNotNullIterableExtension$124mapIndexed() {
      let t266;
      let index = 0;
      for (let e of $this) {
        yield transform((t266 = index, index = t266 + 1, t266), e);
      }
    });
  };
  collection_extensions['MapNotNullIterableExtension|get#mapIndexed'] = function MapNotNullIterableExtension$124get$35mapIndexed(T, $this) {
    return dart.fn((R, transform) => collection_extensions['MapNotNullIterableExtension|mapIndexed'](T, R, $this, transform), dart.gFnType(R => {
      var __t$IterableOfR = () => (__t$IterableOfR = dart.constFn(core.Iterable$(R)))();
      return [__t$IterableOfR(), [dart.fnType(R, [core.int, T])]];
    }, R => {
      var __t$IterableOfR = () => (__t$IterableOfR = dart.constFn(core.Iterable$(R)))();
      return [T$.ObjectN()];
    }));
  };
  collection_extensions['RemoveFirstElementsQueueExtension|removeFirstElements'] = function RemoveFirstElementsQueueExtension$124removeFirstElements(T, $this, count) {
    for (let i = 0; i < count; i = i + 1) {
      $this.removeFirst();
    }
  };
  collection_extensions['RemoveFirstElementsQueueExtension|get#removeFirstElements'] = function RemoveFirstElementsQueueExtension$124get$35removeFirstElements(T, $this) {
    return dart.fn(count => collection_extensions['RemoveFirstElementsQueueExtension|removeFirstElements'](T, $this, count), T$.intTovoid());
  };
  html$.HtmlWebSocketChannel = class HtmlWebSocketChannel extends stream_channel.StreamChannelMixin {
    get innerWebSocket() {
      return this[S$1.innerWebSocket];
    }
    set innerWebSocket(value) {
      super.innerWebSocket = value;
    }
    get protocol() {
      return this.innerWebSocket.protocol;
    }
    get closeCode() {
      return this[S$1._closeCode];
    }
    get closeReason() {
      return this[S$1._closeReason];
    }
    get bufferedAmount() {
      return this.innerWebSocket.bufferedAmount;
    }
    get [S$1._readyCompleter]() {
      let t269;
      t269 = this[S$1.__HtmlWebSocketChannel__readyCompleter];
      return t269 == null ? dart.throw(new _internal.LateError.fieldNI("_readyCompleter")) : t269;
    }
    set [S$1._readyCompleter](_readyCompleter$35param) {
      this[S$1.__HtmlWebSocketChannel__readyCompleter] = _readyCompleter$35param;
    }
    get ready() {
      return this[S$1._readyCompleter].future;
    }
    get stream() {
      return this[S$1._controller$4].foreign.stream;
    }
    get sink() {
      let t270, t269;
      t269 = this[S$1.__HtmlWebSocketChannel_sink];
      return t269 == null ? (t270 = new html$._HtmlWebSocketSink.new(this), this[S$1.__HtmlWebSocketChannel_sink] == null ? this[S$1.__HtmlWebSocketChannel_sink] = t270 : dart.throw(new _internal.LateError.fieldADI("sink"))) : t269;
    }
    static ['_#connect#tearOff'](url, opts$) {
      let protocols = opts$ && 'protocols' in opts$ ? opts$.protocols : null;
      let binaryType = opts$ && 'binaryType' in opts$ ? opts$.binaryType : null;
      return new html$.HtmlWebSocketChannel.connect(url, {protocols: protocols, binaryType: binaryType});
    }
    static ['_#new#tearOff'](innerWebSocket) {
      return new html$.HtmlWebSocketChannel.new(innerWebSocket);
    }
    [S$1._listen]() {
      this[S$1._controller$4].local.stream.listen(dart.bind(this.innerWebSocket, 'send'), {onDone: dart.fn(() => {
          if (this[S$1._localCloseCode] != null && this[S$1._localCloseReason] != null) {
            this.innerWebSocket.close(this[S$1._localCloseCode], this[S$1._localCloseReason]);
          } else if (this[S$1._localCloseCode] != null) {
            this.innerWebSocket.close(this[S$1._localCloseCode]);
          } else {
            this.innerWebSocket.close();
          }
        }, T$.VoidTovoid())});
    }
    get [S$0._webSocket]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[377] || CT.C377)));
    }
  };
  (html$.HtmlWebSocketChannel.connect = function(url, opts$) {
    let t270, t269;
    let protocols = opts$ && 'protocols' in opts$ ? opts$.protocols : null;
    let binaryType = opts$ && 'binaryType' in opts$ ? opts$.binaryType : null;
    html$.HtmlWebSocketChannel.new.call(this, (t269 = html.WebSocket.new(dart.toString(url), protocols), (() => {
      t269.binaryType = (t270 = binaryType, t270 == null ? html$.BinaryType.list : t270).value;
      return t269;
    })()));
  }).prototype = html$.HtmlWebSocketChannel.prototype;
  (html$.HtmlWebSocketChannel.new = function(innerWebSocket) {
    this[S$1._closeCode] = null;
    this[S$1._closeReason] = null;
    this[S$1._localCloseCode] = null;
    this[S$1._localCloseReason] = null;
    this[S$1.__HtmlWebSocketChannel__readyCompleter] = null;
    this[S$1._controller$4] = new stream_channel_controller.StreamChannelController.new({sync: true, allowForeignErrors: false});
    this[S$1.__HtmlWebSocketChannel_sink] = null;
    this[S$1.innerWebSocket] = innerWebSocket;
    this[S$1._readyCompleter] = T$.CompleterOfvoid().new();
    if (this.innerWebSocket[S$1.$readyState] === 1) {
      this[S$1._readyCompleter].complete();
      this[S$1._listen]();
    } else {
      if (this.innerWebSocket[S$1.$readyState] === 2 || this.innerWebSocket[S$1.$readyState] === 3) {
        this[S$1._readyCompleter].completeError(new exception$.WebSocketChannelException.new("WebSocket state error: " + dart.str(this.innerWebSocket[S$1.$readyState])));
      }
      this.innerWebSocket[S$1.$onOpen].first.then(core.Null, dart.fn(_ => {
        this[S$1._readyCompleter].complete();
        this[S$1._listen]();
      }, T$.EventToNull()));
    }
    this.innerWebSocket[S$0.$onError].first.then(core.Null, dart.fn(_ => {
      let error = new exception$.WebSocketChannelException.new("WebSocket connection failed.");
      this[S$1._readyCompleter].completeError(error);
      this[S$1._controller$4].local.sink.addError(error);
      this[S$1._controller$4].local.sink.close();
    }, T$.EventToNull()));
    this.innerWebSocket[S$1.$onMessage].listen(dart.fn(event => {
      let data = event[S$1.$data];
      if (typed_data.ByteBuffer.is(data)) data = data[S$0.$asUint8List]();
      this[S$1._controller$4].local.sink.add(data);
    }, T$.MessageEventTovoid()));
    this.innerWebSocket[S$1.$onClose].first.then(core.Null, dart.fn(event => {
      this[S$1._closeCode] = event.code;
      this[S$1._closeReason] = event.reason;
      this[S$1._controller$4].local.sink.close();
    }, T$.CloseEventToNull()));
  }).prototype = html$.HtmlWebSocketChannel.prototype;
  dart.addTypeTests(html$.HtmlWebSocketChannel);
  dart.addTypeCaches(html$.HtmlWebSocketChannel);
  html$.HtmlWebSocketChannel[dart.implements] = () => [channel$.WebSocketChannel];
  dart.setMethodSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getMethods(html$.HtmlWebSocketChannel.__proto__),
    [S$1._listen]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getGetters(html$.HtmlWebSocketChannel.__proto__),
    protocol: dart.nullable(core.String),
    closeCode: dart.nullable(core.int),
    closeReason: dart.nullable(core.String),
    bufferedAmount: dart.nullable(core.int),
    [S$1._readyCompleter]: async.Completer$(dart.void),
    ready: async.Future$(dart.void),
    stream: async.Stream,
    sink: channel$.WebSocketSink,
    [S$0._webSocket]: web_socket_impl.WebSocketImpl
  }));
  dart.setSetterSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getSetters(html$.HtmlWebSocketChannel.__proto__),
    [S$1._readyCompleter]: async.Completer$(dart.void)
  }));
  dart.setLibraryUri(html$.HtmlWebSocketChannel, I[198]);
  dart.setFieldSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getFields(html$.HtmlWebSocketChannel.__proto__),
    innerWebSocket: dart.finalFieldType(html.WebSocket),
    [S$1._closeCode]: dart.fieldType(dart.nullable(core.int)),
    [S$1._closeReason]: dart.fieldType(dart.nullable(core.String)),
    [S$1._localCloseCode]: dart.fieldType(dart.nullable(core.int)),
    [S$1._localCloseReason]: dart.fieldType(dart.nullable(core.String)),
    [S$1.__HtmlWebSocketChannel__readyCompleter]: dart.fieldType(dart.nullable(async.Completer$(dart.void))),
    [S$1._controller$4]: dart.finalFieldType(stream_channel_controller.StreamChannelController),
    [S$1.__HtmlWebSocketChannel_sink]: dart.fieldType(dart.nullable(channel$.WebSocketSink))
  }));
  html$._HtmlWebSocketSink = class _HtmlWebSocketSink extends stream_sink.DelegatingStreamSink {
    static ['_#new#tearOff'](channel) {
      return new html$._HtmlWebSocketSink.new(channel);
    }
    close(closeCode = null, closeReason = null) {
      this[S$1._channel$2][S$1._localCloseCode] = closeCode;
      this[S$1._channel$2][S$1._localCloseReason] = closeReason;
      return super.close();
    }
    get [S$0._webSocket]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[377] || CT.C377)));
    }
  };
  (html$._HtmlWebSocketSink.new = function(channel) {
    this[S$1._channel$2] = channel;
    html$._HtmlWebSocketSink.__proto__.new.call(this, channel[S$1._controller$4].foreign.sink);
    ;
  }).prototype = html$._HtmlWebSocketSink.prototype;
  dart.addTypeTests(html$._HtmlWebSocketSink);
  dart.addTypeCaches(html$._HtmlWebSocketSink);
  html$._HtmlWebSocketSink[dart.implements] = () => [channel$.WebSocketSink];
  dart.setMethodSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getMethods(html$._HtmlWebSocketSink.__proto__),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setGetterSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getGetters(html$._HtmlWebSocketSink.__proto__),
    [S$0._webSocket]: web_socket_impl.WebSocketImpl
  }));
  dart.setLibraryUri(html$._HtmlWebSocketSink, I[198]);
  dart.setFieldSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getFields(html$._HtmlWebSocketSink.__proto__),
    [S$1._channel$2]: dart.finalFieldType(html$.HtmlWebSocketChannel)
  }));
  html$.BinaryType = class BinaryType extends core.Object {
    get name() {
      return this[S$1.name$8];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[S$1.value$2];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#_#tearOff'](name, value) {
      return new html$.BinaryType.__(name, value);
    }
    toString() {
      return this.name;
    }
  };
  (html$.BinaryType.__ = function(name, value) {
    this[S$1.name$8] = name;
    this[S$1.value$2] = value;
    ;
  }).prototype = html$.BinaryType.prototype;
  dart.addTypeTests(html$.BinaryType);
  dart.addTypeCaches(html$.BinaryType);
  dart.setLibraryUri(html$.BinaryType, I[198]);
  dart.setFieldSignature(html$.BinaryType, () => ({
    __proto__: dart.getFields(html$.BinaryType.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(html$.BinaryType, () => ['blob', 'list']);
  dart.defineExtensionMethods(html$.BinaryType, ['toString']);
  dart.defineLazy(html$.BinaryType, {
    /*html$.BinaryType.blob*/get blob() {
      return C[378] || CT.C378;
    },
    /*html$.BinaryType.list*/get list() {
      return C[379] || CT.C379;
    }
  }, false);
  _connect_html.connect = function connect(uri, opts$) {
    let protocols = opts$ && 'protocols' in opts$ ? opts$.protocols : null;
    return new html$.HtmlWebSocketChannel.connect(uri, {protocols: protocols});
  };
  web_socket_impl._WebSocketMessageType = class _WebSocketMessageType extends core.Object {
    static ['_#new#tearOff']() {
      return new web_socket_impl._WebSocketMessageType.new();
    }
  };
  (web_socket_impl._WebSocketMessageType.new = function() {
    ;
  }).prototype = web_socket_impl._WebSocketMessageType.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketMessageType);
  dart.addTypeCaches(web_socket_impl._WebSocketMessageType);
  dart.setLibraryUri(web_socket_impl._WebSocketMessageType, I[199]);
  dart.setStaticFieldSignature(web_socket_impl._WebSocketMessageType, () => ['NONE', 'TEXT', 'BINARY']);
  dart.defineLazy(web_socket_impl._WebSocketMessageType, {
    /*web_socket_impl._WebSocketMessageType.NONE*/get NONE() {
      return 0;
    },
    /*web_socket_impl._WebSocketMessageType.TEXT*/get TEXT() {
      return 1;
    },
    /*web_socket_impl._WebSocketMessageType.BINARY*/get BINARY() {
      return 2;
    }
  }, false);
  web_socket_impl._WebSocketOpcode = class _WebSocketOpcode extends core.Object {
    static ['_#new#tearOff']() {
      return new web_socket_impl._WebSocketOpcode.new();
    }
  };
  (web_socket_impl._WebSocketOpcode.new = function() {
    ;
  }).prototype = web_socket_impl._WebSocketOpcode.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketOpcode);
  dart.addTypeCaches(web_socket_impl._WebSocketOpcode);
  dart.setLibraryUri(web_socket_impl._WebSocketOpcode, I[199]);
  dart.setStaticFieldSignature(web_socket_impl._WebSocketOpcode, () => ['CONTINUATION', 'TEXT', 'BINARY', 'RESERVED_3', 'RESERVED_4', 'RESERVED_5', 'RESERVED_6', 'RESERVED_7', 'CLOSE', 'PING', 'PONG', 'RESERVED_B', 'RESERVED_C', 'RESERVED_D', 'RESERVED_E', 'RESERVED_F']);
  dart.defineLazy(web_socket_impl._WebSocketOpcode, {
    /*web_socket_impl._WebSocketOpcode.CONTINUATION*/get CONTINUATION() {
      return 0;
    },
    /*web_socket_impl._WebSocketOpcode.TEXT*/get TEXT() {
      return 1;
    },
    /*web_socket_impl._WebSocketOpcode.BINARY*/get BINARY() {
      return 2;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_3*/get RESERVED_3() {
      return 3;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_4*/get RESERVED_4() {
      return 4;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_5*/get RESERVED_5() {
      return 5;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_6*/get RESERVED_6() {
      return 6;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_7*/get RESERVED_7() {
      return 7;
    },
    /*web_socket_impl._WebSocketOpcode.CLOSE*/get CLOSE() {
      return 8;
    },
    /*web_socket_impl._WebSocketOpcode.PING*/get PING() {
      return 9;
    },
    /*web_socket_impl._WebSocketOpcode.PONG*/get PONG() {
      return 10;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_B*/get RESERVED_B() {
      return 11;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_C*/get RESERVED_C() {
      return 12;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_D*/get RESERVED_D() {
      return 13;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_E*/get RESERVED_E() {
      return 14;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_F*/get RESERVED_F() {
      return 15;
    }
  }, false);
  web_socket_impl._WebSocketProtocolTransformer = class _WebSocketProtocolTransformer extends async.StreamTransformerBase$(core.List$(core.int), dart.dynamic) {
    static ['_#new#tearOff'](_serverSide = false) {
      return new web_socket_impl._WebSocketProtocolTransformer.new(_serverSide);
    }
    bind(stream) {
      T$.StreamOfListOfint().as(stream);
      return async.Stream.eventTransformed(stream, dart.fn(eventSink => {
        if (this[S$1._eventSink] != null) {
          dart.throw(new core.StateError.new("WebSocket transformer already used."));
        }
        this[S$1._eventSink] = eventSink;
        return this;
      }, T$.EventSinkTo_WebSocketProtocolTransformer()));
    }
    addError(error, stackTrace = null) {
      dart.nullCheck(this[S$1._eventSink]).addError(error, stackTrace);
    }
    close() {
      dart.nullCheck(this[S$1._eventSink]).close();
    }
    add(bytes) {
      let t269;
      T$.ListOfint().as(bytes);
      let buffer = typed_data.Uint8List.is(bytes) ? bytes : _native_typed_data.NativeUint8List.fromList(bytes);
      let index = 0;
      let lastIndex = buffer[S$.$length];
      if (this[S$1._state$1] === 5) {
        dart.throw(new exception$.WebSocketChannelException.new("Data on closed connection"));
      }
      if (this[S$1._state$1] === 6) {
        dart.throw(new exception$.WebSocketChannelException.new("Data on failed connection"));
      }
      while (index < lastIndex && this[S$1._state$1] !== 5 && this[S$1._state$1] !== 6) {
        let byte = buffer[S$.$_get](index);
        if (this[S$1._state$1] <= 2) {
          if (this[S$1._state$1] === 0) {
            this[S$1._fin] = (byte & 128) !== 0;
            if ((byte & (32 | 16) >>> 0) !== 0) {
              dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
            }
            this[S$1._opcode] = (byte & 15) >>> 0;
            if (this[S$1._opcode] <= 2) {
              if (this[S$1._opcode] === 0) {
                if (this[S$1._currentMessageType] === 0) {
                  dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
                }
              } else {
                if (!(this[S$1._opcode] === 1 || this[S$1._opcode] === 2)) dart.assertFailed(null, I[200], 152, 22, "_opcode == _WebSocketOpcode.TEXT ||\n                  _opcode == _WebSocketOpcode.BINARY");
                if (this[S$1._currentMessageType] !== 0) {
                  dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
                }
                this[S$1._currentMessageType] = this[S$1._opcode];
              }
            } else if (this[S$1._opcode] >= 8 && this[S$1._opcode] <= 10) {
              if (!this[S$1._fin]) dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
            } else {
              dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
            }
            this[S$1._state$1] = 1;
          } else if (this[S$1._state$1] === 1) {
            this[S$1._masked] = (byte & 128) !== 0;
            this[S$1._len] = byte & 127;
            if (this[S$1._isControlFrame]() && this[S$1._len] > 125) {
              dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
            }
            if (this[S$1._len] === 126) {
              this[S$1._len] = 0;
              this[S$1._remainingLenBytes] = 2;
              this[S$1._state$1] = 2;
            } else if (this[S$1._len] === 127) {
              this[S$1._len] = 0;
              this[S$1._remainingLenBytes] = 8;
              this[S$1._state$1] = 2;
            } else {
              if (!(this[S$1._len] < 126)) dart.assertFailed(null, I[200], 182, 20, "_len < 126");
              this[S$1._lengthDone]();
            }
          } else {
            if (!(this[S$1._state$1] === 2)) dart.assertFailed(null, I[200], 186, 18, "_state == LEN_REST");
            this[S$1._len] = (this[S$1._len] << 8 | byte) >>> 0;
            this[S$1._remainingLenBytes] = this[S$1._remainingLenBytes] - 1;
            if (this[S$1._remainingLenBytes] === 0) {
              this[S$1._lengthDone]();
            }
          }
        } else {
          if (this[S$1._state$1] === 3) {
            this[S$1._maskingBytes][S$.$_set](4 - (t269 = this[S$1._remainingMaskingKeyBytes], this[S$1._remainingMaskingKeyBytes] = t269 - 1, t269), byte);
            if (this[S$1._remainingMaskingKeyBytes] === 0) {
              this[S$1._maskDone]();
            }
          } else {
            if (!(this[S$1._state$1] === 4)) dart.assertFailed(null, I[200], 200, 18, "_state == PAYLOAD");
            let payloadLength = math.min(core.int, lastIndex - index, this[S$1._remainingPayloadBytes]);
            this[S$1._remainingPayloadBytes] = this[S$1._remainingPayloadBytes] - payloadLength;
            if (this[S$1._masked]) {
              this[S$1._unmask](index, payloadLength, buffer);
            }
            this[S$1._payload].add(typed_data.Uint8List.view(buffer[S$0.$buffer], index, payloadLength));
            index = index + payloadLength;
            if (this[S$1._isControlFrame]()) {
              if (this[S$1._remainingPayloadBytes] === 0) this[S$1._controlFrameEnd]();
            } else {
              if (this[S$1._currentMessageType] !== 1 && this[S$1._currentMessageType] !== 2) {
                dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
              }
              if (this[S$1._remainingPayloadBytes] === 0) this[S$1._messageFrameEnd]();
            }
            index = index - 1;
          }
        }
        index = index + 1;
      }
    }
    [S$1._unmask](index, length, buffer) {
      let t271, t270, t269, t269$, t271$, t270$, t269$0;
      if (length >= 16) {
        let startOffset = 16 - (index & 15);
        let end = index + startOffset;
        for (let i = index; i < end; i = i + 1) {
          t269 = buffer;
          t270 = i;
          t269[S$.$_set](t270, (t269[S$.$_get](t270) ^ this[S$1._maskingBytes][S$.$_get]((t271 = this[S$1._unmaskingIndex], this[S$1._unmaskingIndex] = t271 + 1, t271) & 3)) >>> 0);
        }
        index = index + startOffset;
        length = length - startOffset;
        let blockCount = (length / 16)[S$0.$truncate]();
        if (blockCount > 0) {
          let mask = 0;
          for (let i = 3; i >= 0; i = i - 1) {
            mask = (mask << 8 | this[S$1._maskingBytes][S$.$_get](this[S$1._unmaskingIndex] + i & 3)) >>> 0;
          }
          let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
          let blockBuffer = typed_data.Int32x4List.view(buffer[S$0.$buffer], index, blockCount);
          for (let i = 0; i < blockBuffer[S$.$length]; i = i + 1) {
            t269$ = i;
            blockBuffer[S$.$_set](t269$, blockBuffer[S$.$_get](t269$)['^'](blockMask));
          }
          let bytes = blockCount * 16;
          index = index + bytes;
          length = length - bytes;
        }
      }
      let end = index + length;
      for (let i = index; i < end; i = i + 1) {
        t269$0 = buffer;
        t270$ = i;
        t269$0[S$.$_set](t270$, (t269$0[S$.$_get](t270$) ^ this[S$1._maskingBytes][S$.$_get]((t271$ = this[S$1._unmaskingIndex], this[S$1._unmaskingIndex] = t271$ + 1, t271$) & 3)) >>> 0);
      }
    }
    [S$1._lengthDone]() {
      if (this[S$1._masked]) {
        if (!this[S$1._serverSide]) {
          dart.throw(new exception$.WebSocketChannelException.new("Received masked frame from server"));
        }
        this[S$1._state$1] = 3;
      } else {
        if (this[S$1._serverSide]) {
          dart.throw(new exception$.WebSocketChannelException.new("Received unmasked frame from client"));
        }
        this[S$1._remainingPayloadBytes] = this[S$1._len];
        this[S$1._startPayload]();
      }
    }
    [S$1._maskDone]() {
      this[S$1._remainingPayloadBytes] = this[S$1._len];
      this[S$1._startPayload]();
    }
    [S$1._startPayload]() {
      if (this[S$1._remainingPayloadBytes] === 0) {
        if (this[S$1._isControlFrame]()) {
          switch (this[S$1._opcode]) {
            case 8:
              {
                this[S$1._state$1] = 5;
                dart.nullCheck(this[S$1._eventSink]).close();
                break;
              }
            case 9:
              {
                dart.nullCheck(this[S$1._eventSink]).add(new web_socket_impl._WebSocketPing.new());
                break;
              }
            case 10:
              {
                dart.nullCheck(this[S$1._eventSink]).add(new web_socket_impl._WebSocketPong.new());
                break;
              }
          }
          this[S$1._prepareForNextFrame]();
        } else {
          this[S$1._messageFrameEnd]();
        }
      } else {
        this[S$1._state$1] = 4;
      }
    }
    [S$1._messageFrameEnd]() {
      if (this[S$1._fin]) {
        let bytes = this[S$1._payload].takeBytes();
        switch (this[S$1._currentMessageType]) {
          case 1:
            {
              dart.nullCheck(this[S$1._eventSink]).add(convert.utf8.decode(bytes));
              break;
            }
          case 2:
            {
              dart.nullCheck(this[S$1._eventSink]).add(bytes);
              break;
            }
        }
        this[S$1._currentMessageType] = 0;
      }
      this[S$1._prepareForNextFrame]();
    }
    [S$1._controlFrameEnd]() {
      switch (this[S$1._opcode]) {
        case 8:
          {
            this.closeCode = 1005;
            let payload = this[S$1._payload].takeBytes();
            if (payload[S$.$isNotEmpty]) {
              if (payload[S$.$length] === 1) {
                dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
              }
              this.closeCode = (payload[S$.$_get](0) << 8 | payload[S$.$_get](1)) >>> 0;
              if (this.closeCode === 1005) {
                dart.throw(new exception$.WebSocketChannelException.new("Protocol error"));
              }
              if (payload[S$.$length] > 2) {
                this.closeReason = convert.utf8.decode(payload[S$0.$sublist](2));
              }
            }
            this[S$1._state$1] = 5;
            dart.nullCheck(this[S$1._eventSink]).close();
            break;
          }
        case 9:
          {
            dart.nullCheck(this[S$1._eventSink]).add(new web_socket_impl._WebSocketPing.new(this[S$1._payload].takeBytes()));
            break;
          }
        case 10:
          {
            dart.nullCheck(this[S$1._eventSink]).add(new web_socket_impl._WebSocketPong.new(this[S$1._payload].takeBytes()));
            break;
          }
      }
      this[S$1._prepareForNextFrame]();
    }
    [S$1._isControlFrame]() {
      return this[S$1._opcode] === 8 || this[S$1._opcode] === 9 || this[S$1._opcode] === 10;
    }
    [S$1._prepareForNextFrame]() {
      if (this[S$1._state$1] !== 5 && this[S$1._state$1] !== 6) this[S$1._state$1] = 0;
      this[S$1._fin] = false;
      this[S$1._opcode] = -1;
      this[S$1._len] = -1;
      this[S$1._remainingLenBytes] = -1;
      this[S$1._remainingMaskingKeyBytes] = 4;
      this[S$1._remainingPayloadBytes] = -1;
      this[S$1._unmaskingIndex] = 0;
    }
  };
  (web_socket_impl._WebSocketProtocolTransformer.new = function(_serverSide = false) {
    this[S$1._state$1] = 0;
    this[S$1._fin] = false;
    this[S$1._opcode] = -1;
    this[S$1._len] = -1;
    this[S$1._masked] = false;
    this[S$1._remainingLenBytes] = -1;
    this[S$1._remainingMaskingKeyBytes] = 4;
    this[S$1._remainingPayloadBytes] = -1;
    this[S$1._unmaskingIndex] = 0;
    this[S$1._currentMessageType] = 0;
    this.closeCode = 1005;
    this.closeReason = "";
    this[S$1._eventSink] = null;
    this[S$1._maskingBytes] = T$.ListOfint().filled(4, 0);
    this[S$1._payload] = _internal.BytesBuilder.new({copy: false});
    this[S$1._serverSide] = _serverSide;
    web_socket_impl._WebSocketProtocolTransformer.__proto__.new.call(this);
    ;
  }).prototype = web_socket_impl._WebSocketProtocolTransformer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketProtocolTransformer);
  dart.addTypeCaches(web_socket_impl._WebSocketProtocolTransformer);
  web_socket_impl._WebSocketProtocolTransformer[dart.implements] = () => [async.EventSink$(core.List$(core.int))];
  dart.setMethodSignature(web_socket_impl._WebSocketProtocolTransformer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketProtocolTransformer.__proto__),
    bind: dart.fnType(async.Stream, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [S$1._unmask]: dart.fnType(dart.void, [core.int, core.int, typed_data.Uint8List]),
    [S$1._lengthDone]: dart.fnType(dart.void, []),
    [S$1._maskDone]: dart.fnType(dart.void, []),
    [S$1._startPayload]: dart.fnType(dart.void, []),
    [S$1._messageFrameEnd]: dart.fnType(dart.void, []),
    [S$1._controlFrameEnd]: dart.fnType(dart.void, []),
    [S$1._isControlFrame]: dart.fnType(core.bool, []),
    [S$1._prepareForNextFrame]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketProtocolTransformer, I[199]);
  dart.setFieldSignature(web_socket_impl._WebSocketProtocolTransformer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketProtocolTransformer.__proto__),
    [S$1._state$1]: dart.fieldType(core.int),
    [S$1._fin]: dart.fieldType(core.bool),
    [S$1._opcode]: dart.fieldType(core.int),
    [S$1._len]: dart.fieldType(core.int),
    [S$1._masked]: dart.fieldType(core.bool),
    [S$1._remainingLenBytes]: dart.fieldType(core.int),
    [S$1._remainingMaskingKeyBytes]: dart.fieldType(core.int),
    [S$1._remainingPayloadBytes]: dart.fieldType(core.int),
    [S$1._unmaskingIndex]: dart.fieldType(core.int),
    [S$1._currentMessageType]: dart.fieldType(core.int),
    closeCode: dart.fieldType(core.int),
    closeReason: dart.fieldType(core.String),
    [S$1._eventSink]: dart.fieldType(dart.nullable(async.EventSink)),
    [S$1._serverSide]: dart.finalFieldType(core.bool),
    [S$1._maskingBytes]: dart.finalFieldType(core.List$(core.int)),
    [S$1._payload]: dart.finalFieldType(_internal.BytesBuilder)
  }));
  dart.setStaticFieldSignature(web_socket_impl._WebSocketProtocolTransformer, () => ['START', 'LEN_FIRST', 'LEN_REST', 'MASK', 'PAYLOAD', 'CLOSED', 'FAILURE', 'FIN', 'RSV1', 'RSV2', 'RSV3', 'OPCODE']);
  dart.defineLazy(web_socket_impl._WebSocketProtocolTransformer, {
    /*web_socket_impl._WebSocketProtocolTransformer.START*/get START() {
      return 0;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.LEN_FIRST*/get LEN_FIRST() {
      return 1;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.LEN_REST*/get LEN_REST() {
      return 2;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.MASK*/get MASK() {
      return 3;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.PAYLOAD*/get PAYLOAD() {
      return 4;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.CLOSED*/get CLOSED() {
      return 5;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.FAILURE*/get FAILURE() {
      return 6;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.FIN*/get FIN() {
      return 128;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV1*/get RSV1() {
      return 64;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV2*/get RSV2() {
      return 32;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV3*/get RSV3() {
      return 16;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.OPCODE*/get OPCODE() {
      return 15;
    }
  }, false);
  web_socket_impl._WebSocketPing = class _WebSocketPing extends core.Object {
    static ['_#new#tearOff'](payload = null) {
      return new web_socket_impl._WebSocketPing.new(payload);
    }
  };
  (web_socket_impl._WebSocketPing.new = function(payload = null) {
    this.payload = payload;
    ;
  }).prototype = web_socket_impl._WebSocketPing.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketPing);
  dart.addTypeCaches(web_socket_impl._WebSocketPing);
  dart.setLibraryUri(web_socket_impl._WebSocketPing, I[199]);
  dart.setFieldSignature(web_socket_impl._WebSocketPing, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketPing.__proto__),
    payload: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  web_socket_impl._WebSocketPong = class _WebSocketPong extends core.Object {
    static ['_#new#tearOff'](payload = null) {
      return new web_socket_impl._WebSocketPong.new(payload);
    }
  };
  (web_socket_impl._WebSocketPong.new = function(payload = null) {
    this.payload = payload;
    ;
  }).prototype = web_socket_impl._WebSocketPong.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketPong);
  dart.addTypeCaches(web_socket_impl._WebSocketPong);
  dart.setLibraryUri(web_socket_impl._WebSocketPong, I[199]);
  dart.setFieldSignature(web_socket_impl._WebSocketPong, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketPong.__proto__),
    payload: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  web_socket_impl._WebSocketOutgoingTransformer = class _WebSocketOutgoingTransformer extends async.StreamTransformerBase$(dart.dynamic, core.List$(core.int)) {
    static ['_#new#tearOff'](webSocket) {
      return new web_socket_impl._WebSocketOutgoingTransformer.new(webSocket);
    }
    bind(stream) {
      async.Stream.as(stream);
      return T$.StreamOfListOfint().eventTransformed(stream, dart.fn(eventSink => {
        if (this[S$1._eventSink] != null) {
          dart.throw(new core.StateError.new("WebSocket transformer already used"));
        }
        this[S$1._eventSink] = eventSink;
        return this;
      }, T$.EventSinkOfListOfintTo_WebSocketOutgoingTransformer()));
    }
    add(message) {
      if (web_socket_impl._WebSocketPong.is(message)) {
        this.addFrame(10, message.payload);
        return;
      }
      if (web_socket_impl._WebSocketPing.is(message)) {
        this.addFrame(9, message.payload);
        return;
      }
      let data = null;
      let opcode = null;
      if (message != null) {
        if (typeof message == 'string') {
          opcode = 1;
          data = convert.utf8.encode(message);
        } else if (T$.ListOfint().is(message)) {
          opcode = 2;
          data = message;
        } else {
          dart.throw(new core.ArgumentError.new(message));
        }
      } else {
        opcode = 1;
      }
      this.addFrame(opcode, data);
    }
    addError(error, stackTrace = null) {
      dart.nullCheck(this[S$1._eventSink]).addError(error, stackTrace);
    }
    close() {
      let code = this.webSocket[S$1._outCloseCode];
      let reason = this.webSocket[S$1._outCloseReason];
      let data = null;
      if (code != null) {
        data = T$.JSArrayOfint().of([]);
        data[S$.$add](dart.notNull(code) >> 8 & 255);
        data[S$.$add](dart.notNull(code) & 255);
        if (reason != null) {
          data[S$.$addAll](convert.utf8.encode(reason));
        }
      }
      this.addFrame(8, data);
      dart.nullCheck(this[S$1._eventSink]).close();
    }
    addFrame(opcode, data) {
      web_socket_impl._WebSocketOutgoingTransformer.createFrame(opcode, data, this.webSocket[S$1._serverSide], false)[S$.$forEach](dart.fn(e => {
        dart.nullCheck(this[S$1._eventSink]).add(e);
      }, T$.ListOfintTovoid()));
    }
    static createFrame(opcode, data, serverSide, compressed) {
      let t269, t269$, t269$0, t269$1, t269$2, t269$3, t270, t269$4;
      let mask = !serverSide;
      let dataLength = data == null ? 0 : data[S$.$length];
      let headerSize = mask ? 6 : 2;
      if (dataLength > 65535) {
        headerSize = headerSize + 8;
      } else if (dataLength > 125) {
        headerSize = headerSize + 2;
      }
      let header = _native_typed_data.NativeUint8List.new(headerSize);
      let index = 0;
      let hoc = (128 | (compressed ? 64 : 0) | (opcode & 15) >>> 0) >>> 0;
      header[S$.$_set]((t269 = index, index = t269 + 1, t269), hoc);
      let lengthBytes = 1;
      if (dataLength > 65535) {
        header[S$.$_set]((t269$ = index, index = t269$ + 1, t269$), 127);
        lengthBytes = 8;
      } else if (dataLength > 125) {
        header[S$.$_set]((t269$0 = index, index = t269$0 + 1, t269$0), 126);
        lengthBytes = 2;
      }
      for (let i = 0; i < lengthBytes; i = i + 1) {
        header[S$.$_set]((t269$1 = index, index = t269$1 + 1, t269$1), dataLength[S$0.$rightShift]((lengthBytes - 1 - i) * 8) & 255);
      }
      if (mask) {
        t269$2 = 1;
        header[S$.$_set](t269$2, (header[S$.$_get](t269$2) | 1 << 7) >>> 0);
        let maskBytes = T$.JSArrayOfint().of([web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256)]);
        header[S$0.$setRange](index, index + 4, maskBytes);
        index = index + 4;
        if (data != null) {
          let list = null;
          if (opcode === 1 && typed_data.Uint8List.is(data)) {
            list = data;
          } else {
            if (typed_data.Uint8List.is(data)) {
              list = _native_typed_data.NativeUint8List.fromList(data);
            } else {
              list = _native_typed_data.NativeUint8List.new(data[S$.$length]);
              for (let i = 0; i < data[S$.$length]; i = i + 1) {
                if (data[S$.$_get](i) < 0 || 255 < data[S$.$_get](i)) {
                  dart.throw(new core.ArgumentError.new("List element is not a byte value " + "(value " + dart.str(data[S$.$_get](i)) + " at index " + dart.str(i) + ")"));
                }
                list[S$.$_set](i, data[S$.$_get](i));
              }
            }
          }
          let blockCount = (list[S$.$length] / 16)[S$0.$truncate]();
          if (blockCount > 0) {
            let mask = 0;
            for (let i = 3; i >= 0; i = i - 1) {
              mask = (mask << 8 | maskBytes[S$.$_get](i)) >>> 0;
            }
            let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
            let blockBuffer = typed_data.Int32x4List.view(list[S$0.$buffer], 0, blockCount);
            for (let i = 0; i < blockBuffer[S$.$length]; i = i + 1) {
              t269$3 = i;
              blockBuffer[S$.$_set](t269$3, blockBuffer[S$.$_get](t269$3)['^'](blockMask));
            }
          }
          for (let i = blockCount * 16; i < list[S$.$length]; i = i + 1) {
            t269$4 = list;
            t270 = i;
            t269$4[S$.$_set](t270, (t269$4[S$.$_get](t270) ^ maskBytes[S$.$_get](i & 3)) >>> 0);
          }
          data = list;
        }
      }
      if (!(index === headerSize)) dart.assertFailed(null, I[200], 557, 12, "index == headerSize");
      if (data == null) {
        return T$.JSArrayOfListOfint().of([header]);
      } else {
        return T$.JSArrayOfListOfint().of([header, data]);
      }
    }
  };
  (web_socket_impl._WebSocketOutgoingTransformer.new = function(webSocket) {
    this[S$1._eventSink] = null;
    this.webSocket = webSocket;
    web_socket_impl._WebSocketOutgoingTransformer.__proto__.new.call(this);
    ;
  }).prototype = web_socket_impl._WebSocketOutgoingTransformer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketOutgoingTransformer);
  dart.addTypeCaches(web_socket_impl._WebSocketOutgoingTransformer);
  web_socket_impl._WebSocketOutgoingTransformer[dart.implements] = () => [async.EventSink];
  dart.setMethodSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketOutgoingTransformer.__proto__),
    bind: dart.fnType(async.Stream$(core.List$(core.int)), [dart.nullable(core.Object)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, []),
    addFrame: dart.fnType(dart.void, [core.int, dart.nullable(core.List$(core.int))])
  }));
  dart.setStaticMethodSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ['createFrame']);
  dart.setLibraryUri(web_socket_impl._WebSocketOutgoingTransformer, I[199]);
  dart.setFieldSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketOutgoingTransformer.__proto__),
    webSocket: dart.finalFieldType(web_socket_impl.WebSocketImpl),
    [S$1._eventSink]: dart.fieldType(dart.nullable(async.EventSink$(core.List$(core.int))))
  }));
  web_socket_impl._WebSocketConsumer = class _WebSocketConsumer extends core.Object {
    static ['_#new#tearOff'](webSocket, sink) {
      return new web_socket_impl._WebSocketConsumer.new(webSocket, sink);
    }
    [S$1._onListen]() {
      if (this[S$1._subscription$1] != null) {
        dart.nullCheck(this[S$1._subscription$1]).cancel();
      }
    }
    [S$1._onPause]() {
      if (this[S$1._subscription$1] != null) {
        dart.nullCheck(this[S$1._subscription$1]).pause();
      } else {
        this[S$1._issuedPause] = true;
      }
    }
    [S$1._onResume]() {
      if (this[S$1._subscription$1] != null) {
        dart.nullCheck(this[S$1._subscription$1]).resume();
      } else {
        this[S$1._issuedPause] = false;
      }
    }
    [S$1._cancel]() {
      if (this[S$1._subscription$1] != null) {
        let subscription = this[S$1._subscription$1];
        this[S$1._subscription$1] = null;
        dart.nullCheck(subscription).cancel();
      }
    }
    [S$1._ensureController]() {
      if (this[S$1._controller$5] != null) return;
      this[S$1._controller$5] = async.StreamController.new({sync: true, onPause: dart.bind(this, S$1._onPause), onResume: dart.bind(this, S$1._onResume), onCancel: dart.bind(this, S$1._onListen)});
      let stream = new web_socket_impl._WebSocketOutgoingTransformer.new(this.webSocket).bind(dart.nullCheck(this[S$1._controller$5]).stream);
      this.sink.addStream(stream).then(core.Null, dart.fn(_ => {
        this[S$1._done]();
        this[S$1._closeCompleter].complete(this.webSocket);
      }, T$.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
          this[S$1._closed] = true;
          this[S$1._cancel]();
          if (core.ArgumentError.is(error)) {
            if (!this[S$1._done](error, stackTrace)) {
              this[S$1._closeCompleter].completeError(error, stackTrace);
            }
          } else {
            this[S$1._done]();
            this[S$1._closeCompleter].complete(this.webSocket);
          }
        }, T$.dynamicAndStackTraceToNull())});
    }
    [S$1._done](error = null, stackTrace = null) {
      if (this[S$1._completer] == null) return false;
      if (error != null) {
        dart.nullCheck(this[S$1._completer]).completeError(error, stackTrace);
      } else {
        dart.nullCheck(this[S$1._completer]).complete(this.webSocket);
      }
      this[S$1._completer] = null;
      return true;
    }
    addStream(stream) {
      async.Stream.as(stream);
      if (this[S$1._closed]) {
        stream.listen(null).cancel();
        return async.Future.value(this.webSocket);
      }
      this[S$1._ensureController]();
      this[S$1._completer] = T$.CompleterOfWebSocketImpl().new();
      this[S$1._subscription$1] = stream.listen(dart.fn(data => {
        dart.nullCheck(this[S$1._controller$5]).add(data);
      }, T$.dynamicTovoid()), {onDone: dart.bind(this, S$1._done), onError: dart.bind(this, S$1._done), cancelOnError: true});
      if (this[S$1._issuedPause]) {
        dart.nullCheck(this[S$1._subscription$1]).pause();
        this[S$1._issuedPause] = false;
      }
      return dart.nullCheck(this[S$1._completer]).future;
    }
    close() {
      this[S$1._ensureController]();
      const closeSocket = () => {
        return this.sink.close().catchError(dart.fn(_ => {
        }, T$.dynamicToNull())).then(dart.dynamic, dart.fn(_ => this.webSocket, T$.dynamicToWebSocketImpl()));
      };
      dart.fn(closeSocket, T$.VoidToFuture());
      dart.nullCheck(this[S$1._controller$5]).close();
      return this[S$1._closeCompleter].future.then(dart.dynamic, dart.fn(_ => closeSocket(), T$.dynamicToFuture()));
    }
    add(data) {
      if (this[S$1._closed]) return;
      this[S$1._ensureController]();
      dart.nullCheck(this[S$1._controller$5]).add(data);
    }
    closeSocket() {
      this[S$1._closed] = true;
      this[S$1._cancel]();
      this.close();
    }
  };
  (web_socket_impl._WebSocketConsumer.new = function(webSocket, sink) {
    this[S$1._controller$5] = null;
    this[S$1._subscription$1] = null;
    this[S$1._issuedPause] = false;
    this[S$1._closed] = false;
    this[S$1._closeCompleter] = T$.CompleterOfWebSocketImpl().new();
    this[S$1._completer] = null;
    this.webSocket = webSocket;
    this.sink = sink;
    ;
  }).prototype = web_socket_impl._WebSocketConsumer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketConsumer);
  dart.addTypeCaches(web_socket_impl._WebSocketConsumer);
  web_socket_impl._WebSocketConsumer[dart.implements] = () => [async.StreamConsumer];
  dart.setMethodSignature(web_socket_impl._WebSocketConsumer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketConsumer.__proto__),
    [S$1._onListen]: dart.fnType(dart.void, []),
    [S$1._onPause]: dart.fnType(dart.void, []),
    [S$1._onResume]: dart.fnType(dart.void, []),
    [S$1._cancel]: dart.fnType(dart.void, []),
    [S$1._ensureController]: dart.fnType(dart.void, []),
    [S$1._done]: dart.fnType(core.bool, [], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future, []),
    add: dart.fnType(dart.void, [dart.dynamic]),
    closeSocket: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketConsumer, I[199]);
  dart.setFieldSignature(web_socket_impl._WebSocketConsumer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketConsumer.__proto__),
    webSocket: dart.finalFieldType(web_socket_impl.WebSocketImpl),
    sink: dart.finalFieldType(async.StreamSink$(core.List$(core.int))),
    [S$1._controller$5]: dart.fieldType(dart.nullable(async.StreamController)),
    [S$1._subscription$1]: dart.fieldType(dart.nullable(async.StreamSubscription)),
    [S$1._issuedPause]: dart.fieldType(core.bool),
    [S$1._closed]: dart.fieldType(core.bool),
    [S$1._closeCompleter]: dart.finalFieldType(async.Completer),
    [S$1._completer]: dart.fieldType(dart.nullable(async.Completer$(web_socket_impl.WebSocketImpl)))
  }));
  web_socket_impl._ServiceObject = class _ServiceObject extends core.Object {
    get [S$1.__serviceId$1]() {
      return this[S$1.__serviceId];
    }
    set [S$1.__serviceId$1](value) {
      this[S$1.__serviceId] = value;
    }
    get [S$1._serviceId]() {
      let t269;
      if (this[S$1.__serviceId$1] === 0) this[S$1.__serviceId$1] = (t269 = web_socket_impl._nextServiceId, web_socket_impl._nextServiceId = t269 + 1, t269);
      return this[S$1.__serviceId$1];
    }
  };
  (web_socket_impl._ServiceObject.new = function() {
    this[S$1.__serviceId] = 0;
    ;
  }).prototype = web_socket_impl._ServiceObject.prototype;
  dart.addTypeTests(web_socket_impl._ServiceObject);
  dart.addTypeCaches(web_socket_impl._ServiceObject);
  dart.setGetterSignature(web_socket_impl._ServiceObject, () => ({
    __proto__: dart.getGetters(web_socket_impl._ServiceObject.__proto__),
    [S$1._serviceId]: core.int
  }));
  dart.setLibraryUri(web_socket_impl._ServiceObject, I[199]);
  dart.setFieldSignature(web_socket_impl._ServiceObject, () => ({
    __proto__: dart.getFields(web_socket_impl._ServiceObject.__proto__),
    [S$1.__serviceId$1]: dart.fieldType(core.int)
  }));
  const Stream__ServiceObject$36 = class Stream__ServiceObject extends async.Stream {};
  (Stream__ServiceObject$36.new = function() {
    web_socket_impl._ServiceObject.new.call(this);
    Stream__ServiceObject$36.__proto__.new.call(this);
  }).prototype = Stream__ServiceObject$36.prototype;
  (Stream__ServiceObject$36._internal = function() {
    web_socket_impl._ServiceObject.new.call(this);
    Stream__ServiceObject$36.__proto__._internal.call(this);
  }).prototype = Stream__ServiceObject$36.prototype;
  dart.applyMixin(Stream__ServiceObject$36, web_socket_impl._ServiceObject);
  web_socket_impl.WebSocketImpl = class WebSocketImpl extends Stream__ServiceObject$36 {
    get protocol() {
      return this[S$1.protocol];
    }
    set protocol(value) {
      super.protocol = value;
    }
    get [S$1._controller$5]() {
      let t269;
      t269 = this[S$1.__WebSocketImpl__controller];
      return t269 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t269;
    }
    set [S$1._controller$5](_controller$35param) {
      if (this[S$1.__WebSocketImpl__controller] == null)
        this[S$1.__WebSocketImpl__controller] = _controller$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_controller"));
    }
    get [S$1._sink$2]() {
      let t269;
      t269 = this[S$1.__WebSocketImpl__sink];
      return t269 == null ? dart.throw(new _internal.LateError.fieldNI("_sink")) : t269;
    }
    set [S$1._sink$2](_sink$35param) {
      if (this[S$1.__WebSocketImpl__sink] == null)
        this[S$1.__WebSocketImpl__sink] = _sink$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_sink"));
    }
    get [S$1._consumer]() {
      let t269;
      t269 = this[S$1.__WebSocketImpl__consumer];
      return t269 == null ? dart.throw(new _internal.LateError.fieldNI("_consumer")) : t269;
    }
    set [S$1._consumer](_consumer$35param) {
      if (this[S$1.__WebSocketImpl__consumer] == null)
        this[S$1.__WebSocketImpl__consumer] = _consumer$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_consumer"));
    }
    static ['_#fromSocket#tearOff'](stream, sink, protocol, _serverSide = false) {
      return new web_socket_impl.WebSocketImpl.fromSocket(stream, sink, protocol, _serverSide);
    }
    listen(onData, opts$) {
      let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
      let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
      let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
      return this[S$1._controller$5].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    get pingInterval() {
      return this[S$1._pingInterval];
    }
    set pingInterval(interval) {
      if (this[S$1._writeClosed]) return;
      if (this[S$1._pingTimer] != null) dart.nullCheck(this[S$1._pingTimer]).cancel();
      this[S$1._pingInterval] = interval;
      if (this[S$1._pingInterval] == null) return;
      this[S$1._pingTimer] = async.Timer.new(dart.nullCheck(this[S$1._pingInterval]), dart.fn(() => {
        if (this[S$1._writeClosed]) return;
        this[S$1._consumer].add(new web_socket_impl._WebSocketPing.new());
        this[S$1._pingTimer] = async.Timer.new(dart.nullCheck(this[S$1._pingInterval]), dart.fn(() => {
          this[S$1._close](1001);
        }, T$.VoidTovoid()));
      }, T$.VoidTovoid()));
    }
    get readyState() {
      return this[S$1._readyState];
    }
    get extensions() {
      return null;
    }
    get closeCode() {
      return this[S$1._closeCode$1];
    }
    get closeReason() {
      return this[S$1._closeReason$1];
    }
    add(data) {
      this[S$1._sink$2].add(data);
    }
    addError(error, stackTrace = null) {
      this[S$1._sink$2].addError(error, stackTrace);
    }
    addStream(stream) {
      async.Stream.as(stream);
      return this[S$1._sink$2].addStream(stream);
    }
    get done() {
      return this[S$1._sink$2].done;
    }
    close(code = null, reason = null) {
      if (web_socket_impl.WebSocketImpl._isReservedStatusCode(code)) {
        dart.throw(new exception$.WebSocketChannelException.new("Reserved status code " + dart.str(code)));
      }
      if (this[S$1._outCloseCode] == null) {
        this[S$1._outCloseCode] = code;
        this[S$1._outCloseReason] = reason;
      }
      if (!this[S$1._controller$5].isClosed) {
        if (!this[S$1._controller$5].hasListener && this[S$1._subscription$1] != null) {
          this[S$1._controller$5].stream.drain(dart.dynamic).catchError(dart.fn(_ => new _js_helper.LinkedMap.new(), T$.dynamicToMap()));
        }
        this[S$1._closeTimer] == null ? this[S$1._closeTimer] = async.Timer.new(C[380] || CT.C380, dart.fn(() => {
          this[S$1._closeCode$1] = this[S$1._outCloseCode];
          this[S$1._closeReason$1] = this[S$1._outCloseReason];
          if (this[S$1._subscription$1] != null) dart.nullCheck(this[S$1._subscription$1]).cancel();
          this[S$1._controller$5].close();
          web_socket_impl.WebSocketImpl._webSockets[S$.$remove](this[S$1._serviceId]);
        }, T$.VoidTovoid())) : null;
      }
      return this[S$1._sink$2].close();
    }
    [S$1._close](code = null, reason = null) {
      if (this[S$1._writeClosed]) return;
      if (this[S$1._outCloseCode] == null) {
        this[S$1._outCloseCode] = code;
        this[S$1._outCloseReason] = reason;
      }
      this[S$1._writeClosed] = true;
      this[S$1._consumer].closeSocket();
      web_socket_impl.WebSocketImpl._webSockets[S$.$remove](this[S$1._serviceId]);
    }
    static _isReservedStatusCode(code) {
      return code != null && (dart.notNull(code) < 1000 || code === 1004 || code === 1005 || code === 1006 || dart.notNull(code) > 1011 && dart.notNull(code) < 1015 || dart.notNull(code) >= 1015 && dart.notNull(code) < 3000);
    }
  };
  (web_socket_impl.WebSocketImpl.fromSocket = function(stream, sink, protocol, _serverSide = false) {
    this[S$1.__WebSocketImpl__controller] = null;
    this[S$1._subscription$1] = null;
    this[S$1.__WebSocketImpl__sink] = null;
    this[S$1._readyState] = 0;
    this[S$1._writeClosed] = false;
    this[S$1._closeCode$1] = null;
    this[S$1._closeReason$1] = null;
    this[S$1._pingInterval] = null;
    this[S$1._pingTimer] = null;
    this[S$1.__WebSocketImpl__consumer] = null;
    this[S$1._outCloseCode] = null;
    this[S$1._outCloseReason] = null;
    this[S$1._closeTimer] = null;
    this[S$1.protocol] = protocol;
    this[S$1._serverSide] = _serverSide;
    web_socket_impl.WebSocketImpl.__proto__.new.call(this);
    this[S$1._consumer] = new web_socket_impl._WebSocketConsumer.new(this, sink);
    this[S$1._sink$2] = new io_sink.StreamSinkImpl.new(this[S$1._consumer]);
    this[S$1._readyState] = 1;
    let transformer = new web_socket_impl._WebSocketProtocolTransformer.new(this[S$1._serverSide]);
    this[S$1._subscription$1] = transformer.bind(stream).listen(dart.fn(data => {
      if (web_socket_impl._WebSocketPing.is(data)) {
        if (!this[S$1._writeClosed]) this[S$1._consumer].add(new web_socket_impl._WebSocketPong.new(data.payload));
      } else if (web_socket_impl._WebSocketPong.is(data)) {
        this.pingInterval = this[S$1._pingInterval];
      } else {
        this[S$1._controller$5].add(data);
      }
    }, T$.dynamicTovoid()), {onError: dart.fn((error, stackTrace) => {
        if (this[S$1._closeTimer] != null) dart.nullCheck(this[S$1._closeTimer]).cancel();
        if (core.FormatException.is(error)) {
          this[S$1._close](1007);
        } else {
          this[S$1._close](1002);
        }
        this[S$1._closeCode$1] = this[S$1._outCloseCode];
        this[S$1._closeReason$1] = this[S$1._outCloseReason];
        this[S$1._controller$5].close();
      }, T$.dynamicAnddynamicToNull()), onDone: dart.fn(() => {
        if (this[S$1._closeTimer] != null) dart.nullCheck(this[S$1._closeTimer]).cancel();
        if (this[S$1._readyState] === 1) {
          this[S$1._readyState] = 2;
          if (!web_socket_impl.WebSocketImpl._isReservedStatusCode(transformer.closeCode)) {
            this[S$1._close](transformer.closeCode, transformer.closeReason);
          } else {
            this[S$1._close]();
          }
          this[S$1._readyState] = 3;
        }
        this[S$1._closeCode$1] = transformer.closeCode;
        this[S$1._closeReason$1] = transformer.closeReason;
        this[S$1._controller$5].close();
      }, T$.VoidTovoid()), cancelOnError: true});
    dart.nullCheck(this[S$1._subscription$1]).pause();
    this[S$1._controller$5] = async.StreamController.new({sync: true, onListen: dart.fn(() => dart.nullCheck(this[S$1._subscription$1]).resume(), T$.VoidTovoid()), onCancel: dart.fn(() => {
        dart.nullCheck(this[S$1._subscription$1]).cancel();
        this[S$1._subscription$1] = null;
      }, T$.VoidToNull()), onPause: dart.bind(dart.nullCheck(this[S$1._subscription$1]), 'pause'), onResume: dart.bind(dart.nullCheck(this[S$1._subscription$1]), 'resume')});
    web_socket_impl.WebSocketImpl._webSockets[S$.$_set](this[S$1._serviceId], this);
  }).prototype = web_socket_impl.WebSocketImpl.prototype;
  dart.addTypeTests(web_socket_impl.WebSocketImpl);
  dart.addTypeCaches(web_socket_impl.WebSocketImpl);
  web_socket_impl.WebSocketImpl[dart.implements] = () => [async.StreamSink];
  dart.setMethodSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getMethods(web_socket_impl.WebSocketImpl.__proto__),
    listen: dart.fnType(async.StreamSubscription, [dart.nullable(dart.fnType(dart.void, [dart.dynamic]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)]),
    [S$1._close]: dart.fnType(dart.void, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setStaticMethodSignature(web_socket_impl.WebSocketImpl, () => ['_isReservedStatusCode']);
  dart.setGetterSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getGetters(web_socket_impl.WebSocketImpl.__proto__),
    [S$1._controller$5]: async.StreamController,
    [S$1._sink$2]: async.StreamSink,
    [S$1._consumer]: web_socket_impl._WebSocketConsumer,
    pingInterval: dart.nullable(core.Duration),
    readyState: core.int,
    extensions: dart.nullable(core.String),
    closeCode: dart.nullable(core.int),
    closeReason: dart.nullable(core.String),
    done: async.Future
  }));
  dart.setSetterSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getSetters(web_socket_impl.WebSocketImpl.__proto__),
    [S$1._controller$5]: async.StreamController,
    [S$1._sink$2]: async.StreamSink,
    [S$1._consumer]: web_socket_impl._WebSocketConsumer,
    pingInterval: dart.nullable(core.Duration)
  }));
  dart.setLibraryUri(web_socket_impl.WebSocketImpl, I[199]);
  dart.setFieldSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getFields(web_socket_impl.WebSocketImpl.__proto__),
    protocol: dart.finalFieldType(dart.nullable(core.String)),
    [S$1.__WebSocketImpl__controller]: dart.fieldType(dart.nullable(async.StreamController)),
    [S$1._subscription$1]: dart.fieldType(dart.nullable(async.StreamSubscription)),
    [S$1.__WebSocketImpl__sink]: dart.fieldType(dart.nullable(async.StreamSink)),
    [S$1._serverSide]: dart.finalFieldType(core.bool),
    [S$1._readyState]: dart.fieldType(core.int),
    [S$1._writeClosed]: dart.fieldType(core.bool),
    [S$1._closeCode$1]: dart.fieldType(dart.nullable(core.int)),
    [S$1._closeReason$1]: dart.fieldType(dart.nullable(core.String)),
    [S$1._pingInterval]: dart.fieldType(dart.nullable(core.Duration)),
    [S$1._pingTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [S$1.__WebSocketImpl__consumer]: dart.fieldType(dart.nullable(web_socket_impl._WebSocketConsumer)),
    [S$1._outCloseCode]: dart.fieldType(dart.nullable(core.int)),
    [S$1._outCloseReason]: dart.fieldType(dart.nullable(core.String)),
    [S$1._closeTimer]: dart.fieldType(dart.nullable(async.Timer))
  }));
  dart.setStaticFieldSignature(web_socket_impl.WebSocketImpl, () => ['_webSockets', 'DEFAULT_WINDOW_BITS', 'PER_MESSAGE_DEFLATE']);
  dart.defineLazy(web_socket_impl.WebSocketImpl, {
    /*web_socket_impl.WebSocketImpl._webSockets*/get _webSockets() {
      return new (T$.IdentityMapOfint$WebSocketImpl()).new();
    },
    /*web_socket_impl.WebSocketImpl.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
      return 15;
    },
    /*web_socket_impl.WebSocketImpl.PER_MESSAGE_DEFLATE*/get PER_MESSAGE_DEFLATE() {
      return "permessage-deflate";
    }
  }, false);
  dart.defineLazy(web_socket_impl, {
    /*web_socket_impl.webSocketGUID*/get webSocketGUID() {
      return "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    },
    /*web_socket_impl._random*/get _random() {
      return math.Random.new();
    },
    /*web_socket_impl._nextServiceId*/get _nextServiceId() {
      return 1;
    },
    set _nextServiceId(value) {}
  }, false);
  mime_shared.MimeMultipart = class MimeMultipart extends async.Stream$(core.List$(core.int)) {};
  (mime_shared.MimeMultipart.new = function() {
    mime_shared.MimeMultipart.__proto__.new.call(this);
    ;
  }).prototype = mime_shared.MimeMultipart.prototype;
  dart.addTypeTests(mime_shared.MimeMultipart);
  dart.addTypeCaches(mime_shared.MimeMultipart);
  dart.setLibraryUri(mime_shared.MimeMultipart, I[201]);
  mime_multipart_transformer.MimeMultipartTransformer = class MimeMultipartTransformer extends async.StreamTransformerBase$(core.List$(core.int), mime_shared.MimeMultipart) {
    static ['_#new#tearOff'](boundary) {
      return new mime_multipart_transformer.MimeMultipartTransformer.new(boundary);
    }
    bind(stream) {
      T$.StreamOfListOfint().as(stream);
      return new bound_multipart_stream.BoundMultipartStream.new(this[S$1._boundary], stream).stream;
    }
  };
  (mime_multipart_transformer.MimeMultipartTransformer.new = function(boundary) {
    this[S$1._boundary] = mime_multipart_transformer._getBoundary(boundary);
    mime_multipart_transformer.MimeMultipartTransformer.__proto__.new.call(this);
    ;
  }).prototype = mime_multipart_transformer.MimeMultipartTransformer.prototype;
  dart.addTypeTests(mime_multipart_transformer.MimeMultipartTransformer);
  dart.addTypeCaches(mime_multipart_transformer.MimeMultipartTransformer);
  dart.setMethodSignature(mime_multipart_transformer.MimeMultipartTransformer, () => ({
    __proto__: dart.getMethods(mime_multipart_transformer.MimeMultipartTransformer.__proto__),
    bind: dart.fnType(async.Stream$(mime_shared.MimeMultipart), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(mime_multipart_transformer.MimeMultipartTransformer, I[202]);
  dart.setFieldSignature(mime_multipart_transformer.MimeMultipartTransformer, () => ({
    __proto__: dart.getFields(mime_multipart_transformer.MimeMultipartTransformer.__proto__),
    [S$1._boundary]: dart.finalFieldType(core.List$(core.int))
  }));
  mime_multipart_transformer._getBoundary = function _getBoundary(boundary) {
    let charCodes = boundary[S$0.$codeUnits];
    let boundaryList = _native_typed_data.NativeUint8List.new(4 + charCodes[S$.$length]);
    boundaryList[S$.$_set](0, 13);
    boundaryList[S$.$_set](1, 10);
    boundaryList[S$.$_set](2, 45);
    boundaryList[S$.$_set](3, 45);
    boundaryList[S$0.$setRange](4, 4 + charCodes[S$.$length], charCodes);
    return boundaryList;
  };
  mime_shared.MimeMultipartException = class MimeMultipartException extends core.Object {
    get message() {
      return this[S$1.message$12];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message = "") {
      return new mime_shared.MimeMultipartException.new(message);
    }
    toString() {
      return "MimeMultipartException: " + this.message;
    }
  };
  (mime_shared.MimeMultipartException.new = function(message = "") {
    this[S$1.message$12] = message;
    ;
  }).prototype = mime_shared.MimeMultipartException.prototype;
  dart.addTypeTests(mime_shared.MimeMultipartException);
  dart.addTypeCaches(mime_shared.MimeMultipartException);
  mime_shared.MimeMultipartException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(mime_shared.MimeMultipartException, I[201]);
  dart.setFieldSignature(mime_shared.MimeMultipartException, () => ({
    __proto__: dart.getFields(mime_shared.MimeMultipartException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(mime_shared.MimeMultipartException, ['toString']);
  mime_type.MimeTypeResolver = class MimeTypeResolver extends core.Object {
    static ['_#empty#tearOff']() {
      return new mime_type.MimeTypeResolver.empty();
    }
    static ['_#new#tearOff']() {
      return new mime_type.MimeTypeResolver.new();
    }
    get magicNumbersMaxLength() {
      return this[S$1._magicNumbersMaxLength];
    }
    lookup(path, opts$) {
      let headerBytes = opts$ && 'headerBytes' in opts$ ? opts$.headerBytes : null;
      let result = null;
      if (headerBytes != null) {
        result = mime_type.MimeTypeResolver._matchMagic(headerBytes, this[S$1._magicNumbers]);
        if (result != null) return result;
        if (this[S$1._useDefault]) {
          result = mime_type.MimeTypeResolver._matchMagic(headerBytes, magic_number.initialMagicNumbers);
          if (result != null) return result;
        }
      }
      let ext = mime_type.MimeTypeResolver._ext(path);
      result = this[S$1._extensionMap][S$.$_get](ext);
      if (result != null) return result;
      if (this[S$1._useDefault]) {
        result = default_extension_map.defaultExtensionMap[S$.$_get](ext);
        if (result != null) return result;
      }
      return null;
    }
    addExtension(extension, mimeType) {
      this[S$1._extensionMap][S$.$_set](extension, mimeType);
    }
    addMagicNumber(bytes, mimeType, opts$) {
      let mask = opts$ && 'mask' in opts$ ? opts$.mask : null;
      if (mask != null && bytes[S$.$length] !== mask[S$.$length]) {
        dart.throw(new core.ArgumentError.new("Bytes and mask are of different lengths"));
      }
      if (bytes[S$.$length] > this[S$1._magicNumbersMaxLength]) {
        this[S$1._magicNumbersMaxLength] = bytes[S$.$length];
      }
      this[S$1._magicNumbers][S$.$add](new magic_number.MagicNumber.new(mimeType, bytes, {mask: mask}));
    }
    static _matchMagic(headerBytes, magicNumbers) {
      for (let mn of magicNumbers) {
        if (mn.matches(headerBytes)) return mn.mimeType;
      }
      return null;
    }
    static _ext(path) {
      let index = path[S$0.$lastIndexOf](".");
      if (index < 0 || index + 1 >= path.length) return path;
      return path[S$.$substring](index + 1)[S$.$toLowerCase]();
    }
  };
  (mime_type.MimeTypeResolver.empty = function() {
    this[S$1._extensionMap] = new (T$.IdentityMapOfString$String()).new();
    this[S$1._magicNumbers] = T$.JSArrayOfMagicNumber().of([]);
    this[S$1._useDefault] = false;
    this[S$1._magicNumbersMaxLength] = 0;
    ;
  }).prototype = mime_type.MimeTypeResolver.prototype;
  (mime_type.MimeTypeResolver.new = function() {
    this[S$1._extensionMap] = new (T$.IdentityMapOfString$String()).new();
    this[S$1._magicNumbers] = T$.JSArrayOfMagicNumber().of([]);
    this[S$1._useDefault] = true;
    this[S$1._magicNumbersMaxLength] = 12;
    ;
  }).prototype = mime_type.MimeTypeResolver.prototype;
  dart.addTypeTests(mime_type.MimeTypeResolver);
  dart.addTypeCaches(mime_type.MimeTypeResolver);
  dart.setMethodSignature(mime_type.MimeTypeResolver, () => ({
    __proto__: dart.getMethods(mime_type.MimeTypeResolver.__proto__),
    lookup: dart.fnType(dart.nullable(core.String), [core.String], {headerBytes: dart.nullable(core.List$(core.int))}, {}),
    addExtension: dart.fnType(dart.void, [core.String, core.String]),
    addMagicNumber: dart.fnType(dart.void, [core.List$(core.int), core.String], {mask: dart.nullable(core.List$(core.int))}, {})
  }));
  dart.setStaticMethodSignature(mime_type.MimeTypeResolver, () => ['_matchMagic', '_ext']);
  dart.setGetterSignature(mime_type.MimeTypeResolver, () => ({
    __proto__: dart.getGetters(mime_type.MimeTypeResolver.__proto__),
    magicNumbersMaxLength: core.int
  }));
  dart.setLibraryUri(mime_type.MimeTypeResolver, I[203]);
  dart.setFieldSignature(mime_type.MimeTypeResolver, () => ({
    __proto__: dart.getFields(mime_type.MimeTypeResolver.__proto__),
    [S$1._extensionMap]: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$1._magicNumbers]: dart.finalFieldType(core.List$(magic_number.MagicNumber)),
    [S$1._useDefault]: dart.finalFieldType(core.bool),
    [S$1._magicNumbersMaxLength]: dart.fieldType(core.int)
  }));
  mime_type.lookupMimeType = function lookupMimeType(path, opts$) {
    let headerBytes = opts$ && 'headerBytes' in opts$ ? opts$.headerBytes : null;
    return mime_type._globalResolver.lookup(path, {headerBytes: headerBytes});
  };
  mime_type.extensionFromMime = function extensionFromMime(mime) {
    mime = mime[S$.$toLowerCase]();
    for (let entry of default_extension_map.defaultExtensionMap[S$0.$entries]) {
      if (default_extension_map.defaultExtensionMap[S$.$_get](entry.key) === mime) {
        return entry.key;
      }
    }
    return mime;
  };
  dart.copyProperties(mime_type, {
    get defaultMagicNumbersMaxLength() {
      return mime_type._globalResolver.magicNumbersMaxLength;
    }
  });
  dart.defineLazy(mime_type, {
    /*mime_type._globalResolver*/get _globalResolver() {
      return new mime_type.MimeTypeResolver.new();
    }
  }, false);
  const _is_CombineLatestStream_default = Symbol('_is_CombineLatestStream_default');
  combine_latest.CombineLatestStream$ = dart.generic((T, R) => {
    class CombineLatestStream extends async.StreamView$(R) {
      static ['_#new#tearOff'](T, R, streams, combiner) {
        return new (combine_latest.CombineLatestStream$(T, R)).new(streams, combiner);
      }
      static list(T, streams) {
        return new (combine_latest.CombineLatestStream$(T, core.List$(T))).new(streams, dart.fn(values => values, dart.fnType(core.List$(T), [core.List$(T)])));
      }
      static combine2(A, B, R, streamOne, streamTwo, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamOne, streamTwo]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1))), dart.fnType(R, [core.List])));
      }
      static combine3(A, B, C, R, streamA, streamB, streamC, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2))), dart.fnType(R, [core.List])));
      }
      static combine4(A, B, C, D, R, streamA, streamB, streamC, streamD, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3))), dart.fnType(R, [core.List])));
      }
      static combine5(A, B, C, D, E, R, streamA, streamB, streamC, streamD, streamE, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4))), dart.fnType(R, [core.List])));
      }
      static combine6(A, B, C, D, E, F, R, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5))), dart.fnType(R, [core.List])));
      }
      static combine7(A, B, C, D, E, F, G, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6))), dart.fnType(R, [core.List])));
      }
      static combine8(A, B, C, D, E, F, G, H, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7))), dart.fnType(R, [core.List])));
      }
      static combine9(A, B, C, D, E, F, G, H, I, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
        return new (combine_latest.CombineLatestStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7)), I.as(values[S$.$_get](8))), dart.fnType(R, [core.List])));
      }
      static _buildController(T, R, streams, combiner) {
        let controller = async.StreamController$(R).new({sync: true});
        let subscriptions = null;
        function subscriptions$35get() {
          let t270;
          t270 = subscriptions;
          return t270 == null ? dart.throw(new _internal.LateError.localNI("subscriptions")) : t270;
        }
        function subscriptions$35set(subscriptions$35param) {
          return subscriptions = subscriptions$35param;
        }
        let values = null;
        controller.onListen = dart.fn(() => {
          let triggered = 0;
          let completed = 0;
          function onDone() {
            if ((completed = completed + 1) === subscriptions$35get()[S$.$length]) {
              controller.close();
            }
          }
          dart.fn(onDone, T$.VoidTovoid());
          subscriptions$35set(collection_extensions['MapNotNullIterableExtension|mapIndexed'](async.Stream$(T), async.StreamSubscription$(T), streams, dart.fn((index, stream) => {
            let hasFirstEvent = false;
            return stream.listen(dart.fn(value => {
              if (values == null) {
                return;
              }
              dart.nullCheck(values)[S$.$_set](index, value);
              if (!hasFirstEvent) {
                hasFirstEvent = true;
                triggered = triggered + 1;
              }
              if (triggered === subscriptions$35get()[S$.$length]) {
                let combined = null;
                try {
                  combined = combiner(core.List$(T).unmodifiable(dart.nullCheck(values)));
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  let s = dart.stackTrace(e$);
                  if (core.Object.is(e)) {
                    controller.addError(e, s);
                    return;
                  } else
                    throw e$;
                }
                controller.add(combined);
              }
            }, dart.fnType(dart.void, [T])), {onError: dart.bind(controller, 'addError'), onDone: onDone});
          }, dart.fnType(async.StreamSubscription$(T), [core.int, async.Stream$(T)])))[S$.$toList]({growable: false}));
          if (subscriptions$35get()[S$.$isEmpty]) {
            controller.close();
          } else {
            values = core.List$(dart.nullable(T)).filled(subscriptions$35get()[S$.$length], null);
          }
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|pauseAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onResume = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|resumeAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onCancel = dart.fn(() => {
          values = null;
          return subscription['StreamSubscriptionsIterableExtension|cancelAll'](subscriptions$35get());
        }, T$.VoidToFutureNOfvoid());
        return controller;
      }
    }
    (CombineLatestStream.new = function(streams, combiner) {
      CombineLatestStream.__proto__.new.call(this, combine_latest.CombineLatestStream._buildController(T, R, streams, combiner).stream);
      ;
    }).prototype = CombineLatestStream.prototype;
    dart.addTypeTests(CombineLatestStream);
    CombineLatestStream.prototype[_is_CombineLatestStream_default] = true;
    dart.addTypeCaches(CombineLatestStream);
    dart.setStaticMethodSignature(CombineLatestStream, () => ['list', 'combine2', 'combine3', 'combine4', 'combine5', 'combine6', 'combine7', 'combine8', 'combine9', '_buildController']);
    dart.setLibraryUri(CombineLatestStream, I[204]);
    return CombineLatestStream;
  });
  combine_latest.CombineLatestStream = combine_latest.CombineLatestStream$();
  dart.addTypeTests(combine_latest.CombineLatestStream, _is_CombineLatestStream_default);
  const _is_ConcatStream_default = Symbol('_is_ConcatStream_default');
  concat.ConcatStream$ = dart.generic(T => {
    class ConcatStream extends async.StreamView$(T) {
      static ['_#new#tearOff'](T, streams) {
        return new (concat.ConcatStream$(T)).new(streams);
      }
      static _buildController(T, streams) {
        let controller = async.StreamController$(T).new({sync: true});
        let subscription = null;
        controller.onListen = dart.fn(() => {
          let iterator = streams[S$0.$iterator];
          function moveNext() {
            let t273;
            if (!iterator.moveNext()) {
              controller.close();
              return;
            }
            t273 = subscription;
            t273 == null ? null : t273.cancel();
            subscription = iterator.current.listen(dart.fnType(dart.void, [T]).as(dart.bind(controller, 'add')), {onError: dart.bind(controller, 'addError'), onDone: moveNext});
          }
          dart.fn(moveNext, T$.VoidTovoid());
          moveNext();
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => {
          let t273;
          t273 = subscription;
          return t273 == null ? null : t273.pause();
        }, T$.VoidTovoid());
        controller.onResume = dart.fn(() => {
          let t273;
          t273 = subscription;
          return t273 == null ? null : t273.resume();
        }, T$.VoidTovoid());
        controller.onCancel = dart.fn(() => {
          let t273;
          t273 = subscription;
          return t273 == null ? null : t273.cancel();
        }, T$.VoidToFutureNOfvoid());
        return controller;
      }
    }
    (ConcatStream.new = function(streams) {
      ConcatStream.__proto__.new.call(this, concat.ConcatStream._buildController(T, streams).stream);
      ;
    }).prototype = ConcatStream.prototype;
    dart.addTypeTests(ConcatStream);
    ConcatStream.prototype[_is_ConcatStream_default] = true;
    dart.addTypeCaches(ConcatStream);
    dart.setStaticMethodSignature(ConcatStream, () => ['_buildController']);
    dart.setLibraryUri(ConcatStream, I[205]);
    return ConcatStream;
  });
  concat.ConcatStream = concat.ConcatStream$();
  dart.addTypeTests(concat.ConcatStream, _is_ConcatStream_default);
  concat['ConcatExtensions|concatWith'] = function ConcatExtensions$124concatWith(T, $this, other) {
    let concatStream = new (concat.ConcatStream$(T)).new((() => {
      let t274 = _interceptors.JSArray$(async.Stream$(T)).of([$this]);
      t274[S$.$addAll](other);
      return t274;
    })());
    return $this.isBroadcast ? concatStream.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), dart.fnType(dart.void, [async.StreamSubscription$(T)]))}) : concatStream;
  };
  concat['ConcatExtensions|get#concatWith'] = function ConcatExtensions$124get$35concatWith(T, $this) {
    return dart.fn(other => concat['ConcatExtensions|concatWith'](T, $this, other), dart.fnType(async.Stream$(T), [core.Iterable$(async.Stream$(T))]));
  };
  const _is_ConcatEagerStream_default = Symbol('_is_ConcatEagerStream_default');
  concat_eager.ConcatEagerStream$ = dart.generic(T => {
    class ConcatEagerStream extends async.StreamView$(T) {
      static ['_#new#tearOff'](T, streams) {
        return new (concat_eager.ConcatEagerStream$(T)).new(streams);
      }
      static _buildController(T, streams) {
        let controller = async.StreamController$(T).new({sync: true});
        let subscriptions = null;
        function subscriptions$35get() {
          let t277;
          t277 = subscriptions;
          return t277 == null ? dart.throw(new _internal.LateError.localNI("subscriptions")) : t277;
        }
        function subscriptions$35set(subscriptions$35param) {
          return subscriptions = subscriptions$35param;
        }
        let activeSubscription = null;
        controller.onListen = dart.fn(() => {
          let completeEvents = T$.JSArrayOfCompleterOfvoid().of([]);
          function onDone(index) {
            return dart.fn(() => {
              if (index < subscriptions$35get()[S$.$length] - 1) {
                completeEvents[S$.$_get](index).complete();
                activeSubscription = subscriptions$35get()[S$.$_get](index + 1);
              } else if (index === subscriptions$35get()[S$.$length] - 1) {
                controller.close();
              }
            }, T$.VoidTovoid());
          }
          dart.fn(onDone, T$.intToFn());
          function createSubscription(index, stream) {
            let subscription = stream.listen(dart.fnType(dart.void, [T]).as(dart.bind(controller, 'add')), {onError: dart.bind(controller, 'addError'), onDone: onDone(index)});
            if (index > 0) {
              let completer = T$.CompleterOfvoid().sync();
              completeEvents[S$.$add](completer);
              subscription.pause(completer.future);
            }
            return subscription;
          }
          dart.fn(createSubscription, dart.fnType(async.StreamSubscription$(T), [core.int, async.Stream$(T)]));
          subscriptions$35set(collection_extensions['MapNotNullIterableExtension|mapIndexed'](async.Stream$(T), async.StreamSubscription$(T), streams, createSubscription)[S$.$toList]({growable: false}));
          if (subscriptions$35get()[S$.$isEmpty]) {
            controller.close();
          } else {
            activeSubscription = subscriptions$35get()[S$.$first];
          }
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => {
          let t279;
          t279 = activeSubscription;
          return t279 == null ? null : t279.pause();
        }, T$.VoidTovoid());
        controller.onResume = dart.fn(() => {
          let t279;
          t279 = activeSubscription;
          return t279 == null ? null : t279.resume();
        }, T$.VoidTovoid());
        controller.onCancel = dart.fn(() => {
          activeSubscription = null;
          return subscription['StreamSubscriptionsIterableExtension|cancelAll'](subscriptions$35get());
        }, T$.VoidToFutureNOfvoid());
        return controller;
      }
    }
    (ConcatEagerStream.new = function(streams) {
      ConcatEagerStream.__proto__.new.call(this, concat_eager.ConcatEagerStream._buildController(T, streams).stream);
      ;
    }).prototype = ConcatEagerStream.prototype;
    dart.addTypeTests(ConcatEagerStream);
    ConcatEagerStream.prototype[_is_ConcatEagerStream_default] = true;
    dart.addTypeCaches(ConcatEagerStream);
    dart.setStaticMethodSignature(ConcatEagerStream, () => ['_buildController']);
    dart.setLibraryUri(ConcatEagerStream, I[206]);
    return ConcatEagerStream;
  });
  concat_eager.ConcatEagerStream = concat_eager.ConcatEagerStream$();
  dart.addTypeTests(concat_eager.ConcatEagerStream, _is_ConcatEagerStream_default);
  const _is_ConnectableStream_default = Symbol('_is_ConnectableStream_default');
  connectable_stream.ConnectableStream$ = dart.generic(T => {
    class ConnectableStream extends async.StreamView$(T) {}
    (ConnectableStream.new = function(stream) {
      ConnectableStream.__proto__.new.call(this, stream);
      ;
    }).prototype = ConnectableStream.prototype;
    dart.addTypeTests(ConnectableStream);
    ConnectableStream.prototype[_is_ConnectableStream_default] = true;
    dart.addTypeCaches(ConnectableStream);
    dart.setLibraryUri(ConnectableStream, I[207]);
    return ConnectableStream;
  });
  connectable_stream.ConnectableStream = connectable_stream.ConnectableStream$();
  dart.addTypeTests(connectable_stream.ConnectableStream, _is_ConnectableStream_default);
  connectable_stream._ConnectableStreamUse = class _ConnectableStreamUse extends core._Enum {
    [S$._enumToString]() {
      return "_ConnectableStreamUse." + this[S$._name];
    }
  };
  (connectable_stream._ConnectableStreamUse.new = function(index, name) {
    connectable_stream._ConnectableStreamUse.__proto__.new.call(this, index, name);
    ;
  }).prototype = connectable_stream._ConnectableStreamUse.prototype;
  dart.addTypeTests(connectable_stream._ConnectableStreamUse);
  dart.addTypeCaches(connectable_stream._ConnectableStreamUse);
  dart.setMethodSignature(connectable_stream._ConnectableStreamUse, () => ({
    __proto__: dart.getMethods(connectable_stream._ConnectableStreamUse.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(connectable_stream._ConnectableStreamUse, I[207]);
  dart.setStaticFieldSignature(connectable_stream._ConnectableStreamUse, () => ['values', 'autoConnect', 'connect', 'refCount']);
  dart.defineLazy(connectable_stream._ConnectableStreamUse, {
    /*connectable_stream._ConnectableStreamUse.values*/get values() {
      return C[381] || CT.C381;
    },
    /*connectable_stream._ConnectableStreamUse.autoConnect*/get autoConnect() {
      return C[382] || CT.C382;
    },
    /*connectable_stream._ConnectableStreamUse.connect*/get connect() {
      return C[383] || CT.C383;
    },
    /*connectable_stream._ConnectableStreamUse.refCount*/get refCount() {
      return C[384] || CT.C384;
    }
  }, false);
  const _is_AbstractConnectableStream_default = Symbol('_is_AbstractConnectableStream_default');
  connectable_stream.AbstractConnectableStream$ = dart.generic((T, S, R) => {
    var __t$ConnectableStreamSubscriptionOfT = () => (__t$ConnectableStreamSubscriptionOfT = dart.constFn(connectable_stream.ConnectableStreamSubscription$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class AbstractConnectableStream extends connectable_stream.ConnectableStream$(T) {
      get [S$1._connection]() {
        let t282, t281;
        t281 = this[S$1.__AbstractConnectableStream__connection];
        return t281 == null ? (t282 = new (__t$ConnectableStreamSubscriptionOfT()).new(this[S$1._source].listen(__t$TTovoid().as(dart.bind(this[S$1._subject$3], 'add')), {onError: dart.bind(this[S$1._subject$3], 'addError'), onDone: dart.bind(this[S$1._subject$3], 'close')}), this[S$1._subject$3]), this[S$1.__AbstractConnectableStream__connection] == null ? this[S$1.__AbstractConnectableStream__connection] = t282 : dart.throw(new _internal.LateError.fieldADI("_connection"))) : t281;
      }
      [S$1._canReuse](use) {
        if (this[S$1._use] != null && this[S$1._use] !== use) {
          dart.throw(new core.StateError.new("Do not mix autoConnect, connect and refCount together, you should only use one of them!"));
        }
        let canReuse = this[S$1._use] != null && this[S$1._use] === use;
        this[S$1._use] = use;
        return canReuse;
      }
      autoConnect(opts$) {
        let connection = opts$ && 'connection' in opts$ ? opts$.connection : null;
        if (this[S$1._canReuse](connectable_stream._ConnectableStreamUse.autoConnect)) {
          return R.as(this[S$1._subject$3]);
        }
        this[S$1._subject$3].onListen = dart.fn(() => {
          let t281;
          let subscription = this[S$1._connection];
          t281 = connection;
          t281 == null ? null : t281(subscription);
        }, T$.VoidTovoid());
        this[S$1._subject$3].onCancel = null;
        return R.as(this[S$1._subject$3]);
      }
      connect() {
        if (this[S$1._canReuse](connectable_stream._ConnectableStreamUse.connect)) {
          return this[S$1._connection];
        }
        this[S$1._subject$3].onListen = this[S$1._subject$3].onCancel = null;
        return this[S$1._connection];
      }
      refCount() {
        if (this[S$1._canReuse](connectable_stream._ConnectableStreamUse.refCount)) {
          return R.as(this[S$1._subject$3]);
        }
        let subscription = null;
        this[S$1._subject$3].onListen = dart.fn(() => subscription = this[S$1._connection], T$.VoidTovoid());
        this[S$1._subject$3].onCancel = dart.fn(() => {
          let t281;
          t281 = subscription;
          return t281 == null ? null : t281.cancel();
        }, T$.VoidToFutureNOfvoid());
        return R.as(this[S$1._subject$3]);
      }
    }
    (AbstractConnectableStream.new = function(source, subject) {
      this[S$1._use] = null;
      this[S$1.__AbstractConnectableStream__connection] = null;
      this[S$1.__AbstractConnectableStream__connection_isSet] = false;
      if (!R.is(subject)) dart.assertFailed(null, I[208], 58, 16, "subject is R");
      this[S$1._source] = source;
      this[S$1._subject$3] = subject;
      AbstractConnectableStream.__proto__.new.call(this, subject);
      ;
    }).prototype = AbstractConnectableStream.prototype;
    dart.addTypeTests(AbstractConnectableStream);
    AbstractConnectableStream.prototype[_is_AbstractConnectableStream_default] = true;
    dart.addTypeCaches(AbstractConnectableStream);
    dart.setMethodSignature(AbstractConnectableStream, () => ({
      __proto__: dart.getMethods(AbstractConnectableStream.__proto__),
      [S$1._canReuse]: dart.fnType(core.bool, [connectable_stream._ConnectableStreamUse]),
      autoConnect: dart.fnType(R, [], {connection: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      connect: dart.fnType(async.StreamSubscription$(T), []),
      refCount: dart.fnType(R, [])
    }));
    dart.setGetterSignature(AbstractConnectableStream, () => ({
      __proto__: dart.getGetters(AbstractConnectableStream.__proto__),
      [S$1._connection]: connectable_stream.ConnectableStreamSubscription$(T)
    }));
    dart.setLibraryUri(AbstractConnectableStream, I[207]);
    dart.setFieldSignature(AbstractConnectableStream, () => ({
      __proto__: dart.getFields(AbstractConnectableStream.__proto__),
      [S$1._source]: dart.finalFieldType(async.Stream$(T)),
      [S$1._subject$3]: dart.finalFieldType(S),
      [S$1._use]: dart.fieldType(dart.nullable(connectable_stream._ConnectableStreamUse)),
      [S$1.__AbstractConnectableStream__connection]: dart.fieldType(dart.nullable(connectable_stream.ConnectableStreamSubscription$(T))),
      [S$1.__AbstractConnectableStream__connection_isSet]: dart.fieldType(core.bool)
    }));
    return AbstractConnectableStream;
  });
  connectable_stream.AbstractConnectableStream = connectable_stream.AbstractConnectableStream$();
  dart.addTypeTests(connectable_stream.AbstractConnectableStream, _is_AbstractConnectableStream_default);
  const _is_PublishConnectableStream_default = Symbol('_is_PublishConnectableStream_default');
  connectable_stream.PublishConnectableStream$ = dart.generic(T => {
    var __t$PublishSubjectOfT = () => (__t$PublishSubjectOfT = dart.constFn(publish_subject.PublishSubject$(T)))();
    class PublishConnectableStream extends connectable_stream.AbstractConnectableStream$(T, publish_subject.PublishSubject$(T), async.Stream$(T)) {
      static ['_#new#tearOff'](T, source, opts$) {
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return new (connectable_stream.PublishConnectableStream$(T)).new(source, {sync: sync});
      }
    }
    (PublishConnectableStream.new = function(source, opts$) {
      let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
      PublishConnectableStream.__proto__.new.call(this, source, __t$PublishSubjectOfT().new({sync: sync}));
      ;
    }).prototype = PublishConnectableStream.prototype;
    dart.addTypeTests(PublishConnectableStream);
    PublishConnectableStream.prototype[_is_PublishConnectableStream_default] = true;
    dart.addTypeCaches(PublishConnectableStream);
    dart.setLibraryUri(PublishConnectableStream, I[207]);
    return PublishConnectableStream;
  });
  connectable_stream.PublishConnectableStream = connectable_stream.PublishConnectableStream$();
  dart.addTypeTests(connectable_stream.PublishConnectableStream, _is_PublishConnectableStream_default);
  const _is_ValueConnectableStream_default = Symbol('_is_ValueConnectableStream_default');
  connectable_stream.ValueConnectableStream$ = dart.generic(T => {
    var __t$BehaviorSubjectOfT = () => (__t$BehaviorSubjectOfT = dart.constFn(behavior_subject.BehaviorSubject$(T)))();
    class ValueConnectableStream extends connectable_stream.AbstractConnectableStream$(T, behavior_subject.BehaviorSubject$(T), value_stream.ValueStream$(T)) {
      static ['_#new#tearOff'](T, source, opts$) {
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return new (connectable_stream.ValueConnectableStream$(T)).new(source, {sync: sync});
      }
      static ['_#seeded#tearOff'](T, source, seedValue, opts$) {
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return new (connectable_stream.ValueConnectableStream$(T)).seeded(source, seedValue, {sync: sync});
      }
      get hasValue() {
        return this[S$1._subject$3].hasValue;
      }
      get value() {
        return this[S$1._subject$3].value;
      }
      get valueOrNull() {
        return this[S$1._subject$3].valueOrNull;
      }
      get error() {
        return this[S$1._subject$3].error;
      }
      get errorOrNull() {
        return this[S$1._subject$3].errorOrNull;
      }
      get hasError() {
        return this[S$1._subject$3].hasError;
      }
      get stackTrace() {
        return this[S$1._subject$3].stackTrace;
      }
    }
    (ValueConnectableStream.new = function(source, opts$) {
      let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
      ValueConnectableStream.__proto__.new.call(this, source, __t$BehaviorSubjectOfT().new({sync: sync}));
      ;
    }).prototype = ValueConnectableStream.prototype;
    (ValueConnectableStream.seeded = function(source, seedValue, opts$) {
      let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
      ValueConnectableStream.__proto__.new.call(this, source, __t$BehaviorSubjectOfT().seeded(seedValue, {sync: sync}));
      ;
    }).prototype = ValueConnectableStream.prototype;
    dart.addTypeTests(ValueConnectableStream);
    ValueConnectableStream.prototype[_is_ValueConnectableStream_default] = true;
    dart.addTypeCaches(ValueConnectableStream);
    ValueConnectableStream[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setGetterSignature(ValueConnectableStream, () => ({
      __proto__: dart.getGetters(ValueConnectableStream.__proto__),
      hasValue: core.bool,
      value: T,
      valueOrNull: dart.nullable(T),
      error: core.Object,
      errorOrNull: dart.nullable(core.Object),
      hasError: core.bool,
      stackTrace: dart.nullable(core.StackTrace)
    }));
    dart.setLibraryUri(ValueConnectableStream, I[207]);
    return ValueConnectableStream;
  });
  connectable_stream.ValueConnectableStream = connectable_stream.ValueConnectableStream$();
  dart.addTypeTests(connectable_stream.ValueConnectableStream, _is_ValueConnectableStream_default);
  const _is_ReplayConnectableStream_default = Symbol('_is_ReplayConnectableStream_default');
  connectable_stream.ReplayConnectableStream$ = dart.generic(T => {
    var __t$ReplaySubjectOfT = () => (__t$ReplaySubjectOfT = dart.constFn(replay_subject.ReplaySubject$(T)))();
    class ReplayConnectableStream extends connectable_stream.AbstractConnectableStream$(T, replay_subject.ReplaySubject$(T), replay_stream.ReplayStream$(T)) {
      static ['_#new#tearOff'](T, stream, opts$) {
        let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
        let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
        return new (connectable_stream.ReplayConnectableStream$(T)).new(stream, {maxSize: maxSize, sync: sync});
      }
      get values() {
        return this[S$1._subject$3].values;
      }
      get errors() {
        return this[S$1._subject$3].errors;
      }
      get stackTraces() {
        return this[S$1._subject$3].stackTraces;
      }
    }
    (ReplayConnectableStream.new = function(stream, opts$) {
      let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
      let sync = opts$ && 'sync' in opts$ ? opts$.sync : false;
      ReplayConnectableStream.__proto__.new.call(this, stream, __t$ReplaySubjectOfT().new({maxSize: maxSize, sync: sync}));
      ;
    }).prototype = ReplayConnectableStream.prototype;
    dart.addTypeTests(ReplayConnectableStream);
    ReplayConnectableStream.prototype[_is_ReplayConnectableStream_default] = true;
    dart.addTypeCaches(ReplayConnectableStream);
    ReplayConnectableStream[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setGetterSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getGetters(ReplayConnectableStream.__proto__),
      values: core.List$(T),
      errors: core.List$(core.Object),
      stackTraces: core.List$(dart.nullable(core.StackTrace))
    }));
    dart.setLibraryUri(ReplayConnectableStream, I[207]);
    return ReplayConnectableStream;
  });
  connectable_stream.ReplayConnectableStream = connectable_stream.ReplayConnectableStream$();
  dart.addTypeTests(connectable_stream.ReplayConnectableStream, _is_ReplayConnectableStream_default);
  const _is_ConnectableStreamSubscription_default = Symbol('_is_ConnectableStreamSubscription_default');
  connectable_stream.ConnectableStreamSubscription$ = dart.generic(T => {
    class ConnectableStreamSubscription extends async.StreamSubscription$(T) {
      static ['_#new#tearOff'](T, _source, _subject) {
        return new (connectable_stream.ConnectableStreamSubscription$(T)).new(_source, _subject);
      }
      cancel() {
        return this[S$1._source].cancel().then(dart.void, dart.fn(_ => this[S$1._subject$3].close(), T$.voidToFuture()));
      }
      asFuture(E, futureValue = null) {
        return this[S$1._unsupportedError]();
      }
      get isPaused() {
        return this[S$1._source].isPaused;
      }
      onData(handleData) {
        return this[S$1._unsupportedError]();
      }
      onDone(handleDone) {
        return this[S$1._unsupportedError]();
      }
      onError(handleError) {
        return this[S$1._unsupportedError]();
      }
      pause(resumeSignal = null) {
        return this[S$1._source].pause(resumeSignal);
      }
      resume() {
        return this[S$1._source].resume();
      }
      [S$1._unsupportedError]() {
        return dart.throw(new core.UnsupportedError.new("Cannot change handlers of ConnectableStreamSubscription."));
      }
    }
    (ConnectableStreamSubscription.new = function(_source, _subject) {
      this[S$1._source] = _source;
      this[S$1._subject$3] = _subject;
      ;
    }).prototype = ConnectableStreamSubscription.prototype;
    dart.addTypeTests(ConnectableStreamSubscription);
    ConnectableStreamSubscription.prototype[_is_ConnectableStreamSubscription_default] = true;
    dart.addTypeCaches(ConnectableStreamSubscription);
    dart.setMethodSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getMethods(ConnectableStreamSubscription.__proto__),
      cancel: dart.fnType(async.Future, []),
      asFuture: dart.gFnType(E => [dart.Never, [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      onData: dart.fnType(dart.Never, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onDone: dart.fnType(dart.Never, [dart.nullable(dart.fnType(dart.void, []))]),
      onError: dart.fnType(dart.Never, [dart.nullable(core.Function)]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      [S$1._unsupportedError]: dart.fnType(dart.Never, [])
    }));
    dart.setGetterSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getGetters(ConnectableStreamSubscription.__proto__),
      isPaused: core.bool
    }));
    dart.setLibraryUri(ConnectableStreamSubscription, I[207]);
    dart.setFieldSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getFields(ConnectableStreamSubscription.__proto__),
      [S$1._source]: dart.finalFieldType(async.StreamSubscription$(T)),
      [S$1._subject$3]: dart.finalFieldType(subject.Subject$(T))
    }));
    return ConnectableStreamSubscription;
  });
  connectable_stream.ConnectableStreamSubscription = connectable_stream.ConnectableStreamSubscription$();
  dart.addTypeTests(connectable_stream.ConnectableStreamSubscription, _is_ConnectableStreamSubscription_default);
  connectable_stream['ConnectableStreamExtensions|publish'] = function ConnectableStreamExtensions$124publish(T, $this) {
    return new (connectable_stream.PublishConnectableStream$(T)).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publish'] = function ConnectableStreamExtensions$124get$35publish(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publish'](T, $this), dart.fnType(connectable_stream.PublishConnectableStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValue'] = function ConnectableStreamExtensions$124publishValue(T, $this) {
    return new (connectable_stream.ValueConnectableStream$(T)).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValue'] = function ConnectableStreamExtensions$124get$35publishValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publishValue'](T, $this), dart.fnType(connectable_stream.ValueConnectableStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValueSeeded'] = function ConnectableStreamExtensions$124publishValueSeeded(T, $this, seedValue) {
    return new (connectable_stream.ValueConnectableStream$(T)).seeded($this, seedValue, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValueSeeded'] = function ConnectableStreamExtensions$124get$35publishValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](T, $this, seedValue), dart.fnType(connectable_stream.ValueConnectableStream$(T), [T]));
  };
  connectable_stream['ConnectableStreamExtensions|publishReplay'] = function ConnectableStreamExtensions$124publishReplay(T, $this, opts$) {
    let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
    return new (connectable_stream.ReplayConnectableStream$(T)).new($this, {maxSize: maxSize, sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishReplay'] = function ConnectableStreamExtensions$124get$35publishReplay(T, $this) {
    return dart.fn(opts$ => {
      let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|publishReplay'](T, $this, {maxSize: maxSize});
    }, dart.fnType(connectable_stream.ReplayConnectableStream$(T), [], {maxSize: T$.intN()}, {}));
  };
  connectable_stream['ConnectableStreamExtensions|share'] = function ConnectableStreamExtensions$124share(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publish'](T, $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#share'] = function ConnectableStreamExtensions$124get$35share(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|share'](T, $this), dart.fnType(async.Stream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValue'] = function ConnectableStreamExtensions$124shareValue(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publishValue'](T, $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValue'] = function ConnectableStreamExtensions$124get$35shareValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|shareValue'](T, $this), dart.fnType(value_stream.ValueStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValueSeeded'] = function ConnectableStreamExtensions$124shareValueSeeded(T, $this, seedValue) {
    return connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](T, $this, seedValue).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValueSeeded'] = function ConnectableStreamExtensions$124get$35shareValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|shareValueSeeded'](T, $this, seedValue), dart.fnType(value_stream.ValueStream$(T), [T]));
  };
  connectable_stream['ConnectableStreamExtensions|shareReplay'] = function ConnectableStreamExtensions$124shareReplay(T, $this, opts$) {
    let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
    return connectable_stream['ConnectableStreamExtensions|publishReplay'](T, $this, {maxSize: maxSize}).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareReplay'] = function ConnectableStreamExtensions$124get$35shareReplay(T, $this) {
    return dart.fn(opts$ => {
      let maxSize = opts$ && 'maxSize' in opts$ ? opts$.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|shareReplay'](T, $this, {maxSize: maxSize});
    }, dart.fnType(replay_stream.ReplayStream$(T), [], {maxSize: T$.intN()}, {}));
  };
  const _is_DeferStream_default = Symbol('_is_DeferStream_default');
  defer.DeferStream$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$VoidToStreamOfT = () => (__t$VoidToStreamOfT = dart.constFn(dart.fnType(__t$StreamOfT(), [])))();
    var __t$VoidToFn = () => (__t$VoidToFn = dart.constFn(dart.fnType(__t$VoidToStreamOfT(), [])))();
    class DeferStream extends async.Stream$(T) {
      get isBroadcast() {
        return this[S$1._isReusable];
      }
      static ['_#new#tearOff'](T, streamFactory, opts$) {
        let reusable = opts$ && 'reusable' in opts$ ? opts$.reusable : false;
        return new (defer.DeferStream$(T)).new(streamFactory, {reusable: reusable});
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        let stream = null;
        try {
          stream = this[S$1._factory]();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            return __t$StreamOfT().error(e, s).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
          } else
            throw e$;
        }
        return stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
    }
    (DeferStream.new = function(streamFactory, opts$) {
      let reusable = opts$ && 'reusable' in opts$ ? opts$.reusable : false;
      this[S$1._isReusable] = reusable;
      this[S$1._factory] = reusable ? streamFactory : dart.fn(() => {
        let stream = null;
        return dart.fn(() => {
          let t297;
          t297 = stream;
          return t297 == null ? stream = streamFactory() : t297;
        }, __t$VoidToStreamOfT());
      }, __t$VoidToFn())();
      DeferStream.__proto__.new.call(this);
      ;
    }).prototype = DeferStream.prototype;
    dart.addTypeTests(DeferStream);
    DeferStream.prototype[_is_DeferStream_default] = true;
    dart.addTypeCaches(DeferStream);
    dart.setMethodSignature(DeferStream, () => ({
      __proto__: dart.getMethods(DeferStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(DeferStream, I[209]);
    dart.setFieldSignature(DeferStream, () => ({
      __proto__: dart.getFields(DeferStream.__proto__),
      [S$1._factory]: dart.finalFieldType(dart.fnType(async.Stream$(T), [])),
      [S$1._isReusable]: dart.finalFieldType(core.bool)
    }));
    return DeferStream;
  });
  defer.DeferStream = defer.DeferStream$();
  dart.addTypeTests(defer.DeferStream, _is_DeferStream_default);
  const _is_ForkJoinStream_default = Symbol('_is_ForkJoinStream_default');
  fork_join.ForkJoinStream$ = dart.generic((T, R) => {
    class ForkJoinStream extends async.StreamView$(R) {
      static ['_#new#tearOff'](T, R, streams, combiner) {
        return new (fork_join.ForkJoinStream$(T, R)).new(streams, combiner);
      }
      static list(T, streams) {
        return new (fork_join.ForkJoinStream$(T, core.List$(T))).new(streams, dart.fn(values => values, dart.fnType(core.List$(T), [core.List$(T)])));
      }
      static combine2(A, B, R, streamOne, streamTwo, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamOne, streamTwo]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1))), dart.fnType(R, [core.List])));
      }
      static combine3(A, B, C, R, streamA, streamB, streamC, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2))), dart.fnType(R, [core.List])));
      }
      static combine4(A, B, C, D, R, streamA, streamB, streamC, streamD, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3))), dart.fnType(R, [core.List])));
      }
      static combine5(A, B, C, D, E, R, streamA, streamB, streamC, streamD, streamE, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4))), dart.fnType(R, [core.List])));
      }
      static combine6(A, B, C, D, E, F, R, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5))), dart.fnType(R, [core.List])));
      }
      static combine7(A, B, C, D, E, F, G, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6))), dart.fnType(R, [core.List])));
      }
      static combine8(A, B, C, D, E, F, G, H, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7))), dart.fnType(R, [core.List])));
      }
      static combine9(A, B, C, D, E, F, G, H, I, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
        return new (fork_join.ForkJoinStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI]), dart.fn(values => combiner(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7)), I.as(values[S$.$_get](8))), dart.fnType(R, [core.List])));
      }
      static _buildStream(T, R, streams, combiner) {
        let controller = async.StreamController$(R).new({sync: true});
        let subscriptions = null;
        function subscriptions$35get() {
          let t299;
          t299 = subscriptions;
          return t299 == null ? dart.throw(new _internal.LateError.localNI("subscriptions")) : t299;
        }
        function subscriptions$35set(subscriptions$35param) {
          return subscriptions = subscriptions$35param;
        }
        let values = null;
        controller.onListen = dart.fn(() => {
          let completed = 0;
          function listen(i, stream) {
            let hasValue = false;
            return stream.listen(dart.fn(value => {
              let t301;
              hasValue = true;
              t301 = values;
              t301 == null ? null : t301[S$.$_set](i, value);
            }, dart.fnType(dart.void, [T])), {onError: dart.bind(controller, 'addError'), onDone: dart.fn(() => {
                if (!hasValue) {
                  controller.addError(new core.StateError.new("No element"));
                  controller.close();
                  return;
                }
                if (values == null) {
                  return;
                }
                if ((completed = completed + 1) === subscriptions$35get()[S$.$length]) {
                  let combined = null;
                  try {
                    combined = combiner(core.List$(T).unmodifiable(dart.nullCheck(values)));
                  } catch (e$) {
                    let e = dart.getThrown(e$);
                    let s = dart.stackTrace(e$);
                    if (core.Object.is(e)) {
                      controller.addError(e, s);
                      controller.close();
                      return;
                    } else
                      throw e$;
                  }
                  controller.add(combined);
                  controller.close();
                }
              }, T$.VoidTovoid())});
          }
          dart.fn(listen, dart.fnType(async.StreamSubscription$(T), [core.int, async.Stream$(T)]));
          subscriptions$35set(collection_extensions['MapNotNullIterableExtension|mapIndexed'](async.Stream$(T), async.StreamSubscription$(T), streams, listen)[S$.$toList]({growable: false}));
          if (subscriptions$35get()[S$.$isEmpty]) {
            controller.close();
          } else {
            values = core.List$(dart.nullable(T)).filled(subscriptions$35get()[S$.$length], null);
          }
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|pauseAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onResume = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|resumeAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onCancel = dart.fn(() => {
          values = null;
          return subscription['StreamSubscriptionsIterableExtension|cancelAll'](subscriptions$35get());
        }, T$.VoidToFutureNOfvoid());
        return controller.stream;
      }
    }
    (ForkJoinStream.new = function(streams, combiner) {
      ForkJoinStream.__proto__.new.call(this, fork_join.ForkJoinStream._buildStream(T, R, streams, combiner));
      ;
    }).prototype = ForkJoinStream.prototype;
    dart.addTypeTests(ForkJoinStream);
    ForkJoinStream.prototype[_is_ForkJoinStream_default] = true;
    dart.addTypeCaches(ForkJoinStream);
    dart.setStaticMethodSignature(ForkJoinStream, () => ['list', 'combine2', 'combine3', 'combine4', 'combine5', 'combine6', 'combine7', 'combine8', 'combine9', '_buildStream']);
    dart.setLibraryUri(ForkJoinStream, I[210]);
    return ForkJoinStream;
  });
  fork_join.ForkJoinStream = fork_join.ForkJoinStream$();
  dart.addTypeTests(fork_join.ForkJoinStream, _is_ForkJoinStream_default);
  const _is_FromCallableStream_default = Symbol('_is_FromCallableStream_default');
  from_callable.FromCallableStream$ = dart.generic(T => {
    var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    class FromCallableStream extends async.Stream$(T) {
      get callable() {
        return this[S$1.callable];
      }
      set callable(value) {
        super.callable = value;
      }
      static ['_#new#tearOff'](T, callable, opts$) {
        let reusable = opts$ && 'reusable' in opts$ ? opts$.reusable : false;
        return new (from_callable.FromCallableStream$(T)).new(callable, {reusable: reusable});
      }
      get isBroadcast() {
        return this[S$1._isReusable$1];
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        if (this[S$1._isReusable$1] || this[S$1._stream$1] == null) {
          try {
            let value = this.callable();
            this[S$1._stream$1] = __t$FutureOfT().is(value) ? __t$StreamOfT().fromFuture(value) : __t$StreamOfT().value(value);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              this[S$1._stream$1] = __t$StreamOfT().error(e, s);
            } else
              throw e$;
          }
        }
        return dart.nullCheck(this[S$1._stream$1]).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
    }
    (FromCallableStream.new = function(callable, opts$) {
      let reusable = opts$ && 'reusable' in opts$ ? opts$.reusable : false;
      this[S$1._stream$1] = null;
      this[S$1.callable] = callable;
      this[S$1._isReusable$1] = reusable;
      FromCallableStream.__proto__.new.call(this);
      ;
    }).prototype = FromCallableStream.prototype;
    dart.addTypeTests(FromCallableStream);
    FromCallableStream.prototype[_is_FromCallableStream_default] = true;
    dart.addTypeCaches(FromCallableStream);
    dart.setMethodSignature(FromCallableStream, () => ({
      __proto__: dart.getMethods(FromCallableStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(FromCallableStream, I[211]);
    dart.setFieldSignature(FromCallableStream, () => ({
      __proto__: dart.getFields(FromCallableStream.__proto__),
      [S$1._stream$1]: dart.fieldType(dart.nullable(async.Stream$(T))),
      callable: dart.finalFieldType(dart.fnType(async.FutureOr$(T), [])),
      [S$1._isReusable$1]: dart.finalFieldType(core.bool)
    }));
    return FromCallableStream;
  });
  from_callable.FromCallableStream = from_callable.FromCallableStream$();
  dart.addTypeTests(from_callable.FromCallableStream, _is_FromCallableStream_default);
  const _is_MergeStream_default = Symbol('_is_MergeStream_default');
  merge.MergeStream$ = dart.generic(T => {
    class MergeStream extends async.StreamView$(T) {
      static ['_#new#tearOff'](T, streams) {
        return new (merge.MergeStream$(T)).new(streams);
      }
      static _buildController(T, streams) {
        let controller = async.StreamController$(T).new({sync: true});
        let subscriptions = null;
        function subscriptions$35get() {
          let t304;
          t304 = subscriptions;
          return t304 == null ? dart.throw(new _internal.LateError.localNI("subscriptions")) : t304;
        }
        function subscriptions$35set(subscriptions$35param) {
          return subscriptions = subscriptions$35param;
        }
        controller.onListen = dart.fn(() => {
          let completed = 0;
          function onDone() {
            if ((completed = completed + 1) === subscriptions$35get()[S$.$length]) {
              controller.close();
            }
          }
          dart.fn(onDone, T$.VoidTovoid());
          subscriptions$35set(streams[S$.$map](async.StreamSubscription$(T), dart.fn(s => s.listen(dart.fnType(dart.void, [T]).as(dart.bind(controller, 'add')), {onError: dart.bind(controller, 'addError'), onDone: onDone}), dart.fnType(async.StreamSubscription$(T), [async.Stream$(T)])))[S$.$toList]({growable: false}));
          if (subscriptions$35get()[S$.$isEmpty]) {
            controller.close();
          }
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|pauseAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onResume = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|resumeAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onCancel = dart.fn(() => subscription['StreamSubscriptionsIterableExtension|cancelAll'](subscriptions$35get()), T$.VoidToFutureNOfvoid());
        return controller;
      }
    }
    (MergeStream.new = function(streams) {
      MergeStream.__proto__.new.call(this, merge.MergeStream._buildController(T, streams).stream);
      ;
    }).prototype = MergeStream.prototype;
    dart.addTypeTests(MergeStream);
    MergeStream.prototype[_is_MergeStream_default] = true;
    dart.addTypeCaches(MergeStream);
    dart.setStaticMethodSignature(MergeStream, () => ['_buildController']);
    dart.setLibraryUri(MergeStream, I[212]);
    return MergeStream;
  });
  merge.MergeStream = merge.MergeStream$();
  dart.addTypeTests(merge.MergeStream, _is_MergeStream_default);
  merge['MergeExtension|mergeWith'] = function MergeExtension$124mergeWith(T, $this, streams) {
    let stream = new (merge.MergeStream$(T)).new((() => {
      let t307 = _interceptors.JSArray$(async.Stream$(T)).of([$this]);
      t307[S$.$addAll](streams);
      return t307;
    })());
    return $this.isBroadcast ? stream.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), dart.fnType(dart.void, [async.StreamSubscription$(T)]))}) : stream;
  };
  merge['MergeExtension|get#mergeWith'] = function MergeExtension$124get$35mergeWith(T, $this) {
    return dart.fn(streams => merge['MergeExtension|mergeWith'](T, $this, streams), dart.fnType(async.Stream$(T), [core.Iterable$(async.Stream$(T))]));
  };
  const _is_NeverStream_default = Symbol('_is_NeverStream_default');
  never.NeverStream$ = dart.generic(T => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    class NeverStream extends async.Stream$(T) {
      static ['_#new#tearOff'](T) {
        return new (never.NeverStream$(T)).new();
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$1._controller$6].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
    }
    (NeverStream.new = function() {
      this[S$1._controller$6] = __t$StreamControllerOfT().new();
      NeverStream.__proto__.new.call(this);
      ;
    }).prototype = NeverStream.prototype;
    dart.addTypeTests(NeverStream);
    NeverStream.prototype[_is_NeverStream_default] = true;
    dart.addTypeCaches(NeverStream);
    dart.setMethodSignature(NeverStream, () => ({
      __proto__: dart.getMethods(NeverStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(NeverStream, I[213]);
    dart.setFieldSignature(NeverStream, () => ({
      __proto__: dart.getFields(NeverStream.__proto__),
      [S$1._controller$6]: dart.finalFieldType(async.StreamController$(T))
    }));
    return NeverStream;
  });
  never.NeverStream = never.NeverStream$();
  dart.addTypeTests(never.NeverStream, _is_NeverStream_default);
  const _is_RaceStream_default = Symbol('_is_RaceStream_default');
  race.RaceStream$ = dart.generic(T => {
    class RaceStream extends async.StreamView$(T) {
      static ['_#new#tearOff'](T, streams) {
        return new (race.RaceStream$(T)).new(streams);
      }
      static _buildController(T, streams) {
        let controller = async.StreamController$(T).new({sync: true});
        let subscriptions = null;
        function subscriptions$35get() {
          let t310;
          t310 = subscriptions;
          return t310 == null ? dart.throw(new _internal.LateError.localNI("subscriptions")) : t310;
        }
        function subscriptions$35set(subscriptions$35param) {
          return subscriptions = subscriptions$35param;
        }
        controller.onListen = dart.fn(() => {
          function reduceToWinner(winnerIndex) {
            let t312;
            let winner = subscriptions$35get()[S$0.$removeAt](winnerIndex);
            t312 = subscription['StreamSubscriptionsIterableExtension|cancelAll'](subscriptions$35get());
            t312 == null ? null : async['FutureExtensions|onError'](dart.void, core.Object, t312, dart.fn((e, s) => {
              if (!controller.isClosed && controller.hasListener) {
                controller.addError(e, s);
              }
            }, T$.ObjectAndStackTraceToNull()));
            subscriptions$35set(_interceptors.JSArray$(async.StreamSubscription$(T)).of([winner]));
          }
          dart.fn(reduceToWinner, T$.intTovoid());
          function doUpdate(index) {
            return dart.fn(value => {
              if (subscriptions$35get()[S$.$length] > 1) {
                reduceToWinner(index);
              }
              controller.add(value);
            }, dart.fnType(dart.void, [T]));
          }
          dart.fn(doUpdate, dart.fnType(dart.fnType(dart.void, [T]), [core.int]));
          subscriptions$35set(collection_extensions['MapNotNullIterableExtension|mapIndexed'](async.Stream$(T), async.StreamSubscription$(T), streams, dart.fn((index, stream) => stream.listen(doUpdate(index), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')}), dart.fnType(async.StreamSubscription$(T), [core.int, async.Stream$(T)])))[S$.$toList]());
          if (subscriptions$35get()[S$.$isEmpty]) {
            controller.close();
          }
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|pauseAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onResume = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|resumeAll'](subscriptions$35get()), T$.VoidTovoid());
        controller.onCancel = dart.fn(() => subscription['StreamSubscriptionsIterableExtension|cancelAll'](subscriptions$35get()), T$.VoidToFutureNOfvoid());
        return controller;
      }
    }
    (RaceStream.new = function(streams) {
      RaceStream.__proto__.new.call(this, race.RaceStream._buildController(T, streams).stream);
      ;
    }).prototype = RaceStream.prototype;
    dart.addTypeTests(RaceStream);
    RaceStream.prototype[_is_RaceStream_default] = true;
    dart.addTypeCaches(RaceStream);
    dart.setStaticMethodSignature(RaceStream, () => ['_buildController']);
    dart.setLibraryUri(RaceStream, I[214]);
    return RaceStream;
  });
  race.RaceStream = race.RaceStream$();
  dart.addTypeTests(race.RaceStream, _is_RaceStream_default);
  range.RangeStream = class RangeStream extends async.Stream$(core.int) {
    static ['_#new#tearOff'](startInclusive, endInclusive) {
      return new range.RangeStream.new(startInclusive, endInclusive);
    }
    listen(onData, opts$) {
      let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
      let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
      let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
      if (this[S$1._isListened]) {
        dart.throw(new core.StateError.new("Stream has already been listened to."));
      }
      this[S$1._isListened] = true;
      return this[S$1._stream$2].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    static _buildStream(startInclusive, endInclusive) {
      let length = (endInclusive - startInclusive)[S$1.$abs]() + 1;
      function nextValue(index) {
        return startInclusive > endInclusive ? startInclusive - index : startInclusive + index;
      }
      dart.fn(nextValue, T$.intToint());
      return T$.StreamOfint().fromIterable(T$.IterableOfint().generate(length, nextValue));
    }
  };
  (range.RangeStream.new = function(startInclusive, endInclusive) {
    this[S$1._isListened] = false;
    this[S$1._stream$2] = range.RangeStream._buildStream(startInclusive, endInclusive);
    range.RangeStream.__proto__.new.call(this);
    ;
  }).prototype = range.RangeStream.prototype;
  dart.addTypeTests(range.RangeStream);
  dart.addTypeCaches(range.RangeStream);
  dart.setMethodSignature(range.RangeStream, () => ({
    __proto__: dart.getMethods(range.RangeStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(core.int), [dart.nullable(dart.fnType(dart.void, [core.int]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setStaticMethodSignature(range.RangeStream, () => ['_buildStream']);
  dart.setLibraryUri(range.RangeStream, I[215]);
  dart.setFieldSignature(range.RangeStream, () => ({
    __proto__: dart.getFields(range.RangeStream.__proto__),
    [S$1._isListened]: dart.fieldType(core.bool),
    [S$1._stream$2]: dart.finalFieldType(async.Stream$(core.int))
  }));
  const _is_RepeatStream_default = Symbol('_is_RepeatStream_default');
  repeat.RepeatStream$ = dart.generic(T => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class RepeatStream extends async.Stream$(T) {
      get streamFactory() {
        return this[S$1.streamFactory];
      }
      set streamFactory(value) {
        super.streamFactory = value;
      }
      get count() {
        return this[S$1.count$2];
      }
      set count(value) {
        super.count = value;
      }
      static ['_#new#tearOff'](T, streamFactory, count = null) {
        return new (repeat.RepeatStream$(T)).new(streamFactory, count);
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        this[S$1._controller$7] == null ? this[S$1._controller$7] = __t$StreamControllerOfT().new({sync: true, onListen: dart.bind(this, S$1._maybeRepeatNext), onPause: dart.fn(() => {
            let t312;
            t312 = this[S$1._subscription$2];
            return t312 == null ? null : t312.pause();
          }, T$.VoidTovoid()), onResume: dart.fn(() => {
            let t312;
            t312 = this[S$1._subscription$2];
            return t312 == null ? null : t312.resume();
          }, T$.VoidTovoid()), onCancel: dart.fn(() => {
            let t312;
            t312 = this[S$1._subscription$2];
            return t312 == null ? null : t312.cancel();
          }, T$.VoidToFutureNOfvoid())}) : null;
        return dart.nullCheck(this[S$1._controller$7]).stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      [S$1._repeatNext]() {
        let t312, t312$;
        const onDone = () => {
          let t312;
          t312 = this[S$1._subscription$2];
          t312 == null ? null : t312.cancel();
          this[S$1._maybeRepeatNext]();
        };
        dart.fn(onDone, T$.VoidTovoid());
        let controller = dart.nullCheck(this[S$1._controller$7]);
        try {
          this[S$1._subscription$2] = (t312$ = (t312 = this[S$1._repeatStep], this[S$1._repeatStep] = t312 + 1, t312), this.streamFactory(t312$)).listen(__t$TTovoid().as(dart.bind(controller, 'add')), {onError: dart.bind(controller, 'addError'), onDone: onDone, cancelOnError: false});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            controller.addError(e, s);
          } else
            throw e$;
        }
      }
      [S$1._maybeRepeatNext]() {
        if (this[S$1._repeatStep] === this.count) {
          dart.nullCheck(this[S$1._controller$7]).close();
        } else {
          this[S$1._repeatNext]();
        }
      }
    }
    (RepeatStream.new = function(streamFactory, count = null) {
      this[S$1._repeatStep] = 0;
      this[S$1._controller$7] = null;
      this[S$1._subscription$2] = null;
      this[S$1.streamFactory] = streamFactory;
      this[S$1.count$2] = count;
      RepeatStream.__proto__.new.call(this);
      ;
    }).prototype = RepeatStream.prototype;
    dart.addTypeTests(RepeatStream);
    RepeatStream.prototype[_is_RepeatStream_default] = true;
    dart.addTypeCaches(RepeatStream);
    dart.setMethodSignature(RepeatStream, () => ({
      __proto__: dart.getMethods(RepeatStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      [S$1._repeatNext]: dart.fnType(dart.void, []),
      [S$1._maybeRepeatNext]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(RepeatStream, I[216]);
    dart.setFieldSignature(RepeatStream, () => ({
      __proto__: dart.getFields(RepeatStream.__proto__),
      streamFactory: dart.finalFieldType(dart.fnType(async.Stream$(T), [core.int])),
      count: dart.finalFieldType(dart.nullable(core.int)),
      [S$1._repeatStep]: dart.fieldType(core.int),
      [S$1._controller$7]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [S$1._subscription$2]: dart.fieldType(dart.nullable(async.StreamSubscription$(T)))
    }));
    return RepeatStream;
  });
  repeat.RepeatStream = repeat.RepeatStream$();
  dart.addTypeTests(repeat.RepeatStream, _is_RepeatStream_default);
  const _is_RetryStream_default = Symbol('_is_RetryStream_default');
  retry$.RetryStream$ = dart.generic(T => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class RetryStream extends async.Stream$(T) {
      get streamFactory() {
        return this[S$1.streamFactory$1];
      }
      set streamFactory(value) {
        super.streamFactory = value;
      }
      get count() {
        return this[S$1.count$3];
      }
      set count(value) {
        super.count = value;
      }
      get [S$1._controller$8]() {
        let t314, t313;
        t313 = this[S$1.__RetryStream__controller];
        return t313 == null ? (t314 = __t$StreamControllerOfT().new({sync: true, onListen: dart.bind(this, S$1._retry), onPause: dart.fn(() => dart.nullCheck(this[S$1._subscription$3]).pause(), T$.VoidTovoid()), onResume: dart.fn(() => dart.nullCheck(this[S$1._subscription$3]).resume(), T$.VoidTovoid()), onCancel: dart.fn(() => {
            let t314;
            this[S$1._errors][S$.$clear]();
            t314 = this[S$1._subscription$3];
            return t314 == null ? null : t314.cancel();
          }, T$.VoidToFutureNOfvoid())}), this[S$1.__RetryStream__controller] == null ? this[S$1.__RetryStream__controller] = t314 : dart.throw(new _internal.LateError.fieldADI("_controller"))) : t313;
      }
      static ['_#new#tearOff'](T, streamFactory, count = null) {
        return new (retry$.RetryStream$(T)).new(streamFactory, count);
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$1._controller$8].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      [S$1._retry]() {
        const onError = (e, s) => {
          dart.nullCheck(this[S$1._subscription$3]).cancel();
          this[S$1._subscription$3] = null;
          this[S$1._errors][S$.$add](new error_and_stacktrace.ErrorAndStackTrace.new(e, s));
          if (this.count === this[S$1._retryStep]) {
            for (let e of (() => {
              let t313 = T$.ListOfErrorAndStackTrace().of(this[S$1._errors]);
              return t313;
            })()) {
              this[S$1._controller$8].addError(e.error, e.stackTrace);
            }
            this[S$1._controller$8].close();
          } else {
            this[S$1._retryStep] = this[S$1._retryStep] + 1;
            this[S$1._retry]();
          }
        };
        dart.fn(onError, T$.ObjectAndStackTraceTovoid());
        this[S$1._subscription$3] = this.streamFactory().listen(__t$TTovoid().as(dart.bind(this[S$1._controller$8], 'add')), {onError: onError, onDone: dart.bind(this[S$1._controller$8], 'close'), cancelOnError: false});
      }
    }
    (RetryStream.new = function(streamFactory, count = null) {
      this[S$1._retryStep] = 0;
      this[S$1._errors] = T$.JSArrayOfErrorAndStackTrace().of([]);
      this[S$1.__RetryStream__controller] = null;
      this[S$1._subscription$3] = null;
      this[S$1.streamFactory$1] = streamFactory;
      this[S$1.count$3] = count;
      RetryStream.__proto__.new.call(this);
      ;
    }).prototype = RetryStream.prototype;
    dart.addTypeTests(RetryStream);
    RetryStream.prototype[_is_RetryStream_default] = true;
    dart.addTypeCaches(RetryStream);
    dart.setMethodSignature(RetryStream, () => ({
      __proto__: dart.getMethods(RetryStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      [S$1._retry]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RetryStream, () => ({
      __proto__: dart.getGetters(RetryStream.__proto__),
      [S$1._controller$8]: async.StreamController$(T)
    }));
    dart.setLibraryUri(RetryStream, I[217]);
    dart.setFieldSignature(RetryStream, () => ({
      __proto__: dart.getFields(RetryStream.__proto__),
      streamFactory: dart.finalFieldType(dart.fnType(async.Stream$(T), [])),
      count: dart.finalFieldType(dart.nullable(core.int)),
      [S$1._retryStep]: dart.fieldType(core.int),
      [S$1._errors]: dart.finalFieldType(core.List$(error_and_stacktrace.ErrorAndStackTrace)),
      [S$1.__RetryStream__controller]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [S$1._subscription$3]: dart.fieldType(dart.nullable(async.StreamSubscription$(dart.void)))
    }));
    return RetryStream;
  });
  retry$.RetryStream = retry$.RetryStream$();
  dart.addTypeTests(retry$.RetryStream, _is_RetryStream_default);
  const _is_RetryWhenStream_default = Symbol('_is_RetryWhenStream_default');
  retry_when.RetryWhenStream$ = dart.generic(T => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class RetryWhenStream extends async.Stream$(T) {
      get streamFactory() {
        return this[S$1.streamFactory$2];
      }
      set streamFactory(value) {
        super.streamFactory = value;
      }
      get retryWhenFactory() {
        return this[S$1.retryWhenFactory];
      }
      set retryWhenFactory(value) {
        super.retryWhenFactory = value;
      }
      get [S$1._controller$9]() {
        let t315, t314;
        t314 = this[S$1.__RetryWhenStream__controller];
        return t314 == null ? (t315 = __t$StreamControllerOfT().new({sync: true, onListen: dart.bind(this, S$1._retry$1), onPause: dart.fn(() => dart.nullCheck(this[S$1._subscription$4]).pause(), T$.VoidTovoid()), onResume: dart.fn(() => dart.nullCheck(this[S$1._subscription$4]).resume(), T$.VoidTovoid()), onCancel: dart.fn(() => {
            let t315;
            t315 = this[S$1._subscription$4];
            return t315 == null ? null : t315.cancel();
          }, T$.VoidToFutureNOfvoid())}), this[S$1.__RetryWhenStream__controller] == null ? this[S$1.__RetryWhenStream__controller] = t315 : dart.throw(new _internal.LateError.fieldADI("_controller"))) : t314;
      }
      static ['_#new#tearOff'](T, streamFactory, retryWhenFactory) {
        return new (retry_when.RetryWhenStream$(T)).new(streamFactory, retryWhenFactory);
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$1._controller$9].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      [S$1._retry$1]() {
        const onError = (originalError, originalStacktrace) => {
          let t315, t314;
          this[S$1._cancelSubscription]();
          let retryStream = null;
          try {
            retryStream = (t314 = originalError, t315 = originalStacktrace, this.retryWhenFactory(t314, t315));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              return this[S$1._addErrorAndClose](originalError, originalStacktrace, e, s);
            } else
              throw e$;
          }
          this[S$1._subscription$4] = retryStream.listen(dart.fn(_ => {
            this[S$1._cancelSubscription]();
            this[S$1._retry$1]();
          }, T$.voidTovoid()), {onError: dart.fn((e, s) => {
              this[S$1._cancelSubscription]();
              this[S$1._addErrorAndClose](originalError, originalStacktrace, e, s);
            }, T$.ObjectAndStackTraceToNull()), cancelOnError: false});
        };
        dart.fn(onError, T$.ObjectAndStackTraceTovoid());
        this[S$1._subscription$4] = this.streamFactory().listen(__t$TTovoid().as(dart.bind(this[S$1._controller$9], 'add')), {onError: onError, onDone: dart.bind(this[S$1._controller$9], 'close'), cancelOnError: false});
      }
      [S$1._addErrorAndClose](originalError, originalStacktrace, e, s) {
        if (originalError === e) {
          this[S$1._controller$9].addError(originalError, originalStacktrace);
        } else {
          this[S$1._controller$9].addError(originalError, originalStacktrace);
          this[S$1._controller$9].addError(e, s);
        }
        this[S$1._controller$9].close();
      }
      [S$1._cancelSubscription]() {
        dart.nullCheck(this[S$1._subscription$4]).cancel();
        this[S$1._subscription$4] = null;
      }
    }
    (RetryWhenStream.new = function(streamFactory, retryWhenFactory) {
      this[S$1.__RetryWhenStream__controller] = null;
      this[S$1.__RetryWhenStream__controller_isSet] = false;
      this[S$1._subscription$4] = null;
      this[S$1.streamFactory$2] = streamFactory;
      this[S$1.retryWhenFactory] = retryWhenFactory;
      RetryWhenStream.__proto__.new.call(this);
      ;
    }).prototype = RetryWhenStream.prototype;
    dart.addTypeTests(RetryWhenStream);
    RetryWhenStream.prototype[_is_RetryWhenStream_default] = true;
    dart.addTypeCaches(RetryWhenStream);
    dart.setMethodSignature(RetryWhenStream, () => ({
      __proto__: dart.getMethods(RetryWhenStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      [S$1._retry$1]: dart.fnType(dart.void, []),
      [S$1._addErrorAndClose]: dart.fnType(dart.void, [core.Object, core.StackTrace, core.Object, core.StackTrace]),
      [S$1._cancelSubscription]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RetryWhenStream, () => ({
      __proto__: dart.getGetters(RetryWhenStream.__proto__),
      [S$1._controller$9]: async.StreamController$(T)
    }));
    dart.setLibraryUri(RetryWhenStream, I[218]);
    dart.setFieldSignature(RetryWhenStream, () => ({
      __proto__: dart.getFields(RetryWhenStream.__proto__),
      streamFactory: dart.finalFieldType(dart.fnType(async.Stream$(T), [])),
      retryWhenFactory: dart.finalFieldType(dart.fnType(async.Stream$(dart.void), [core.Object, core.StackTrace])),
      [S$1.__RetryWhenStream__controller]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [S$1.__RetryWhenStream__controller_isSet]: dart.fieldType(core.bool),
      [S$1._subscription$4]: dart.fieldType(dart.nullable(async.StreamSubscription$(dart.void)))
    }));
    return RetryWhenStream;
  });
  retry_when.RetryWhenStream = retry_when.RetryWhenStream$();
  dart.addTypeTests(retry_when.RetryWhenStream, _is_RetryWhenStream_default);
  const _is_SequenceEqualStream_default = Symbol('_is_SequenceEqualStream_default');
  sequence_equal.SequenceEqualStream$ = dart.generic((S, T) => {
    class SequenceEqualStream extends async.Stream$(core.bool) {
      static ['_#new#tearOff'](S, T, stream, other, opts$) {
        let dataEquals = opts$ && 'dataEquals' in opts$ ? opts$.dataEquals : null;
        let errorEquals = opts$ && 'errorEquals' in opts$ ? opts$.errorEquals : null;
        return new (sequence_equal.SequenceEqualStream$(S, T)).new(stream, other, {dataEquals: dataEquals, errorEquals: errorEquals});
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$1._controller$10].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      static _buildController(S, T, stream, other, dataEquals, errorEquals) {
        let t315, t315$;
        dataEquals = (t315 = dataEquals, t315 == null ? dart.fn((s, t) => dart.equals(s, t), dart.fnType(core.bool, [S, T])) : t315);
        errorEquals = (t315$ = errorEquals, t315$ == null ? dart.fn((e1, e2) => e1._equals(e2), T$.ErrorAndStackTraceAndErrorAndStackTraceTobool()) : t315$);
        let controller = null;
        function controller$35get() {
          let t316;
          t316 = controller;
          return t316 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t316;
        }
        function controller$35set(controller$35param) {
          return controller = controller$35param;
        }
        let subscription = null;
        function subscription$35get() {
          let t319;
          t319 = subscription;
          return t319 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t319;
        }
        function subscription$35set(subscription$35param) {
          return subscription = subscription$35param;
        }
        controller$35set(T$.StreamControllerOfbool().new({sync: true, onListen: dart.fn(() => {
            function emitAndClose(value = true) {
              let t321;
              t321 = controller$35get();
              return (() => {
                t321.add(value);
                t321.close();
                return t321;
              })();
            }
            dart.fn(emitAndClose, T$.boolTovoid());
            function compare(s, t) {
              if (s.kind !== t.kind) {
                return false;
              }
              switch (s.kind) {
                case C[385] || CT.C385:
                  {
                    return dart.nullCheck(dataEquals)(s.requireData, t.requireData);
                  }
                case C[386] || CT.C386:
                  {
                    return true;
                  }
                case C[387] || CT.C387:
                  {
                    return dart.nullCheck(errorEquals)(dart.nullCheck(s.errorAndStackTrace), dart.nullCheck(t.errorAndStackTrace));
                  }
              }
            }
            dart.fn(compare, dart.fnType(core.bool, [notification.Notification$(S), notification.Notification$(T)]));
            subscription$35set(zip.ZipStream.zip2(notification.Notification$(S), notification.Notification$(T), core.bool, materialize['MaterializeExtension|materialize'](S, stream), materialize['MaterializeExtension|materialize'](T, other), compare).where(dart.fn(isEqual => !isEqual, T$.boolTobool())).listen(emitAndClose, {onError: dart.bind(controller$35get(), 'addError'), onDone: emitAndClose}));
          }, T$.VoidTovoid()), onPause: dart.fn(() => subscription$35get().pause(), T$.VoidTovoid()), onResume: dart.fn(() => subscription$35get().resume(), T$.VoidTovoid()), onCancel: dart.fn(() => subscription$35get().cancel(), T$.VoidToFutureOfvoid())}));
        return controller$35get();
      }
    }
    (SequenceEqualStream.new = function(stream, other, opts$) {
      let dataEquals = opts$ && 'dataEquals' in opts$ ? opts$.dataEquals : null;
      let errorEquals = opts$ && 'errorEquals' in opts$ ? opts$.errorEquals : null;
      this[S$1._controller$10] = sequence_equal.SequenceEqualStream._buildController(S, T, stream, other, dataEquals, errorEquals);
      SequenceEqualStream.__proto__.new.call(this);
      ;
    }).prototype = SequenceEqualStream.prototype;
    dart.addTypeTests(SequenceEqualStream);
    SequenceEqualStream.prototype[_is_SequenceEqualStream_default] = true;
    dart.addTypeCaches(SequenceEqualStream);
    dart.setMethodSignature(SequenceEqualStream, () => ({
      __proto__: dart.getMethods(SequenceEqualStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(core.bool), [dart.nullable(dart.fnType(dart.void, [core.bool]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setStaticMethodSignature(SequenceEqualStream, () => ['_buildController']);
    dart.setLibraryUri(SequenceEqualStream, I[219]);
    dart.setFieldSignature(SequenceEqualStream, () => ({
      __proto__: dart.getFields(SequenceEqualStream.__proto__),
      [S$1._controller$10]: dart.finalFieldType(async.StreamController$(core.bool))
    }));
    return SequenceEqualStream;
  });
  sequence_equal.SequenceEqualStream = sequence_equal.SequenceEqualStream$();
  dart.addTypeTests(sequence_equal.SequenceEqualStream, _is_SequenceEqualStream_default);
  const _is_SwitchLatestStream_default = Symbol('_is_SwitchLatestStream_default');
  switch_latest.SwitchLatestStream$ = dart.generic(T => {
    class SwitchLatestStream extends async.Stream$(T) {
      static ['_#new#tearOff'](T, streams) {
        return new (switch_latest.SwitchLatestStream$(T)).new(streams);
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$1._controller$11].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      static _buildController(T, streams) {
        let controller = null;
        function controller$35get() {
          let t322;
          t322 = controller;
          return t322 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t322;
        }
        function controller$35set(controller$35param) {
          return controller = controller$35param;
        }
        let subscription = null;
        function subscription$35get() {
          let t325;
          t325 = subscription;
          return t325 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t325;
        }
        function subscription$35set(subscription$35param) {
          return subscription = subscription$35param;
        }
        let otherSubscription = null;
        let leftClosed = false;
        let rightClosed = false;
        let hasMainEvent = false;
        controller$35set(async.StreamController$(T).new({sync: true, onListen: dart.fn(() => {
            function closeLeft() {
              leftClosed = true;
              if (rightClosed || !hasMainEvent) controller$35get().close();
            }
            dart.fn(closeLeft, T$.VoidTovoid());
            function closeRight() {
              rightClosed = true;
              if (leftClosed) controller$35get().close();
            }
            dart.fn(closeRight, T$.VoidTovoid());
            subscription$35set(streams.listen(dart.fn(stream => {
              let t327;
              try {
                t327 = otherSubscription;
                t327 == null ? null : t327.cancel();
                hasMainEvent = true;
                otherSubscription = stream.listen(dart.fnType(dart.void, [T]).as(dart.bind(controller$35get(), 'add')), {onError: dart.bind(controller$35get(), 'addError'), onDone: closeRight});
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  controller$35get().addError(e, s);
                } else
                  throw e$;
              }
            }, dart.fnType(dart.void, [async.Stream$(T)])), {onError: dart.bind(controller$35get(), 'addError'), onDone: closeLeft}));
          }, T$.VoidTovoid()), onPause: dart.fn(() => {
            let t328;
            subscription$35get().pause();
            t328 = otherSubscription;
            t328 == null ? null : t328.pause();
          }, T$.VoidTovoid()), onResume: dart.fn(() => {
            let t328;
            subscription$35get().resume();
            t328 = otherSubscription;
            t328 == null ? null : t328.resume();
          }, T$.VoidTovoid()), onCancel: dart.fn(() => async.async(dart.void, function*() {
            let t328;
            yield subscription$35get().cancel();
            if (hasMainEvent) yield (t328 = otherSubscription, t328 == null ? null : t328.cancel());
          }), T$.VoidToFutureOfvoid())}));
        return controller$35get();
      }
    }
    (SwitchLatestStream.new = function(streams) {
      this[S$1._controller$11] = switch_latest.SwitchLatestStream._buildController(T, streams);
      SwitchLatestStream.__proto__.new.call(this);
      ;
    }).prototype = SwitchLatestStream.prototype;
    dart.addTypeTests(SwitchLatestStream);
    SwitchLatestStream.prototype[_is_SwitchLatestStream_default] = true;
    dart.addTypeCaches(SwitchLatestStream);
    dart.setMethodSignature(SwitchLatestStream, () => ({
      __proto__: dart.getMethods(SwitchLatestStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setStaticMethodSignature(SwitchLatestStream, () => ['_buildController']);
    dart.setLibraryUri(SwitchLatestStream, I[220]);
    dart.setFieldSignature(SwitchLatestStream, () => ({
      __proto__: dart.getFields(SwitchLatestStream.__proto__),
      [S$1._controller$11]: dart.finalFieldType(async.StreamController$(T))
    }));
    return SwitchLatestStream;
  });
  switch_latest.SwitchLatestStream = switch_latest.SwitchLatestStream$();
  dart.addTypeTests(switch_latest.SwitchLatestStream, _is_SwitchLatestStream_default);
  const _is_TimerStream_default = Symbol('_is_TimerStream_default');
  timer.TimerStream$ = dart.generic(T => {
    class TimerStream extends async.Stream$(T) {
      static ['_#new#tearOff'](T, value, duration) {
        return new (timer.TimerStream$(T)).new(value, duration);
      }
      listen(onData, opts$) {
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
        return this[S$1._controller$12].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      static _buildController(T, value, duration) {
        let watch = new core.Stopwatch.new();
        let timer = null;
        let controller = null;
        function controller$35get() {
          let t329;
          t329 = controller;
          return t329 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t329;
        }
        function controller$35set(controller$35param) {
          return controller = controller$35param;
        }
        let totalElapsed = core.Duration.zero;
        function onResume() {
          if (totalElapsed == null || timer != null) return;
          totalElapsed = dart.nullCheck(totalElapsed)['+'](watch.elapsed);
          watch.start();
          timer = async.Timer.new(duration['-'](dart.nullCheck(totalElapsed)), dart.fn(() => {
            controller$35get().add(value);
            controller$35get().close();
          }, T$.VoidTovoid()));
        }
        dart.fn(onResume, T$.VoidTovoid());
        controller$35set(async.StreamController$(T).new({sync: true, onListen: dart.fn(() => {
            watch.start();
            timer = async.Timer.new(duration, dart.fn(() => {
              controller$35get().add(value);
              controller$35get().close();
            }, T$.VoidTovoid()));
          }, T$.VoidTovoid()), onPause: dart.fn(() => {
            let t331;
            t331 = timer;
            t331 == null ? null : t331.cancel();
            timer = null;
            watch.stop();
          }, T$.VoidTovoid()), onResume: onResume, onCancel: dart.fn(() => {
            let t331;
            t331 = timer;
            t331 == null ? null : t331.cancel();
            timer = null;
            totalElapsed = null;
          }, T$.VoidToNull())}));
        return controller$35get();
      }
    }
    (TimerStream.new = function(value, duration) {
      this[S$1._controller$12] = timer.TimerStream._buildController(T, value, duration);
      TimerStream.__proto__.new.call(this);
      ;
    }).prototype = TimerStream.prototype;
    dart.addTypeTests(TimerStream);
    TimerStream.prototype[_is_TimerStream_default] = true;
    dart.addTypeCaches(TimerStream);
    dart.setMethodSignature(TimerStream, () => ({
      __proto__: dart.getMethods(TimerStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setStaticMethodSignature(TimerStream, () => ['_buildController']);
    dart.setLibraryUri(TimerStream, I[221]);
    dart.setFieldSignature(TimerStream, () => ({
      __proto__: dart.getFields(TimerStream.__proto__),
      [S$1._controller$12]: dart.finalFieldType(async.StreamController$(T))
    }));
    return TimerStream;
  });
  timer.TimerStream = timer.TimerStream$();
  dart.addTypeTests(timer.TimerStream, _is_TimerStream_default);
  const _is_UsingStream_default = Symbol('_is_UsingStream_default');
  using.UsingStream$ = dart.generic((T, R) => {
    class UsingStream extends async.StreamView$(T) {
      static ['_#new#tearOff'](T, R, resourceFactory, streamFactory, disposer) {
        return new (using.UsingStream$(T, R)).new(resourceFactory, streamFactory, disposer);
      }
      static _buildStream(T, R, resourceFactory, streamFactory, disposer) {
        let controller = null;
        function controller$35get() {
          let t332;
          t332 = controller;
          return t332 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t332;
        }
        function controller$35set(controller$35param) {
          return controller = controller$35param;
        }
        let resourceCreated = false;
        let resource = null;
        let resource$35isSet = false;
        function resource$35get() {
          return resource$35isSet ? resource : dart.throw(new _internal.LateError.localNI("resource"));
        }
        function resource$35set(resource$35param) {
          resource$35isSet = true;
          return resource = resource$35param;
        }
        let subscription = null;
        function useResource(r) {
          resource$35set(r);
          resourceCreated = true;
          let stream = null;
          try {
            stream = streamFactory(r);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              controller$35get().addError(e, s);
              controller$35get().close();
              return;
            } else
              throw e$;
          }
          subscription = stream.listen(dart.fnType(dart.void, [T]).as(dart.bind(controller$35get(), 'add')), {onError: dart.bind(controller$35get(), 'addError'), onDone: dart.bind(controller$35get(), 'close')});
        }
        dart.fn(useResource, dart.fnType(dart.void, [R]));
        controller$35set(async.StreamController$(T).new({sync: true, onListen: dart.fn(() => {
            let resourceOrFuture = null;
            try {
              resourceOrFuture = resourceFactory();
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                controller$35get().addError(e, s);
                controller$35get().close();
                return;
              } else
                throw e$;
            }
            if (R.is(resourceOrFuture)) {
              useResource(resourceOrFuture);
            } else {
              async['FutureExtensions|onError'](core.Null, core.Object, resourceOrFuture.then(core.Null, dart.fn(r => {
                if (!controller$35get().hasListener) {
                  disposer(r);
                } else {
                  useResource(r);
                }
              }, dart.fnType(core.Null, [R]))), dart.fn((e, s) => {
                controller$35get().addError(e, s);
                controller$35get().close();
              }, T$.ObjectAndStackTraceToNull()));
            }
          }, T$.VoidTovoid()), onPause: dart.fn(() => {
            let t340;
            t340 = subscription;
            return t340 == null ? null : t340.pause();
          }, T$.VoidTovoid()), onResume: dart.fn(() => {
            let t340;
            t340 = subscription;
            return t340 == null ? null : t340.resume();
          }, T$.VoidTovoid()), onCancel: dart.fn(() => {
            let t340;
            let futureOr = resourceCreated ? disposer(resource$35get()) : null;
            let cancelFuture = (t340 = subscription, t340 == null ? null : t340.cancel());
            return future$.waitTwoFutures(cancelFuture, futureOr);
          }, T$.VoidToFutureOrOfvoid())}));
        return controller$35get().stream;
      }
    }
    (UsingStream.new = function(resourceFactory, streamFactory, disposer) {
      UsingStream.__proto__.new.call(this, using.UsingStream._buildStream(T, R, resourceFactory, streamFactory, disposer));
      ;
    }).prototype = UsingStream.prototype;
    dart.addTypeTests(UsingStream);
    UsingStream.prototype[_is_UsingStream_default] = true;
    dart.addTypeCaches(UsingStream);
    dart.setStaticMethodSignature(UsingStream, () => ['_buildStream']);
    dart.setLibraryUri(UsingStream, I[222]);
    return UsingStream;
  });
  using.UsingStream = using.UsingStream$();
  dart.addTypeTests(using.UsingStream, _is_UsingStream_default);
  const _is_ZipStream_default = Symbol('_is_ZipStream_default');
  zip.ZipStream$ = dart.generic((T, R) => {
    class ZipStream extends async.StreamView$(R) {
      static ['_#new#tearOff'](T, R, streams, zipper) {
        return new (zip.ZipStream$(T, R)).new(streams, zipper);
      }
      static list(T, streams) {
        return new (zip.ZipStream$(T, core.List$(T))).new(streams, dart.fn(values => values, dart.fnType(core.List$(T), [core.List$(T)])));
      }
      static zip2(A, B, R, streamOne, streamTwo, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamOne, streamTwo]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1))), dart.fnType(R, [core.List])));
      }
      static zip3(A, B, C, R, streamA, streamB, streamC, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2))), dart.fnType(R, [core.List])));
      }
      static zip4(A, B, C, D, R, streamA, streamB, streamC, streamD, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3))), dart.fnType(R, [core.List])));
      }
      static zip5(A, B, C, D, E, R, streamA, streamB, streamC, streamD, streamE, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4))), dart.fnType(R, [core.List])));
      }
      static zip6(A, B, C, D, E, F, R, streamA, streamB, streamC, streamD, streamE, streamF, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5))), dart.fnType(R, [core.List])));
      }
      static zip7(A, B, C, D, E, F, G, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6))), dart.fnType(R, [core.List])));
      }
      static zip8(A, B, C, D, E, F, G, H, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7))), dart.fnType(R, [core.List])));
      }
      static zip9(A, B, C, D, E, F, G, H, I, R, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper) {
        return new (zip.ZipStream$(dart.dynamic, R)).new(T$.JSArrayOfStream().of([streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI]), dart.fn(values => zipper(A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7)), I.as(values[S$.$_get](8))), dart.fnType(R, [core.List])));
      }
      static _buildController(T, R, streams, zipper) {
        let controller = async.StreamController$(R).new({sync: true});
        let subscriptions = null;
        function subscriptions$35get() {
          let t341;
          t341 = subscriptions;
          return t341 == null ? dart.throw(new _internal.LateError.localNI("subscriptions")) : t341;
        }
        function subscriptions$35set(subscriptions$35param) {
          return subscriptions = subscriptions$35param;
        }
        let pendingSubscriptions = _interceptors.JSArray$(async.StreamSubscription$(T)).of([]);
        controller.onListen = dart.fn(() => {
          let completeCurrent = null;
          let window = null;
          function window$35get() {
            let t344;
            t344 = window;
            return t344 == null ? dart.throw(new _internal.LateError.localNI("window")) : t344;
          }
          function window$35set(window$35param) {
            if (window == null)
              return window = window$35param;
            else
              dart.throw(new _internal.LateError.localAI("window"));
          }
          function next() {
            let t346;
            t346 = completeCurrent;
            t346 == null ? null : t346.complete(null);
            completeCurrent = T$.CompleterOfvoid().new();
            pendingSubscriptions = subscriptions$35get()[S$.$toList]();
          }
          dart.fn(next, T$.VoidTovoid());
          function doUpdate(index) {
            return dart.fn(value => {
              let t347;
              window$35get().onValue(index, value);
              if (window$35get().isComplete) {
                let combined = null;
                try {
                  combined = zipper(window$35get().flush());
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  let s = dart.stackTrace(e$);
                  if (core.Object.is(e)) {
                    controller.addError(e, s);
                    return;
                  } else
                    throw e$;
                }
                controller.add(combined);
                next();
              } else {
                let subscription = (t347 = subscriptions$35get()[S$.$_get](index), (() => {
                  t347.pause(dart.nullCheck(completeCurrent).future);
                  return t347;
                })());
                pendingSubscriptions[S$.$remove](subscription);
              }
            }, dart.fnType(dart.void, [T]));
          }
          dart.fn(doUpdate, dart.fnType(dart.fnType(dart.void, [T]), [core.int]));
          subscriptions$35set(collection_extensions['MapNotNullIterableExtension|mapIndexed'](async.Stream$(T), async.StreamSubscription$(T), streams, dart.fn((index, stream) => stream.listen(doUpdate(index), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')}), dart.fnType(async.StreamSubscription$(T), [core.int, async.Stream$(T)])))[S$.$toList]({growable: false}));
          if (subscriptions$35get()[S$.$isEmpty]) {
            controller.close();
          } else {
            window$35set(new (zip._Window$(T)).new(subscriptions$35get()[S$.$length]));
            next();
          }
        }, T$.VoidTovoid());
        controller.onPause = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|pauseAll'](pendingSubscriptions), T$.VoidTovoid());
        controller.onResume = dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|resumeAll'](pendingSubscriptions), T$.VoidTovoid());
        controller.onCancel = dart.fn(() => subscription['StreamSubscriptionsIterableExtension|cancelAll'](pendingSubscriptions), T$.VoidToFutureNOfvoid());
        return controller;
      }
    }
    (ZipStream.new = function(streams, zipper) {
      ZipStream.__proto__.new.call(this, zip.ZipStream._buildController(T, R, streams, zipper).stream);
      ;
    }).prototype = ZipStream.prototype;
    dart.addTypeTests(ZipStream);
    ZipStream.prototype[_is_ZipStream_default] = true;
    dart.addTypeCaches(ZipStream);
    dart.setStaticMethodSignature(ZipStream, () => ['list', 'zip2', 'zip3', 'zip4', 'zip5', 'zip6', 'zip7', 'zip8', 'zip9', '_buildController']);
    dart.setLibraryUri(ZipStream, I[223]);
    return ZipStream;
  });
  zip.ZipStream = zip.ZipStream$();
  dart.addTypeTests(zip.ZipStream, _is_ZipStream_default);
  const _is__Window_default = Symbol('_is__Window_default');
  zip._Window$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$ListOfTN = () => (__t$ListOfTN = dart.constFn(core.List$(__t$TN())))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    class _Window extends core.Object {
      get isComplete() {
        return this[S$1._valuesReceived] === this.size;
      }
      static ['_#new#tearOff'](T, size) {
        return new (zip._Window$(T)).new(size);
      }
      onValue(index, value) {
        T.as(value);
        this[S$1._values][S$.$_set](index, value);
        this[S$1._valuesReceived] = this[S$1._valuesReceived] + 1;
      }
      flush() {
        this[S$1._valuesReceived] = 0;
        return __t$ListOfT().unmodifiable(this[S$1._values]);
      }
    }
    (_Window.new = function(size) {
      this[S$1._valuesReceived] = 0;
      this.size = size;
      this[S$1._values] = __t$ListOfTN().filled(size, null);
      ;
    }).prototype = _Window.prototype;
    dart.addTypeTests(_Window);
    _Window.prototype[_is__Window_default] = true;
    dart.addTypeCaches(_Window);
    dart.setMethodSignature(_Window, () => ({
      __proto__: dart.getMethods(_Window.__proto__),
      onValue: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      flush: dart.fnType(core.List$(T), [])
    }));
    dart.setGetterSignature(_Window, () => ({
      __proto__: dart.getGetters(_Window.__proto__),
      isComplete: core.bool
    }));
    dart.setLibraryUri(_Window, I[223]);
    dart.setFieldSignature(_Window, () => ({
      __proto__: dart.getFields(_Window.__proto__),
      size: dart.finalFieldType(core.int),
      [S$1._values]: dart.finalFieldType(core.List$(dart.nullable(T))),
      [S$1._valuesReceived]: dart.fieldType(core.int)
    }));
    return _Window;
  });
  zip._Window = zip._Window$();
  dart.addTypeTests(zip._Window, _is__Window_default);
  zip['ZipWithExtension|zipWith'] = function ZipWithExtension$124zipWith(T, S, R, $this, other, zipper) {
    let stream = zip.ZipStream.zip2(T, S, R, $this, other, zipper);
    return $this.isBroadcast ? stream.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), dart.fnType(dart.void, [async.StreamSubscription$(R)]))}) : stream;
  };
  zip['ZipWithExtension|get#zipWith'] = function ZipWithExtension$124get$35zipWith(T, $this) {
    return dart.fn((S, R, other, zipper) => zip['ZipWithExtension|zipWith'](T, S, R, $this, other, zipper), dart.gFnType((S, R) => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfS(), dart.fnType(R, [T, S])]];
    }, (S, R) => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN()];
    }));
  };
  const _is_BackpressureStreamTransformer_default = Symbol('_is_BackpressureStreamTransformer_default');
  backpressure.BackpressureStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_BackpressureStreamSinkOfS$T = () => (__t$_BackpressureStreamSinkOfS$T = dart.constFn(backpressure._BackpressureStreamSink$(S, T)))();
    var __t$VoidTo_BackpressureStreamSinkOfS$T = () => (__t$VoidTo_BackpressureStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_BackpressureStreamSinkOfS$T(), [])))();
    class BackpressureStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get strategy() {
        return this[S$1.strategy];
      }
      set strategy(value) {
        super.strategy = value;
      }
      get windowStreamFactory() {
        return this[S$1.windowStreamFactory];
      }
      set windowStreamFactory(value) {
        super.windowStreamFactory = value;
      }
      get onWindowStart() {
        return this[S$1.onWindowStart];
      }
      set onWindowStart(value) {
        super.onWindowStart = value;
      }
      get onWindowEnd() {
        return this[S$1.onWindowEnd];
      }
      set onWindowEnd(value) {
        super.onWindowEnd = value;
      }
      get maxLengthQueue() {
        return this[S$1.maxLengthQueue];
      }
      set maxLengthQueue(value) {
        super.maxLengthQueue = value;
      }
      get startBufferEvery() {
        return this[S$1.startBufferEvery];
      }
      set startBufferEvery(value) {
        super.startBufferEvery = value;
      }
      get closeWindowWhen() {
        return this[S$1.closeWindowWhen];
      }
      set closeWindowWhen(value) {
        super.closeWindowWhen = value;
      }
      get ignoreEmptyWindows() {
        return this[S$1.ignoreEmptyWindows];
      }
      set ignoreEmptyWindows(value) {
        super.ignoreEmptyWindows = value;
      }
      get dispatchOnClose() {
        return this[S$1.dispatchOnClose];
      }
      set dispatchOnClose(value) {
        super.dispatchOnClose = value;
      }
      static ['_#new#tearOff'](S, T, strategy, windowStreamFactory, opts$) {
        let onWindowStart = opts$ && 'onWindowStart' in opts$ ? opts$.onWindowStart : null;
        let onWindowEnd = opts$ && 'onWindowEnd' in opts$ ? opts$.onWindowEnd : null;
        let startBufferEvery = opts$ && 'startBufferEvery' in opts$ ? opts$.startBufferEvery : 0;
        let closeWindowWhen = opts$ && 'closeWindowWhen' in opts$ ? opts$.closeWindowWhen : null;
        let ignoreEmptyWindows = opts$ && 'ignoreEmptyWindows' in opts$ ? opts$.ignoreEmptyWindows : true;
        let dispatchOnClose = opts$ && 'dispatchOnClose' in opts$ ? opts$.dispatchOnClose : true;
        let maxLengthQueue = opts$ && 'maxLengthQueue' in opts$ ? opts$.maxLengthQueue : null;
        return new (backpressure.BackpressureStreamTransformer$(S, T)).new(strategy, windowStreamFactory, {onWindowStart: onWindowStart, onWindowEnd: onWindowEnd, startBufferEvery: startBufferEvery, closeWindowWhen: closeWindowWhen, ignoreEmptyWindows: ignoreEmptyWindows, dispatchOnClose: dispatchOnClose, maxLengthQueue: maxLengthQueue});
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, dart.fn(() => new (__t$_BackpressureStreamSinkOfS$T()).new(this.strategy, this.windowStreamFactory, this.onWindowStart, this.onWindowEnd, this.startBufferEvery, this.closeWindowWhen, this.ignoreEmptyWindows, this.dispatchOnClose, this.maxLengthQueue), __t$VoidTo_BackpressureStreamSinkOfS$T()));
      }
    }
    (BackpressureStreamTransformer.new = function(strategy, windowStreamFactory, opts$) {
      let onWindowStart = opts$ && 'onWindowStart' in opts$ ? opts$.onWindowStart : null;
      let onWindowEnd = opts$ && 'onWindowEnd' in opts$ ? opts$.onWindowEnd : null;
      let startBufferEvery = opts$ && 'startBufferEvery' in opts$ ? opts$.startBufferEvery : 0;
      let closeWindowWhen = opts$ && 'closeWindowWhen' in opts$ ? opts$.closeWindowWhen : null;
      let ignoreEmptyWindows = opts$ && 'ignoreEmptyWindows' in opts$ ? opts$.ignoreEmptyWindows : true;
      let dispatchOnClose = opts$ && 'dispatchOnClose' in opts$ ? opts$.dispatchOnClose : true;
      let maxLengthQueue = opts$ && 'maxLengthQueue' in opts$ ? opts$.maxLengthQueue : null;
      this[S$1.strategy] = strategy;
      this[S$1.windowStreamFactory] = windowStreamFactory;
      this[S$1.onWindowStart] = onWindowStart;
      this[S$1.onWindowEnd] = onWindowEnd;
      this[S$1.startBufferEvery] = startBufferEvery;
      this[S$1.closeWindowWhen] = closeWindowWhen;
      this[S$1.ignoreEmptyWindows] = ignoreEmptyWindows;
      this[S$1.dispatchOnClose] = dispatchOnClose;
      this[S$1.maxLengthQueue] = maxLengthQueue;
      BackpressureStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = BackpressureStreamTransformer.prototype;
    dart.addTypeTests(BackpressureStreamTransformer);
    BackpressureStreamTransformer.prototype[_is_BackpressureStreamTransformer_default] = true;
    dart.addTypeCaches(BackpressureStreamTransformer);
    dart.setMethodSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getMethods(BackpressureStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(BackpressureStreamTransformer, I[224]);
    dart.setFieldSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getFields(BackpressureStreamTransformer.__proto__),
      strategy: dart.finalFieldType(backpressure.WindowStrategy),
      windowStreamFactory: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [S]))),
      onWindowStart: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      onWindowEnd: dart.finalFieldType(dart.nullable(dart.fnType(T, [core.List$(S)]))),
      maxLengthQueue: dart.finalFieldType(dart.nullable(core.int)),
      startBufferEvery: dart.finalFieldType(core.int),
      closeWindowWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.List$(S)]))),
      ignoreEmptyWindows: dart.finalFieldType(core.bool),
      dispatchOnClose: dart.finalFieldType(core.bool)
    }));
    return BackpressureStreamTransformer;
  });
  backpressure.BackpressureStreamTransformer = backpressure.BackpressureStreamTransformer$();
  dart.addTypeTests(backpressure.BackpressureStreamTransformer, _is_BackpressureStreamTransformer_default);
  const _is_BufferStreamTransformer_default = Symbol('_is_BufferStreamTransformer_default');
  buffer.BufferStreamTransformer$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToListOfT = () => (__t$ListOfTToListOfT = dart.constFn(dart.fnType(__t$ListOfT(), [__t$ListOfT()])))();
    class BufferStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {
      static ['_#new#tearOff'](T, window) {
        return new (buffer.BufferStreamTransformer$(T)).new(window);
      }
    }
    (BufferStreamTransformer.new = function(window) {
      BufferStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => queue, __t$ListOfTToListOfT()), ignoreEmptyWindows: false});
      ;
    }).prototype = BufferStreamTransformer.prototype;
    dart.addTypeTests(BufferStreamTransformer);
    BufferStreamTransformer.prototype[_is_BufferStreamTransformer_default] = true;
    dart.addTypeCaches(BufferStreamTransformer);
    dart.setLibraryUri(BufferStreamTransformer, I[225]);
    return BufferStreamTransformer;
  });
  buffer.BufferStreamTransformer = buffer.BufferStreamTransformer$();
  dart.addTypeTests(buffer.BufferStreamTransformer, _is_BufferStreamTransformer_default);
  const _is_BufferCountStreamTransformer_default = Symbol('_is_BufferCountStreamTransformer_default');
  buffer.BufferCountStreamTransformer$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToListOfT = () => (__t$ListOfTToListOfT = dart.constFn(dart.fnType(__t$ListOfT(), [__t$ListOfT()])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$ListOfT()])))();
    class BufferCountStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {
      static ['_#new#tearOff'](T, count, startBufferEvery = 0) {
        return new (buffer.BufferCountStreamTransformer$(T)).new(count, startBufferEvery);
      }
    }
    (BufferCountStreamTransformer.new = function(count, startBufferEvery = 0) {
      BufferCountStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => queue, __t$ListOfTToListOfT()), startBufferEvery: startBufferEvery, closeWindowWhen: dart.fn(queue => queue[S$.$length] === count, __t$ListOfTTobool())});
      if (count < 1) dart.throw(new core.ArgumentError.value(count, "count"));
      if (startBufferEvery < 0) {
        dart.throw(new core.ArgumentError.value(startBufferEvery, "startBufferEvery"));
      }
    }).prototype = BufferCountStreamTransformer.prototype;
    dart.addTypeTests(BufferCountStreamTransformer);
    BufferCountStreamTransformer.prototype[_is_BufferCountStreamTransformer_default] = true;
    dart.addTypeCaches(BufferCountStreamTransformer);
    dart.setLibraryUri(BufferCountStreamTransformer, I[225]);
    return BufferCountStreamTransformer;
  });
  buffer.BufferCountStreamTransformer = buffer.BufferCountStreamTransformer$();
  dart.addTypeTests(buffer.BufferCountStreamTransformer, _is_BufferCountStreamTransformer_default);
  const _is_BufferTestStreamTransformer_default = Symbol('_is_BufferTestStreamTransformer_default');
  buffer.BufferTestStreamTransformer$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToListOfT = () => (__t$ListOfTToListOfT = dart.constFn(dart.fnType(__t$ListOfT(), [__t$ListOfT()])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$ListOfT()])))();
    class BufferTestStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {
      static ['_#new#tearOff'](T, test) {
        return new (buffer.BufferTestStreamTransformer$(T)).new(test);
      }
    }
    (BufferTestStreamTransformer.new = function(test) {
      BufferTestStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => queue, __t$ListOfTToListOfT()), closeWindowWhen: dart.fn(queue => test(queue[S$.$last]), __t$ListOfTTobool())});
      ;
    }).prototype = BufferTestStreamTransformer.prototype;
    dart.addTypeTests(BufferTestStreamTransformer);
    BufferTestStreamTransformer.prototype[_is_BufferTestStreamTransformer_default] = true;
    dart.addTypeCaches(BufferTestStreamTransformer);
    dart.setLibraryUri(BufferTestStreamTransformer, I[225]);
    return BufferTestStreamTransformer;
  });
  buffer.BufferTestStreamTransformer = buffer.BufferTestStreamTransformer$();
  dart.addTypeTests(buffer.BufferTestStreamTransformer, _is_BufferTestStreamTransformer_default);
  buffer['BufferExtensions|buffer'] = function BufferExtensions$124buffer(T, $this, window) {
    return new (buffer.BufferStreamTransformer$(T)).new(dart.fn(_ => window, dart.fnType(async.Stream, [T]))).bind($this);
  };
  buffer['BufferExtensions|get#buffer'] = function BufferExtensions$124get$35buffer(T, $this) {
    return dart.fn(window => buffer['BufferExtensions|buffer'](T, $this, window), dart.fnType(async.Stream$(core.List$(T)), [async.Stream]));
  };
  buffer['BufferExtensions|bufferCount'] = function BufferExtensions$124bufferCount(T, $this, count, startBufferEvery = 0) {
    return new (buffer.BufferCountStreamTransformer$(T)).new(count, startBufferEvery).bind($this);
  };
  buffer['BufferExtensions|get#bufferCount'] = function BufferExtensions$124get$35bufferCount(T, $this) {
    return dart.fn((count, startBufferEvery = 0) => buffer['BufferExtensions|bufferCount'](T, $this, count, startBufferEvery), dart.fnType(async.Stream$(core.List$(T)), [core.int], [core.int]));
  };
  buffer['BufferExtensions|bufferTest'] = function BufferExtensions$124bufferTest(T, $this, onTestHandler) {
    return new (buffer.BufferTestStreamTransformer$(T)).new(onTestHandler).bind($this);
  };
  buffer['BufferExtensions|get#bufferTest'] = function BufferExtensions$124get$35bufferTest(T, $this) {
    return dart.fn(onTestHandler => buffer['BufferExtensions|bufferTest'](T, $this, onTestHandler), dart.fnType(async.Stream$(core.List$(T)), [dart.fnType(core.bool, [T])]));
  };
  buffer['BufferExtensions|bufferTime'] = function BufferExtensions$124bufferTime(T, $this, duration) {
    return buffer['BufferExtensions|buffer'](T, $this, T$.StreamOfvoid().periodic(duration));
  };
  buffer['BufferExtensions|get#bufferTime'] = function BufferExtensions$124get$35bufferTime(T, $this) {
    return dart.fn(duration => buffer['BufferExtensions|bufferTime'](T, $this, duration), dart.fnType(async.Stream$(core.List$(T)), [core.Duration]));
  };
  const _is_DebounceStreamTransformer_default = Symbol('_is_DebounceStreamTransformer_default');
  debounce.DebounceStreamTransformer$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToT = () => (__t$ListOfTToT = dart.constFn(dart.fnType(T, [__t$ListOfT()])))();
    class DebounceStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, T) {
      static ['_#new#tearOff'](T, window) {
        return new (debounce.DebounceStreamTransformer$(T)).new(window);
      }
    }
    (DebounceStreamTransformer.new = function(window) {
      DebounceStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.everyEvent, window, {onWindowEnd: dart.fn(queue => queue[S$.$last], __t$ListOfTToT()), maxLengthQueue: 1});
      ;
    }).prototype = DebounceStreamTransformer.prototype;
    dart.addTypeTests(DebounceStreamTransformer);
    DebounceStreamTransformer.prototype[_is_DebounceStreamTransformer_default] = true;
    dart.addTypeCaches(DebounceStreamTransformer);
    dart.setLibraryUri(DebounceStreamTransformer, I[226]);
    return DebounceStreamTransformer;
  });
  debounce.DebounceStreamTransformer = debounce.DebounceStreamTransformer$();
  dart.addTypeTests(debounce.DebounceStreamTransformer, _is_DebounceStreamTransformer_default);
  debounce['DebounceExtensions|debounce'] = function DebounceExtensions$124debounce(T, $this, window) {
    return new (debounce.DebounceStreamTransformer$(T)).new(window).bind($this);
  };
  debounce['DebounceExtensions|get#debounce'] = function DebounceExtensions$124get$35debounce(T, $this) {
    return dart.fn(window => debounce['DebounceExtensions|debounce'](T, $this, window), dart.fnType(async.Stream$(T), [dart.fnType(async.Stream, [T])]));
  };
  debounce['DebounceExtensions|debounceTime'] = function DebounceExtensions$124debounceTime(T, $this, duration) {
    return new (debounce.DebounceStreamTransformer$(T)).new(dart.fn(_ => new (T$.TimerStreamOfvoid()).new(null, duration), dart.fnType(T$.TimerStreamOfvoid(), [T]))).bind($this);
  };
  debounce['DebounceExtensions|get#debounceTime'] = function DebounceExtensions$124get$35debounceTime(T, $this) {
    return dart.fn(duration => debounce['DebounceExtensions|debounceTime'](T, $this, duration), dart.fnType(async.Stream$(T), [core.Duration]));
  };
  const _is_PairwiseStreamTransformer_default = Symbol('_is_PairwiseStreamTransformer_default');
  pairwise.PairwiseStreamTransformer$ = dart.generic(T => {
    var __t$TToNeverStreamOfvoid = () => (__t$TToNeverStreamOfvoid = dart.constFn(dart.fnType(T$.NeverStreamOfvoid(), [T])))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToListOfT = () => (__t$ListOfTToListOfT = dart.constFn(dart.fnType(__t$ListOfT(), [__t$ListOfT()])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$ListOfT()])))();
    class PairwiseStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {
      static ['_#new#tearOff'](T) {
        return new (pairwise.PairwiseStreamTransformer$(T)).new();
      }
    }
    (PairwiseStreamTransformer.new = function() {
      PairwiseStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, dart.fn(_ => new (T$.NeverStreamOfvoid()).new(), __t$TToNeverStreamOfvoid()), {onWindowEnd: dart.fn(queue => queue, __t$ListOfTToListOfT()), startBufferEvery: 1, closeWindowWhen: dart.fn(queue => queue[S$.$length] === 2, __t$ListOfTTobool()), dispatchOnClose: false});
      ;
    }).prototype = PairwiseStreamTransformer.prototype;
    dart.addTypeTests(PairwiseStreamTransformer);
    PairwiseStreamTransformer.prototype[_is_PairwiseStreamTransformer_default] = true;
    dart.addTypeCaches(PairwiseStreamTransformer);
    dart.setLibraryUri(PairwiseStreamTransformer, I[227]);
    return PairwiseStreamTransformer;
  });
  pairwise.PairwiseStreamTransformer = pairwise.PairwiseStreamTransformer$();
  dart.addTypeTests(pairwise.PairwiseStreamTransformer, _is_PairwiseStreamTransformer_default);
  pairwise['PairwiseExtension|pairwise'] = function PairwiseExtension$124pairwise(T, $this) {
    return new (pairwise.PairwiseStreamTransformer$(T)).new().bind($this);
  };
  pairwise['PairwiseExtension|get#pairwise'] = function PairwiseExtension$124get$35pairwise(T, $this) {
    return dart.fn(() => pairwise['PairwiseExtension|pairwise'](T, $this), dart.fnType(async.Stream$(core.List$(T)), []));
  };
  const _is_SampleStreamTransformer_default = Symbol('_is_SampleStreamTransformer_default');
  sample.SampleStreamTransformer$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToT = () => (__t$ListOfTToT = dart.constFn(dart.fnType(T, [__t$ListOfT()])))();
    class SampleStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, T) {
      static ['_#new#tearOff'](T, window) {
        return new (sample.SampleStreamTransformer$(T)).new(window);
      }
    }
    (SampleStreamTransformer.new = function(window) {
      SampleStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => queue[S$.$last], __t$ListOfTToT())});
      ;
    }).prototype = SampleStreamTransformer.prototype;
    dart.addTypeTests(SampleStreamTransformer);
    SampleStreamTransformer.prototype[_is_SampleStreamTransformer_default] = true;
    dart.addTypeCaches(SampleStreamTransformer);
    dart.setLibraryUri(SampleStreamTransformer, I[228]);
    return SampleStreamTransformer;
  });
  sample.SampleStreamTransformer = sample.SampleStreamTransformer$();
  dart.addTypeTests(sample.SampleStreamTransformer, _is_SampleStreamTransformer_default);
  sample['SampleExtensions|sample'] = function SampleExtensions$124sample(T, $this, sampleStream) {
    return new (sample.SampleStreamTransformer$(T)).new(dart.fn(_ => sampleStream, dart.fnType(async.Stream, [T]))).bind($this);
  };
  sample['SampleExtensions|get#sample'] = function SampleExtensions$124get$35sample(T, $this) {
    return dart.fn(sampleStream => sample['SampleExtensions|sample'](T, $this, sampleStream), dart.fnType(async.Stream$(T), [async.Stream]));
  };
  sample['SampleExtensions|sampleTime'] = function SampleExtensions$124sampleTime(T, $this, duration) {
    return sample['SampleExtensions|sample'](T, $this, T$.StreamOfvoid().periodic(duration));
  };
  sample['SampleExtensions|get#sampleTime'] = function SampleExtensions$124get$35sampleTime(T, $this) {
    return dart.fn(duration => sample['SampleExtensions|sampleTime'](T, $this, duration), dart.fnType(async.Stream$(T), [core.Duration]));
  };
  const _is_ThrottleStreamTransformer_default = Symbol('_is_ThrottleStreamTransformer_default');
  throttle.ThrottleStreamTransformer$ = dart.generic(T => {
    var __t$TToT = () => (__t$TToT = dart.constFn(dart.fnType(T, [T])))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToT = () => (__t$ListOfTToT = dart.constFn(dart.fnType(T, [__t$ListOfT()])))();
    class ThrottleStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, T) {
      static ['_#new#tearOff'](T, window, opts$) {
        let trailing = opts$ && 'trailing' in opts$ ? opts$.trailing : false;
        let leading = opts$ && 'leading' in opts$ ? opts$.leading : true;
        return new (throttle.ThrottleStreamTransformer$(T)).new(window, {trailing: trailing, leading: leading});
      }
    }
    (ThrottleStreamTransformer.new = function(window, opts$) {
      let trailing = opts$ && 'trailing' in opts$ ? opts$.trailing : false;
      let leading = opts$ && 'leading' in opts$ ? opts$.leading : true;
      ThrottleStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.eventAfterLastWindow, window, {onWindowStart: leading ? dart.fn(event => event, __t$TToT()) : null, onWindowEnd: trailing ? dart.fn(queue => queue[S$.$last], __t$ListOfTToT()) : null, dispatchOnClose: trailing, maxLengthQueue: trailing ? 2 : 0});
      ;
    }).prototype = ThrottleStreamTransformer.prototype;
    dart.addTypeTests(ThrottleStreamTransformer);
    ThrottleStreamTransformer.prototype[_is_ThrottleStreamTransformer_default] = true;
    dart.addTypeCaches(ThrottleStreamTransformer);
    dart.setLibraryUri(ThrottleStreamTransformer, I[229]);
    return ThrottleStreamTransformer;
  });
  throttle.ThrottleStreamTransformer = throttle.ThrottleStreamTransformer$();
  dart.addTypeTests(throttle.ThrottleStreamTransformer, _is_ThrottleStreamTransformer_default);
  throttle['ThrottleExtensions|throttle'] = function ThrottleExtensions$124throttle(T, $this, window, opts$) {
    let trailing = opts$ && 'trailing' in opts$ ? opts$.trailing : false;
    let leading = opts$ && 'leading' in opts$ ? opts$.leading : true;
    return new (throttle.ThrottleStreamTransformer$(T)).new(window, {trailing: trailing, leading: leading}).bind($this);
  };
  throttle['ThrottleExtensions|get#throttle'] = function ThrottleExtensions$124get$35throttle(T, $this) {
    return dart.fn((window, opts$) => {
      let trailing = opts$ && 'trailing' in opts$ ? opts$.trailing : false;
      let leading = opts$ && 'leading' in opts$ ? opts$.leading : true;
      return throttle['ThrottleExtensions|throttle'](T, $this, window, {trailing: trailing, leading: leading});
    }, dart.fnType(async.Stream$(T), [dart.fnType(async.Stream, [T])], {leading: core.bool, trailing: core.bool}, {}));
  };
  throttle['ThrottleExtensions|throttleTime'] = function ThrottleExtensions$124throttleTime(T, $this, duration, opts$) {
    let trailing = opts$ && 'trailing' in opts$ ? opts$.trailing : false;
    let leading = opts$ && 'leading' in opts$ ? opts$.leading : true;
    return new (throttle.ThrottleStreamTransformer$(T)).new(dart.fn(_ => new (T$.TimerStreamOfbool()).new(true, duration), dart.fnType(T$.TimerStreamOfbool(), [T])), {trailing: trailing, leading: leading}).bind($this);
  };
  throttle['ThrottleExtensions|get#throttleTime'] = function ThrottleExtensions$124get$35throttleTime(T, $this) {
    return dart.fn((duration, opts$) => {
      let trailing = opts$ && 'trailing' in opts$ ? opts$.trailing : false;
      let leading = opts$ && 'leading' in opts$ ? opts$.leading : true;
      return throttle['ThrottleExtensions|throttleTime'](T, $this, duration, {trailing: trailing, leading: leading});
    }, dart.fnType(async.Stream$(T), [core.Duration], {leading: core.bool, trailing: core.bool}, {}));
  };
  const _is_WindowStreamTransformer_default = Symbol('_is_WindowStreamTransformer_default');
  window$.WindowStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToStreamOfT = () => (__t$ListOfTToStreamOfT = dart.constFn(dart.fnType(__t$StreamOfT(), [__t$ListOfT()])))();
    class WindowStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, async.Stream$(T)) {
      static ['_#new#tearOff'](T, window) {
        return new (window$.WindowStreamTransformer$(T)).new(window);
      }
    }
    (WindowStreamTransformer.new = function(window) {
      WindowStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => __t$StreamOfT().fromIterable(queue), __t$ListOfTToStreamOfT()), ignoreEmptyWindows: false});
      ;
    }).prototype = WindowStreamTransformer.prototype;
    dart.addTypeTests(WindowStreamTransformer);
    WindowStreamTransformer.prototype[_is_WindowStreamTransformer_default] = true;
    dart.addTypeCaches(WindowStreamTransformer);
    dart.setLibraryUri(WindowStreamTransformer, I[230]);
    return WindowStreamTransformer;
  });
  window$.WindowStreamTransformer = window$.WindowStreamTransformer$();
  dart.addTypeTests(window$.WindowStreamTransformer, _is_WindowStreamTransformer_default);
  const _is_WindowCountStreamTransformer_default = Symbol('_is_WindowCountStreamTransformer_default');
  window$.WindowCountStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToStreamOfT = () => (__t$ListOfTToStreamOfT = dart.constFn(dart.fnType(__t$StreamOfT(), [__t$ListOfT()])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$ListOfT()])))();
    class WindowCountStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, async.Stream$(T)) {
      static ['_#new#tearOff'](T, count, startBufferEvery = 0) {
        return new (window$.WindowCountStreamTransformer$(T)).new(count, startBufferEvery);
      }
    }
    (WindowCountStreamTransformer.new = function(count, startBufferEvery = 0) {
      WindowCountStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => __t$StreamOfT().fromIterable(queue), __t$ListOfTToStreamOfT()), startBufferEvery: startBufferEvery, closeWindowWhen: dart.fn(queue => queue[S$.$length] === count, __t$ListOfTTobool())});
      if (count < 1) dart.throw(new core.ArgumentError.value(count, "count"));
      if (startBufferEvery < 0) {
        dart.throw(new core.ArgumentError.value(startBufferEvery, "startBufferEvery"));
      }
    }).prototype = WindowCountStreamTransformer.prototype;
    dart.addTypeTests(WindowCountStreamTransformer);
    WindowCountStreamTransformer.prototype[_is_WindowCountStreamTransformer_default] = true;
    dart.addTypeCaches(WindowCountStreamTransformer);
    dart.setLibraryUri(WindowCountStreamTransformer, I[230]);
    return WindowCountStreamTransformer;
  });
  window$.WindowCountStreamTransformer = window$.WindowCountStreamTransformer$();
  dart.addTypeTests(window$.WindowCountStreamTransformer, _is_WindowCountStreamTransformer_default);
  const _is_WindowTestStreamTransformer_default = Symbol('_is_WindowTestStreamTransformer_default');
  window$.WindowTestStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListOfTToStreamOfT = () => (__t$ListOfTToStreamOfT = dart.constFn(dart.fnType(__t$StreamOfT(), [__t$ListOfT()])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$ListOfT()])))();
    class WindowTestStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, async.Stream$(T)) {
      static ['_#new#tearOff'](T, test) {
        return new (window$.WindowTestStreamTransformer$(T)).new(test);
      }
    }
    (WindowTestStreamTransformer.new = function(test) {
      WindowTestStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => __t$StreamOfT().fromIterable(queue), __t$ListOfTToStreamOfT()), closeWindowWhen: dart.fn(queue => test(queue[S$.$last]), __t$ListOfTTobool())});
      ;
    }).prototype = WindowTestStreamTransformer.prototype;
    dart.addTypeTests(WindowTestStreamTransformer);
    WindowTestStreamTransformer.prototype[_is_WindowTestStreamTransformer_default] = true;
    dart.addTypeCaches(WindowTestStreamTransformer);
    dart.setLibraryUri(WindowTestStreamTransformer, I[230]);
    return WindowTestStreamTransformer;
  });
  window$.WindowTestStreamTransformer = window$.WindowTestStreamTransformer$();
  dart.addTypeTests(window$.WindowTestStreamTransformer, _is_WindowTestStreamTransformer_default);
  window$['WindowExtensions|window'] = function WindowExtensions$124window(T, $this, window) {
    return new (window$.WindowStreamTransformer$(T)).new(dart.fn(_ => window, dart.fnType(async.Stream, [T]))).bind($this);
  };
  window$['WindowExtensions|get#window'] = function WindowExtensions$124get$35window(T, $this) {
    return dart.fn(window => window$['WindowExtensions|window'](T, $this, window), dart.fnType(async.Stream$(async.Stream$(T)), [async.Stream]));
  };
  window$['WindowExtensions|windowCount'] = function WindowExtensions$124windowCount(T, $this, count, startBufferEvery = 0) {
    return new (window$.WindowCountStreamTransformer$(T)).new(count, startBufferEvery).bind($this);
  };
  window$['WindowExtensions|get#windowCount'] = function WindowExtensions$124get$35windowCount(T, $this) {
    return dart.fn((count, startBufferEvery = 0) => window$['WindowExtensions|windowCount'](T, $this, count, startBufferEvery), dart.fnType(async.Stream$(async.Stream$(T)), [core.int], [core.int]));
  };
  window$['WindowExtensions|windowTest'] = function WindowExtensions$124windowTest(T, $this, onTestHandler) {
    return new (window$.WindowTestStreamTransformer$(T)).new(onTestHandler).bind($this);
  };
  window$['WindowExtensions|get#windowTest'] = function WindowExtensions$124get$35windowTest(T, $this) {
    return dart.fn(onTestHandler => window$['WindowExtensions|windowTest'](T, $this, onTestHandler), dart.fnType(async.Stream$(async.Stream$(T)), [dart.fnType(core.bool, [T])]));
  };
  window$['WindowExtensions|windowTime'] = function WindowExtensions$124windowTime(T, $this, duration) {
    return window$['WindowExtensions|window'](T, $this, T$.StreamOfvoid().periodic(duration));
  };
  window$['WindowExtensions|get#windowTime'] = function WindowExtensions$124get$35windowTime(T, $this) {
    return dart.fn(duration => window$['WindowExtensions|windowTime'](T, $this, duration), dart.fnType(async.Stream$(async.Stream$(T)), [core.Duration]));
  };
  const _is__DefaultIfEmptyStreamSink_default = Symbol('_is__DefaultIfEmptyStreamSink_default');
  default_if_empty._DefaultIfEmptyStreamSink$ = dart.generic(S => {
    class _DefaultIfEmptyStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink, _defaultValue) {
        return new (default_if_empty._DefaultIfEmptyStreamSink$(S)).new(_outputSink, _defaultValue);
      }
      add(data) {
        S.as(data);
        this[S$1._isEmpty] = false;
        this[S$1._outputSink].add(data);
      }
      addError(e, st = null) {
        return this[S$1._outputSink].addError(e, st);
      }
      close() {
        if (this[S$1._isEmpty]) {
          this[S$1._outputSink].add(this[S$1._defaultValue]);
        }
        this[S$1._outputSink].close();
      }
    }
    (_DefaultIfEmptyStreamSink.new = function(_outputSink, _defaultValue) {
      this[S$1._isEmpty] = true;
      this[S$1._outputSink] = _outputSink;
      this[S$1._defaultValue] = _defaultValue;
      ;
    }).prototype = _DefaultIfEmptyStreamSink.prototype;
    dart.addTypeTests(_DefaultIfEmptyStreamSink);
    _DefaultIfEmptyStreamSink.prototype[_is__DefaultIfEmptyStreamSink_default] = true;
    dart.addTypeCaches(_DefaultIfEmptyStreamSink);
    _DefaultIfEmptyStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_DefaultIfEmptyStreamSink, () => ({
      __proto__: dart.getMethods(_DefaultIfEmptyStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DefaultIfEmptyStreamSink, I[231]);
    dart.setFieldSignature(_DefaultIfEmptyStreamSink, () => ({
      __proto__: dart.getFields(_DefaultIfEmptyStreamSink.__proto__),
      [S$1._defaultValue]: dart.finalFieldType(S),
      [S$1._outputSink]: dart.finalFieldType(async.EventSink$(S)),
      [S$1._isEmpty]: dart.fieldType(core.bool)
    }));
    return _DefaultIfEmptyStreamSink;
  });
  default_if_empty._DefaultIfEmptyStreamSink = default_if_empty._DefaultIfEmptyStreamSink$();
  dart.addTypeTests(default_if_empty._DefaultIfEmptyStreamSink, _is__DefaultIfEmptyStreamSink_default);
  const _is_DefaultIfEmptyStreamTransformer_default = Symbol('_is_DefaultIfEmptyStreamTransformer_default');
  default_if_empty.DefaultIfEmptyStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_DefaultIfEmptyStreamSinkOfS = () => (__t$_DefaultIfEmptyStreamSinkOfS = dart.constFn(default_if_empty._DefaultIfEmptyStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_DefaultIfEmptyStreamSinkOfS = () => (__t$EventSinkOfSTo_DefaultIfEmptyStreamSinkOfS = dart.constFn(dart.fnType(__t$_DefaultIfEmptyStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class DefaultIfEmptyStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get defaultValue() {
        return this[S$1.defaultValue$1];
      }
      set defaultValue(value) {
        super.defaultValue = value;
      }
      static ['_#new#tearOff'](S, defaultValue) {
        return new (default_if_empty.DefaultIfEmptyStreamTransformer$(S)).new(defaultValue);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_DefaultIfEmptyStreamSinkOfS()).new(sink, this.defaultValue), __t$EventSinkOfSTo_DefaultIfEmptyStreamSinkOfS()));
      }
    }
    (DefaultIfEmptyStreamTransformer.new = function(defaultValue) {
      this[S$1.defaultValue$1] = defaultValue;
      DefaultIfEmptyStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = DefaultIfEmptyStreamTransformer.prototype;
    dart.addTypeTests(DefaultIfEmptyStreamTransformer);
    DefaultIfEmptyStreamTransformer.prototype[_is_DefaultIfEmptyStreamTransformer_default] = true;
    dart.addTypeCaches(DefaultIfEmptyStreamTransformer);
    dart.setMethodSignature(DefaultIfEmptyStreamTransformer, () => ({
      __proto__: dart.getMethods(DefaultIfEmptyStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DefaultIfEmptyStreamTransformer, I[231]);
    dart.setFieldSignature(DefaultIfEmptyStreamTransformer, () => ({
      __proto__: dart.getFields(DefaultIfEmptyStreamTransformer.__proto__),
      defaultValue: dart.finalFieldType(S)
    }));
    return DefaultIfEmptyStreamTransformer;
  });
  default_if_empty.DefaultIfEmptyStreamTransformer = default_if_empty.DefaultIfEmptyStreamTransformer$();
  dart.addTypeTests(default_if_empty.DefaultIfEmptyStreamTransformer, _is_DefaultIfEmptyStreamTransformer_default);
  default_if_empty['DefaultIfEmptyExtension|defaultIfEmpty'] = function DefaultIfEmptyExtension$124defaultIfEmpty(T, $this, defaultValue) {
    return new (default_if_empty.DefaultIfEmptyStreamTransformer$(T)).new(defaultValue).bind($this);
  };
  default_if_empty['DefaultIfEmptyExtension|get#defaultIfEmpty'] = function DefaultIfEmptyExtension$124get$35defaultIfEmpty(T, $this) {
    return dart.fn(defaultValue => default_if_empty['DefaultIfEmptyExtension|defaultIfEmpty'](T, $this, defaultValue), dart.fnType(async.Stream$(T), [T]));
  };
  const _is__DelayStreamSink_default = Symbol('_is__DelayStreamSink_default');
  delay._DelayStreamSink$ = dart.generic(S => {
    class _DelayStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _duration) {
        return new (delay._DelayStreamSink$(S)).new(_duration);
      }
      onData(data) {
        S.as(data);
        let subscription = rx.Rx.timer(dart.void, null, this[S$1._duration]).listen(dart.fn(_ => {
          this[S$1._subscriptions].removeFirst();
          this.sink.add(data);
          if (this[S$1._inputClosed] && this[S$1._subscriptions][S$.$isEmpty]) {
            this.sink.close();
          }
        }, T$.voidTovoid()));
        this[S$1._subscriptions].addLast(subscription);
      }
      onError(error, st) {
        return this.sink.addError(error, st);
      }
      onDone() {
        this[S$1._inputClosed] = true;
        if (this[S$1._subscriptions][S$.$isEmpty]) {
          this.sink.close();
        }
      }
      onCancel() {
        return subscription['StreamSubscriptionsIterableExtension|cancelAll'](this[S$1._subscriptions]);
      }
      onListen() {
      }
      onPause() {
        return subscription['StreamSubscriptionsIterableExtensions|pauseAll'](this[S$1._subscriptions]);
      }
      onResume() {
        return subscription['StreamSubscriptionsIterableExtensions|resumeAll'](this[S$1._subscriptions]);
      }
    }
    (_DelayStreamSink.new = function(_duration) {
      this[S$1._inputClosed] = false;
      this[S$1._subscriptions] = new (T$.ListQueueOfStreamSubscriptionOfvoid()).new();
      this[S$1._duration] = _duration;
      _DelayStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _DelayStreamSink.prototype;
    dart.addTypeTests(_DelayStreamSink);
    _DelayStreamSink.prototype[_is__DelayStreamSink_default] = true;
    dart.addTypeCaches(_DelayStreamSink);
    dart.setMethodSignature(_DelayStreamSink, () => ({
      __proto__: dart.getMethods(_DelayStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DelayStreamSink, I[232]);
    dart.setFieldSignature(_DelayStreamSink, () => ({
      __proto__: dart.getFields(_DelayStreamSink.__proto__),
      [S$1._duration]: dart.finalFieldType(core.Duration),
      [S$1._inputClosed]: dart.fieldType(core.bool),
      [S$1._subscriptions]: dart.finalFieldType(collection.Queue$(async.StreamSubscription$(dart.void)))
    }));
    return _DelayStreamSink;
  });
  delay._DelayStreamSink = delay._DelayStreamSink$();
  dart.addTypeTests(delay._DelayStreamSink, _is__DelayStreamSink_default);
  const _is_DelayStreamTransformer_default = Symbol('_is_DelayStreamTransformer_default');
  delay.DelayStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_DelayStreamSinkOfS = () => (__t$_DelayStreamSinkOfS = dart.constFn(delay._DelayStreamSink$(S)))();
    var __t$VoidTo_DelayStreamSinkOfS = () => (__t$VoidTo_DelayStreamSinkOfS = dart.constFn(dart.fnType(__t$_DelayStreamSinkOfS(), [])))();
    class DelayStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get duration() {
        return this[S$1.duration];
      }
      set duration(value) {
        super.duration = value;
      }
      static ['_#new#tearOff'](S, duration) {
        return new (delay.DelayStreamTransformer$(S)).new(duration);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_DelayStreamSinkOfS()).new(this.duration), __t$VoidTo_DelayStreamSinkOfS()));
      }
    }
    (DelayStreamTransformer.new = function(duration) {
      this[S$1.duration] = duration;
      DelayStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = DelayStreamTransformer.prototype;
    dart.addTypeTests(DelayStreamTransformer);
    DelayStreamTransformer.prototype[_is_DelayStreamTransformer_default] = true;
    dart.addTypeCaches(DelayStreamTransformer);
    dart.setMethodSignature(DelayStreamTransformer, () => ({
      __proto__: dart.getMethods(DelayStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DelayStreamTransformer, I[232]);
    dart.setFieldSignature(DelayStreamTransformer, () => ({
      __proto__: dart.getFields(DelayStreamTransformer.__proto__),
      duration: dart.finalFieldType(core.Duration)
    }));
    return DelayStreamTransformer;
  });
  delay.DelayStreamTransformer = delay.DelayStreamTransformer$();
  dart.addTypeTests(delay.DelayStreamTransformer, _is_DelayStreamTransformer_default);
  delay['DelayExtension|delay'] = function DelayExtension$124delay(T, $this, duration) {
    return new (delay.DelayStreamTransformer$(T)).new(duration).bind($this);
  };
  delay['DelayExtension|get#delay'] = function DelayExtension$124get$35delay(T, $this) {
    return dart.fn(duration => delay['DelayExtension|delay'](T, $this, duration), dart.fnType(async.Stream$(T), [core.Duration]));
  };
  const _is__DelayWhenStreamSink_default = Symbol('_is__DelayWhenStreamSink_default');
  delay_when._DelayWhenStreamSink$ = dart.generic(T => {
    class _DelayWhenStreamSink extends forwarding_sink.ForwardingSink$(T, T) {
      static ['_#new#tearOff'](T, itemDelaySelector, listenDelay) {
        return new (delay_when._DelayWhenStreamSink$(T)).new(itemDelaySelector, listenDelay);
      }
      onData(data) {
        let t383;
        T.as(data);
        let subscription = (t383 = data, this.itemDelaySelector(t383)).take(1).listen(null, {onError: dart.bind(this.sink, 'addError')});
        subscription.onDone(dart.fn(() => {
          this.subscriptions[S$.$remove](subscription);
          this.sink.add(data);
          if (this.subscriptions[S$.$isEmpty] && this.closed) {
            this.sink.close();
          }
        }, T$.VoidTovoid()));
        this.subscriptions[S$.$add](subscription);
      }
      onError(error, st) {
        return this.sink.addError(error, st);
      }
      onDone() {
        this.closed = true;
        if (this.subscriptions[S$.$isEmpty]) {
          this.sink.close();
        }
      }
      onCancel() {
        let t383;
        let future = (t383 = this.subscription, t383 == null ? null : t383.cancel());
        this.subscription = null;
        if (this.subscriptions[S$.$isEmpty]) {
          return future;
        }
        let futures = (() => {
          let t383 = T$.JSArrayOfFutureOfvoid().of([]);
          for (let s of this.subscriptions)
            t383.push(s.cancel());
          if (future != null) t383.push(future);
          return t383;
        })();
        this.subscriptions[S$.$clear]();
        return future$.waitFuturesList(futures);
      }
      onListen() {
        if (this.listenDelay == null) {
          return null;
        }
        let completer = T$.CompleterOfvoid().sync();
        this.subscription = dart.nullCheck(this.listenDelay).take(1).listen(null, {onError: dart.fn((e, s) => {
            let t384;
            t384 = this.subscription;
            t384 == null ? null : t384.cancel();
            this.subscription = null;
            completer.completeError(e, s);
          }, T$.ObjectAndStackTraceToNull()), onDone: dart.fn(() => {
            let t384;
            t384 = this.subscription;
            t384 == null ? null : t384.cancel();
            this.subscription = null;
            completer.complete(null);
          }, T$.VoidTovoid())});
        return completer.future;
      }
      onPause() {
        let t384;
        t384 = this.subscription;
        t384 == null ? null : t384.pause();
        subscription['StreamSubscriptionsIterableExtensions|pauseAll'](this.subscriptions);
      }
      onResume() {
        let t384;
        t384 = this.subscription;
        t384 == null ? null : t384.resume();
        subscription['StreamSubscriptionsIterableExtensions|resumeAll'](this.subscriptions);
      }
    }
    (_DelayWhenStreamSink.new = function(itemDelaySelector, listenDelay) {
      this.subscriptions = T$.JSArrayOfStreamSubscriptionOfvoid().of([]);
      this.subscription = null;
      this.closed = false;
      this.itemDelaySelector = itemDelaySelector;
      this.listenDelay = listenDelay;
      _DelayWhenStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _DelayWhenStreamSink.prototype;
    dart.addTypeTests(_DelayWhenStreamSink);
    _DelayWhenStreamSink.prototype[_is__DelayWhenStreamSink_default] = true;
    dart.addTypeCaches(_DelayWhenStreamSink);
    dart.setMethodSignature(_DelayWhenStreamSink, () => ({
      __proto__: dart.getMethods(_DelayWhenStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DelayWhenStreamSink, I[233]);
    dart.setFieldSignature(_DelayWhenStreamSink, () => ({
      __proto__: dart.getFields(_DelayWhenStreamSink.__proto__),
      itemDelaySelector: dart.finalFieldType(dart.fnType(async.Stream$(dart.void), [T])),
      listenDelay: dart.finalFieldType(dart.nullable(async.Stream$(dart.void))),
      subscriptions: dart.finalFieldType(core.List$(async.StreamSubscription$(dart.void))),
      subscription: dart.fieldType(dart.nullable(async.StreamSubscription$(dart.void))),
      closed: dart.fieldType(core.bool)
    }));
    return _DelayWhenStreamSink;
  });
  delay_when._DelayWhenStreamSink = delay_when._DelayWhenStreamSink$();
  dart.addTypeTests(delay_when._DelayWhenStreamSink, _is__DelayWhenStreamSink_default);
  const _is_DelayWhenStreamTransformer_default = Symbol('_is_DelayWhenStreamTransformer_default');
  delay_when.DelayWhenStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$_DelayWhenStreamSinkOfT = () => (__t$_DelayWhenStreamSinkOfT = dart.constFn(delay_when._DelayWhenStreamSink$(T)))();
    var __t$VoidTo_DelayWhenStreamSinkOfT = () => (__t$VoidTo_DelayWhenStreamSinkOfT = dart.constFn(dart.fnType(__t$_DelayWhenStreamSinkOfT(), [])))();
    class DelayWhenStreamTransformer extends async.StreamTransformerBase$(T, T) {
      get itemDelaySelector() {
        return this[S$1.itemDelaySelector];
      }
      set itemDelaySelector(value) {
        super.itemDelaySelector = value;
      }
      get listenDelay() {
        return this[S$1.listenDelay];
      }
      set listenDelay(value) {
        super.listenDelay = value;
      }
      static ['_#new#tearOff'](T, itemDelaySelector, opts$) {
        let listenDelay = opts$ && 'listenDelay' in opts$ ? opts$.listenDelay : null;
        return new (delay_when.DelayWhenStreamTransformer$(T)).new(itemDelaySelector, {listenDelay: listenDelay});
      }
      bind(stream) {
        __t$StreamOfT().as(stream);
        return forwarding_stream.forwardStream(T, T, stream, dart.fn(() => new (__t$_DelayWhenStreamSinkOfT()).new(this.itemDelaySelector, this.listenDelay), __t$VoidTo_DelayWhenStreamSinkOfT()));
      }
    }
    (DelayWhenStreamTransformer.new = function(itemDelaySelector, opts$) {
      let listenDelay = opts$ && 'listenDelay' in opts$ ? opts$.listenDelay : null;
      this[S$1.itemDelaySelector] = itemDelaySelector;
      this[S$1.listenDelay] = listenDelay;
      DelayWhenStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = DelayWhenStreamTransformer.prototype;
    dart.addTypeTests(DelayWhenStreamTransformer);
    DelayWhenStreamTransformer.prototype[_is_DelayWhenStreamTransformer_default] = true;
    dart.addTypeCaches(DelayWhenStreamTransformer);
    dart.setMethodSignature(DelayWhenStreamTransformer, () => ({
      __proto__: dart.getMethods(DelayWhenStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DelayWhenStreamTransformer, I[233]);
    dart.setFieldSignature(DelayWhenStreamTransformer, () => ({
      __proto__: dart.getFields(DelayWhenStreamTransformer.__proto__),
      itemDelaySelector: dart.finalFieldType(dart.fnType(async.Stream$(dart.void), [T])),
      listenDelay: dart.finalFieldType(dart.nullable(async.Stream$(dart.void)))
    }));
    return DelayWhenStreamTransformer;
  });
  delay_when.DelayWhenStreamTransformer = delay_when.DelayWhenStreamTransformer$();
  dart.addTypeTests(delay_when.DelayWhenStreamTransformer, _is_DelayWhenStreamTransformer_default);
  delay_when['DelayWhenExtension|delayWhen'] = function DelayWhenExtension$124delayWhen(T, $this, itemDelaySelector, opts$) {
    let listenDelay = opts$ && 'listenDelay' in opts$ ? opts$.listenDelay : null;
    return new (delay_when.DelayWhenStreamTransformer$(T)).new(itemDelaySelector, {listenDelay: listenDelay}).bind($this);
  };
  delay_when['DelayWhenExtension|get#delayWhen'] = function DelayWhenExtension$124get$35delayWhen(T, $this) {
    return dart.fn((itemDelaySelector, opts$) => {
      let listenDelay = opts$ && 'listenDelay' in opts$ ? opts$.listenDelay : null;
      return delay_when['DelayWhenExtension|delayWhen'](T, $this, itemDelaySelector, {listenDelay: listenDelay});
    }, dart.fnType(async.Stream$(T), [dart.fnType(T$.StreamOfvoid(), [T])], {listenDelay: T$.StreamNOfvoid()}, {}));
  };
  const _is__DematerializeStreamSink_default = Symbol('_is__DematerializeStreamSink_default');
  dematerialize._DematerializeStreamSink$ = dart.generic(S => {
    var __t$NotificationOfS = () => (__t$NotificationOfS = dart.constFn(notification.Notification$(S)))();
    class _DematerializeStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink) {
        return new (dematerialize._DematerializeStreamSink$(S)).new(_outputSink);
      }
      add(data) {
        __t$NotificationOfS().as(data);
        if (data.isOnData) {
          this[S$1._outputSink$1].add(data.requireData);
        } else if (data.isOnDone) {
          this[S$1._outputSink$1].close();
        } else if (data.isOnError) {
          let errorAndStackTrace = dart.nullCheck(data.errorAndStackTrace);
          this[S$1._outputSink$1].addError(errorAndStackTrace.error, errorAndStackTrace.stackTrace);
        }
      }
      addError(e, st = null) {
        return this[S$1._outputSink$1].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$1].close();
      }
    }
    (_DematerializeStreamSink.new = function(_outputSink) {
      this[S$1._outputSink$1] = _outputSink;
      ;
    }).prototype = _DematerializeStreamSink.prototype;
    dart.addTypeTests(_DematerializeStreamSink);
    _DematerializeStreamSink.prototype[_is__DematerializeStreamSink_default] = true;
    dart.addTypeCaches(_DematerializeStreamSink);
    _DematerializeStreamSink[dart.implements] = () => [async.EventSink$(notification.Notification$(S))];
    dart.setMethodSignature(_DematerializeStreamSink, () => ({
      __proto__: dart.getMethods(_DematerializeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DematerializeStreamSink, I[234]);
    dart.setFieldSignature(_DematerializeStreamSink, () => ({
      __proto__: dart.getFields(_DematerializeStreamSink.__proto__),
      [S$1._outputSink$1]: dart.finalFieldType(async.EventSink$(S))
    }));
    return _DematerializeStreamSink;
  });
  dematerialize._DematerializeStreamSink = dematerialize._DematerializeStreamSink$();
  dart.addTypeTests(dematerialize._DematerializeStreamSink, _is__DematerializeStreamSink_default);
  const _is_Notification_default = Symbol('_is_Notification_default');
  notification.Notification$ = dart.generic(T => {
    class Notification extends core.Object {
      get kind() {
        return this[S$1.kind];
      }
      set kind(value) {
        super.kind = value;
      }
      get [S$1._value$2]() {
        return this[S$1._value$1];
      }
      set [S$1._value$2](value) {
        super[S$1._value$2] = value;
      }
      get errorAndStackTrace() {
        return this[S$1.errorAndStackTrace];
      }
      set errorAndStackTrace(value) {
        super.errorAndStackTrace = value;
      }
      static ['_#new#tearOff'](T, kind, _value, errorAndStackTrace) {
        return new (notification.Notification$(T)).new(kind, _value, errorAndStackTrace);
      }
      static onData(value) {
        return new (notification.Notification$(T)).new(notification.Kind.onData, value, null);
      }
      static ['_#onData#tearOff'](T, value) {
        return notification.Notification$(T).onData(value);
      }
      static onDone() {
        return C[388] || CT.C388;
      }
      static ['_#onDone#tearOff'](T) {
        return notification.Notification$(T).onDone();
      }
      static onError(error, stackTrace) {
        return new (notification.Notification$(T)).new(notification.Kind.onError, empty.EMPTY, new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace));
      }
      static ['_#onError#tearOff'](T, error, stackTrace) {
        return notification.Notification$(T).onError(error, stackTrace);
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || notification.Notification.is(other) && this[S$0.$runtimeType]._equals(other[S$0.$runtimeType]) && this.kind === other.kind && dart.equals(this[S$1._value$2], other[S$1._value$2]) && dart.equals(this.errorAndStackTrace, other.errorAndStackTrace);
      }
      get hashCode() {
        return (this.kind[S$.$hashCode] ^ dart.hashCode(this[S$1._value$2]) ^ dart.hashCode(this.errorAndStackTrace)) >>> 0;
      }
      toString() {
        return "Notification{kind: " + dart.str(this.kind) + ", value: " + dart.str(this[S$1._value$2]) + ", errorAndStackTrace: " + dart.str(this.errorAndStackTrace) + "}";
      }
      get isOnData() {
        return this.kind === notification.Kind.onData;
      }
      get isOnDone() {
        return this.kind === notification.Kind.onDone;
      }
      get isOnError() {
        return this.kind === notification.Kind.onError;
      }
      get requireData() {
        return empty.isNotEmpty(this[S$1._value$2]) ? T.as(this[S$1._value$2]) : dart.throw(new core.StateError.new("This notification has no data value, because its kind is " + dart.str(this.kind)));
      }
    }
    (Notification.new = function(kind, _value, errorAndStackTrace) {
      this[S$1.kind] = kind;
      this[S$1._value$1] = _value;
      this[S$1.errorAndStackTrace] = errorAndStackTrace;
      ;
    }).prototype = Notification.prototype;
    dart.addTypeTests(Notification);
    Notification.prototype[_is_Notification_default] = true;
    dart.addTypeCaches(Notification);
    dart.setStaticMethodSignature(Notification, () => ['onData', 'onDone', 'onError']);
    dart.setGetterSignature(Notification, () => ({
      __proto__: dart.getGetters(Notification.__proto__),
      isOnData: core.bool,
      isOnDone: core.bool,
      isOnError: core.bool,
      requireData: T
    }));
    dart.setLibraryUri(Notification, I[235]);
    dart.setFieldSignature(Notification, () => ({
      __proto__: dart.getFields(Notification.__proto__),
      kind: dart.finalFieldType(notification.Kind),
      [S$1._value$2]: dart.finalFieldType(dart.nullable(core.Object)),
      errorAndStackTrace: dart.finalFieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    dart.defineExtensionMethods(Notification, ['_equals', 'toString']);
    dart.defineExtensionAccessors(Notification, ['hashCode']);
    return Notification;
  });
  notification.Notification = notification.Notification$();
  dart.addTypeTests(notification.Notification, _is_Notification_default);
  const _is_DematerializeStreamTransformer_default = Symbol('_is_DematerializeStreamTransformer_default');
  dematerialize.DematerializeStreamTransformer$ = dart.generic(S => {
    var __t$NotificationOfS = () => (__t$NotificationOfS = dart.constFn(notification.Notification$(S)))();
    var __t$StreamOfNotificationOfS = () => (__t$StreamOfNotificationOfS = dart.constFn(async.Stream$(__t$NotificationOfS())))();
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_DematerializeStreamSinkOfS = () => (__t$_DematerializeStreamSinkOfS = dart.constFn(dematerialize._DematerializeStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_DematerializeStreamSinkOfS = () => (__t$EventSinkOfSTo_DematerializeStreamSinkOfS = dart.constFn(dart.fnType(__t$_DematerializeStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class DematerializeStreamTransformer extends async.StreamTransformerBase$(notification.Notification$(S), S) {
      static ['_#new#tearOff'](S) {
        return new (dematerialize.DematerializeStreamTransformer$(S)).new();
      }
      bind(stream) {
        __t$StreamOfNotificationOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_DematerializeStreamSinkOfS()).new(sink), __t$EventSinkOfSTo_DematerializeStreamSinkOfS()));
      }
    }
    (DematerializeStreamTransformer.new = function() {
      DematerializeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = DematerializeStreamTransformer.prototype;
    dart.addTypeTests(DematerializeStreamTransformer);
    DematerializeStreamTransformer.prototype[_is_DematerializeStreamTransformer_default] = true;
    dart.addTypeCaches(DematerializeStreamTransformer);
    dart.setMethodSignature(DematerializeStreamTransformer, () => ({
      __proto__: dart.getMethods(DematerializeStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DematerializeStreamTransformer, I[234]);
    return DematerializeStreamTransformer;
  });
  dematerialize.DematerializeStreamTransformer = dematerialize.DematerializeStreamTransformer$();
  dart.addTypeTests(dematerialize.DematerializeStreamTransformer, _is_DematerializeStreamTransformer_default);
  dematerialize['DematerializeExtension|dematerialize'] = function DematerializeExtension$124dematerialize(T, $this) {
    return new (dematerialize.DematerializeStreamTransformer$(T)).new().bind($this);
  };
  dematerialize['DematerializeExtension|get#dematerialize'] = function DematerializeExtension$124get$35dematerialize(T, $this) {
    return dart.fn(() => dematerialize['DematerializeExtension|dematerialize'](T, $this), dart.fnType(async.Stream$(T), []));
  };
  const _is__DistinctUniqueStreamSink_default = Symbol('_is__DistinctUniqueStreamSink_default');
  distinct_unique._DistinctUniqueStreamSink$ = dart.generic(S => {
    var __t$HashSetOfS = () => (__t$HashSetOfS = dart.constFn(collection.HashSet$(S)))();
    class _DistinctUniqueStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink, opts$) {
        let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
        let hashCodeMethod = opts$ && 'hashCodeMethod' in opts$ ? opts$.hashCodeMethod : null;
        return new (distinct_unique._DistinctUniqueStreamSink$(S)).new(_outputSink, {equals: equals, hashCodeMethod: hashCodeMethod});
      }
      add(data) {
        S.as(data);
        if (this[S$1._collection].add(data)) {
          this[S$1._outputSink$2].add(data);
        }
      }
      addError(e, st = null) {
        return this[S$1._outputSink$2].addError(e, st);
      }
      close() {
        this[S$1._collection].clear();
        this[S$1._outputSink$2].close();
      }
    }
    (_DistinctUniqueStreamSink.new = function(_outputSink, opts$) {
      let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
      let hashCodeMethod = opts$ && 'hashCodeMethod' in opts$ ? opts$.hashCodeMethod : null;
      this[S$1._outputSink$2] = _outputSink;
      this[S$1._collection] = __t$HashSetOfS().new({equals: equals, hashCode: hashCodeMethod});
      ;
    }).prototype = _DistinctUniqueStreamSink.prototype;
    dart.addTypeTests(_DistinctUniqueStreamSink);
    _DistinctUniqueStreamSink.prototype[_is__DistinctUniqueStreamSink_default] = true;
    dart.addTypeCaches(_DistinctUniqueStreamSink);
    _DistinctUniqueStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_DistinctUniqueStreamSink, () => ({
      __proto__: dart.getMethods(_DistinctUniqueStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DistinctUniqueStreamSink, I[236]);
    dart.setFieldSignature(_DistinctUniqueStreamSink, () => ({
      __proto__: dart.getFields(_DistinctUniqueStreamSink.__proto__),
      [S$1._outputSink$2]: dart.finalFieldType(async.EventSink$(S)),
      [S$1._collection]: dart.finalFieldType(collection.HashSet$(S))
    }));
    return _DistinctUniqueStreamSink;
  });
  distinct_unique._DistinctUniqueStreamSink = distinct_unique._DistinctUniqueStreamSink$();
  dart.addTypeTests(distinct_unique._DistinctUniqueStreamSink, _is__DistinctUniqueStreamSink_default);
  const _is_DistinctUniqueStreamTransformer_default = Symbol('_is_DistinctUniqueStreamTransformer_default');
  distinct_unique.DistinctUniqueStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_DistinctUniqueStreamSinkOfS = () => (__t$_DistinctUniqueStreamSinkOfS = dart.constFn(distinct_unique._DistinctUniqueStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_DistinctUniqueStreamSinkOfS = () => (__t$EventSinkOfSTo_DistinctUniqueStreamSinkOfS = dart.constFn(dart.fnType(__t$_DistinctUniqueStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class DistinctUniqueStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get equals() {
        return this[S$1.equals];
      }
      set equals(value) {
        super.equals = value;
      }
      get hashCodeMethod() {
        return this[S$1.hashCodeMethod];
      }
      set hashCodeMethod(value) {
        super.hashCodeMethod = value;
      }
      static ['_#new#tearOff'](S, opts$) {
        let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
        let hashCodeMethod = opts$ && 'hashCodeMethod' in opts$ ? opts$.hashCodeMethod : null;
        return new (distinct_unique.DistinctUniqueStreamTransformer$(S)).new({equals: equals, hashCodeMethod: hashCodeMethod});
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_DistinctUniqueStreamSinkOfS()).new(sink, {equals: this.equals, hashCodeMethod: this.hashCodeMethod}), __t$EventSinkOfSTo_DistinctUniqueStreamSinkOfS()));
      }
    }
    (DistinctUniqueStreamTransformer.new = function(opts$) {
      let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
      let hashCodeMethod = opts$ && 'hashCodeMethod' in opts$ ? opts$.hashCodeMethod : null;
      this[S$1.equals] = equals;
      this[S$1.hashCodeMethod] = hashCodeMethod;
      DistinctUniqueStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = DistinctUniqueStreamTransformer.prototype;
    dart.addTypeTests(DistinctUniqueStreamTransformer);
    DistinctUniqueStreamTransformer.prototype[_is_DistinctUniqueStreamTransformer_default] = true;
    dart.addTypeCaches(DistinctUniqueStreamTransformer);
    dart.setMethodSignature(DistinctUniqueStreamTransformer, () => ({
      __proto__: dart.getMethods(DistinctUniqueStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DistinctUniqueStreamTransformer, I[236]);
    dart.setFieldSignature(DistinctUniqueStreamTransformer, () => ({
      __proto__: dart.getFields(DistinctUniqueStreamTransformer.__proto__),
      equals: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [S, S]))),
      hashCodeMethod: dart.finalFieldType(dart.nullable(dart.fnType(core.int, [S])))
    }));
    return DistinctUniqueStreamTransformer;
  });
  distinct_unique.DistinctUniqueStreamTransformer = distinct_unique.DistinctUniqueStreamTransformer$();
  dart.addTypeTests(distinct_unique.DistinctUniqueStreamTransformer, _is_DistinctUniqueStreamTransformer_default);
  distinct_unique['DistinctUniqueExtension|distinctUnique'] = function DistinctUniqueExtension$124distinctUnique(T, $this, opts$) {
    let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
    let hashCode = opts$ && 'hashCode' in opts$ ? opts$.hashCode : null;
    return new (distinct_unique.DistinctUniqueStreamTransformer$(T)).new({equals: equals, hashCodeMethod: hashCode}).bind($this);
  };
  distinct_unique['DistinctUniqueExtension|get#distinctUnique'] = function DistinctUniqueExtension$124get$35distinctUnique(T, $this) {
    return dart.fn(opts$ => {
      let equals = opts$ && 'equals' in opts$ ? opts$.equals : null;
      let hashCode = opts$ && 'hashCode' in opts$ ? opts$.hashCode : null;
      return distinct_unique['DistinctUniqueExtension|distinctUnique'](T, $this, {equals: equals, hashCode: hashCode});
    }, dart.fnType(async.Stream$(T), [], {equals: dart.nullable(dart.fnType(core.bool, [T, T])), hashCode: dart.nullable(dart.fnType(core.int, [T]))}, {}));
  };
  const _is__DoStreamSink_default = Symbol('_is__DoStreamSink_default');
  $do._DoStreamSink$ = dart.generic(S => {
    var __t$NotificationOfS = () => (__t$NotificationOfS = dart.constFn(notification.Notification$(S)))();
    class _DoStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _onCancel, _onData, _onDone, _onEach, _onError, _onListen, _onPause, _onResume) {
        return new ($do._DoStreamSink$(S)).new(_onCancel, _onData, _onDone, _onEach, _onError, _onListen, _onPause, _onResume);
      }
      onData(data) {
        let t390, t391;
        S.as(data);
        try {
          t390 = this[S$1._onData];
          t390 == null ? null : t390(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$;
        }
        try {
          t391 = this[S$1._onEach];
          t391 == null ? null : t391(__t$NotificationOfS().onData(data));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$0;
        }
        this.sink.add(data);
      }
      onError(e, st) {
        let t392, t393;
        try {
          t392 = this[S$1._onError];
          t392 == null ? null : t392(e, st);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$;
        }
        try {
          t393 = this[S$1._onEach];
          t393 == null ? null : t393(__t$NotificationOfS().onError(e, st));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$0;
        }
        this.sink.addError(e, st);
      }
      onDone() {
        let t394, t395;
        try {
          t394 = this[S$1._onDone];
          t394 == null ? null : t394();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$;
        }
        try {
          t395 = this[S$1._onEach];
          t395 == null ? null : t395(__t$NotificationOfS().onDone());
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$0;
        }
        this.sink.close();
      }
      onCancel() {
        let t396;
        t396 = this[S$1._onCancel];
        return t396 == null ? null : t396();
      }
      onListen() {
        let t396;
        try {
          t396 = this[S$1._onListen$1];
          t396 == null ? null : t396();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$;
        }
      }
      onPause() {
        let t397;
        try {
          t397 = this[S$1._onPause$1];
          t397 == null ? null : t397();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$;
        }
      }
      onResume() {
        let t398;
        try {
          t398 = this[S$1._onResume$1];
          t398 == null ? null : t398();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
          } else
            throw e$;
        }
      }
    }
    (_DoStreamSink.new = function(_onCancel, _onData, _onDone, _onEach, _onError, _onListen, _onPause, _onResume) {
      this[S$1._onCancel] = _onCancel;
      this[S$1._onData] = _onData;
      this[S$1._onDone] = _onDone;
      this[S$1._onEach] = _onEach;
      this[S$1._onError] = _onError;
      this[S$1._onListen$1] = _onListen;
      this[S$1._onPause$1] = _onPause;
      this[S$1._onResume$1] = _onResume;
      _DoStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _DoStreamSink.prototype;
    dart.addTypeTests(_DoStreamSink);
    _DoStreamSink.prototype[_is__DoStreamSink_default] = true;
    dart.addTypeCaches(_DoStreamSink);
    dart.setMethodSignature(_DoStreamSink, () => ({
      __proto__: dart.getMethods(_DoStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.dynamic, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DoStreamSink, I[237]);
    dart.setFieldSignature(_DoStreamSink, () => ({
      __proto__: dart.getFields(_DoStreamSink.__proto__),
      [S$1._onCancel]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$1._onData]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [S]))),
      [S$1._onDone]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$1._onEach]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [notification.Notification$(S)]))),
      [S$1._onError]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))),
      [S$1._onListen$1]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$1._onPause$1]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$1._onResume$1]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _DoStreamSink;
  });
  $do._DoStreamSink = $do._DoStreamSink$();
  dart.addTypeTests($do._DoStreamSink, _is__DoStreamSink_default);
  const _is_DoStreamTransformer_default = Symbol('_is_DoStreamTransformer_default');
  $do.DoStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_DoStreamSinkOfS = () => (__t$_DoStreamSinkOfS = dart.constFn($do._DoStreamSink$(S)))();
    var __t$VoidTo_DoStreamSinkOfS = () => (__t$VoidTo_DoStreamSinkOfS = dart.constFn(dart.fnType(__t$_DoStreamSinkOfS(), [])))();
    class DoStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get onCancel() {
        return this[S$1.onCancel];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      get onData() {
        return this[S$1.onData];
      }
      set onData(value) {
        super.onData = value;
      }
      get onDone() {
        return this[S$1.onDone];
      }
      set onDone(value) {
        super.onDone = value;
      }
      get onEach() {
        return this[S$1.onEach];
      }
      set onEach(value) {
        super.onEach = value;
      }
      get onError() {
        return this[S$1.onError];
      }
      set onError(value) {
        super.onError = value;
      }
      get onListen() {
        return this[S$1.onListen];
      }
      set onListen(value) {
        super.onListen = value;
      }
      get onPause() {
        return this[S$1.onPause];
      }
      set onPause(value) {
        super.onPause = value;
      }
      get onResume() {
        return this[S$1.onResume];
      }
      set onResume(value) {
        super.onResume = value;
      }
      static ['_#new#tearOff'](S, opts$) {
        let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
        let onData = opts$ && 'onData' in opts$ ? opts$.onData : null;
        let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
        let onEach = opts$ && 'onEach' in opts$ ? opts$.onEach : null;
        let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
        let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
        let onPause = opts$ && 'onPause' in opts$ ? opts$.onPause : null;
        let onResume = opts$ && 'onResume' in opts$ ? opts$.onResume : null;
        return new ($do.DoStreamTransformer$(S)).new({onCancel: onCancel, onData: onData, onDone: onDone, onEach: onEach, onError: onError, onListen: onListen, onPause: onPause, onResume: onResume});
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_DoStreamSinkOfS()).new(this.onCancel, this.onData, this.onDone, this.onEach, this.onError, this.onListen, this.onPause, this.onResume), __t$VoidTo_DoStreamSinkOfS()), true);
      }
    }
    (DoStreamTransformer.new = function(opts$) {
      let onCancel = opts$ && 'onCancel' in opts$ ? opts$.onCancel : null;
      let onData = opts$ && 'onData' in opts$ ? opts$.onData : null;
      let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
      let onEach = opts$ && 'onEach' in opts$ ? opts$.onEach : null;
      let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
      let onListen = opts$ && 'onListen' in opts$ ? opts$.onListen : null;
      let onPause = opts$ && 'onPause' in opts$ ? opts$.onPause : null;
      let onResume = opts$ && 'onResume' in opts$ ? opts$.onResume : null;
      this[S$1.onCancel] = onCancel;
      this[S$1.onData] = onData;
      this[S$1.onDone] = onDone;
      this[S$1.onEach] = onEach;
      this[S$1.onError] = onError;
      this[S$1.onListen] = onListen;
      this[S$1.onPause] = onPause;
      this[S$1.onResume] = onResume;
      DoStreamTransformer.__proto__.new.call(this);
      if (this.onCancel == null && this.onData == null && this.onDone == null && this.onEach == null && this.onError == null && this.onListen == null && this.onPause == null && this.onResume == null) {
        dart.throw(new core.ArgumentError.new("Must provide at least one handler"));
      }
    }).prototype = DoStreamTransformer.prototype;
    dart.addTypeTests(DoStreamTransformer);
    DoStreamTransformer.prototype[_is_DoStreamTransformer_default] = true;
    dart.addTypeCaches(DoStreamTransformer);
    dart.setMethodSignature(DoStreamTransformer, () => ({
      __proto__: dart.getMethods(DoStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DoStreamTransformer, I[237]);
    dart.setFieldSignature(DoStreamTransformer, () => ({
      __proto__: dart.getFields(DoStreamTransformer.__proto__),
      onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onData: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [S]))),
      onDone: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onEach: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [notification.Notification$(S)]))),
      onError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))),
      onListen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onPause: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onResume: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return DoStreamTransformer;
  });
  $do.DoStreamTransformer = $do.DoStreamTransformer$();
  dart.addTypeTests($do.DoStreamTransformer, _is_DoStreamTransformer_default);
  $do['DoExtensions|doOnCancel'] = function DoExtensions$124doOnCancel(T, $this, onCancel) {
    return new ($do.DoStreamTransformer$(T)).new({onCancel: onCancel}).bind($this);
  };
  $do['DoExtensions|get#doOnCancel'] = function DoExtensions$124get$35doOnCancel(T, $this) {
    return dart.fn(onCancel => $do['DoExtensions|doOnCancel'](T, $this, onCancel), dart.fnType(async.Stream$(T), [T$.VoidToFutureOrOfvoid()]));
  };
  $do['DoExtensions|doOnData'] = function DoExtensions$124doOnData(T, $this, onData) {
    return new ($do.DoStreamTransformer$(T)).new({onData: onData}).bind($this);
  };
  $do['DoExtensions|get#doOnData'] = function DoExtensions$124get$35doOnData(T, $this) {
    return dart.fn(onData => $do['DoExtensions|doOnData'](T, $this, onData), dart.fnType(async.Stream$(T), [dart.fnType(dart.void, [T])]));
  };
  $do['DoExtensions|doOnDone'] = function DoExtensions$124doOnDone(T, $this, onDone) {
    return new ($do.DoStreamTransformer$(T)).new({onDone: onDone}).bind($this);
  };
  $do['DoExtensions|get#doOnDone'] = function DoExtensions$124get$35doOnDone(T, $this) {
    return dart.fn(onDone => $do['DoExtensions|doOnDone'](T, $this, onDone), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  $do['DoExtensions|doOnEach'] = function DoExtensions$124doOnEach(T, $this, onEach) {
    return new ($do.DoStreamTransformer$(T)).new({onEach: onEach}).bind($this);
  };
  $do['DoExtensions|get#doOnEach'] = function DoExtensions$124get$35doOnEach(T, $this) {
    return dart.fn(onEach => $do['DoExtensions|doOnEach'](T, $this, onEach), dart.fnType(async.Stream$(T), [dart.fnType(dart.void, [notification.Notification$(T)])]));
  };
  $do['DoExtensions|doOnError'] = function DoExtensions$124doOnError(T, $this, onError) {
    return new ($do.DoStreamTransformer$(T)).new({onError: onError}).bind($this);
  };
  $do['DoExtensions|get#doOnError'] = function DoExtensions$124get$35doOnError(T, $this) {
    return dart.fn(onError => $do['DoExtensions|doOnError'](T, $this, onError), dart.fnType(async.Stream$(T), [T$.ObjectAndStackTraceTovoid()]));
  };
  $do['DoExtensions|doOnListen'] = function DoExtensions$124doOnListen(T, $this, onListen) {
    return new ($do.DoStreamTransformer$(T)).new({onListen: onListen}).bind($this);
  };
  $do['DoExtensions|get#doOnListen'] = function DoExtensions$124get$35doOnListen(T, $this) {
    return dart.fn(onListen => $do['DoExtensions|doOnListen'](T, $this, onListen), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  $do['DoExtensions|doOnPause'] = function DoExtensions$124doOnPause(T, $this, onPause) {
    return new ($do.DoStreamTransformer$(T)).new({onPause: onPause}).bind($this);
  };
  $do['DoExtensions|get#doOnPause'] = function DoExtensions$124get$35doOnPause(T, $this) {
    return dart.fn(onPause => $do['DoExtensions|doOnPause'](T, $this, onPause), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  $do['DoExtensions|doOnResume'] = function DoExtensions$124doOnResume(T, $this, onResume) {
    return new ($do.DoStreamTransformer$(T)).new({onResume: onResume}).bind($this);
  };
  $do['DoExtensions|get#doOnResume'] = function DoExtensions$124get$35doOnResume(T, $this) {
    return dart.fn(onResume => $do['DoExtensions|doOnResume'](T, $this, onResume), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  const _is__EndWithStreamSink_default = Symbol('_is__EndWithStreamSink_default');
  end_with._EndWithStreamSink$ = dart.generic(S => {
    class _EndWithStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink, _endValue) {
        return new (end_with._EndWithStreamSink$(S)).new(_outputSink, _endValue);
      }
      add(data) {
        S.as(data);
        return this[S$1._outputSink$3].add(data);
      }
      addError(e, st = null) {
        return this[S$1._outputSink$3].addError(e, st);
      }
      close() {
        this[S$1._outputSink$3].add(this[S$1._endValue]);
        this[S$1._outputSink$3].close();
      }
    }
    (_EndWithStreamSink.new = function(_outputSink, _endValue) {
      this[S$1._outputSink$3] = _outputSink;
      this[S$1._endValue] = _endValue;
      ;
    }).prototype = _EndWithStreamSink.prototype;
    dart.addTypeTests(_EndWithStreamSink);
    _EndWithStreamSink.prototype[_is__EndWithStreamSink_default] = true;
    dart.addTypeCaches(_EndWithStreamSink);
    _EndWithStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_EndWithStreamSink, () => ({
      __proto__: dart.getMethods(_EndWithStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_EndWithStreamSink, I[238]);
    dart.setFieldSignature(_EndWithStreamSink, () => ({
      __proto__: dart.getFields(_EndWithStreamSink.__proto__),
      [S$1._endValue]: dart.finalFieldType(S),
      [S$1._outputSink$3]: dart.finalFieldType(async.EventSink$(S))
    }));
    return _EndWithStreamSink;
  });
  end_with._EndWithStreamSink = end_with._EndWithStreamSink$();
  dart.addTypeTests(end_with._EndWithStreamSink, _is__EndWithStreamSink_default);
  const _is_EndWithStreamTransformer_default = Symbol('_is_EndWithStreamTransformer_default');
  end_with.EndWithStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_EndWithStreamSinkOfS = () => (__t$_EndWithStreamSinkOfS = dart.constFn(end_with._EndWithStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_EndWithStreamSinkOfS = () => (__t$EventSinkOfSTo_EndWithStreamSinkOfS = dart.constFn(dart.fnType(__t$_EndWithStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class EndWithStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get endValue() {
        return this[S$1.endValue];
      }
      set endValue(value) {
        super.endValue = value;
      }
      static ['_#new#tearOff'](S, endValue) {
        return new (end_with.EndWithStreamTransformer$(S)).new(endValue);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_EndWithStreamSinkOfS()).new(sink, this.endValue), __t$EventSinkOfSTo_EndWithStreamSinkOfS()));
      }
    }
    (EndWithStreamTransformer.new = function(endValue) {
      this[S$1.endValue] = endValue;
      EndWithStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = EndWithStreamTransformer.prototype;
    dart.addTypeTests(EndWithStreamTransformer);
    EndWithStreamTransformer.prototype[_is_EndWithStreamTransformer_default] = true;
    dart.addTypeCaches(EndWithStreamTransformer);
    dart.setMethodSignature(EndWithStreamTransformer, () => ({
      __proto__: dart.getMethods(EndWithStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(EndWithStreamTransformer, I[238]);
    dart.setFieldSignature(EndWithStreamTransformer, () => ({
      __proto__: dart.getFields(EndWithStreamTransformer.__proto__),
      endValue: dart.finalFieldType(S)
    }));
    return EndWithStreamTransformer;
  });
  end_with.EndWithStreamTransformer = end_with.EndWithStreamTransformer$();
  dart.addTypeTests(end_with.EndWithStreamTransformer, _is_EndWithStreamTransformer_default);
  end_with['EndWithExtension|endWith'] = function EndWithExtension$124endWith(T, $this, endValue) {
    return new (end_with.EndWithStreamTransformer$(T)).new(endValue).bind($this);
  };
  end_with['EndWithExtension|get#endWith'] = function EndWithExtension$124get$35endWith(T, $this) {
    return dart.fn(endValue => end_with['EndWithExtension|endWith'](T, $this, endValue), dart.fnType(async.Stream$(T), [T]));
  };
  const _is__EndWithManyStreamSink_default = Symbol('_is__EndWithManyStreamSink_default');
  end_with_many._EndWithManyStreamSink$ = dart.generic(S => {
    var __t$STovoid = () => (__t$STovoid = dart.constFn(dart.fnType(dart.void, [S])))();
    class _EndWithManyStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink, _endValues) {
        return new (end_with_many._EndWithManyStreamSink$(S)).new(_outputSink, _endValues);
      }
      add(data) {
        S.as(data);
        return this[S$1._outputSink$4].add(data);
      }
      addError(e, st = null) {
        return this[S$1._outputSink$4].addError(e, st);
      }
      close() {
        this[S$1._endValues][S$.$forEach](__t$STovoid().as(dart.bind(this[S$1._outputSink$4], 'add')));
        this[S$1._outputSink$4].close();
      }
    }
    (_EndWithManyStreamSink.new = function(_outputSink, _endValues) {
      this[S$1._outputSink$4] = _outputSink;
      this[S$1._endValues] = _endValues;
      ;
    }).prototype = _EndWithManyStreamSink.prototype;
    dart.addTypeTests(_EndWithManyStreamSink);
    _EndWithManyStreamSink.prototype[_is__EndWithManyStreamSink_default] = true;
    dart.addTypeCaches(_EndWithManyStreamSink);
    _EndWithManyStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_EndWithManyStreamSink, () => ({
      __proto__: dart.getMethods(_EndWithManyStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_EndWithManyStreamSink, I[239]);
    dart.setFieldSignature(_EndWithManyStreamSink, () => ({
      __proto__: dart.getFields(_EndWithManyStreamSink.__proto__),
      [S$1._endValues]: dart.finalFieldType(core.Iterable$(S)),
      [S$1._outputSink$4]: dart.finalFieldType(async.EventSink$(S))
    }));
    return _EndWithManyStreamSink;
  });
  end_with_many._EndWithManyStreamSink = end_with_many._EndWithManyStreamSink$();
  dart.addTypeTests(end_with_many._EndWithManyStreamSink, _is__EndWithManyStreamSink_default);
  const _is_EndWithManyStreamTransformer_default = Symbol('_is_EndWithManyStreamTransformer_default');
  end_with_many.EndWithManyStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_EndWithManyStreamSinkOfS = () => (__t$_EndWithManyStreamSinkOfS = dart.constFn(end_with_many._EndWithManyStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_EndWithManyStreamSinkOfS = () => (__t$EventSinkOfSTo_EndWithManyStreamSinkOfS = dart.constFn(dart.fnType(__t$_EndWithManyStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class EndWithManyStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get endValues() {
        return this[S$1.endValues];
      }
      set endValues(value) {
        super.endValues = value;
      }
      static ['_#new#tearOff'](S, endValues) {
        return new (end_with_many.EndWithManyStreamTransformer$(S)).new(endValues);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_EndWithManyStreamSinkOfS()).new(sink, this.endValues), __t$EventSinkOfSTo_EndWithManyStreamSinkOfS()));
      }
    }
    (EndWithManyStreamTransformer.new = function(endValues) {
      this[S$1.endValues] = endValues;
      EndWithManyStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = EndWithManyStreamTransformer.prototype;
    dart.addTypeTests(EndWithManyStreamTransformer);
    EndWithManyStreamTransformer.prototype[_is_EndWithManyStreamTransformer_default] = true;
    dart.addTypeCaches(EndWithManyStreamTransformer);
    dart.setMethodSignature(EndWithManyStreamTransformer, () => ({
      __proto__: dart.getMethods(EndWithManyStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(EndWithManyStreamTransformer, I[239]);
    dart.setFieldSignature(EndWithManyStreamTransformer, () => ({
      __proto__: dart.getFields(EndWithManyStreamTransformer.__proto__),
      endValues: dart.finalFieldType(core.Iterable$(S))
    }));
    return EndWithManyStreamTransformer;
  });
  end_with_many.EndWithManyStreamTransformer = end_with_many.EndWithManyStreamTransformer$();
  dart.addTypeTests(end_with_many.EndWithManyStreamTransformer, _is_EndWithManyStreamTransformer_default);
  end_with_many['EndWithManyExtension|endWithMany'] = function EndWithManyExtension$124endWithMany(T, $this, endValues) {
    return new (end_with_many.EndWithManyStreamTransformer$(T)).new(endValues).bind($this);
  };
  end_with_many['EndWithManyExtension|get#endWithMany'] = function EndWithManyExtension$124get$35endWithMany(T, $this) {
    return dart.fn(endValues => end_with_many['EndWithManyExtension|endWithMany'](T, $this, endValues), dart.fnType(async.Stream$(T), [core.Iterable$(T)]));
  };
  const _is__ExhaustMapStreamSink_default = Symbol('_is__ExhaustMapStreamSink_default');
  exhaust_map._ExhaustMapStreamSink$ = dart.generic((S, T) => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class _ExhaustMapStreamSink extends forwarding_sink.ForwardingSink$(S, T) {
      static ['_#new#tearOff'](S, T, _mapper) {
        return new (exhaust_map._ExhaustMapStreamSink$(S, T)).new(_mapper);
      }
      onData(data) {
        let t419;
        S.as(data);
        if (this[S$1._mapperSubscription] != null) {
          return;
        }
        let mappedStream = null;
        try {
          mappedStream = (t419 = data, this[S$1._mapper](t419));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
            return;
          } else
            throw e$;
        }
        this[S$1._mapperSubscription] = mappedStream.listen(__t$TTovoid().as(dart.bind(this.sink, 'add')), {onError: dart.bind(this.sink, 'addError'), onDone: dart.fn(() => {
            this[S$1._mapperSubscription] = null;
            if (this[S$1._inputClosed$1]) {
              this.sink.close();
            }
          }, T$.VoidTovoid())});
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let t420;
        this[S$1._inputClosed$1] = true;
        t420 = this[S$1._mapperSubscription];
        t420 == null ? this.sink.close() : t420;
      }
      onCancel() {
        let t420;
        t420 = this[S$1._mapperSubscription];
        return t420 == null ? null : t420.cancel();
      }
      onListen() {
      }
      onPause() {
        let t420;
        t420 = this[S$1._mapperSubscription];
        return t420 == null ? null : t420.pause();
      }
      onResume() {
        let t420;
        t420 = this[S$1._mapperSubscription];
        return t420 == null ? null : t420.resume();
      }
    }
    (_ExhaustMapStreamSink.new = function(_mapper) {
      this[S$1._mapperSubscription] = null;
      this[S$1._inputClosed$1] = false;
      this[S$1._mapper] = _mapper;
      _ExhaustMapStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _ExhaustMapStreamSink.prototype;
    dart.addTypeTests(_ExhaustMapStreamSink);
    _ExhaustMapStreamSink.prototype[_is__ExhaustMapStreamSink_default] = true;
    dart.addTypeCaches(_ExhaustMapStreamSink);
    dart.setMethodSignature(_ExhaustMapStreamSink, () => ({
      __proto__: dart.getMethods(_ExhaustMapStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.dynamic, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ExhaustMapStreamSink, I[240]);
    dart.setFieldSignature(_ExhaustMapStreamSink, () => ({
      __proto__: dart.getFields(_ExhaustMapStreamSink.__proto__),
      [S$1._mapper]: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      [S$1._mapperSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [S$1._inputClosed$1]: dart.fieldType(core.bool)
    }));
    return _ExhaustMapStreamSink;
  });
  exhaust_map._ExhaustMapStreamSink = exhaust_map._ExhaustMapStreamSink$();
  dart.addTypeTests(exhaust_map._ExhaustMapStreamSink, _is__ExhaustMapStreamSink_default);
  const _is_ExhaustMapStreamTransformer_default = Symbol('_is_ExhaustMapStreamTransformer_default');
  exhaust_map.ExhaustMapStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_ExhaustMapStreamSinkOfS$T = () => (__t$_ExhaustMapStreamSinkOfS$T = dart.constFn(exhaust_map._ExhaustMapStreamSink$(S, T)))();
    var __t$VoidTo_ExhaustMapStreamSinkOfS$T = () => (__t$VoidTo_ExhaustMapStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_ExhaustMapStreamSinkOfS$T(), [])))();
    class ExhaustMapStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get mapper() {
        return this[S$1.mapper];
      }
      set mapper(value) {
        super.mapper = value;
      }
      static ['_#new#tearOff'](S, T, mapper) {
        return new (exhaust_map.ExhaustMapStreamTransformer$(S, T)).new(mapper);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, dart.fn(() => new (__t$_ExhaustMapStreamSinkOfS$T()).new(this.mapper), __t$VoidTo_ExhaustMapStreamSinkOfS$T()));
      }
    }
    (ExhaustMapStreamTransformer.new = function(mapper) {
      this[S$1.mapper] = mapper;
      ExhaustMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = ExhaustMapStreamTransformer.prototype;
    dart.addTypeTests(ExhaustMapStreamTransformer);
    ExhaustMapStreamTransformer.prototype[_is_ExhaustMapStreamTransformer_default] = true;
    dart.addTypeCaches(ExhaustMapStreamTransformer);
    dart.setMethodSignature(ExhaustMapStreamTransformer, () => ({
      __proto__: dart.getMethods(ExhaustMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(ExhaustMapStreamTransformer, I[240]);
    dart.setFieldSignature(ExhaustMapStreamTransformer, () => ({
      __proto__: dart.getFields(ExhaustMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.fnType(async.Stream$(T), [S]))
    }));
    return ExhaustMapStreamTransformer;
  });
  exhaust_map.ExhaustMapStreamTransformer = exhaust_map.ExhaustMapStreamTransformer$();
  dart.addTypeTests(exhaust_map.ExhaustMapStreamTransformer, _is_ExhaustMapStreamTransformer_default);
  exhaust_map['ExhaustMapExtension|exhaustMap'] = function ExhaustMapExtension$124exhaustMap(T, S, $this, mapper) {
    return new (exhaust_map.ExhaustMapStreamTransformer$(T, S)).new(mapper).bind($this);
  };
  exhaust_map['ExhaustMapExtension|get#exhaustMap'] = function ExhaustMapExtension$124get$35exhaustMap(T, $this) {
    return dart.fn((S, mapper) => exhaust_map['ExhaustMapExtension|exhaustMap'](T, S, $this, mapper), dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [__t$StreamOfS(), [dart.fnType(__t$StreamOfS(), [T])]];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  const _is__FlatMapStreamSink_default = Symbol('_is__FlatMapStreamSink_default');
  flat_map._FlatMapStreamSink$ = dart.generic((S, T) => {
    var __t$DoubleLinkedQueueOfS = () => (__t$DoubleLinkedQueueOfS = dart.constFn(collection.DoubleLinkedQueue$(S)))();
    var __t$StreamSubscriptionOfT = () => (__t$StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var __t$JSArrayOfStreamSubscriptionOfT = () => (__t$JSArrayOfStreamSubscriptionOfT = dart.constFn(_interceptors.JSArray$(__t$StreamSubscriptionOfT())))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class _FlatMapStreamSink extends forwarding_sink.ForwardingSink$(S, T) {
      static ['_#new#tearOff'](S, T, _mapper, maxConcurrent) {
        return new (flat_map._FlatMapStreamSink$(S, T)).new(_mapper, maxConcurrent);
      }
      onData(data) {
        S.as(data);
        if (this.maxConcurrent != null && this[S$1._subscriptions$1][S$.$length] >= dart.nullCheck(this.maxConcurrent)) {
          this.queue.addLast(data);
        } else {
          this.listenInner(data);
        }
      }
      listenInner(data) {
        let t422;
        S.as(data);
        let mappedStream = null;
        try {
          mappedStream = (t422 = data, this[S$1._mapper$1](t422));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
            return;
          } else
            throw e$;
        }
        let subscription = mappedStream.listen(__t$TTovoid().as(dart.bind(this.sink, 'add')), {onError: dart.bind(this.sink, 'addError')});
        subscription.onDone(dart.fn(() => {
          this[S$1._subscriptions$1][S$.$remove](subscription);
          if (this.queue[S$.$isNotEmpty]) {
            this.listenInner(this.queue.removeFirst());
          } else if (this[S$1._inputClosed$2] && this[S$1._subscriptions$1][S$.$isEmpty]) {
            this.sink.close();
          }
        }, T$.VoidTovoid()));
        this[S$1._subscriptions$1][S$.$add](subscription);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        this[S$1._inputClosed$2] = true;
        if (this[S$1._subscriptions$1][S$.$isEmpty]) {
          this.sink.close();
        }
      }
      onCancel() {
        this.queue.clear();
        return subscription['StreamSubscriptionsIterableExtension|cancelAll'](this[S$1._subscriptions$1]);
      }
      onListen() {
      }
      onPause() {
        return subscription['StreamSubscriptionsIterableExtensions|pauseAll'](this[S$1._subscriptions$1]);
      }
      onResume() {
        return subscription['StreamSubscriptionsIterableExtensions|resumeAll'](this[S$1._subscriptions$1]);
      }
    }
    (_FlatMapStreamSink.new = function(_mapper, maxConcurrent) {
      this[S$1._subscriptions$1] = __t$JSArrayOfStreamSubscriptionOfT().of([]);
      this.queue = new (__t$DoubleLinkedQueueOfS()).new();
      this[S$1._inputClosed$2] = false;
      this[S$1._mapper$1] = _mapper;
      this.maxConcurrent = maxConcurrent;
      _FlatMapStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _FlatMapStreamSink.prototype;
    dart.addTypeTests(_FlatMapStreamSink);
    _FlatMapStreamSink.prototype[_is__FlatMapStreamSink_default] = true;
    dart.addTypeCaches(_FlatMapStreamSink);
    dart.setMethodSignature(_FlatMapStreamSink, () => ({
      __proto__: dart.getMethods(_FlatMapStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      listenInner: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_FlatMapStreamSink, I[241]);
    dart.setFieldSignature(_FlatMapStreamSink, () => ({
      __proto__: dart.getFields(_FlatMapStreamSink.__proto__),
      [S$1._mapper$1]: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      maxConcurrent: dart.finalFieldType(dart.nullable(core.int)),
      [S$1._subscriptions$1]: dart.finalFieldType(core.List$(async.StreamSubscription$(T))),
      queue: dart.finalFieldType(collection.Queue$(S)),
      [S$1._inputClosed$2]: dart.fieldType(core.bool)
    }));
    return _FlatMapStreamSink;
  });
  flat_map._FlatMapStreamSink = flat_map._FlatMapStreamSink$();
  dart.addTypeTests(flat_map._FlatMapStreamSink, _is__FlatMapStreamSink_default);
  const _is_FlatMapStreamTransformer_default = Symbol('_is_FlatMapStreamTransformer_default');
  flat_map.FlatMapStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_FlatMapStreamSinkOfS$T = () => (__t$_FlatMapStreamSinkOfS$T = dart.constFn(flat_map._FlatMapStreamSink$(S, T)))();
    var __t$VoidTo_FlatMapStreamSinkOfS$T = () => (__t$VoidTo_FlatMapStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_FlatMapStreamSinkOfS$T(), [])))();
    class FlatMapStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get mapper() {
        return this[S$1.mapper$1];
      }
      set mapper(value) {
        super.mapper = value;
      }
      get maxConcurrent() {
        return this[S$1.maxConcurrent];
      }
      set maxConcurrent(value) {
        super.maxConcurrent = value;
      }
      static ['_#new#tearOff'](S, T, mapper, opts$) {
        let maxConcurrent = opts$ && 'maxConcurrent' in opts$ ? opts$.maxConcurrent : null;
        return new (flat_map.FlatMapStreamTransformer$(S, T)).new(mapper, {maxConcurrent: maxConcurrent});
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, dart.fn(() => new (__t$_FlatMapStreamSinkOfS$T()).new(this.mapper, this.maxConcurrent), __t$VoidTo_FlatMapStreamSinkOfS$T()));
      }
    }
    (FlatMapStreamTransformer.new = function(mapper, opts$) {
      let maxConcurrent = opts$ && 'maxConcurrent' in opts$ ? opts$.maxConcurrent : null;
      this[S$1.mapper$1] = mapper;
      this[S$1.maxConcurrent] = maxConcurrent;
      FlatMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = FlatMapStreamTransformer.prototype;
    dart.addTypeTests(FlatMapStreamTransformer);
    FlatMapStreamTransformer.prototype[_is_FlatMapStreamTransformer_default] = true;
    dart.addTypeCaches(FlatMapStreamTransformer);
    dart.setMethodSignature(FlatMapStreamTransformer, () => ({
      __proto__: dart.getMethods(FlatMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(FlatMapStreamTransformer, I[241]);
    dart.setFieldSignature(FlatMapStreamTransformer, () => ({
      __proto__: dart.getFields(FlatMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      maxConcurrent: dart.finalFieldType(dart.nullable(core.int))
    }));
    return FlatMapStreamTransformer;
  });
  flat_map.FlatMapStreamTransformer = flat_map.FlatMapStreamTransformer$();
  dart.addTypeTests(flat_map.FlatMapStreamTransformer, _is_FlatMapStreamTransformer_default);
  flat_map['FlatMapExtension|flatMap'] = function FlatMapExtension$124flatMap(T, S, $this, mapper, opts$) {
    let maxConcurrent = opts$ && 'maxConcurrent' in opts$ ? opts$.maxConcurrent : null;
    return new (flat_map.FlatMapStreamTransformer$(T, S)).new(mapper, {maxConcurrent: maxConcurrent}).bind($this);
  };
  flat_map['FlatMapExtension|get#flatMap'] = function FlatMapExtension$124get$35flatMap(T, $this) {
    return dart.fn((S, mapper, opts$) => {
      let maxConcurrent = opts$ && 'maxConcurrent' in opts$ ? opts$.maxConcurrent : null;
      return flat_map['FlatMapExtension|flatMap'](T, S, $this, mapper, {maxConcurrent: maxConcurrent});
    }, dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [__t$StreamOfS(), [dart.fnType(__t$StreamOfS(), [T])], {maxConcurrent: T$.intN()}, {}];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  flat_map['FlatMapExtension|flatMapIterable'] = function FlatMapExtension$124flatMapIterable(T, S, $this, mapper, opts$) {
    let maxConcurrent = opts$ && 'maxConcurrent' in opts$ ? opts$.maxConcurrent : null;
    return new (flat_map.FlatMapStreamTransformer$(T, core.Iterable$(S))).new(mapper, {maxConcurrent: maxConcurrent}).bind($this).expand(S, dart.fn(iterable => iterable, dart.fnType(core.Iterable$(S), [core.Iterable$(S)])));
  };
  flat_map['FlatMapExtension|get#flatMapIterable'] = function FlatMapExtension$124get$35flatMapIterable(T, $this) {
    return dart.fn((S, mapper, opts$) => {
      let maxConcurrent = opts$ && 'maxConcurrent' in opts$ ? opts$.maxConcurrent : null;
      return flat_map['FlatMapExtension|flatMapIterable'](T, S, $this, mapper, {maxConcurrent: maxConcurrent});
    }, dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      var __t$IterableOfS = () => (__t$IterableOfS = dart.constFn(core.Iterable$(S)))();
      var __t$StreamOfIterableOfS = () => (__t$StreamOfIterableOfS = dart.constFn(async.Stream$(__t$IterableOfS())))();
      return [__t$StreamOfS(), [dart.fnType(__t$StreamOfIterableOfS(), [T])], {maxConcurrent: T$.intN()}, {}];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      var __t$IterableOfS = () => (__t$IterableOfS = dart.constFn(core.Iterable$(S)))();
      var __t$StreamOfIterableOfS = () => (__t$StreamOfIterableOfS = dart.constFn(async.Stream$(__t$IterableOfS())))();
      return [T$.ObjectN()];
    }));
  };
  const _is_GroupedStream_default = Symbol('_is_GroupedStream_default');
  group_by.GroupedStream$ = dart.generic((T, K) => {
    class GroupedStream extends async.StreamView$(T) {
      get key() {
        return this[S$1.key$3];
      }
      set key(value) {
        super.key = value;
      }
      static ['_#new#tearOff'](T, K, key, stream) {
        return new (group_by.GroupedStream$(T, K)).new(key, stream);
      }
      toString() {
        return "GroupedStream{key: " + dart.str(this.key) + "}";
      }
    }
    (GroupedStream.new = function(key, stream) {
      this[S$1.key$3] = key;
      GroupedStream.__proto__.new.call(this, stream);
      ;
    }).prototype = GroupedStream.prototype;
    dart.addTypeTests(GroupedStream);
    GroupedStream.prototype[_is_GroupedStream_default] = true;
    dart.addTypeCaches(GroupedStream);
    dart.setLibraryUri(GroupedStream, I[242]);
    dart.setFieldSignature(GroupedStream, () => ({
      __proto__: dart.getFields(GroupedStream.__proto__),
      key: dart.finalFieldType(K)
    }));
    dart.defineExtensionMethods(GroupedStream, ['toString']);
    return GroupedStream;
  });
  group_by.GroupedStream = group_by.GroupedStream$();
  dart.addTypeTests(group_by.GroupedStream, _is_GroupedStream_default);
  const _is__GroupByStreamSink_default = Symbol('_is__GroupByStreamSink_default');
  group_by._GroupByStreamSink$ = dart.generic((T, K) => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$LinkedMapOfK$StreamControllerOfT = () => (__t$LinkedMapOfK$StreamControllerOfT = dart.constFn(_js_helper.LinkedMap$(K, __t$StreamControllerOfT())))();
    var __t$GroupedStreamOfT$K = () => (__t$GroupedStreamOfT$K = dart.constFn(group_by.GroupedStream$(T, K)))();
    var __t$VoidToStreamControllerOfT = () => (__t$VoidToStreamControllerOfT = dart.constFn(dart.fnType(__t$StreamControllerOfT(), [])))();
    var __t$MapOfK$StreamSubscriptionOfvoid = () => (__t$MapOfK$StreamSubscriptionOfvoid = dart.constFn(core.Map$(K, T$.StreamSubscriptionOfvoid())))();
    var __t$MapNOfK$StreamSubscriptionOfvoid = () => (__t$MapNOfK$StreamSubscriptionOfvoid = dart.constFn(dart.nullable(__t$MapOfK$StreamSubscriptionOfvoid())))();
    var __t$LinkedMapOfK$StreamSubscriptionOfvoid = () => (__t$LinkedMapOfK$StreamSubscriptionOfvoid = dart.constFn(_js_helper.LinkedMap$(K, T$.StreamSubscriptionOfvoid())))();
    class _GroupByStreamSink extends forwarding_sink.ForwardingSink$(T, group_by.GroupedStream$(T, K)) {
      get groups() {
        return this[S$1.groups];
      }
      set groups(value) {
        super.groups = value;
      }
      get subscriptions() {
        return this[S$1.subscriptions];
      }
      set subscriptions(value) {
        this[S$1.subscriptions] = __t$MapNOfK$StreamSubscriptionOfvoid().as(value);
      }
      static ['_#new#tearOff'](T, K, grouper, duration) {
        return new (group_by._GroupByStreamSink$(T, K)).new(grouper, duration);
      }
      [S$1._closeAll]() {
        for (let c of this.groups[S$.$values]) {
          c.close();
        }
        this.groups[S$.$clear]();
      }
      [S$1._controllerBuilder](key) {
        let t428, t427, t427$;
        let groupedController = __t$StreamControllerOfT().broadcast({sync: true});
        let groupByStream = new (__t$GroupedStreamOfT$K()).new(key, groupedController.stream);
        if (this.duration != null) {
          t427 = this.subscriptions;
          t427 == null ? null : (t428 = t427[S$.$remove](key), t428 == null ? null : t428.cancel());
          (t427$ = this.subscriptions, t427$ == null ? this.subscriptions = new (__t$LinkedMapOfK$StreamSubscriptionOfvoid()).new() : t427$)[S$.$_set](key, dart.nullCheck(this.duration)(groupByStream).take(1).listen(null, {onDone: dart.fn(() => {
              let t427;
              dart.nullCheck(this.subscriptions)[S$.$remove](key);
              t427 = this.groups[S$.$remove](key);
              t427 == null ? null : t427.close();
            }, T$.VoidTovoid()), onError: dart.bind(this, 'onError')}));
        }
        this.sink.add(groupByStream);
        return groupedController;
      }
      onData(data) {
        let t427;
        T.as(data);
        let key = null;
        try {
          key = (t427 = data, this.grouper(t427));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
            return;
          } else
            throw e$;
        }
        this.groups[S$0.$putIfAbsent](key, dart.fn(() => this[S$1._controllerBuilder](key), __t$VoidToStreamControllerOfT())).add(data);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        this[S$1._closeAll]();
        this.sink.close();
      }
      onCancel() {
        let t428, t429;
        async.scheduleMicrotask(dart.bind(this, S$1._closeAll));
        if ((t428 = this.subscriptions, t428 == null ? null : t428[S$.$isNotEmpty]) === true) {
          let future = future$.waitFuturesList((() => {
            let t428 = T$.JSArrayOfFutureOfvoid().of([]);
            for (let s of dart.nullCheck(this.subscriptions)[S$.$values])
              t428.push(s.cancel());
            return t428;
          })());
          t429 = this.subscriptions;
          t429 == null ? null : t429[S$.$clear]();
          this.subscriptions = null;
          return future;
        }
        return null;
      }
      onListen() {
      }
      onPause() {
        let t429;
        t429 = this.subscriptions;
        return t429 == null ? null : subscription['StreamSubscriptionsIterableExtensions|pauseAll'](t429[S$.$values]);
      }
      onResume() {
        let t429;
        t429 = this.subscriptions;
        return t429 == null ? null : subscription['StreamSubscriptionsIterableExtensions|resumeAll'](t429[S$.$values]);
      }
    }
    (_GroupByStreamSink.new = function(grouper, duration) {
      this[S$1.groups] = new (__t$LinkedMapOfK$StreamControllerOfT()).new();
      this[S$1.subscriptions] = null;
      this.grouper = grouper;
      this.duration = duration;
      _GroupByStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _GroupByStreamSink.prototype;
    dart.addTypeTests(_GroupByStreamSink);
    _GroupByStreamSink.prototype[_is__GroupByStreamSink_default] = true;
    dart.addTypeCaches(_GroupByStreamSink);
    dart.setMethodSignature(_GroupByStreamSink, () => ({
      __proto__: dart.getMethods(_GroupByStreamSink.__proto__),
      [S$1._closeAll]: dart.fnType(dart.void, []),
      [S$1._controllerBuilder]: dart.fnType(async.StreamController$(T), [K]),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_GroupByStreamSink, I[242]);
    dart.setFieldSignature(_GroupByStreamSink, () => ({
      __proto__: dart.getFields(_GroupByStreamSink.__proto__),
      grouper: dart.finalFieldType(dart.fnType(K, [T])),
      duration: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream$(dart.void), [group_by.GroupedStream$(T, K)]))),
      groups: dart.finalFieldType(core.Map$(K, async.StreamController$(T))),
      subscriptions: dart.fieldType(dart.nullable(core.Map$(K, async.StreamSubscription$(dart.void))))
    }));
    return _GroupByStreamSink;
  });
  group_by._GroupByStreamSink = group_by._GroupByStreamSink$();
  dart.addTypeTests(group_by._GroupByStreamSink, _is__GroupByStreamSink_default);
  const _is_GroupByStreamTransformer_default = Symbol('_is_GroupByStreamTransformer_default');
  group_by.GroupByStreamTransformer$ = dart.generic((T, K) => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$GroupedStreamOfT$K = () => (__t$GroupedStreamOfT$K = dart.constFn(group_by.GroupedStream$(T, K)))();
    var __t$_GroupByStreamSinkOfT$K = () => (__t$_GroupByStreamSinkOfT$K = dart.constFn(group_by._GroupByStreamSink$(T, K)))();
    var __t$VoidTo_GroupByStreamSinkOfT$K = () => (__t$VoidTo_GroupByStreamSinkOfT$K = dart.constFn(dart.fnType(__t$_GroupByStreamSinkOfT$K(), [])))();
    class GroupByStreamTransformer extends async.StreamTransformerBase$(T, group_by.GroupedStream$(T, K)) {
      get grouper() {
        return this[S$1.grouper];
      }
      set grouper(value) {
        super.grouper = value;
      }
      get durationSelector() {
        return this[S$1.durationSelector];
      }
      set durationSelector(value) {
        super.durationSelector = value;
      }
      static ['_#new#tearOff'](T, K, grouper, opts$) {
        let durationSelector = opts$ && 'durationSelector' in opts$ ? opts$.durationSelector : null;
        return new (group_by.GroupByStreamTransformer$(T, K)).new(grouper, {durationSelector: durationSelector});
      }
      bind(stream) {
        __t$StreamOfT().as(stream);
        return forwarding_stream.forwardStream(T, __t$GroupedStreamOfT$K(), stream, dart.fn(() => new (__t$_GroupByStreamSinkOfT$K()).new(this.grouper, this.durationSelector), __t$VoidTo_GroupByStreamSinkOfT$K()));
      }
    }
    (GroupByStreamTransformer.new = function(grouper, opts$) {
      let durationSelector = opts$ && 'durationSelector' in opts$ ? opts$.durationSelector : null;
      this[S$1.grouper] = grouper;
      this[S$1.durationSelector] = durationSelector;
      GroupByStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = GroupByStreamTransformer.prototype;
    dart.addTypeTests(GroupByStreamTransformer);
    GroupByStreamTransformer.prototype[_is_GroupByStreamTransformer_default] = true;
    dart.addTypeCaches(GroupByStreamTransformer);
    dart.setMethodSignature(GroupByStreamTransformer, () => ({
      __proto__: dart.getMethods(GroupByStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(group_by.GroupedStream$(T, K)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(GroupByStreamTransformer, I[242]);
    dart.setFieldSignature(GroupByStreamTransformer, () => ({
      __proto__: dart.getFields(GroupByStreamTransformer.__proto__),
      grouper: dart.finalFieldType(dart.fnType(K, [T])),
      durationSelector: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream$(dart.void), [group_by.GroupedStream$(T, K)])))
    }));
    return GroupByStreamTransformer;
  });
  group_by.GroupByStreamTransformer = group_by.GroupByStreamTransformer$();
  dart.addTypeTests(group_by.GroupByStreamTransformer, _is_GroupByStreamTransformer_default);
  group_by['GroupByExtension|groupBy'] = function GroupByExtension$124groupBy(T, K, $this, grouper, opts$) {
    let durationSelector = opts$ && 'durationSelector' in opts$ ? opts$.durationSelector : null;
    return new (group_by.GroupByStreamTransformer$(T, K)).new(grouper, {durationSelector: durationSelector}).bind($this);
  };
  group_by['GroupByExtension|get#groupBy'] = function GroupByExtension$124get$35groupBy(T, $this) {
    return dart.fn((K, grouper, opts$) => {
      let durationSelector = opts$ && 'durationSelector' in opts$ ? opts$.durationSelector : null;
      return group_by['GroupByExtension|groupBy'](T, K, $this, grouper, {durationSelector: durationSelector});
    }, dart.gFnType(K => [async.Stream$(group_by.GroupedStream$(T, K)), [dart.fnType(K, [T])], {durationSelector: dart.nullable(dart.fnType(T$.StreamOfvoid(), [group_by.GroupedStream$(T, K)]))}, {}], K => [T$.ObjectN()]));
  };
  const _is__IgnoreElementsStreamSink_default = Symbol('_is__IgnoreElementsStreamSink_default');
  ignore_elements._IgnoreElementsStreamSink$ = dart.generic(S => {
    class _IgnoreElementsStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink) {
        return new (ignore_elements._IgnoreElementsStreamSink$(S)).new(_outputSink);
      }
      add(data) {
        S.as(data);
      }
      addError(e, st = null) {
        return this[S$1._outputSink$5].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$5].close();
      }
    }
    (_IgnoreElementsStreamSink.new = function(_outputSink) {
      this[S$1._outputSink$5] = _outputSink;
      ;
    }).prototype = _IgnoreElementsStreamSink.prototype;
    dart.addTypeTests(_IgnoreElementsStreamSink);
    _IgnoreElementsStreamSink.prototype[_is__IgnoreElementsStreamSink_default] = true;
    dart.addTypeCaches(_IgnoreElementsStreamSink);
    _IgnoreElementsStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_IgnoreElementsStreamSink, () => ({
      __proto__: dart.getMethods(_IgnoreElementsStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_IgnoreElementsStreamSink, I[243]);
    dart.setFieldSignature(_IgnoreElementsStreamSink, () => ({
      __proto__: dart.getFields(_IgnoreElementsStreamSink.__proto__),
      [S$1._outputSink$5]: dart.finalFieldType(async.EventSink$(dart.Never))
    }));
    return _IgnoreElementsStreamSink;
  });
  ignore_elements._IgnoreElementsStreamSink = ignore_elements._IgnoreElementsStreamSink$();
  dart.addTypeTests(ignore_elements._IgnoreElementsStreamSink, _is__IgnoreElementsStreamSink_default);
  const _is_IgnoreElementsStreamTransformer_default = Symbol('_is_IgnoreElementsStreamTransformer_default');
  ignore_elements.IgnoreElementsStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_IgnoreElementsStreamSinkOfS = () => (__t$_IgnoreElementsStreamSinkOfS = dart.constFn(ignore_elements._IgnoreElementsStreamSink$(S)))();
    var __t$EventSinkOfNeverTo_IgnoreElementsStreamSinkOfS = () => (__t$EventSinkOfNeverTo_IgnoreElementsStreamSinkOfS = dart.constFn(dart.fnType(__t$_IgnoreElementsStreamSinkOfS(), [T$.EventSinkOfNever()])))();
    class IgnoreElementsStreamTransformer extends async.StreamTransformerBase$(S, dart.Never) {
      static ['_#new#tearOff'](S) {
        return new (ignore_elements.IgnoreElementsStreamTransformer$(S)).new();
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return T$.StreamOfNever().eventTransformed(stream, dart.fn(sink => new (__t$_IgnoreElementsStreamSinkOfS()).new(sink), __t$EventSinkOfNeverTo_IgnoreElementsStreamSinkOfS()));
      }
    }
    (IgnoreElementsStreamTransformer.new = function() {
      IgnoreElementsStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = IgnoreElementsStreamTransformer.prototype;
    dart.addTypeTests(IgnoreElementsStreamTransformer);
    IgnoreElementsStreamTransformer.prototype[_is_IgnoreElementsStreamTransformer_default] = true;
    dart.addTypeCaches(IgnoreElementsStreamTransformer);
    dart.setMethodSignature(IgnoreElementsStreamTransformer, () => ({
      __proto__: dart.getMethods(IgnoreElementsStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(dart.Never), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(IgnoreElementsStreamTransformer, I[243]);
    return IgnoreElementsStreamTransformer;
  });
  ignore_elements.IgnoreElementsStreamTransformer = ignore_elements.IgnoreElementsStreamTransformer$();
  dart.addTypeTests(ignore_elements.IgnoreElementsStreamTransformer, _is_IgnoreElementsStreamTransformer_default);
  ignore_elements['IgnoreElementsExtension|ignoreElements'] = function IgnoreElementsExtension$124ignoreElements(T, $this) {
    return new (ignore_elements.IgnoreElementsStreamTransformer$(T)).new().bind($this);
  };
  ignore_elements['IgnoreElementsExtension|get#ignoreElements'] = function IgnoreElementsExtension$124get$35ignoreElements(T, $this) {
    return dart.fn(() => ignore_elements['IgnoreElementsExtension|ignoreElements'](T, $this), T$.VoidToStreamOfNever());
  };
  const _is__IntervalStreamSink_default = Symbol('_is__IntervalStreamSink_default');
  interval._IntervalStreamSink$ = dart.generic(S => {
    var __t$ListQueueOfS = () => (__t$ListQueueOfS = dart.constFn(collection.ListQueue$(S)))();
    var __t$FutureOfS = () => (__t$FutureOfS = dart.constFn(async.Future$(S)))();
    var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
    var __t$STovoid = () => (__t$STovoid = dart.constFn(dart.fnType(dart.void, [S])))();
    class _IntervalStreamSink extends core.Object {
      get noOpenIntervals() {
        return this[S$1._openIntervals] === 0;
      }
      static ['_#new#tearOff'](S, _outputSink, _duration) {
        return new (interval._IntervalStreamSink$(S)).new(_outputSink, _duration);
      }
      add(data) {
        S.as(data);
        this[S$1._queue$1].add(data);
        if (this.noOpenIntervals) {
          this[S$1._addNext]();
        }
      }
      addError(e, st = null) {
        return this[S$1._outputSink$6].addError(e, st);
      }
      close() {
        this[S$1._inputClosed$3] = true;
        if (this.noOpenIntervals) {
          this[S$1._outputSink$6].close();
        }
      }
      [S$1._addNext]() {
        if (this[S$1._queue$1][S$.$isNotEmpty]) {
          this[S$1._addDelayed](this[S$1._queue$1].removeFirst()).whenComplete(dart.bind(this, S$1._addNext));
        }
      }
      [S$1._addDelayed](data) {
        this[S$1._openIntervals] = this[S$1._openIntervals] + 1;
        return __t$FutureOfS().delayed(this[S$1._duration$1], dart.fn(() => data, __t$VoidToS())).then(dart.void, __t$STovoid().as(dart.bind(this[S$1._outputSink$6], 'add'))).whenComplete(dart.fn(() => {
          this[S$1._openIntervals] = this[S$1._openIntervals] - 1;
          if (this[S$1._inputClosed$3] && this[S$1._queue$1][S$.$isEmpty]) {
            this[S$1._outputSink$6].close();
          }
        }, T$.VoidToNull()));
      }
    }
    (_IntervalStreamSink.new = function(_outputSink, _duration) {
      this[S$1._queue$1] = new (__t$ListQueueOfS()).new();
      this[S$1._inputClosed$3] = false;
      this[S$1._openIntervals] = 0;
      this[S$1._outputSink$6] = _outputSink;
      this[S$1._duration$1] = _duration;
      ;
    }).prototype = _IntervalStreamSink.prototype;
    dart.addTypeTests(_IntervalStreamSink);
    _IntervalStreamSink.prototype[_is__IntervalStreamSink_default] = true;
    dart.addTypeCaches(_IntervalStreamSink);
    _IntervalStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_IntervalStreamSink, () => ({
      __proto__: dart.getMethods(_IntervalStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, []),
      [S$1._addNext]: dart.fnType(dart.void, []),
      [S$1._addDelayed]: dart.fnType(async.Future$(dart.void), [S])
    }));
    dart.setGetterSignature(_IntervalStreamSink, () => ({
      __proto__: dart.getGetters(_IntervalStreamSink.__proto__),
      noOpenIntervals: core.bool
    }));
    dart.setLibraryUri(_IntervalStreamSink, I[244]);
    dart.setFieldSignature(_IntervalStreamSink, () => ({
      __proto__: dart.getFields(_IntervalStreamSink.__proto__),
      [S$1._duration$1]: dart.finalFieldType(core.Duration),
      [S$1._outputSink$6]: dart.finalFieldType(async.EventSink$(S)),
      [S$1._queue$1]: dart.finalFieldType(collection.Queue$(S)),
      [S$1._inputClosed$3]: dart.fieldType(core.bool),
      [S$1._openIntervals]: dart.fieldType(core.int)
    }));
    return _IntervalStreamSink;
  });
  interval._IntervalStreamSink = interval._IntervalStreamSink$();
  dart.addTypeTests(interval._IntervalStreamSink, _is__IntervalStreamSink_default);
  const _is_IntervalStreamTransformer_default = Symbol('_is_IntervalStreamTransformer_default');
  interval.IntervalStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_IntervalStreamSinkOfS = () => (__t$_IntervalStreamSinkOfS = dart.constFn(interval._IntervalStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_IntervalStreamSinkOfS = () => (__t$EventSinkOfSTo_IntervalStreamSinkOfS = dart.constFn(dart.fnType(__t$_IntervalStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class IntervalStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get duration() {
        return this[S$1.duration$1];
      }
      set duration(value) {
        super.duration = value;
      }
      static ['_#new#tearOff'](S, duration) {
        return new (interval.IntervalStreamTransformer$(S)).new(duration);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_IntervalStreamSinkOfS()).new(sink, this.duration), __t$EventSinkOfSTo_IntervalStreamSinkOfS()));
      }
    }
    (IntervalStreamTransformer.new = function(duration) {
      this[S$1.duration$1] = duration;
      IntervalStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = IntervalStreamTransformer.prototype;
    dart.addTypeTests(IntervalStreamTransformer);
    IntervalStreamTransformer.prototype[_is_IntervalStreamTransformer_default] = true;
    dart.addTypeCaches(IntervalStreamTransformer);
    dart.setMethodSignature(IntervalStreamTransformer, () => ({
      __proto__: dart.getMethods(IntervalStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(IntervalStreamTransformer, I[244]);
    dart.setFieldSignature(IntervalStreamTransformer, () => ({
      __proto__: dart.getFields(IntervalStreamTransformer.__proto__),
      duration: dart.finalFieldType(core.Duration)
    }));
    return IntervalStreamTransformer;
  });
  interval.IntervalStreamTransformer = interval.IntervalStreamTransformer$();
  dart.addTypeTests(interval.IntervalStreamTransformer, _is_IntervalStreamTransformer_default);
  interval['IntervalExtension|interval'] = function IntervalExtension$124interval(T, $this, duration) {
    return new (interval.IntervalStreamTransformer$(T)).new(duration).bind($this);
  };
  interval['IntervalExtension|get#interval'] = function IntervalExtension$124get$35interval(T, $this) {
    return dart.fn(duration => interval['IntervalExtension|interval'](T, $this, duration), dart.fnType(async.Stream$(T), [core.Duration]));
  };
  const _is__MapNotNullSink_default = Symbol('_is__MapNotNullSink_default');
  map_not_null._MapNotNullSink$ = dart.generic((T, R) => {
    class _MapNotNullSink extends core.Object {
      static ['_#new#tearOff'](T, R, _outputSink, _transform) {
        return new (map_not_null._MapNotNullSink$(T, R)).new(_outputSink, _transform);
      }
      add(event) {
        let t435;
        T.as(event);
        let value = (t435 = event, this[S$1._transform](t435));
        if (value != null) {
          this[S$1._outputSink$7].add(value);
        }
      }
      addError(error, stackTrace = null) {
        return this[S$1._outputSink$7].addError(error, stackTrace);
      }
      close() {
        return this[S$1._outputSink$7].close();
      }
    }
    (_MapNotNullSink.new = function(_outputSink, _transform) {
      this[S$1._outputSink$7] = _outputSink;
      this[S$1._transform] = _transform;
      ;
    }).prototype = _MapNotNullSink.prototype;
    dart.addTypeTests(_MapNotNullSink);
    _MapNotNullSink.prototype[_is__MapNotNullSink_default] = true;
    dart.addTypeCaches(_MapNotNullSink);
    _MapNotNullSink[dart.implements] = () => [async.EventSink$(T)];
    dart.setMethodSignature(_MapNotNullSink, () => ({
      __proto__: dart.getMethods(_MapNotNullSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_MapNotNullSink, I[245]);
    dart.setFieldSignature(_MapNotNullSink, () => ({
      __proto__: dart.getFields(_MapNotNullSink.__proto__),
      [S$1._transform]: dart.finalFieldType(dart.fnType(dart.nullable(R), [T])),
      [S$1._outputSink$7]: dart.finalFieldType(async.EventSink$(R))
    }));
    return _MapNotNullSink;
  });
  map_not_null._MapNotNullSink = map_not_null._MapNotNullSink$();
  dart.addTypeTests(map_not_null._MapNotNullSink, _is__MapNotNullSink_default);
  const _is_MapNotNullStreamTransformer_default = Symbol('_is_MapNotNullStreamTransformer_default');
  map_not_null.MapNotNullStreamTransformer$ = dart.generic((T, R) => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$_MapNotNullSinkOfT$R = () => (__t$_MapNotNullSinkOfT$R = dart.constFn(map_not_null._MapNotNullSink$(T, R)))();
    var __t$EventSinkOfRTo_MapNotNullSinkOfT$R = () => (__t$EventSinkOfRTo_MapNotNullSinkOfT$R = dart.constFn(dart.fnType(__t$_MapNotNullSinkOfT$R(), [__t$EventSinkOfR()])))();
    var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
    var __t$EventSinkOfR = () => (__t$EventSinkOfR = dart.constFn(async.EventSink$(R)))();
    class MapNotNullStreamTransformer extends async.StreamTransformerBase$(T, R) {
      get transform() {
        return this[S$1.transform];
      }
      set transform(value) {
        super.transform = value;
      }
      static ['_#new#tearOff'](T, R, transform) {
        return new (map_not_null.MapNotNullStreamTransformer$(T, R)).new(transform);
      }
      bind(stream) {
        __t$StreamOfT().as(stream);
        return __t$StreamOfR().eventTransformed(stream, dart.fn(sink => new (__t$_MapNotNullSinkOfT$R()).new(sink, this.transform), __t$EventSinkOfRTo_MapNotNullSinkOfT$R()));
      }
    }
    (MapNotNullStreamTransformer.new = function(transform) {
      this[S$1.transform] = transform;
      MapNotNullStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = MapNotNullStreamTransformer.prototype;
    dart.addTypeTests(MapNotNullStreamTransformer);
    MapNotNullStreamTransformer.prototype[_is_MapNotNullStreamTransformer_default] = true;
    dart.addTypeCaches(MapNotNullStreamTransformer);
    dart.setMethodSignature(MapNotNullStreamTransformer, () => ({
      __proto__: dart.getMethods(MapNotNullStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(R), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(MapNotNullStreamTransformer, I[245]);
    dart.setFieldSignature(MapNotNullStreamTransformer, () => ({
      __proto__: dart.getFields(MapNotNullStreamTransformer.__proto__),
      transform: dart.finalFieldType(dart.fnType(dart.nullable(R), [T]))
    }));
    return MapNotNullStreamTransformer;
  });
  map_not_null.MapNotNullStreamTransformer = map_not_null.MapNotNullStreamTransformer$();
  dart.addTypeTests(map_not_null.MapNotNullStreamTransformer, _is_MapNotNullStreamTransformer_default);
  map_not_null['MapNotNullExtension|mapNotNull'] = function MapNotNullExtension$124mapNotNull(T, R, $this, transform) {
    return new (map_not_null.MapNotNullStreamTransformer$(T, R)).new(transform).bind($this);
  };
  map_not_null['MapNotNullExtension|get#mapNotNull'] = function MapNotNullExtension$124get$35mapNotNull(T, $this) {
    return dart.fn((R, transform) => map_not_null['MapNotNullExtension|mapNotNull'](T, R, $this, transform), dart.gFnType(R => {
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [__t$StreamOfR(), [dart.fnType(__t$RN(), [T])]];
    }, R => {
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [core.Object];
    }));
  };
  const _is__MapToStreamSink_default = Symbol('_is__MapToStreamSink_default');
  map_to._MapToStreamSink$ = dart.generic((S, T) => {
    class _MapToStreamSink extends core.Object {
      static ['_#new#tearOff'](S, T, _outputSink, _value) {
        return new (map_to._MapToStreamSink$(S, T)).new(_outputSink, _value);
      }
      add(data) {
        S.as(data);
        return this[S$1._outputSink$8].add(this[S$1._value$3]);
      }
      addError(e, st = null) {
        return this[S$1._outputSink$8].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$8].close();
      }
    }
    (_MapToStreamSink.new = function(_outputSink, _value) {
      this[S$1._outputSink$8] = _outputSink;
      this[S$1._value$3] = _value;
      ;
    }).prototype = _MapToStreamSink.prototype;
    dart.addTypeTests(_MapToStreamSink);
    _MapToStreamSink.prototype[_is__MapToStreamSink_default] = true;
    dart.addTypeCaches(_MapToStreamSink);
    _MapToStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_MapToStreamSink, () => ({
      __proto__: dart.getMethods(_MapToStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_MapToStreamSink, I[246]);
    dart.setFieldSignature(_MapToStreamSink, () => ({
      __proto__: dart.getFields(_MapToStreamSink.__proto__),
      [S$1._value$3]: dart.finalFieldType(T),
      [S$1._outputSink$8]: dart.finalFieldType(async.EventSink$(T))
    }));
    return _MapToStreamSink;
  });
  map_to._MapToStreamSink = map_to._MapToStreamSink$();
  dart.addTypeTests(map_to._MapToStreamSink, _is__MapToStreamSink_default);
  const _is_MapToStreamTransformer_default = Symbol('_is_MapToStreamTransformer_default');
  map_to.MapToStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_MapToStreamSinkOfS$T = () => (__t$_MapToStreamSinkOfS$T = dart.constFn(map_to._MapToStreamSink$(S, T)))();
    var __t$EventSinkOfTTo_MapToStreamSinkOfS$T = () => (__t$EventSinkOfTTo_MapToStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_MapToStreamSinkOfS$T(), [__t$EventSinkOfT()])))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$EventSinkOfT = () => (__t$EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class MapToStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get value() {
        return this[S$1.value$3];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](S, T, value) {
        return new (map_to.MapToStreamTransformer$(S, T)).new(value);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfT().eventTransformed(stream, dart.fn(sink => new (__t$_MapToStreamSinkOfS$T()).new(sink, this.value), __t$EventSinkOfTTo_MapToStreamSinkOfS$T()));
      }
    }
    (MapToStreamTransformer.new = function(value) {
      this[S$1.value$3] = value;
      MapToStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = MapToStreamTransformer.prototype;
    dart.addTypeTests(MapToStreamTransformer);
    MapToStreamTransformer.prototype[_is_MapToStreamTransformer_default] = true;
    dart.addTypeCaches(MapToStreamTransformer);
    dart.setMethodSignature(MapToStreamTransformer, () => ({
      __proto__: dart.getMethods(MapToStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(MapToStreamTransformer, I[246]);
    dart.setFieldSignature(MapToStreamTransformer, () => ({
      __proto__: dart.getFields(MapToStreamTransformer.__proto__),
      value: dart.finalFieldType(T)
    }));
    return MapToStreamTransformer;
  });
  map_to.MapToStreamTransformer = map_to.MapToStreamTransformer$();
  dart.addTypeTests(map_to.MapToStreamTransformer, _is_MapToStreamTransformer_default);
  map_to['MapToExtension|mapTo'] = function MapToExtension$124mapTo(S, T, $this, value) {
    return new (map_to.MapToStreamTransformer$(S, T)).new(value).bind($this);
  };
  map_to['MapToExtension|get#mapTo'] = function MapToExtension$124get$35mapTo(S, $this) {
    return dart.fn((T, value) => map_to['MapToExtension|mapTo'](S, T, $this, value), T$0.TToStreamOfT());
  };
  const _is__MaterializeStreamSink_default = Symbol('_is__MaterializeStreamSink_default');
  materialize._MaterializeStreamSink$ = dart.generic(S => {
    var __t$NotificationOfS = () => (__t$NotificationOfS = dart.constFn(notification.Notification$(S)))();
    class _MaterializeStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink) {
        return new (materialize._MaterializeStreamSink$(S)).new(_outputSink);
      }
      add(data) {
        S.as(data);
        return this[S$1._outputSink$9].add(__t$NotificationOfS().onData(data));
      }
      addError(e, st = null) {
        return this[S$1._outputSink$9].add(__t$NotificationOfS().onError(e, st));
      }
      close() {
        this[S$1._outputSink$9].add(__t$NotificationOfS().onDone());
        this[S$1._outputSink$9].close();
      }
    }
    (_MaterializeStreamSink.new = function(_outputSink) {
      this[S$1._outputSink$9] = _outputSink;
      ;
    }).prototype = _MaterializeStreamSink.prototype;
    dart.addTypeTests(_MaterializeStreamSink);
    _MaterializeStreamSink.prototype[_is__MaterializeStreamSink_default] = true;
    dart.addTypeCaches(_MaterializeStreamSink);
    _MaterializeStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_MaterializeStreamSink, () => ({
      __proto__: dart.getMethods(_MaterializeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_MaterializeStreamSink, I[247]);
    dart.setFieldSignature(_MaterializeStreamSink, () => ({
      __proto__: dart.getFields(_MaterializeStreamSink.__proto__),
      [S$1._outputSink$9]: dart.finalFieldType(async.EventSink$(notification.Notification$(S)))
    }));
    return _MaterializeStreamSink;
  });
  materialize._MaterializeStreamSink = materialize._MaterializeStreamSink$();
  dart.addTypeTests(materialize._MaterializeStreamSink, _is__MaterializeStreamSink_default);
  const _is_MaterializeStreamTransformer_default = Symbol('_is_MaterializeStreamTransformer_default');
  materialize.MaterializeStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$NotificationOfS = () => (__t$NotificationOfS = dart.constFn(notification.Notification$(S)))();
    var __t$StreamOfNotificationOfS = () => (__t$StreamOfNotificationOfS = dart.constFn(async.Stream$(__t$NotificationOfS())))();
    var __t$_MaterializeStreamSinkOfS = () => (__t$_MaterializeStreamSinkOfS = dart.constFn(materialize._MaterializeStreamSink$(S)))();
    var __t$EventSinkOfNotificationOfS = () => (__t$EventSinkOfNotificationOfS = dart.constFn(async.EventSink$(__t$NotificationOfS())))();
    var __t$EventSinkOfNotificationOfSTo_MaterializeStreamSinkOfS = () => (__t$EventSinkOfNotificationOfSTo_MaterializeStreamSinkOfS = dart.constFn(dart.fnType(__t$_MaterializeStreamSinkOfS(), [__t$EventSinkOfNotificationOfS()])))();
    class MaterializeStreamTransformer extends async.StreamTransformerBase$(S, notification.Notification$(S)) {
      static ['_#new#tearOff'](S) {
        return new (materialize.MaterializeStreamTransformer$(S)).new();
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfNotificationOfS().eventTransformed(stream, dart.fn(sink => new (__t$_MaterializeStreamSinkOfS()).new(sink), __t$EventSinkOfNotificationOfSTo_MaterializeStreamSinkOfS()));
      }
    }
    (MaterializeStreamTransformer.new = function() {
      MaterializeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = MaterializeStreamTransformer.prototype;
    dart.addTypeTests(MaterializeStreamTransformer);
    MaterializeStreamTransformer.prototype[_is_MaterializeStreamTransformer_default] = true;
    dart.addTypeCaches(MaterializeStreamTransformer);
    dart.setMethodSignature(MaterializeStreamTransformer, () => ({
      __proto__: dart.getMethods(MaterializeStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(notification.Notification$(S)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(MaterializeStreamTransformer, I[247]);
    return MaterializeStreamTransformer;
  });
  materialize.MaterializeStreamTransformer = materialize.MaterializeStreamTransformer$();
  dart.addTypeTests(materialize.MaterializeStreamTransformer, _is_MaterializeStreamTransformer_default);
  materialize['MaterializeExtension|materialize'] = function MaterializeExtension$124materialize(T, $this) {
    return new (materialize.MaterializeStreamTransformer$(T)).new().bind($this);
  };
  materialize['MaterializeExtension|get#materialize'] = function MaterializeExtension$124get$35materialize(T, $this) {
    return dart.fn(() => materialize['MaterializeExtension|materialize'](T, $this), dart.fnType(async.Stream$(notification.Notification$(T)), []));
  };
  max['MaxExtension|max'] = function MaxExtension$124max(T, $this, comparator = null) {
    return min_max.minMax(T, $this, false, comparator);
  };
  max['MaxExtension|get#max'] = function MaxExtension$124get$35max(T, $this) {
    return dart.fn((comparator = null) => max['MaxExtension|max'](T, $this, comparator), dart.fnType(async.Future$(T), [], [dart.nullable(dart.fnType(core.int, [T, T]))]));
  };
  min['MinExtension|min'] = function MinExtension$124min(T, $this, comparator = null) {
    return min_max.minMax(T, $this, true, comparator);
  };
  min['MinExtension|get#min'] = function MinExtension$124get$35min(T, $this) {
    return dart.fn((comparator = null) => min['MinExtension|min'](T, $this, comparator), dart.fnType(async.Future$(T), [], [dart.nullable(dart.fnType(core.int, [T, T]))]));
  };
  const _is__OnErrorResumeStreamSink_default = Symbol('_is__OnErrorResumeStreamSink_default');
  on_error_resume._OnErrorResumeStreamSink$ = dart.generic(S => {
    var __t$StreamSubscriptionOfS = () => (__t$StreamSubscriptionOfS = dart.constFn(async.StreamSubscription$(S)))();
    var __t$JSArrayOfStreamSubscriptionOfS = () => (__t$JSArrayOfStreamSubscriptionOfS = dart.constFn(_interceptors.JSArray$(__t$StreamSubscriptionOfS())))();
    var __t$STovoid = () => (__t$STovoid = dart.constFn(dart.fnType(dart.void, [S])))();
    class _OnErrorResumeStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _recoveryFn) {
        return new (on_error_resume._OnErrorResumeStreamSink$(S)).new(_recoveryFn);
      }
      onData(data) {
        S.as(data);
        return this.sink.add(data);
      }
      onError(e, st) {
        let t446, t445;
        let recoveryStream = null;
        try {
          recoveryStream = (t445 = e, t446 = st, this[S$1._recoveryFn](t445, t446));
        } catch (e$) {
          let newError = dart.getThrown(e$);
          let newSt = dart.stackTrace(e$);
          if (core.Object.is(newError)) {
            this.sink.addError(newError, newSt);
            return;
          } else
            throw e$;
        }
        let subscription = recoveryStream.listen(__t$STovoid().as(dart.bind(this.sink, 'add')), {onError: dart.bind(this.sink, 'addError')});
        subscription.onDone(dart.fn(() => {
          this[S$1._recoverySubscriptions][S$.$remove](subscription);
          if (this.closed && this[S$1._recoverySubscriptions][S$.$isEmpty]) {
            this.sink.close();
          }
        }, T$.VoidTovoid()));
        this[S$1._recoverySubscriptions][S$.$add](subscription);
      }
      onDone() {
        this.closed = true;
        if (this[S$1._recoverySubscriptions][S$.$isEmpty]) {
          this.sink.close();
        }
      }
      onCancel() {
        return subscription['StreamSubscriptionsIterableExtension|cancelAll'](this[S$1._recoverySubscriptions]);
      }
      onListen() {
      }
      onPause() {
        return subscription['StreamSubscriptionsIterableExtensions|pauseAll'](this[S$1._recoverySubscriptions]);
      }
      onResume() {
        return subscription['StreamSubscriptionsIterableExtensions|resumeAll'](this[S$1._recoverySubscriptions]);
      }
    }
    (_OnErrorResumeStreamSink.new = function(_recoveryFn) {
      this[S$1._recoverySubscriptions] = __t$JSArrayOfStreamSubscriptionOfS().of([]);
      this.closed = false;
      this[S$1._recoveryFn] = _recoveryFn;
      _OnErrorResumeStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _OnErrorResumeStreamSink.prototype;
    dart.addTypeTests(_OnErrorResumeStreamSink);
    _OnErrorResumeStreamSink.prototype[_is__OnErrorResumeStreamSink_default] = true;
    dart.addTypeCaches(_OnErrorResumeStreamSink);
    dart.setMethodSignature(_OnErrorResumeStreamSink, () => ({
      __proto__: dart.getMethods(_OnErrorResumeStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_OnErrorResumeStreamSink, I[248]);
    dart.setFieldSignature(_OnErrorResumeStreamSink, () => ({
      __proto__: dart.getFields(_OnErrorResumeStreamSink.__proto__),
      [S$1._recoveryFn]: dart.finalFieldType(dart.fnType(async.Stream$(S), [core.Object, core.StackTrace])),
      [S$1._recoverySubscriptions]: dart.finalFieldType(core.List$(async.StreamSubscription$(S))),
      closed: dart.fieldType(core.bool)
    }));
    return _OnErrorResumeStreamSink;
  });
  on_error_resume._OnErrorResumeStreamSink = on_error_resume._OnErrorResumeStreamSink$();
  dart.addTypeTests(on_error_resume._OnErrorResumeStreamSink, _is__OnErrorResumeStreamSink_default);
  const _is_OnErrorResumeStreamTransformer_default = Symbol('_is_OnErrorResumeStreamTransformer_default');
  on_error_resume.OnErrorResumeStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_OnErrorResumeStreamSinkOfS = () => (__t$_OnErrorResumeStreamSinkOfS = dart.constFn(on_error_resume._OnErrorResumeStreamSink$(S)))();
    var __t$VoidTo_OnErrorResumeStreamSinkOfS = () => (__t$VoidTo_OnErrorResumeStreamSinkOfS = dart.constFn(dart.fnType(__t$_OnErrorResumeStreamSinkOfS(), [])))();
    class OnErrorResumeStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get recoveryFn() {
        return this[S$1.recoveryFn];
      }
      set recoveryFn(value) {
        super.recoveryFn = value;
      }
      static ['_#new#tearOff'](S, recoveryFn) {
        return new (on_error_resume.OnErrorResumeStreamTransformer$(S)).new(recoveryFn);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_OnErrorResumeStreamSinkOfS()).new(this.recoveryFn), __t$VoidTo_OnErrorResumeStreamSinkOfS()));
      }
    }
    (OnErrorResumeStreamTransformer.new = function(recoveryFn) {
      this[S$1.recoveryFn] = recoveryFn;
      OnErrorResumeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = OnErrorResumeStreamTransformer.prototype;
    dart.addTypeTests(OnErrorResumeStreamTransformer);
    OnErrorResumeStreamTransformer.prototype[_is_OnErrorResumeStreamTransformer_default] = true;
    dart.addTypeCaches(OnErrorResumeStreamTransformer);
    dart.setMethodSignature(OnErrorResumeStreamTransformer, () => ({
      __proto__: dart.getMethods(OnErrorResumeStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(OnErrorResumeStreamTransformer, I[248]);
    dart.setFieldSignature(OnErrorResumeStreamTransformer, () => ({
      __proto__: dart.getFields(OnErrorResumeStreamTransformer.__proto__),
      recoveryFn: dart.finalFieldType(dart.fnType(async.Stream$(S), [core.Object, core.StackTrace]))
    }));
    return OnErrorResumeStreamTransformer;
  });
  on_error_resume.OnErrorResumeStreamTransformer = on_error_resume.OnErrorResumeStreamTransformer$();
  dart.addTypeTests(on_error_resume.OnErrorResumeStreamTransformer, _is_OnErrorResumeStreamTransformer_default);
  on_error_resume['OnErrorExtensions|onErrorResumeNext'] = function OnErrorExtensions$124onErrorResumeNext(T, $this, recoveryStream) {
    return new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(dart.fn((_, __) => recoveryStream, dart.fnType(async.Stream$(T), [core.Object, core.StackTrace]))).bind($this);
  };
  on_error_resume['OnErrorExtensions|get#onErrorResumeNext'] = function OnErrorExtensions$124get$35onErrorResumeNext(T, $this) {
    return dart.fn(recoveryStream => on_error_resume['OnErrorExtensions|onErrorResumeNext'](T, $this, recoveryStream), dart.fnType(async.Stream$(T), [async.Stream$(T)]));
  };
  on_error_resume['OnErrorExtensions|onErrorResume'] = function OnErrorExtensions$124onErrorResume(T, $this, recoveryFn) {
    return new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(recoveryFn).bind($this);
  };
  on_error_resume['OnErrorExtensions|get#onErrorResume'] = function OnErrorExtensions$124get$35onErrorResume(T, $this) {
    return dart.fn(recoveryFn => on_error_resume['OnErrorExtensions|onErrorResume'](T, $this, recoveryFn), dart.fnType(async.Stream$(T), [dart.fnType(async.Stream$(T), [core.Object, core.StackTrace])]));
  };
  on_error_resume['OnErrorExtensions|onErrorReturn'] = function OnErrorExtensions$124onErrorReturn(T, $this, returnValue) {
    return new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(dart.fn((_, __) => async.Stream$(T).value(returnValue), dart.fnType(async.Stream$(T), [core.Object, core.StackTrace]))).bind($this);
  };
  on_error_resume['OnErrorExtensions|get#onErrorReturn'] = function OnErrorExtensions$124get$35onErrorReturn(T, $this) {
    return dart.fn(returnValue => on_error_resume['OnErrorExtensions|onErrorReturn'](T, $this, returnValue), dart.fnType(async.Stream$(T), [T]));
  };
  on_error_resume['OnErrorExtensions|onErrorReturnWith'] = function OnErrorExtensions$124onErrorReturnWith(T, $this, returnFn) {
    return new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(dart.fn((e, st) => async.Stream$(T).value(returnFn(e, st)), dart.fnType(async.Stream$(T), [core.Object, core.StackTrace]))).bind($this);
  };
  on_error_resume['OnErrorExtensions|get#onErrorReturnWith'] = function OnErrorExtensions$124get$35onErrorReturnWith(T, $this) {
    return dart.fn(returnFn => on_error_resume['OnErrorExtensions|onErrorReturnWith'](T, $this, returnFn), dart.fnType(async.Stream$(T), [dart.fnType(T, [core.Object, core.StackTrace])]));
  };
  const _is__ScanStreamSink_default = Symbol('_is__ScanStreamSink_default');
  scan._ScanStreamSink$ = dart.generic((S, T) => {
    class _ScanStreamSink extends core.Object {
      static ['_#new#tearOff'](S, T, _outputSink, _accumulator, _acc) {
        return new (scan._ScanStreamSink$(S, T)).new(_outputSink, _accumulator, _acc);
      }
      add(data) {
        let t454, t456, t455, t454$;
        S.as(data);
        return this[S$1._outputSink$10].add(this[S$1._acc] = (t454$ = this[S$1._acc], t455 = data, t456 = (t454 = this[S$1._index], this[S$1._index] = t454 + 1, t454), this[S$1._accumulator](t454$, t455, t456)));
      }
      addError(e, st = null) {
        return this[S$1._outputSink$10].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$10].close();
      }
    }
    (_ScanStreamSink.new = function(_outputSink, _accumulator, _acc) {
      this[S$1._index] = 0;
      this[S$1._outputSink$10] = _outputSink;
      this[S$1._accumulator] = _accumulator;
      this[S$1._acc] = _acc;
      ;
    }).prototype = _ScanStreamSink.prototype;
    dart.addTypeTests(_ScanStreamSink);
    _ScanStreamSink.prototype[_is__ScanStreamSink_default] = true;
    dart.addTypeCaches(_ScanStreamSink);
    _ScanStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_ScanStreamSink, () => ({
      __proto__: dart.getMethods(_ScanStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ScanStreamSink, I[249]);
    dart.setFieldSignature(_ScanStreamSink, () => ({
      __proto__: dart.getFields(_ScanStreamSink.__proto__),
      [S$1._accumulator]: dart.finalFieldType(dart.fnType(T, [T, S, core.int])),
      [S$1._outputSink$10]: dart.finalFieldType(async.EventSink$(T)),
      [S$1._acc]: dart.fieldType(T),
      [S$1._index]: dart.fieldType(core.int)
    }));
    return _ScanStreamSink;
  });
  scan._ScanStreamSink = scan._ScanStreamSink$();
  dart.addTypeTests(scan._ScanStreamSink, _is__ScanStreamSink_default);
  const _is_ScanStreamTransformer_default = Symbol('_is_ScanStreamTransformer_default');
  scan.ScanStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_ScanStreamSinkOfS$T = () => (__t$_ScanStreamSinkOfS$T = dart.constFn(scan._ScanStreamSink$(S, T)))();
    var __t$EventSinkOfTTo_ScanStreamSinkOfS$T = () => (__t$EventSinkOfTTo_ScanStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_ScanStreamSinkOfS$T(), [__t$EventSinkOfT()])))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$EventSinkOfT = () => (__t$EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class ScanStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get accumulator() {
        return this[S$1.accumulator];
      }
      set accumulator(value) {
        super.accumulator = value;
      }
      get seed() {
        return this[S$1.seed];
      }
      set seed(value) {
        super.seed = value;
      }
      static ['_#new#tearOff'](S, T, accumulator, seed) {
        return new (scan.ScanStreamTransformer$(S, T)).new(accumulator, seed);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfT().eventTransformed(stream, dart.fn(sink => new (__t$_ScanStreamSinkOfS$T()).new(sink, this.accumulator, this.seed), __t$EventSinkOfTTo_ScanStreamSinkOfS$T()));
      }
    }
    (ScanStreamTransformer.new = function(accumulator, seed) {
      this[S$1.accumulator] = accumulator;
      this[S$1.seed] = seed;
      ScanStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = ScanStreamTransformer.prototype;
    dart.addTypeTests(ScanStreamTransformer);
    ScanStreamTransformer.prototype[_is_ScanStreamTransformer_default] = true;
    dart.addTypeCaches(ScanStreamTransformer);
    dart.setMethodSignature(ScanStreamTransformer, () => ({
      __proto__: dart.getMethods(ScanStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(ScanStreamTransformer, I[249]);
    dart.setFieldSignature(ScanStreamTransformer, () => ({
      __proto__: dart.getFields(ScanStreamTransformer.__proto__),
      accumulator: dart.finalFieldType(dart.fnType(T, [T, S, core.int])),
      seed: dart.finalFieldType(T)
    }));
    return ScanStreamTransformer;
  });
  scan.ScanStreamTransformer = scan.ScanStreamTransformer$();
  dart.addTypeTests(scan.ScanStreamTransformer, _is_ScanStreamTransformer_default);
  scan['ScanExtension|scan'] = function ScanExtension$124scan(T, S, $this, accumulator, seed) {
    return new (scan.ScanStreamTransformer$(T, S)).new(accumulator, seed).bind($this);
  };
  scan['ScanExtension|get#scan'] = function ScanExtension$124get$35scan(T, $this) {
    return dart.fn((S, accumulator, seed) => scan['ScanExtension|scan'](T, S, $this, accumulator, seed), dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [__t$StreamOfS(), [dart.fnType(S, [S, T, core.int]), S]];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  const _is__SkipLastStreamSink_default = Symbol('_is__SkipLastStreamSink_default');
  skip_last._SkipLastStreamSink$ = dart.generic(T => {
    var __t$JSArrayOfT = () => (__t$JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class _SkipLastStreamSink extends forwarding_sink.ForwardingSink$(T, T) {
      static ['_#new#tearOff'](T, count) {
        return new (skip_last._SkipLastStreamSink$(T)).new(count);
      }
      onData(data) {
        T.as(data);
        this.queue[S$.$add](data);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let limit = this.queue[S$.$length] - this.count;
        if (limit > 0) {
          this.queue[S$0.$sublist](0, limit)[S$.$forEach](__t$TTovoid().as(dart.bind(this.sink, 'add')));
        }
        this.sink.close();
      }
      onCancel() {
        this.queue[S$.$clear]();
      }
      onListen() {
      }
      onPause() {
      }
      onResume() {
      }
    }
    (_SkipLastStreamSink.new = function(count) {
      this.queue = __t$JSArrayOfT().of([]);
      this.count = count;
      _SkipLastStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _SkipLastStreamSink.prototype;
    dart.addTypeTests(_SkipLastStreamSink);
    _SkipLastStreamSink.prototype[_is__SkipLastStreamSink_default] = true;
    dart.addTypeCaches(_SkipLastStreamSink);
    dart.setMethodSignature(_SkipLastStreamSink, () => ({
      __proto__: dart.getMethods(_SkipLastStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SkipLastStreamSink, I[250]);
    dart.setFieldSignature(_SkipLastStreamSink, () => ({
      __proto__: dart.getFields(_SkipLastStreamSink.__proto__),
      count: dart.finalFieldType(core.int),
      queue: dart.finalFieldType(core.List$(T))
    }));
    return _SkipLastStreamSink;
  });
  skip_last._SkipLastStreamSink = skip_last._SkipLastStreamSink$();
  dart.addTypeTests(skip_last._SkipLastStreamSink, _is__SkipLastStreamSink_default);
  const _is_SkipLastStreamTransformer_default = Symbol('_is_SkipLastStreamTransformer_default');
  skip_last.SkipLastStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$_SkipLastStreamSinkOfT = () => (__t$_SkipLastStreamSinkOfT = dart.constFn(skip_last._SkipLastStreamSink$(T)))();
    var __t$VoidTo_SkipLastStreamSinkOfT = () => (__t$VoidTo_SkipLastStreamSinkOfT = dart.constFn(dart.fnType(__t$_SkipLastStreamSinkOfT(), [])))();
    class SkipLastStreamTransformer extends async.StreamTransformerBase$(T, T) {
      get count() {
        return this[S$1.count$4];
      }
      set count(value) {
        super.count = value;
      }
      static ['_#new#tearOff'](T, count) {
        return new (skip_last.SkipLastStreamTransformer$(T)).new(count);
      }
      bind(stream) {
        __t$StreamOfT().as(stream);
        return forwarding_stream.forwardStream(T, T, stream, dart.fn(() => new (__t$_SkipLastStreamSinkOfT()).new(this.count), __t$VoidTo_SkipLastStreamSinkOfT()));
      }
    }
    (SkipLastStreamTransformer.new = function(count) {
      this[S$1.count$4] = count;
      SkipLastStreamTransformer.__proto__.new.call(this);
      if (this.count < 0) dart.throw(new core.ArgumentError.value(this.count, "count"));
    }).prototype = SkipLastStreamTransformer.prototype;
    dart.addTypeTests(SkipLastStreamTransformer);
    SkipLastStreamTransformer.prototype[_is_SkipLastStreamTransformer_default] = true;
    dart.addTypeCaches(SkipLastStreamTransformer);
    dart.setMethodSignature(SkipLastStreamTransformer, () => ({
      __proto__: dart.getMethods(SkipLastStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SkipLastStreamTransformer, I[250]);
    dart.setFieldSignature(SkipLastStreamTransformer, () => ({
      __proto__: dart.getFields(SkipLastStreamTransformer.__proto__),
      count: dart.finalFieldType(core.int)
    }));
    return SkipLastStreamTransformer;
  });
  skip_last.SkipLastStreamTransformer = skip_last.SkipLastStreamTransformer$();
  dart.addTypeTests(skip_last.SkipLastStreamTransformer, _is_SkipLastStreamTransformer_default);
  skip_last['SkipLastExtension|skipLast'] = function SkipLastExtension$124skipLast(T, $this, count) {
    return new (skip_last.SkipLastStreamTransformer$(T)).new(count).bind($this);
  };
  skip_last['SkipLastExtension|get#skipLast'] = function SkipLastExtension$124get$35skipLast(T, $this) {
    return dart.fn(count => skip_last['SkipLastExtension|skipLast'](T, $this, count), dart.fnType(async.Stream$(T), [core.int]));
  };
  const _is__SkipUntilStreamSink_default = Symbol('_is__SkipUntilStreamSink_default');
  skip_until._SkipUntilStreamSink$ = dart.generic((S, T) => {
    class _SkipUntilStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, T, _otherStream) {
        return new (skip_until._SkipUntilStreamSink$(S, T)).new(_otherStream);
      }
      onData(data) {
        S.as(data);
        if (this[S$1._canAdd]) {
          this.sink.add(data);
        }
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let t458;
        t458 = this[S$1._otherSubscription];
        t458 == null ? null : t458.cancel();
        this.sink.close();
      }
      onCancel() {
        let t458;
        t458 = this[S$1._otherSubscription];
        return t458 == null ? null : t458.cancel();
      }
      onListen() {
        return this[S$1._otherSubscription] = this[S$1._otherStream].take(1).listen(null, {onError: dart.bind(this.sink, 'addError'), onDone: dart.fn(() => this[S$1._canAdd] = true, T$.VoidTovoid())});
      }
      onPause() {
        let t458;
        t458 = this[S$1._otherSubscription];
        return t458 == null ? null : t458.pause();
      }
      onResume() {
        let t458;
        t458 = this[S$1._otherSubscription];
        return t458 == null ? null : t458.resume();
      }
    }
    (_SkipUntilStreamSink.new = function(_otherStream) {
      this[S$1._otherSubscription] = null;
      this[S$1._canAdd] = false;
      this[S$1._otherStream] = _otherStream;
      _SkipUntilStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _SkipUntilStreamSink.prototype;
    dart.addTypeTests(_SkipUntilStreamSink);
    _SkipUntilStreamSink.prototype[_is__SkipUntilStreamSink_default] = true;
    dart.addTypeCaches(_SkipUntilStreamSink);
    dart.setMethodSignature(_SkipUntilStreamSink, () => ({
      __proto__: dart.getMethods(_SkipUntilStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SkipUntilStreamSink, I[251]);
    dart.setFieldSignature(_SkipUntilStreamSink, () => ({
      __proto__: dart.getFields(_SkipUntilStreamSink.__proto__),
      [S$1._otherStream]: dart.finalFieldType(async.Stream$(T)),
      [S$1._otherSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [S$1._canAdd]: dart.fieldType(core.bool)
    }));
    return _SkipUntilStreamSink;
  });
  skip_until._SkipUntilStreamSink = skip_until._SkipUntilStreamSink$();
  dart.addTypeTests(skip_until._SkipUntilStreamSink, _is__SkipUntilStreamSink_default);
  const _is_SkipUntilStreamTransformer_default = Symbol('_is_SkipUntilStreamTransformer_default');
  skip_until.SkipUntilStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_SkipUntilStreamSinkOfS$T = () => (__t$_SkipUntilStreamSinkOfS$T = dart.constFn(skip_until._SkipUntilStreamSink$(S, T)))();
    var __t$VoidTo_SkipUntilStreamSinkOfS$T = () => (__t$VoidTo_SkipUntilStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_SkipUntilStreamSinkOfS$T(), [])))();
    class SkipUntilStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get otherStream() {
        return this[S$1.otherStream];
      }
      set otherStream(value) {
        super.otherStream = value;
      }
      static ['_#new#tearOff'](S, T, otherStream) {
        return new (skip_until.SkipUntilStreamTransformer$(S, T)).new(otherStream);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_SkipUntilStreamSinkOfS$T()).new(this.otherStream), __t$VoidTo_SkipUntilStreamSinkOfS$T()));
      }
    }
    (SkipUntilStreamTransformer.new = function(otherStream) {
      this[S$1.otherStream] = otherStream;
      SkipUntilStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SkipUntilStreamTransformer.prototype;
    dart.addTypeTests(SkipUntilStreamTransformer);
    SkipUntilStreamTransformer.prototype[_is_SkipUntilStreamTransformer_default] = true;
    dart.addTypeCaches(SkipUntilStreamTransformer);
    dart.setMethodSignature(SkipUntilStreamTransformer, () => ({
      __proto__: dart.getMethods(SkipUntilStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SkipUntilStreamTransformer, I[251]);
    dart.setFieldSignature(SkipUntilStreamTransformer, () => ({
      __proto__: dart.getFields(SkipUntilStreamTransformer.__proto__),
      otherStream: dart.finalFieldType(async.Stream$(T))
    }));
    return SkipUntilStreamTransformer;
  });
  skip_until.SkipUntilStreamTransformer = skip_until.SkipUntilStreamTransformer$();
  dart.addTypeTests(skip_until.SkipUntilStreamTransformer, _is_SkipUntilStreamTransformer_default);
  skip_until['SkipUntilExtension|skipUntil'] = function SkipUntilExtension$124skipUntil(T, S, $this, otherStream) {
    return new (skip_until.SkipUntilStreamTransformer$(T, S)).new(otherStream).bind($this);
  };
  skip_until['SkipUntilExtension|get#skipUntil'] = function SkipUntilExtension$124get$35skipUntil(T, $this) {
    return dart.fn((S, otherStream) => skip_until['SkipUntilExtension|skipUntil'](T, S, $this, otherStream), dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [async.Stream$(T), [__t$StreamOfS()]];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  const _is__StartWithManyStreamSink_default = Symbol('_is__StartWithManyStreamSink_default');
  start_with_many._StartWithManyStreamSink$ = dart.generic(S => {
    var __t$STovoid = () => (__t$STovoid = dart.constFn(dart.fnType(dart.void, [S])))();
    class _StartWithManyStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _startValues) {
        return new (start_with_many._StartWithManyStreamSink$(S)).new(_startValues);
      }
      onData(data) {
        S.as(data);
        return this.sink.add(data);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        return this.sink.close();
      }
      onCancel() {
      }
      onListen() {
        this[S$1._startValues][S$.$forEach](__t$STovoid().as(dart.bind(this.sink, 'add')));
      }
      onPause() {
      }
      onResume() {
      }
    }
    (_StartWithManyStreamSink.new = function(_startValues) {
      this[S$1._startValues] = _startValues;
      _StartWithManyStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _StartWithManyStreamSink.prototype;
    dart.addTypeTests(_StartWithManyStreamSink);
    _StartWithManyStreamSink.prototype[_is__StartWithManyStreamSink_default] = true;
    dart.addTypeCaches(_StartWithManyStreamSink);
    dart.setMethodSignature(_StartWithManyStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithManyStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_StartWithManyStreamSink, I[252]);
    dart.setFieldSignature(_StartWithManyStreamSink, () => ({
      __proto__: dart.getFields(_StartWithManyStreamSink.__proto__),
      [S$1._startValues]: dart.finalFieldType(core.Iterable$(S))
    }));
    return _StartWithManyStreamSink;
  });
  start_with_many._StartWithManyStreamSink = start_with_many._StartWithManyStreamSink$();
  dart.addTypeTests(start_with_many._StartWithManyStreamSink, _is__StartWithManyStreamSink_default);
  const _is_StartWithManyStreamTransformer_default = Symbol('_is_StartWithManyStreamTransformer_default');
  start_with_many.StartWithManyStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_StartWithManyStreamSinkOfS = () => (__t$_StartWithManyStreamSinkOfS = dart.constFn(start_with_many._StartWithManyStreamSink$(S)))();
    var __t$VoidTo_StartWithManyStreamSinkOfS = () => (__t$VoidTo_StartWithManyStreamSinkOfS = dart.constFn(dart.fnType(__t$_StartWithManyStreamSinkOfS(), [])))();
    class StartWithManyStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get startValues() {
        return this[S$1.startValues];
      }
      set startValues(value) {
        super.startValues = value;
      }
      static ['_#new#tearOff'](S, startValues) {
        return new (start_with_many.StartWithManyStreamTransformer$(S)).new(startValues);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_StartWithManyStreamSinkOfS()).new(this.startValues), __t$VoidTo_StartWithManyStreamSinkOfS()));
      }
    }
    (StartWithManyStreamTransformer.new = function(startValues) {
      this[S$1.startValues] = startValues;
      StartWithManyStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithManyStreamTransformer.prototype;
    dart.addTypeTests(StartWithManyStreamTransformer);
    StartWithManyStreamTransformer.prototype[_is_StartWithManyStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithManyStreamTransformer);
    dart.setMethodSignature(StartWithManyStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithManyStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StartWithManyStreamTransformer, I[252]);
    dart.setFieldSignature(StartWithManyStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithManyStreamTransformer.__proto__),
      startValues: dart.finalFieldType(core.Iterable$(S))
    }));
    return StartWithManyStreamTransformer;
  });
  start_with_many.StartWithManyStreamTransformer = start_with_many.StartWithManyStreamTransformer$();
  dart.addTypeTests(start_with_many.StartWithManyStreamTransformer, _is_StartWithManyStreamTransformer_default);
  start_with_many['StartWithManyExtension|startWithMany'] = function StartWithManyExtension$124startWithMany(T, $this, startValues) {
    return new (start_with_many.StartWithManyStreamTransformer$(T)).new(startValues).bind($this);
  };
  start_with_many['StartWithManyExtension|get#startWithMany'] = function StartWithManyExtension$124get$35startWithMany(T, $this) {
    return dart.fn(startValues => start_with_many['StartWithManyExtension|startWithMany'](T, $this, startValues), dart.fnType(async.Stream$(T), [core.List$(T)]));
  };
  const _is__SwitchIfEmptyStreamSink_default = Symbol('_is__SwitchIfEmptyStreamSink_default');
  switch_if_empty._SwitchIfEmptyStreamSink$ = dart.generic(S => {
    var __t$STovoid = () => (__t$STovoid = dart.constFn(dart.fnType(dart.void, [S])))();
    class _SwitchIfEmptyStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, _fallbackStream) {
        return new (switch_if_empty._SwitchIfEmptyStreamSink$(S)).new(_fallbackStream);
      }
      onData(data) {
        S.as(data);
        this[S$1._isEmpty$1] = false;
        this.sink.add(data);
      }
      onError(error, st) {
        this.sink.addError(error, st);
      }
      onDone() {
        if (this[S$1._isEmpty$1]) {
          this[S$1._fallbackSubscription] = this[S$1._fallbackStream].listen(__t$STovoid().as(dart.bind(this.sink, 'add')), {onError: dart.bind(this.sink, 'addError'), onDone: dart.bind(this.sink, 'close')});
        } else {
          this.sink.close();
        }
      }
      onCancel() {
        let t462;
        t462 = this[S$1._fallbackSubscription];
        return t462 == null ? null : t462.cancel();
      }
      onListen() {
      }
      onPause() {
        let t462;
        t462 = this[S$1._fallbackSubscription];
        return t462 == null ? null : t462.pause();
      }
      onResume() {
        let t462;
        t462 = this[S$1._fallbackSubscription];
        return t462 == null ? null : t462.resume();
      }
    }
    (_SwitchIfEmptyStreamSink.new = function(_fallbackStream) {
      this[S$1._isEmpty$1] = true;
      this[S$1._fallbackSubscription] = null;
      this[S$1._fallbackStream] = _fallbackStream;
      _SwitchIfEmptyStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _SwitchIfEmptyStreamSink.prototype;
    dart.addTypeTests(_SwitchIfEmptyStreamSink);
    _SwitchIfEmptyStreamSink.prototype[_is__SwitchIfEmptyStreamSink_default] = true;
    dart.addTypeCaches(_SwitchIfEmptyStreamSink);
    dart.setMethodSignature(_SwitchIfEmptyStreamSink, () => ({
      __proto__: dart.getMethods(_SwitchIfEmptyStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SwitchIfEmptyStreamSink, I[253]);
    dart.setFieldSignature(_SwitchIfEmptyStreamSink, () => ({
      __proto__: dart.getFields(_SwitchIfEmptyStreamSink.__proto__),
      [S$1._fallbackStream]: dart.finalFieldType(async.Stream$(S)),
      [S$1._isEmpty$1]: dart.fieldType(core.bool),
      [S$1._fallbackSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S)))
    }));
    return _SwitchIfEmptyStreamSink;
  });
  switch_if_empty._SwitchIfEmptyStreamSink = switch_if_empty._SwitchIfEmptyStreamSink$();
  dart.addTypeTests(switch_if_empty._SwitchIfEmptyStreamSink, _is__SwitchIfEmptyStreamSink_default);
  const _is_SwitchIfEmptyStreamTransformer_default = Symbol('_is_SwitchIfEmptyStreamTransformer_default');
  switch_if_empty.SwitchIfEmptyStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_SwitchIfEmptyStreamSinkOfS = () => (__t$_SwitchIfEmptyStreamSinkOfS = dart.constFn(switch_if_empty._SwitchIfEmptyStreamSink$(S)))();
    var __t$VoidTo_SwitchIfEmptyStreamSinkOfS = () => (__t$VoidTo_SwitchIfEmptyStreamSinkOfS = dart.constFn(dart.fnType(__t$_SwitchIfEmptyStreamSinkOfS(), [])))();
    class SwitchIfEmptyStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get fallbackStream() {
        return this[S$1.fallbackStream];
      }
      set fallbackStream(value) {
        super.fallbackStream = value;
      }
      static ['_#new#tearOff'](S, fallbackStream) {
        return new (switch_if_empty.SwitchIfEmptyStreamTransformer$(S)).new(fallbackStream);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_SwitchIfEmptyStreamSinkOfS()).new(this.fallbackStream), __t$VoidTo_SwitchIfEmptyStreamSinkOfS()));
      }
    }
    (SwitchIfEmptyStreamTransformer.new = function(fallbackStream) {
      this[S$1.fallbackStream] = fallbackStream;
      SwitchIfEmptyStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SwitchIfEmptyStreamTransformer.prototype;
    dart.addTypeTests(SwitchIfEmptyStreamTransformer);
    SwitchIfEmptyStreamTransformer.prototype[_is_SwitchIfEmptyStreamTransformer_default] = true;
    dart.addTypeCaches(SwitchIfEmptyStreamTransformer);
    dart.setMethodSignature(SwitchIfEmptyStreamTransformer, () => ({
      __proto__: dart.getMethods(SwitchIfEmptyStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SwitchIfEmptyStreamTransformer, I[253]);
    dart.setFieldSignature(SwitchIfEmptyStreamTransformer, () => ({
      __proto__: dart.getFields(SwitchIfEmptyStreamTransformer.__proto__),
      fallbackStream: dart.finalFieldType(async.Stream$(S))
    }));
    return SwitchIfEmptyStreamTransformer;
  });
  switch_if_empty.SwitchIfEmptyStreamTransformer = switch_if_empty.SwitchIfEmptyStreamTransformer$();
  dart.addTypeTests(switch_if_empty.SwitchIfEmptyStreamTransformer, _is_SwitchIfEmptyStreamTransformer_default);
  switch_if_empty['SwitchIfEmptyExtension|switchIfEmpty'] = function SwitchIfEmptyExtension$124switchIfEmpty(T, $this, fallbackStream) {
    return new (switch_if_empty.SwitchIfEmptyStreamTransformer$(T)).new(fallbackStream).bind($this);
  };
  switch_if_empty['SwitchIfEmptyExtension|get#switchIfEmpty'] = function SwitchIfEmptyExtension$124get$35switchIfEmpty(T, $this) {
    return dart.fn(fallbackStream => switch_if_empty['SwitchIfEmptyExtension|switchIfEmpty'](T, $this, fallbackStream), dart.fnType(async.Stream$(T), [async.Stream$(T)]));
  };
  const _is__SwitchMapStreamSink_default = Symbol('_is__SwitchMapStreamSink_default');
  switch_map._SwitchMapStreamSink$ = dart.generic((S, T) => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class _SwitchMapStreamSink extends forwarding_sink.ForwardingSink$(S, T) {
      static ['_#new#tearOff'](S, T, _mapper) {
        return new (switch_map._SwitchMapStreamSink$(S, T)).new(_mapper);
      }
      onData(data) {
        let t464, t465;
        S.as(data);
        let mappedStream = null;
        try {
          mappedStream = (t464 = data, this[S$1._mapper$2](t464));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.sink.addError(e, s);
            return;
          } else
            throw e$;
        }
        t465 = this[S$1._mapperSubscription$1];
        t465 == null ? null : t465.cancel();
        this[S$1._mapperSubscription$1] = mappedStream.listen(__t$TTovoid().as(dart.bind(this.sink, 'add')), {onError: dart.bind(this.sink, 'addError'), onDone: dart.fn(() => {
            this[S$1._mapperSubscription$1] = null;
            if (this[S$1._inputClosed$4]) {
              this.sink.close();
            }
          }, T$.VoidTovoid())});
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let t465;
        this[S$1._inputClosed$4] = true;
        t465 = this[S$1._mapperSubscription$1];
        t465 == null ? this.sink.close() : t465;
      }
      onCancel() {
        let t465;
        t465 = this[S$1._mapperSubscription$1];
        return t465 == null ? null : t465.cancel();
      }
      onListen() {
      }
      onPause() {
        let t465;
        t465 = this[S$1._mapperSubscription$1];
        return t465 == null ? null : t465.pause();
      }
      onResume() {
        let t465;
        t465 = this[S$1._mapperSubscription$1];
        return t465 == null ? null : t465.resume();
      }
    }
    (_SwitchMapStreamSink.new = function(_mapper) {
      this[S$1._mapperSubscription$1] = null;
      this[S$1._inputClosed$4] = false;
      this[S$1._mapper$2] = _mapper;
      _SwitchMapStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _SwitchMapStreamSink.prototype;
    dart.addTypeTests(_SwitchMapStreamSink);
    _SwitchMapStreamSink.prototype[_is__SwitchMapStreamSink_default] = true;
    dart.addTypeCaches(_SwitchMapStreamSink);
    dart.setMethodSignature(_SwitchMapStreamSink, () => ({
      __proto__: dart.getMethods(_SwitchMapStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SwitchMapStreamSink, I[254]);
    dart.setFieldSignature(_SwitchMapStreamSink, () => ({
      __proto__: dart.getFields(_SwitchMapStreamSink.__proto__),
      [S$1._mapper$2]: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      [S$1._mapperSubscription$1]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [S$1._inputClosed$4]: dart.fieldType(core.bool)
    }));
    return _SwitchMapStreamSink;
  });
  switch_map._SwitchMapStreamSink = switch_map._SwitchMapStreamSink$();
  dart.addTypeTests(switch_map._SwitchMapStreamSink, _is__SwitchMapStreamSink_default);
  const _is_SwitchMapStreamTransformer_default = Symbol('_is_SwitchMapStreamTransformer_default');
  switch_map.SwitchMapStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_SwitchMapStreamSinkOfS$T = () => (__t$_SwitchMapStreamSinkOfS$T = dart.constFn(switch_map._SwitchMapStreamSink$(S, T)))();
    var __t$VoidTo_SwitchMapStreamSinkOfS$T = () => (__t$VoidTo_SwitchMapStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_SwitchMapStreamSinkOfS$T(), [])))();
    class SwitchMapStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get mapper() {
        return this[S$1.mapper$2];
      }
      set mapper(value) {
        super.mapper = value;
      }
      static ['_#new#tearOff'](S, T, mapper) {
        return new (switch_map.SwitchMapStreamTransformer$(S, T)).new(mapper);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, dart.fn(() => new (__t$_SwitchMapStreamSinkOfS$T()).new(this.mapper), __t$VoidTo_SwitchMapStreamSinkOfS$T()));
      }
    }
    (SwitchMapStreamTransformer.new = function(mapper) {
      this[S$1.mapper$2] = mapper;
      SwitchMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SwitchMapStreamTransformer.prototype;
    dart.addTypeTests(SwitchMapStreamTransformer);
    SwitchMapStreamTransformer.prototype[_is_SwitchMapStreamTransformer_default] = true;
    dart.addTypeCaches(SwitchMapStreamTransformer);
    dart.setMethodSignature(SwitchMapStreamTransformer, () => ({
      __proto__: dart.getMethods(SwitchMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SwitchMapStreamTransformer, I[254]);
    dart.setFieldSignature(SwitchMapStreamTransformer, () => ({
      __proto__: dart.getFields(SwitchMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.fnType(async.Stream$(T), [S]))
    }));
    return SwitchMapStreamTransformer;
  });
  switch_map.SwitchMapStreamTransformer = switch_map.SwitchMapStreamTransformer$();
  dart.addTypeTests(switch_map.SwitchMapStreamTransformer, _is_SwitchMapStreamTransformer_default);
  switch_map['SwitchMapExtension|switchMap'] = function SwitchMapExtension$124switchMap(T, S, $this, mapper) {
    return new (switch_map.SwitchMapStreamTransformer$(T, S)).new(mapper).bind($this);
  };
  switch_map['SwitchMapExtension|get#switchMap'] = function SwitchMapExtension$124get$35switchMap(T, $this) {
    return dart.fn((S, mapper) => switch_map['SwitchMapExtension|switchMap'](T, S, $this, mapper), dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [__t$StreamOfS(), [dart.fnType(__t$StreamOfS(), [T])]];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  const _is__TakeLastStreamSink_default = Symbol('_is__TakeLastStreamSink_default');
  take_last._TakeLastStreamSink$ = dart.generic(T => {
    var __t$DoubleLinkedQueueOfT = () => (__t$DoubleLinkedQueueOfT = dart.constFn(collection.DoubleLinkedQueue$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class _TakeLastStreamSink extends forwarding_sink.ForwardingSink$(T, T) {
      static ['_#new#tearOff'](T, count) {
        return new (take_last._TakeLastStreamSink$(T)).new(count);
      }
      onData(data) {
        T.as(data);
        if (this.count > 0) {
          this.queue.addLast(data);
          if (this.queue[S$.$length] > this.count) {
            this.queue.removeFirst();
          }
        }
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        if (this.queue[S$.$isNotEmpty]) {
          this.queue[S$.$toList]({growable: false})[S$.$forEach](__t$TTovoid().as(dart.bind(this.sink, 'add')));
        }
        this.sink.close();
      }
      onCancel() {
        this.queue.clear();
      }
      onListen() {
      }
      onPause() {
      }
      onResume() {
      }
    }
    (_TakeLastStreamSink.new = function(count) {
      this.queue = new (__t$DoubleLinkedQueueOfT()).new();
      this.count = count;
      _TakeLastStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _TakeLastStreamSink.prototype;
    dart.addTypeTests(_TakeLastStreamSink);
    _TakeLastStreamSink.prototype[_is__TakeLastStreamSink_default] = true;
    dart.addTypeCaches(_TakeLastStreamSink);
    dart.setMethodSignature(_TakeLastStreamSink, () => ({
      __proto__: dart.getMethods(_TakeLastStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_TakeLastStreamSink, I[255]);
    dart.setFieldSignature(_TakeLastStreamSink, () => ({
      __proto__: dart.getFields(_TakeLastStreamSink.__proto__),
      count: dart.finalFieldType(core.int),
      queue: dart.finalFieldType(collection.Queue$(T))
    }));
    return _TakeLastStreamSink;
  });
  take_last._TakeLastStreamSink = take_last._TakeLastStreamSink$();
  dart.addTypeTests(take_last._TakeLastStreamSink, _is__TakeLastStreamSink_default);
  const _is_TakeLastStreamTransformer_default = Symbol('_is_TakeLastStreamTransformer_default');
  take_last.TakeLastStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$_TakeLastStreamSinkOfT = () => (__t$_TakeLastStreamSinkOfT = dart.constFn(take_last._TakeLastStreamSink$(T)))();
    var __t$VoidTo_TakeLastStreamSinkOfT = () => (__t$VoidTo_TakeLastStreamSinkOfT = dart.constFn(dart.fnType(__t$_TakeLastStreamSinkOfT(), [])))();
    class TakeLastStreamTransformer extends async.StreamTransformerBase$(T, T) {
      get count() {
        return this[S$1.count$5];
      }
      set count(value) {
        super.count = value;
      }
      static ['_#new#tearOff'](T, count) {
        return new (take_last.TakeLastStreamTransformer$(T)).new(count);
      }
      bind(stream) {
        __t$StreamOfT().as(stream);
        return forwarding_stream.forwardStream(T, T, stream, dart.fn(() => new (__t$_TakeLastStreamSinkOfT()).new(this.count), __t$VoidTo_TakeLastStreamSinkOfT()));
      }
    }
    (TakeLastStreamTransformer.new = function(count) {
      this[S$1.count$5] = count;
      TakeLastStreamTransformer.__proto__.new.call(this);
      if (this.count < 0) dart.throw(new core.ArgumentError.value(this.count, "count"));
    }).prototype = TakeLastStreamTransformer.prototype;
    dart.addTypeTests(TakeLastStreamTransformer);
    TakeLastStreamTransformer.prototype[_is_TakeLastStreamTransformer_default] = true;
    dart.addTypeCaches(TakeLastStreamTransformer);
    dart.setMethodSignature(TakeLastStreamTransformer, () => ({
      __proto__: dart.getMethods(TakeLastStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TakeLastStreamTransformer, I[255]);
    dart.setFieldSignature(TakeLastStreamTransformer, () => ({
      __proto__: dart.getFields(TakeLastStreamTransformer.__proto__),
      count: dart.finalFieldType(core.int)
    }));
    return TakeLastStreamTransformer;
  });
  take_last.TakeLastStreamTransformer = take_last.TakeLastStreamTransformer$();
  dart.addTypeTests(take_last.TakeLastStreamTransformer, _is_TakeLastStreamTransformer_default);
  take_last['TakeLastExtension|takeLast'] = function TakeLastExtension$124takeLast(T, $this, count) {
    return new (take_last.TakeLastStreamTransformer$(T)).new(count).bind($this);
  };
  take_last['TakeLastExtension|get#takeLast'] = function TakeLastExtension$124get$35takeLast(T, $this) {
    return dart.fn(count => take_last['TakeLastExtension|takeLast'](T, $this, count), dart.fnType(async.Stream$(T), [core.int]));
  };
  const _is__TakeUntilStreamSink_default = Symbol('_is__TakeUntilStreamSink_default');
  take_until._TakeUntilStreamSink$ = dart.generic((S, T) => {
    class _TakeUntilStreamSink extends forwarding_sink.ForwardingSink$(S, S) {
      static ['_#new#tearOff'](S, T, _otherStream) {
        return new (take_until._TakeUntilStreamSink$(S, T)).new(_otherStream);
      }
      onData(data) {
        S.as(data);
        return this.sink.add(data);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let t469;
        t469 = this[S$1._otherSubscription$1];
        t469 == null ? null : t469.cancel();
        this.sink.close();
      }
      onCancel() {
        let t469;
        t469 = this[S$1._otherSubscription$1];
        return t469 == null ? null : t469.cancel();
      }
      onListen() {
        return this[S$1._otherSubscription$1] = this[S$1._otherStream$1].take(1).listen(null, {onError: dart.bind(this.sink, 'addError'), onDone: dart.bind(this.sink, 'close')});
      }
      onPause() {
        let t469;
        t469 = this[S$1._otherSubscription$1];
        return t469 == null ? null : t469.pause();
      }
      onResume() {
        let t469;
        t469 = this[S$1._otherSubscription$1];
        return t469 == null ? null : t469.resume();
      }
    }
    (_TakeUntilStreamSink.new = function(_otherStream) {
      this[S$1._otherSubscription$1] = null;
      this[S$1._otherStream$1] = _otherStream;
      _TakeUntilStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _TakeUntilStreamSink.prototype;
    dart.addTypeTests(_TakeUntilStreamSink);
    _TakeUntilStreamSink.prototype[_is__TakeUntilStreamSink_default] = true;
    dart.addTypeCaches(_TakeUntilStreamSink);
    dart.setMethodSignature(_TakeUntilStreamSink, () => ({
      __proto__: dart.getMethods(_TakeUntilStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_TakeUntilStreamSink, I[256]);
    dart.setFieldSignature(_TakeUntilStreamSink, () => ({
      __proto__: dart.getFields(_TakeUntilStreamSink.__proto__),
      [S$1._otherStream$1]: dart.finalFieldType(async.Stream$(T)),
      [S$1._otherSubscription$1]: dart.fieldType(dart.nullable(async.StreamSubscription$(T)))
    }));
    return _TakeUntilStreamSink;
  });
  take_until._TakeUntilStreamSink = take_until._TakeUntilStreamSink$();
  dart.addTypeTests(take_until._TakeUntilStreamSink, _is__TakeUntilStreamSink_default);
  const _is_TakeUntilStreamTransformer_default = Symbol('_is_TakeUntilStreamTransformer_default');
  take_until.TakeUntilStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_TakeUntilStreamSinkOfS$T = () => (__t$_TakeUntilStreamSinkOfS$T = dart.constFn(take_until._TakeUntilStreamSink$(S, T)))();
    var __t$VoidTo_TakeUntilStreamSinkOfS$T = () => (__t$VoidTo_TakeUntilStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_TakeUntilStreamSinkOfS$T(), [])))();
    class TakeUntilStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get otherStream() {
        return this[S$1.otherStream$1];
      }
      set otherStream(value) {
        super.otherStream = value;
      }
      static ['_#new#tearOff'](S, T, otherStream) {
        return new (take_until.TakeUntilStreamTransformer$(S, T)).new(otherStream);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, dart.fn(() => new (__t$_TakeUntilStreamSinkOfS$T()).new(this.otherStream), __t$VoidTo_TakeUntilStreamSinkOfS$T()));
      }
    }
    (TakeUntilStreamTransformer.new = function(otherStream) {
      this[S$1.otherStream$1] = otherStream;
      TakeUntilStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TakeUntilStreamTransformer.prototype;
    dart.addTypeTests(TakeUntilStreamTransformer);
    TakeUntilStreamTransformer.prototype[_is_TakeUntilStreamTransformer_default] = true;
    dart.addTypeCaches(TakeUntilStreamTransformer);
    dart.setMethodSignature(TakeUntilStreamTransformer, () => ({
      __proto__: dart.getMethods(TakeUntilStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TakeUntilStreamTransformer, I[256]);
    dart.setFieldSignature(TakeUntilStreamTransformer, () => ({
      __proto__: dart.getFields(TakeUntilStreamTransformer.__proto__),
      otherStream: dart.finalFieldType(async.Stream$(T))
    }));
    return TakeUntilStreamTransformer;
  });
  take_until.TakeUntilStreamTransformer = take_until.TakeUntilStreamTransformer$();
  dart.addTypeTests(take_until.TakeUntilStreamTransformer, _is_TakeUntilStreamTransformer_default);
  take_until['TakeUntilExtension|takeUntil'] = function TakeUntilExtension$124takeUntil(T, S, $this, otherStream) {
    return new (take_until.TakeUntilStreamTransformer$(T, S)).new(otherStream).bind($this);
  };
  take_until['TakeUntilExtension|get#takeUntil'] = function TakeUntilExtension$124get$35takeUntil(T, $this) {
    return dart.fn((S, otherStream) => take_until['TakeUntilExtension|takeUntil'](T, S, $this, otherStream), dart.gFnType(S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [async.Stream$(T), [__t$StreamOfS()]];
    }, S => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  const _is__TakeWhileInclusiveStreamSink_default = Symbol('_is__TakeWhileInclusiveStreamSink_default');
  take_while_inclusive._TakeWhileInclusiveStreamSink$ = dart.generic(S => {
    class _TakeWhileInclusiveStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink, _test) {
        return new (take_while_inclusive._TakeWhileInclusiveStreamSink$(S)).new(_outputSink, _test);
      }
      add(data) {
        let t471;
        S.as(data);
        let satisfies = null;
        try {
          satisfies = (t471 = data, this[S$1._test](t471));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this[S$1._outputSink$11].addError(e, s);
            this[S$1._outputSink$11].close();
            return;
          } else
            throw e$;
        }
        if (satisfies) {
          this[S$1._outputSink$11].add(data);
        } else {
          this[S$1._outputSink$11].add(data);
          this[S$1._outputSink$11].close();
        }
      }
      addError(e, st = null) {
        return this[S$1._outputSink$11].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$11].close();
      }
    }
    (_TakeWhileInclusiveStreamSink.new = function(_outputSink, _test) {
      this[S$1._outputSink$11] = _outputSink;
      this[S$1._test] = _test;
      ;
    }).prototype = _TakeWhileInclusiveStreamSink.prototype;
    dart.addTypeTests(_TakeWhileInclusiveStreamSink);
    _TakeWhileInclusiveStreamSink.prototype[_is__TakeWhileInclusiveStreamSink_default] = true;
    dart.addTypeCaches(_TakeWhileInclusiveStreamSink);
    _TakeWhileInclusiveStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_TakeWhileInclusiveStreamSink, () => ({
      __proto__: dart.getMethods(_TakeWhileInclusiveStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_TakeWhileInclusiveStreamSink, I[257]);
    dart.setFieldSignature(_TakeWhileInclusiveStreamSink, () => ({
      __proto__: dart.getFields(_TakeWhileInclusiveStreamSink.__proto__),
      [S$1._test]: dart.finalFieldType(dart.fnType(core.bool, [S])),
      [S$1._outputSink$11]: dart.finalFieldType(async.EventSink$(S))
    }));
    return _TakeWhileInclusiveStreamSink;
  });
  take_while_inclusive._TakeWhileInclusiveStreamSink = take_while_inclusive._TakeWhileInclusiveStreamSink$();
  dart.addTypeTests(take_while_inclusive._TakeWhileInclusiveStreamSink, _is__TakeWhileInclusiveStreamSink_default);
  const _is_TakeWhileInclusiveStreamTransformer_default = Symbol('_is_TakeWhileInclusiveStreamTransformer_default');
  take_while_inclusive.TakeWhileInclusiveStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_TakeWhileInclusiveStreamSinkOfS = () => (__t$_TakeWhileInclusiveStreamSinkOfS = dart.constFn(take_while_inclusive._TakeWhileInclusiveStreamSink$(S)))();
    var __t$EventSinkOfS = () => (__t$EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var __t$EventSinkOfSTo_TakeWhileInclusiveStreamSinkOfS = () => (__t$EventSinkOfSTo_TakeWhileInclusiveStreamSinkOfS = dart.constFn(dart.fnType(__t$_TakeWhileInclusiveStreamSinkOfS(), [__t$EventSinkOfS()])))();
    class TakeWhileInclusiveStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get test() {
        return this[S$1.test];
      }
      set test(value) {
        super.test = value;
      }
      static ['_#new#tearOff'](S, test) {
        return new (take_while_inclusive.TakeWhileInclusiveStreamTransformer$(S)).new(test);
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfS().eventTransformed(stream, dart.fn(sink => new (__t$_TakeWhileInclusiveStreamSinkOfS()).new(sink, this.test), __t$EventSinkOfSTo_TakeWhileInclusiveStreamSinkOfS()));
      }
    }
    (TakeWhileInclusiveStreamTransformer.new = function(test) {
      this[S$1.test] = test;
      TakeWhileInclusiveStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TakeWhileInclusiveStreamTransformer.prototype;
    dart.addTypeTests(TakeWhileInclusiveStreamTransformer);
    TakeWhileInclusiveStreamTransformer.prototype[_is_TakeWhileInclusiveStreamTransformer_default] = true;
    dart.addTypeCaches(TakeWhileInclusiveStreamTransformer);
    dart.setMethodSignature(TakeWhileInclusiveStreamTransformer, () => ({
      __proto__: dart.getMethods(TakeWhileInclusiveStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TakeWhileInclusiveStreamTransformer, I[257]);
    dart.setFieldSignature(TakeWhileInclusiveStreamTransformer, () => ({
      __proto__: dart.getFields(TakeWhileInclusiveStreamTransformer.__proto__),
      test: dart.finalFieldType(dart.fnType(core.bool, [S]))
    }));
    return TakeWhileInclusiveStreamTransformer;
  });
  take_while_inclusive.TakeWhileInclusiveStreamTransformer = take_while_inclusive.TakeWhileInclusiveStreamTransformer$();
  dart.addTypeTests(take_while_inclusive.TakeWhileInclusiveStreamTransformer, _is_TakeWhileInclusiveStreamTransformer_default);
  take_while_inclusive['TakeWhileInclusiveExtension|takeWhileInclusive'] = function TakeWhileInclusiveExtension$124takeWhileInclusive(T, $this, test) {
    return new (take_while_inclusive.TakeWhileInclusiveStreamTransformer$(T)).new(test).bind($this);
  };
  take_while_inclusive['TakeWhileInclusiveExtension|get#takeWhileInclusive'] = function TakeWhileInclusiveExtension$124get$35takeWhileInclusive(T, $this) {
    return dart.fn(test => take_while_inclusive['TakeWhileInclusiveExtension|takeWhileInclusive'](T, $this, test), dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]));
  };
  const _is_TimeInterval_default = Symbol('_is_TimeInterval_default');
  time_interval.TimeInterval$ = dart.generic(T => {
    class TimeInterval extends core.Object {
      get interval() {
        return this[S$1.interval];
      }
      set interval(value) {
        super.interval = value;
      }
      get value() {
        return this[S$1.value$4];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, value, interval) {
        return new (time_interval.TimeInterval$(T)).new(value, interval);
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return time_interval.TimeInterval.is(other) && this.interval._equals(other.interval) && dart.equals(this.value, other.value);
      }
      get hashCode() {
        return (this.interval.hashCode ^ dart.hashCode(this.value)) >>> 0;
      }
      toString() {
        return "TimeInterval{interval: " + dart.str(this.interval) + ", value: " + dart.str(this.value) + "}";
      }
    }
    (TimeInterval.new = function(value, interval) {
      this[S$1.value$4] = value;
      this[S$1.interval] = interval;
      ;
    }).prototype = TimeInterval.prototype;
    dart.addTypeTests(TimeInterval);
    TimeInterval.prototype[_is_TimeInterval_default] = true;
    dart.addTypeCaches(TimeInterval);
    dart.setLibraryUri(TimeInterval, I[258]);
    dart.setFieldSignature(TimeInterval, () => ({
      __proto__: dart.getFields(TimeInterval.__proto__),
      interval: dart.finalFieldType(core.Duration),
      value: dart.finalFieldType(T)
    }));
    dart.defineExtensionMethods(TimeInterval, ['_equals', 'toString']);
    dart.defineExtensionAccessors(TimeInterval, ['hashCode']);
    return TimeInterval;
  });
  time_interval.TimeInterval = time_interval.TimeInterval$();
  dart.addTypeTests(time_interval.TimeInterval, _is_TimeInterval_default);
  const _is__TimeIntervalStreamSink_default = Symbol('_is__TimeIntervalStreamSink_default');
  time_interval._TimeIntervalStreamSink$ = dart.generic(S => {
    var __t$TimeIntervalOfS = () => (__t$TimeIntervalOfS = dart.constFn(time_interval.TimeInterval$(S)))();
    class _TimeIntervalStreamSink extends forwarding_sink.ForwardingSink$(S, time_interval.TimeInterval$(S)) {
      onData(data) {
        let t474;
        S.as(data);
        this[S$1._stopwatch].stop();
        this.sink.add(new (__t$TimeIntervalOfS()).new(data, new core.Duration.new({microseconds: this[S$1._stopwatch].elapsedMicroseconds})));
        t474 = this[S$1._stopwatch];
        (() => {
          t474.reset();
          t474.start();
          return t474;
        })();
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        return this.sink.close();
      }
      onCancel() {
      }
      onListen() {
        return this[S$1._stopwatch].start();
      }
      onPause() {
      }
      onResume() {
      }
      static ['_#new#tearOff'](S) {
        return new (time_interval._TimeIntervalStreamSink$(S)).new();
      }
    }
    (_TimeIntervalStreamSink.new = function() {
      this[S$1._stopwatch] = new core.Stopwatch.new();
      _TimeIntervalStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _TimeIntervalStreamSink.prototype;
    dart.addTypeTests(_TimeIntervalStreamSink);
    _TimeIntervalStreamSink.prototype[_is__TimeIntervalStreamSink_default] = true;
    dart.addTypeCaches(_TimeIntervalStreamSink);
    dart.setMethodSignature(_TimeIntervalStreamSink, () => ({
      __proto__: dart.getMethods(_TimeIntervalStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.dynamic, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_TimeIntervalStreamSink, I[258]);
    dart.setFieldSignature(_TimeIntervalStreamSink, () => ({
      __proto__: dart.getFields(_TimeIntervalStreamSink.__proto__),
      [S$1._stopwatch]: dart.finalFieldType(core.Stopwatch)
    }));
    return _TimeIntervalStreamSink;
  });
  time_interval._TimeIntervalStreamSink = time_interval._TimeIntervalStreamSink$();
  dart.addTypeTests(time_interval._TimeIntervalStreamSink, _is__TimeIntervalStreamSink_default);
  const _is_TimeIntervalStreamTransformer_default = Symbol('_is_TimeIntervalStreamTransformer_default');
  time_interval.TimeIntervalStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$TimeIntervalOfS = () => (__t$TimeIntervalOfS = dart.constFn(time_interval.TimeInterval$(S)))();
    var __t$_TimeIntervalStreamSinkOfS = () => (__t$_TimeIntervalStreamSinkOfS = dart.constFn(time_interval._TimeIntervalStreamSink$(S)))();
    var __t$VoidTo_TimeIntervalStreamSinkOfS = () => (__t$VoidTo_TimeIntervalStreamSinkOfS = dart.constFn(dart.fnType(__t$_TimeIntervalStreamSinkOfS(), [])))();
    class TimeIntervalStreamTransformer extends async.StreamTransformerBase$(S, time_interval.TimeInterval$(S)) {
      static ['_#new#tearOff'](S) {
        return new (time_interval.TimeIntervalStreamTransformer$(S)).new();
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, __t$TimeIntervalOfS(), stream, dart.fn(() => new (__t$_TimeIntervalStreamSinkOfS()).new(), __t$VoidTo_TimeIntervalStreamSinkOfS()));
      }
    }
    (TimeIntervalStreamTransformer.new = function() {
      TimeIntervalStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TimeIntervalStreamTransformer.prototype;
    dart.addTypeTests(TimeIntervalStreamTransformer);
    TimeIntervalStreamTransformer.prototype[_is_TimeIntervalStreamTransformer_default] = true;
    dart.addTypeCaches(TimeIntervalStreamTransformer);
    dart.setMethodSignature(TimeIntervalStreamTransformer, () => ({
      __proto__: dart.getMethods(TimeIntervalStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(time_interval.TimeInterval$(S)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TimeIntervalStreamTransformer, I[258]);
    return TimeIntervalStreamTransformer;
  });
  time_interval.TimeIntervalStreamTransformer = time_interval.TimeIntervalStreamTransformer$();
  dart.addTypeTests(time_interval.TimeIntervalStreamTransformer, _is_TimeIntervalStreamTransformer_default);
  time_interval['TimeIntervalExtension|timeInterval'] = function TimeIntervalExtension$124timeInterval(T, $this) {
    return new (time_interval.TimeIntervalStreamTransformer$(T)).new().bind($this);
  };
  time_interval['TimeIntervalExtension|get#timeInterval'] = function TimeIntervalExtension$124get$35timeInterval(T, $this) {
    return dart.fn(() => time_interval['TimeIntervalExtension|timeInterval'](T, $this), dart.fnType(async.Stream$(time_interval.TimeInterval$(T)), []));
  };
  const _is__TimestampStreamSink_default = Symbol('_is__TimestampStreamSink_default');
  timestamp$._TimestampStreamSink$ = dart.generic(S => {
    var __t$TimestampedOfS = () => (__t$TimestampedOfS = dart.constFn(timestamp$.Timestamped$(S)))();
    class _TimestampStreamSink extends core.Object {
      static ['_#new#tearOff'](S, _outputSink) {
        return new (timestamp$._TimestampStreamSink$(S)).new(_outputSink);
      }
      add(data) {
        S.as(data);
        this[S$1._outputSink$12].add(new (__t$TimestampedOfS()).new(new core.DateTime.now(), data));
      }
      addError(e, st = null) {
        return this[S$1._outputSink$12].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$12].close();
      }
    }
    (_TimestampStreamSink.new = function(_outputSink) {
      this[S$1._outputSink$12] = _outputSink;
      ;
    }).prototype = _TimestampStreamSink.prototype;
    dart.addTypeTests(_TimestampStreamSink);
    _TimestampStreamSink.prototype[_is__TimestampStreamSink_default] = true;
    dart.addTypeCaches(_TimestampStreamSink);
    _TimestampStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_TimestampStreamSink, () => ({
      __proto__: dart.getMethods(_TimestampStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_TimestampStreamSink, I[259]);
    dart.setFieldSignature(_TimestampStreamSink, () => ({
      __proto__: dart.getFields(_TimestampStreamSink.__proto__),
      [S$1._outputSink$12]: dart.finalFieldType(async.EventSink$(timestamp$.Timestamped$(S)))
    }));
    return _TimestampStreamSink;
  });
  timestamp$._TimestampStreamSink = timestamp$._TimestampStreamSink$();
  dart.addTypeTests(timestamp$._TimestampStreamSink, _is__TimestampStreamSink_default);
  const _is_Timestamped_default = Symbol('_is_Timestamped_default');
  timestamp$.Timestamped$ = dart.generic(T => {
    class Timestamped extends core.Object {
      get value() {
        return this[S$1.value$5];
      }
      set value(value) {
        super.value = value;
      }
      get timestamp() {
        return this[S$1.timestamp$1];
      }
      set timestamp(value) {
        super.timestamp = value;
      }
      static ['_#new#tearOff'](T, timestamp, value) {
        return new (timestamp$.Timestamped$(T)).new(timestamp, value);
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return timestamp$.Timestamped.is(other) && this.timestamp._equals(other.timestamp) && dart.equals(this.value, other.value);
      }
      get hashCode() {
        return (this.timestamp.hashCode ^ dart.hashCode(this.value)) >>> 0;
      }
      toString() {
        return "TimeStamp{timestamp: " + dart.str(this.timestamp) + ", value: " + dart.str(this.value) + "}";
      }
    }
    (Timestamped.new = function(timestamp, value) {
      this[S$1.timestamp$1] = timestamp;
      this[S$1.value$5] = value;
      ;
    }).prototype = Timestamped.prototype;
    dart.addTypeTests(Timestamped);
    Timestamped.prototype[_is_Timestamped_default] = true;
    dart.addTypeCaches(Timestamped);
    dart.setLibraryUri(Timestamped, I[259]);
    dart.setFieldSignature(Timestamped, () => ({
      __proto__: dart.getFields(Timestamped.__proto__),
      value: dart.finalFieldType(T),
      timestamp: dart.finalFieldType(core.DateTime)
    }));
    dart.defineExtensionMethods(Timestamped, ['_equals', 'toString']);
    dart.defineExtensionAccessors(Timestamped, ['hashCode']);
    return Timestamped;
  });
  timestamp$.Timestamped = timestamp$.Timestamped$();
  dart.addTypeTests(timestamp$.Timestamped, _is_Timestamped_default);
  const _is_TimestampStreamTransformer_default = Symbol('_is_TimestampStreamTransformer_default');
  timestamp$.TimestampStreamTransformer$ = dart.generic(S => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$TimestampedOfS = () => (__t$TimestampedOfS = dart.constFn(timestamp$.Timestamped$(S)))();
    var __t$StreamOfTimestampedOfS = () => (__t$StreamOfTimestampedOfS = dart.constFn(async.Stream$(__t$TimestampedOfS())))();
    var __t$_TimestampStreamSinkOfS = () => (__t$_TimestampStreamSinkOfS = dart.constFn(timestamp$._TimestampStreamSink$(S)))();
    var __t$EventSinkOfTimestampedOfS = () => (__t$EventSinkOfTimestampedOfS = dart.constFn(async.EventSink$(__t$TimestampedOfS())))();
    var __t$EventSinkOfTimestampedOfSTo_TimestampStreamSinkOfS = () => (__t$EventSinkOfTimestampedOfSTo_TimestampStreamSinkOfS = dart.constFn(dart.fnType(__t$_TimestampStreamSinkOfS(), [__t$EventSinkOfTimestampedOfS()])))();
    class TimestampStreamTransformer extends async.StreamTransformerBase$(S, timestamp$.Timestamped$(S)) {
      static ['_#new#tearOff'](S) {
        return new (timestamp$.TimestampStreamTransformer$(S)).new();
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfTimestampedOfS().eventTransformed(stream, dart.fn(sink => new (__t$_TimestampStreamSinkOfS()).new(sink), __t$EventSinkOfTimestampedOfSTo_TimestampStreamSinkOfS()));
      }
    }
    (TimestampStreamTransformer.new = function() {
      TimestampStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TimestampStreamTransformer.prototype;
    dart.addTypeTests(TimestampStreamTransformer);
    TimestampStreamTransformer.prototype[_is_TimestampStreamTransformer_default] = true;
    dart.addTypeCaches(TimestampStreamTransformer);
    dart.setMethodSignature(TimestampStreamTransformer, () => ({
      __proto__: dart.getMethods(TimestampStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(timestamp$.Timestamped$(S)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TimestampStreamTransformer, I[259]);
    return TimestampStreamTransformer;
  });
  timestamp$.TimestampStreamTransformer = timestamp$.TimestampStreamTransformer$();
  dart.addTypeTests(timestamp$.TimestampStreamTransformer, _is_TimestampStreamTransformer_default);
  timestamp$['TimeStampExtension|timestamp'] = function TimeStampExtension$124timestamp(T, $this) {
    return new (timestamp$.TimestampStreamTransformer$(T)).new().bind($this);
  };
  timestamp$['TimeStampExtension|get#timestamp'] = function TimeStampExtension$124get$35timestamp(T, $this) {
    return dart.fn(() => timestamp$['TimeStampExtension|timestamp'](T, $this), dart.fnType(async.Stream$(timestamp$.Timestamped$(T)), []));
  };
  const _is__WhereNotNullStreamSink_default = Symbol('_is__WhereNotNullStreamSink_default');
  where_not_null._WhereNotNullStreamSink$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class _WhereNotNullStreamSink extends core.Object {
      static ['_#new#tearOff'](T, _outputSink) {
        return new (where_not_null._WhereNotNullStreamSink$(T)).new(_outputSink);
      }
      add(event) {
        __t$TN().as(event);
        if (event != null) {
          this[S$1._outputSink$13].add(event);
        }
      }
      addError(error, stackTrace = null) {
        return this[S$1._outputSink$13].addError(error, stackTrace);
      }
      close() {
        return this[S$1._outputSink$13].close();
      }
    }
    (_WhereNotNullStreamSink.new = function(_outputSink) {
      this[S$1._outputSink$13] = _outputSink;
      ;
    }).prototype = _WhereNotNullStreamSink.prototype;
    dart.addTypeTests(_WhereNotNullStreamSink);
    _WhereNotNullStreamSink.prototype[_is__WhereNotNullStreamSink_default] = true;
    dart.addTypeCaches(_WhereNotNullStreamSink);
    _WhereNotNullStreamSink[dart.implements] = () => [async.EventSink$(dart.nullable(T))];
    dart.setMethodSignature(_WhereNotNullStreamSink, () => ({
      __proto__: dart.getMethods(_WhereNotNullStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_WhereNotNullStreamSink, I[260]);
    dart.setFieldSignature(_WhereNotNullStreamSink, () => ({
      __proto__: dart.getFields(_WhereNotNullStreamSink.__proto__),
      [S$1._outputSink$13]: dart.finalFieldType(async.EventSink$(T))
    }));
    return _WhereNotNullStreamSink;
  });
  where_not_null._WhereNotNullStreamSink = where_not_null._WhereNotNullStreamSink$();
  dart.addTypeTests(where_not_null._WhereNotNullStreamSink, _is__WhereNotNullStreamSink_default);
  const _is_WhereNotNullStreamTransformer_default = Symbol('_is_WhereNotNullStreamTransformer_default');
  where_not_null.WhereNotNullStreamTransformer$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$StreamOfTN = () => (__t$StreamOfTN = dart.constFn(async.Stream$(__t$TN())))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$_WhereNotNullStreamSinkOfT = () => (__t$_WhereNotNullStreamSinkOfT = dart.constFn(where_not_null._WhereNotNullStreamSink$(T)))();
    var __t$EventSinkOfT = () => (__t$EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    var __t$EventSinkOfTTo_WhereNotNullStreamSinkOfT = () => (__t$EventSinkOfTTo_WhereNotNullStreamSinkOfT = dart.constFn(dart.fnType(__t$_WhereNotNullStreamSinkOfT(), [__t$EventSinkOfT()])))();
    class WhereNotNullStreamTransformer extends async.StreamTransformerBase$(dart.nullable(T), T) {
      bind(stream) {
        __t$StreamOfTN().as(stream);
        return __t$StreamOfT().eventTransformed(stream, dart.fn(sink => new (__t$_WhereNotNullStreamSinkOfT()).new(sink), __t$EventSinkOfTTo_WhereNotNullStreamSinkOfT()));
      }
      static ['_#new#tearOff'](T) {
        return new (where_not_null.WhereNotNullStreamTransformer$(T)).new();
      }
    }
    (WhereNotNullStreamTransformer.new = function() {
      WhereNotNullStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = WhereNotNullStreamTransformer.prototype;
    dart.addTypeTests(WhereNotNullStreamTransformer);
    WhereNotNullStreamTransformer.prototype[_is_WhereNotNullStreamTransformer_default] = true;
    dart.addTypeCaches(WhereNotNullStreamTransformer);
    dart.setMethodSignature(WhereNotNullStreamTransformer, () => ({
      __proto__: dart.getMethods(WhereNotNullStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(WhereNotNullStreamTransformer, I[260]);
    return WhereNotNullStreamTransformer;
  });
  where_not_null.WhereNotNullStreamTransformer = where_not_null.WhereNotNullStreamTransformer$();
  dart.addTypeTests(where_not_null.WhereNotNullStreamTransformer, _is_WhereNotNullStreamTransformer_default);
  where_not_null['WhereNotNullExtension|whereNotNull'] = function WhereNotNullExtension$124whereNotNull(T, $this) {
    return new (where_not_null.WhereNotNullStreamTransformer$(T)).new().bind($this);
  };
  where_not_null['WhereNotNullExtension|get#whereNotNull'] = function WhereNotNullExtension$124get$35whereNotNull(T, $this) {
    return dart.fn(() => where_not_null['WhereNotNullExtension|whereNotNull'](T, $this), dart.fnType(async.Stream$(T), []));
  };
  const _is__WhereTypeStreamSink_default = Symbol('_is__WhereTypeStreamSink_default');
  where_type._WhereTypeStreamSink$ = dart.generic((S, T) => {
    class _WhereTypeStreamSink extends core.Object {
      static ['_#new#tearOff'](S, T, _outputSink) {
        return new (where_type._WhereTypeStreamSink$(S, T)).new(_outputSink);
      }
      add(data) {
        S.as(data);
        if (T.is(data)) {
          this[S$1._outputSink$14].add(data);
        }
      }
      addError(e, st = null) {
        return this[S$1._outputSink$14].addError(e, st);
      }
      close() {
        return this[S$1._outputSink$14].close();
      }
    }
    (_WhereTypeStreamSink.new = function(_outputSink) {
      this[S$1._outputSink$14] = _outputSink;
      ;
    }).prototype = _WhereTypeStreamSink.prototype;
    dart.addTypeTests(_WhereTypeStreamSink);
    _WhereTypeStreamSink.prototype[_is__WhereTypeStreamSink_default] = true;
    dart.addTypeCaches(_WhereTypeStreamSink);
    _WhereTypeStreamSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_WhereTypeStreamSink, () => ({
      __proto__: dart.getMethods(_WhereTypeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_WhereTypeStreamSink, I[261]);
    dart.setFieldSignature(_WhereTypeStreamSink, () => ({
      __proto__: dart.getFields(_WhereTypeStreamSink.__proto__),
      [S$1._outputSink$14]: dart.finalFieldType(async.EventSink$(T))
    }));
    return _WhereTypeStreamSink;
  });
  where_type._WhereTypeStreamSink = where_type._WhereTypeStreamSink$();
  dart.addTypeTests(where_type._WhereTypeStreamSink, _is__WhereTypeStreamSink_default);
  const _is_WhereTypeStreamTransformer_default = Symbol('_is_WhereTypeStreamTransformer_default');
  where_type.WhereTypeStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_WhereTypeStreamSinkOfS$T = () => (__t$_WhereTypeStreamSinkOfS$T = dart.constFn(where_type._WhereTypeStreamSink$(S, T)))();
    var __t$EventSinkOfTTo_WhereTypeStreamSinkOfS$T = () => (__t$EventSinkOfTTo_WhereTypeStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_WhereTypeStreamSinkOfS$T(), [__t$EventSinkOfT()])))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$EventSinkOfT = () => (__t$EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class WhereTypeStreamTransformer extends async.StreamTransformerBase$(S, T) {
      static ['_#new#tearOff'](S, T) {
        return new (where_type.WhereTypeStreamTransformer$(S, T)).new();
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return __t$StreamOfT().eventTransformed(stream, dart.fn(sink => new (__t$_WhereTypeStreamSinkOfS$T()).new(sink), __t$EventSinkOfTTo_WhereTypeStreamSinkOfS$T()));
      }
    }
    (WhereTypeStreamTransformer.new = function() {
      WhereTypeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = WhereTypeStreamTransformer.prototype;
    dart.addTypeTests(WhereTypeStreamTransformer);
    WhereTypeStreamTransformer.prototype[_is_WhereTypeStreamTransformer_default] = true;
    dart.addTypeCaches(WhereTypeStreamTransformer);
    dart.setMethodSignature(WhereTypeStreamTransformer, () => ({
      __proto__: dart.getMethods(WhereTypeStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(WhereTypeStreamTransformer, I[261]);
    return WhereTypeStreamTransformer;
  });
  where_type.WhereTypeStreamTransformer = where_type.WhereTypeStreamTransformer$();
  dart.addTypeTests(where_type.WhereTypeStreamTransformer, _is_WhereTypeStreamTransformer_default);
  where_type['WhereTypeExtension|whereType'] = function WhereTypeExtension$124whereType(T, S, $this) {
    return new (where_type.WhereTypeStreamTransformer$(T, S)).new().bind($this);
  };
  where_type['WhereTypeExtension|get#whereType'] = function WhereTypeExtension$124get$35whereType(T, $this) {
    return dart.fn(S => where_type['WhereTypeExtension|whereType'](T, S, $this), T$0.VoidToStreamOfS());
  };
  const _is__WithLatestFromStreamSink_default = Symbol('_is__WithLatestFromStreamSink_default');
  with_latest_from._WithLatestFromStreamSink$ = dart.generic((S, T, R) => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$StreamSubscriptionOfT = () => (__t$StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$intAndStreamOfTToStreamSubscriptionOfT = () => (__t$intAndStreamOfTToStreamSubscriptionOfT = dart.constFn(dart.fnType(__t$StreamSubscriptionOfT(), [core.int, __t$StreamOfT()])))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$ListOfTN = () => (__t$ListOfTN = dart.constFn(core.List$(__t$TN())))();
    class _WithLatestFromStreamSink extends forwarding_sink.ForwardingSink$(S, R) {
      get [S$1._subscriptions$2]() {
        let t482;
        t482 = this[S$1.___WithLatestFromStreamSink__subscriptions];
        return t482 == null ? dart.throw(new _internal.LateError.fieldNI("_subscriptions")) : t482;
      }
      set [S$1._subscriptions$2](_subscriptions$35param) {
        this[S$1.___WithLatestFromStreamSink__subscriptions] = _subscriptions$35param;
      }
      static ['_#new#tearOff'](S, T, R, _latestFromStreams, _combiner) {
        return new (with_latest_from._WithLatestFromStreamSink$(S, T, R)).new(_latestFromStreams, _combiner);
      }
      onData(data) {
        let t483, t482;
        S.as(data);
        if (this[S$1._hasValues] && this[S$1._latestValues] != null) {
          let combinedValue = null;
          try {
            combinedValue = (t482 = data, t483 = __t$ListOfT().unmodifiable(dart.nullCheck(this[S$1._latestValues])), this[S$1._combiner](t482, t483));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              this.sink.addError(e, s);
              return;
            } else
              throw e$;
          }
          this.sink.add(combinedValue);
        }
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        return this.sink.close();
      }
      onCancel() {
        this[S$1._latestValues] = null;
        return subscription['StreamSubscriptionsIterableExtension|cancelAll'](this[S$1._subscriptions$2]);
      }
      onListen() {
        let count = 0;
        const mapper = (index, stream) => {
          let hasValue = false;
          return stream.listen(dart.fn(value => {
            if (!hasValue) {
              hasValue = true;
              if ((count = count + 1) === this[S$1._subscriptions$2][S$.$length]) {
                this[S$1._hasValues] = true;
              }
            }
            dart.nullCheck(this[S$1._latestValues])[S$.$_set](index, value);
          }, __t$TTovoid()), {onError: dart.bind(this.sink, 'addError')});
        };
        dart.fn(mapper, __t$intAndStreamOfTToStreamSubscriptionOfT());
        this[S$1._subscriptions$2] = collection_extensions['MapNotNullIterableExtension|mapIndexed'](__t$StreamOfT(), __t$StreamSubscriptionOfT(), this[S$1._latestFromStreams], mapper)[S$.$toList]({growable: false});
        if (this[S$1._subscriptions$2][S$.$isEmpty]) {
          this[S$1._hasValues] = true;
        }
        this[S$1._latestValues] = __t$ListOfTN().filled(this[S$1._subscriptions$2][S$.$length], null);
      }
      onPause() {
        return subscription['StreamSubscriptionsIterableExtensions|pauseAll'](this[S$1._subscriptions$2]);
      }
      onResume() {
        return subscription['StreamSubscriptionsIterableExtensions|resumeAll'](this[S$1._subscriptions$2]);
      }
    }
    (_WithLatestFromStreamSink.new = function(_latestFromStreams, _combiner) {
      this[S$1._hasValues] = false;
      this[S$1._latestValues] = null;
      this[S$1.___WithLatestFromStreamSink__subscriptions] = null;
      this[S$1._latestFromStreams] = _latestFromStreams;
      this[S$1._combiner] = _combiner;
      _WithLatestFromStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _WithLatestFromStreamSink.prototype;
    dart.addTypeTests(_WithLatestFromStreamSink);
    _WithLatestFromStreamSink.prototype[_is__WithLatestFromStreamSink_default] = true;
    dart.addTypeCaches(_WithLatestFromStreamSink);
    dart.setMethodSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getMethods(_WithLatestFromStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getGetters(_WithLatestFromStreamSink.__proto__),
      [S$1._subscriptions$2]: core.List$(async.StreamSubscription$(T))
    }));
    dart.setSetterSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getSetters(_WithLatestFromStreamSink.__proto__),
      [S$1._subscriptions$2]: core.List$(async.StreamSubscription$(T))
    }));
    dart.setLibraryUri(_WithLatestFromStreamSink, I[262]);
    dart.setFieldSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getFields(_WithLatestFromStreamSink.__proto__),
      [S$1._latestFromStreams]: dart.finalFieldType(core.Iterable$(async.Stream$(T))),
      [S$1._combiner]: dart.finalFieldType(dart.fnType(R, [S, core.List$(T)])),
      [S$1._hasValues]: dart.fieldType(core.bool),
      [S$1._latestValues]: dart.fieldType(dart.nullable(core.List$(dart.nullable(T)))),
      [S$1.___WithLatestFromStreamSink__subscriptions]: dart.fieldType(dart.nullable(core.List$(async.StreamSubscription$(T))))
    }));
    return _WithLatestFromStreamSink;
  });
  with_latest_from._WithLatestFromStreamSink = with_latest_from._WithLatestFromStreamSink$();
  dart.addTypeTests(with_latest_from._WithLatestFromStreamSink, _is__WithLatestFromStreamSink_default);
  const _is_WithLatestFromStreamTransformer_default = Symbol('_is_WithLatestFromStreamTransformer_default');
  with_latest_from.WithLatestFromStreamTransformer$ = dart.generic((S, T, R) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_WithLatestFromStreamSinkOfS$T$R = () => (__t$_WithLatestFromStreamSinkOfS$T$R = dart.constFn(with_latest_from._WithLatestFromStreamSink$(S, T, R)))();
    var __t$VoidTo_WithLatestFromStreamSinkOfS$T$R = () => (__t$VoidTo_WithLatestFromStreamSinkOfS$T$R = dart.constFn(dart.fnType(__t$_WithLatestFromStreamSinkOfS$T$R(), [])))();
    class WithLatestFromStreamTransformer extends async.StreamTransformerBase$(S, R) {
      get latestFromStreams() {
        return this[S$1.latestFromStreams];
      }
      set latestFromStreams(value) {
        super.latestFromStreams = value;
      }
      get combiner() {
        return this[S$1.combiner];
      }
      set combiner(value) {
        super.combiner = value;
      }
      static ['_#new#tearOff'](S, T, R, latestFromStreams, combiner) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(S, T, R)).new(latestFromStreams, combiner);
      }
      static withList(T, latestFromStreams) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, T, core.List$(T))).new(latestFromStreams, dart.fn((s, values) => (() => {
          let t483 = _interceptors.JSArray$(T).of([s]);
          t483[S$.$addAll](values);
          return t483;
        })(), dart.fnType(core.List$(T), [T, core.List$(T)])));
      }
      static with1(T, S, R, latestFromStream, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, S, R)).new(_interceptors.JSArray$(async.Stream$(S)).of([latestFromStream]), dart.fn((s, values) => fn(s, values[S$.$_get](0)), dart.fnType(R, [T, core.List$(S)])));
      }
      static with2(T, A, B, R, latestFromStream1, latestFromStream2, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1))), dart.fnType(R, [T, core.List])));
      }
      static with3(T, A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2))), dart.fnType(R, [T, core.List])));
      }
      static with4(T, A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3))), dart.fnType(R, [T, core.List])));
      }
      static with5(T, A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4))), dart.fnType(R, [T, core.List])));
      }
      static with6(T, A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5))), dart.fnType(R, [T, core.List])));
      }
      static with7(T, A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6))), dart.fnType(R, [T, core.List])));
      }
      static with8(T, A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7))), dart.fnType(R, [T, core.List])));
      }
      static with9(T, A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9]), dart.fn((s, values) => fn(s, A.as(values[S$.$_get](0)), B.as(values[S$.$_get](1)), C.as(values[S$.$_get](2)), D.as(values[S$.$_get](3)), E.as(values[S$.$_get](4)), F.as(values[S$.$_get](5)), G.as(values[S$.$_get](6)), H.as(values[S$.$_get](7)), I.as(values[S$.$_get](8))), dart.fnType(R, [T, core.List])));
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, R, stream, dart.fn(() => new (__t$_WithLatestFromStreamSinkOfS$T$R()).new(this.latestFromStreams, this.combiner), __t$VoidTo_WithLatestFromStreamSinkOfS$T$R()));
      }
    }
    (WithLatestFromStreamTransformer.new = function(latestFromStreams, combiner) {
      this[S$1.latestFromStreams] = latestFromStreams;
      this[S$1.combiner] = combiner;
      WithLatestFromStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = WithLatestFromStreamTransformer.prototype;
    dart.addTypeTests(WithLatestFromStreamTransformer);
    WithLatestFromStreamTransformer.prototype[_is_WithLatestFromStreamTransformer_default] = true;
    dart.addTypeCaches(WithLatestFromStreamTransformer);
    dart.setMethodSignature(WithLatestFromStreamTransformer, () => ({
      __proto__: dart.getMethods(WithLatestFromStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(R), [dart.nullable(core.Object)])
    }));
    dart.setStaticMethodSignature(WithLatestFromStreamTransformer, () => ['withList', 'with1', 'with2', 'with3', 'with4', 'with5', 'with6', 'with7', 'with8', 'with9']);
    dart.setLibraryUri(WithLatestFromStreamTransformer, I[262]);
    dart.setFieldSignature(WithLatestFromStreamTransformer, () => ({
      __proto__: dart.getFields(WithLatestFromStreamTransformer.__proto__),
      latestFromStreams: dart.finalFieldType(core.Iterable$(async.Stream$(T))),
      combiner: dart.finalFieldType(dart.fnType(R, [S, core.List$(T)]))
    }));
    return WithLatestFromStreamTransformer;
  });
  with_latest_from.WithLatestFromStreamTransformer = with_latest_from.WithLatestFromStreamTransformer$();
  dart.addTypeTests(with_latest_from.WithLatestFromStreamTransformer, _is_WithLatestFromStreamTransformer_default);
  with_latest_from['WithLatestFromExtensions|withLatestFrom'] = function WithLatestFromExtensions$124withLatestFrom(T, S, R, $this, latestFromStream, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with1(T, S, R, latestFromStream, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom'] = function WithLatestFromExtensions$124get$35withLatestFrom(T, $this) {
    return dart.fn((S, R, latestFromStream, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom'](T, S, R, $this, latestFromStream, fn), dart.gFnType((S, R) => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfS(), dart.fnType(R, [T, S])]];
    }, (S, R) => {
      var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFromList'] = function WithLatestFromExtensions$124withLatestFromList(T, $this, latestFromStreams) {
    return with_latest_from.WithLatestFromStreamTransformer.withList(T, latestFromStreams).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFromList'] = function WithLatestFromExtensions$124get$35withLatestFromList(T, $this) {
    return dart.fn(latestFromStreams => with_latest_from['WithLatestFromExtensions|withLatestFromList'](T, $this, latestFromStreams), dart.fnType(async.Stream$(core.List$(T)), [core.Iterable$(async.Stream$(T))]));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom2'] = function WithLatestFromExtensions$124withLatestFrom2(T, A, B, R, $this, latestFromStream1, latestFromStream2, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with2(T, A, B, R, latestFromStream1, latestFromStream2, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom2'] = function WithLatestFromExtensions$124get$35withLatestFrom2(T, $this) {
    return dart.fn((A, B, R, latestFromStream1, latestFromStream2, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom2'](T, A, B, R, $this, latestFromStream1, latestFromStream2, fn), dart.gFnType((A, B, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), dart.fnType(R, [T, A, B])]];
    }, (A, B, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom3'] = function WithLatestFromExtensions$124withLatestFrom3(T, A, B, C, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with3(T, A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom3'] = function WithLatestFromExtensions$124get$35withLatestFrom3(T, $this) {
    return dart.fn((A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom3'](T, A, B, C, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, fn), dart.gFnType((A, B, C, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), dart.fnType(R, [T, A, B, C])]];
    }, (A, B, C, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom4'] = function WithLatestFromExtensions$124withLatestFrom4(T, A, B, C, D, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with4(T, A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom4'] = function WithLatestFromExtensions$124get$35withLatestFrom4(T, $this) {
    return dart.fn((A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom4'](T, A, B, C, D, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn), dart.gFnType((A, B, C, D, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), __t$StreamOfD(), dart.fnType(R, [T, A, B, C, D])]];
    }, (A, B, C, D, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom5'] = function WithLatestFromExtensions$124withLatestFrom5(T, A, B, C, D, E, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with5(T, A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom5'] = function WithLatestFromExtensions$124get$35withLatestFrom5(T, $this) {
    return dart.fn((A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom5'](T, A, B, C, D, E, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn), dart.gFnType((A, B, C, D, E, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), __t$StreamOfD(), __t$StreamOfE(), dart.fnType(R, [T, A, B, C, D, E])]];
    }, (A, B, C, D, E, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom6'] = function WithLatestFromExtensions$124withLatestFrom6(T, A, B, C, D, E, F, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with6(T, A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom6'] = function WithLatestFromExtensions$124get$35withLatestFrom6(T, $this) {
    return dart.fn((A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom6'](T, A, B, C, D, E, F, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn), dart.gFnType((A, B, C, D, E, F, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), __t$StreamOfD(), __t$StreamOfE(), __t$StreamOfF(), dart.fnType(R, [T, A, B, C, D, E, F])]];
    }, (A, B, C, D, E, F, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom7'] = function WithLatestFromExtensions$124withLatestFrom7(T, A, B, C, D, E, F, G, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with7(T, A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom7'] = function WithLatestFromExtensions$124get$35withLatestFrom7(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom7'](T, A, B, C, D, E, F, G, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn), dart.gFnType((A, B, C, D, E, F, G, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfG = () => (__t$StreamOfG = dart.constFn(async.Stream$(G)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), __t$StreamOfD(), __t$StreamOfE(), __t$StreamOfF(), __t$StreamOfG(), dart.fnType(R, [T, A, B, C, D, E, F, G])]];
    }, (A, B, C, D, E, F, G, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfG = () => (__t$StreamOfG = dart.constFn(async.Stream$(G)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom8'] = function WithLatestFromExtensions$124withLatestFrom8(T, A, B, C, D, E, F, G, H, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with8(T, A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom8'] = function WithLatestFromExtensions$124get$35withLatestFrom8(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom8'](T, A, B, C, D, E, F, G, H, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn), dart.gFnType((A, B, C, D, E, F, G, H, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfG = () => (__t$StreamOfG = dart.constFn(async.Stream$(G)))();
      var __t$StreamOfH = () => (__t$StreamOfH = dart.constFn(async.Stream$(H)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), __t$StreamOfD(), __t$StreamOfE(), __t$StreamOfF(), __t$StreamOfG(), __t$StreamOfH(), dart.fnType(R, [T, A, B, C, D, E, F, G, H])]];
    }, (A, B, C, D, E, F, G, H, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfG = () => (__t$StreamOfG = dart.constFn(async.Stream$(G)))();
      var __t$StreamOfH = () => (__t$StreamOfH = dart.constFn(async.Stream$(H)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom9'] = function WithLatestFromExtensions$124withLatestFrom9(T, A, B, C, D, E, F, G, H, I, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) {
    return with_latest_from.WithLatestFromStreamTransformer.with9(T, A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn).bind($this);
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom9'] = function WithLatestFromExtensions$124get$35withLatestFrom9(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom9'](T, A, B, C, D, E, F, G, H, I, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn), dart.gFnType((A, B, C, D, E, F, G, H, I, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfG = () => (__t$StreamOfG = dart.constFn(async.Stream$(G)))();
      var __t$StreamOfH = () => (__t$StreamOfH = dart.constFn(async.Stream$(H)))();
      var __t$StreamOfI = () => (__t$StreamOfI = dart.constFn(async.Stream$(I)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [__t$StreamOfR(), [__t$StreamOfA(), __t$StreamOfB(), __t$StreamOfC(), __t$StreamOfD(), __t$StreamOfE(), __t$StreamOfF(), __t$StreamOfG(), __t$StreamOfH(), __t$StreamOfI(), dart.fnType(R, [T, A, B, C, D, E, F, G, H, I])]];
    }, (A, B, C, D, E, F, G, H, I, R) => {
      var __t$StreamOfA = () => (__t$StreamOfA = dart.constFn(async.Stream$(A)))();
      var __t$StreamOfB = () => (__t$StreamOfB = dart.constFn(async.Stream$(B)))();
      var __t$StreamOfC = () => (__t$StreamOfC = dart.constFn(async.Stream$(C)))();
      var __t$StreamOfD = () => (__t$StreamOfD = dart.constFn(async.Stream$(D)))();
      var __t$StreamOfE = () => (__t$StreamOfE = dart.constFn(async.Stream$(E)))();
      var __t$StreamOfF = () => (__t$StreamOfF = dart.constFn(async.Stream$(F)))();
      var __t$StreamOfG = () => (__t$StreamOfG = dart.constFn(async.Stream$(G)))();
      var __t$StreamOfH = () => (__t$StreamOfH = dart.constFn(async.Stream$(H)))();
      var __t$StreamOfI = () => (__t$StreamOfI = dart.constFn(async.Stream$(I)))();
      var __t$StreamOfR = () => (__t$StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  composite_subscription.CompositeSubscription = class CompositeSubscription extends core.Object {
    get isDisposed() {
      return this[S$1._isDisposed];
    }
    get length() {
      return this[S$1._subscriptionsList][S$.$length];
    }
    get isEmpty() {
      return this[S$1._subscriptionsList][S$.$isEmpty];
    }
    get isNotEmpty() {
      return this[S$1._subscriptionsList][S$.$isNotEmpty];
    }
    get allPaused() {
      return this[S$1._subscriptionsList][S$.$isNotEmpty] && this[S$1._subscriptionsList][S$.$every](dart.fn(s => s.isPaused, T$0.StreamSubscriptionTobool()));
    }
    add(T, subscription) {
      if (this.isDisposed) {
        dart.throw(new core.StateError.new("This " + dart.str(this[S$0.$runtimeType]) + " was disposed, consider checking `isDisposed` or try to use new instance instead"));
      }
      this[S$1._subscriptionsList][S$.$add](subscription);
      return subscription;
    }
    remove(subscription, opts$) {
      let shouldCancel = opts$ && 'shouldCancel' in opts$ ? opts$.shouldCancel : true;
      return this[S$1._subscriptionsList][S$.$remove](subscription) && shouldCancel ? subscription.cancel() : null;
    }
    clear() {
      let cancelAllDone = subscription['StreamSubscriptionsIterableExtension|cancelAll'](this[S$1._subscriptionsList]);
      this[S$1._subscriptionsList][S$.$clear]();
      return cancelAllDone;
    }
    dispose() {
      let clearDone = this.clear();
      this[S$1._isDisposed] = true;
      return clearDone;
    }
    pauseAll(resumeSignal = null) {
      return subscription['StreamSubscriptionsIterableExtensions|pauseAll'](this[S$1._subscriptionsList], resumeSignal);
    }
    resumeAll() {
      return subscription['StreamSubscriptionsIterableExtensions|resumeAll'](this[S$1._subscriptionsList]);
    }
    cancel() {
      let t504;
      t504 = this.dispose();
      return t504 == null ? T$.FutureOfvoid().value(null) : t504;
    }
    get isPaused() {
      return this.allPaused;
    }
    pause(resumeSignal = null) {
      return this.pauseAll(resumeSignal);
    }
    resume() {
      return this.resumeAll();
    }
    asFuture(E, futureValue = null) {
      return this[S$1._unsupportedError$1]();
    }
    onData(handleData) {
      return this[S$1._unsupportedError$1]();
    }
    onDone(handleDone) {
      return this[S$1._unsupportedError$1]();
    }
    onError(handleError) {
      return this[S$1._unsupportedError$1]();
    }
    [S$1._unsupportedError$1]() {
      return dart.throw(new core.UnsupportedError.new("Cannot change handlers of CompositeSubscription."));
    }
    static ['_#new#tearOff']() {
      return new composite_subscription.CompositeSubscription.new();
    }
  };
  (composite_subscription.CompositeSubscription.new = function() {
    this[S$1._isDisposed] = false;
    this[S$1._subscriptionsList] = T$0.JSArrayOfStreamSubscription().of([]);
    ;
  }).prototype = composite_subscription.CompositeSubscription.prototype;
  composite_subscription.CompositeSubscription.prototype[dart.isStreamSubscription] = true;
  dart.addTypeTests(composite_subscription.CompositeSubscription);
  dart.addTypeCaches(composite_subscription.CompositeSubscription);
  composite_subscription.CompositeSubscription[dart.implements] = () => [async.StreamSubscription$(dart.Never)];
  dart.setMethodSignature(composite_subscription.CompositeSubscription, () => ({
    __proto__: dart.getMethods(composite_subscription.CompositeSubscription.__proto__),
    add: dart.gFnType(T => [async.StreamSubscription$(T), [async.StreamSubscription$(T)]], T => [dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(async.Future$(dart.void)), [async.StreamSubscription], {shouldCancel: core.bool}, {}),
    clear: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
    pauseAll: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
    resumeAll: dart.fnType(dart.void, []),
    cancel: dart.fnType(async.Future$(dart.void), []),
    pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
    resume: dart.fnType(dart.void, []),
    asFuture: dart.gFnType(E => [dart.Never, [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
    onData: dart.fnType(dart.Never, [dart.nullable(dart.fnType(dart.void, [dart.Never]))]),
    onDone: dart.fnType(dart.Never, [dart.nullable(dart.fnType(dart.void, []))]),
    onError: dart.fnType(dart.Never, [dart.nullable(core.Function)]),
    [S$1._unsupportedError$1]: dart.fnType(dart.Never, [])
  }));
  dart.setGetterSignature(composite_subscription.CompositeSubscription, () => ({
    __proto__: dart.getGetters(composite_subscription.CompositeSubscription.__proto__),
    isDisposed: core.bool,
    length: core.int,
    isEmpty: core.bool,
    isNotEmpty: core.bool,
    allPaused: core.bool,
    isPaused: core.bool
  }));
  dart.setLibraryUri(composite_subscription.CompositeSubscription, I[263]);
  dart.setFieldSignature(composite_subscription.CompositeSubscription, () => ({
    __proto__: dart.getFields(composite_subscription.CompositeSubscription.__proto__),
    [S$1._isDisposed]: dart.fieldType(core.bool),
    [S$1._subscriptionsList]: dart.finalFieldType(core.List$(async.StreamSubscription))
  }));
  composite_subscription['AddToCompositeSubscriptionExtension|addTo'] = function AddToCompositeSubscriptionExtension$124addTo(T, $this, compositeSubscription) {
    return compositeSubscription.add(T, $this);
  };
  composite_subscription['AddToCompositeSubscriptionExtension|get#addTo'] = function AddToCompositeSubscriptionExtension$124get$35addTo(T, $this) {
    return dart.fn(compositeSubscription => composite_subscription['AddToCompositeSubscriptionExtension|addTo'](T, $this, compositeSubscription), T$0.CompositeSubscriptionTovoid());
  };
  notification.Kind = class Kind extends core._Enum {
    [S$._enumToString]() {
      return "Kind." + this[S$._name];
    }
  };
  (notification.Kind.new = function(index, name) {
    notification.Kind.__proto__.new.call(this, index, name);
    ;
  }).prototype = notification.Kind.prototype;
  dart.addTypeTests(notification.Kind);
  dart.addTypeCaches(notification.Kind);
  dart.setMethodSignature(notification.Kind, () => ({
    __proto__: dart.getMethods(notification.Kind.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(notification.Kind, I[235]);
  dart.setStaticFieldSignature(notification.Kind, () => ['values', 'onData', 'onDone', 'onError']);
  dart.defineLazy(notification.Kind, {
    /*notification.Kind.values*/get values() {
      return C[389] || CT.C389;
    },
    /*notification.Kind.onData*/get onData() {
      return C[385] || CT.C385;
    },
    /*notification.Kind.onDone*/get onDone() {
      return C[386] || CT.C386;
    },
    /*notification.Kind.onError*/get onError() {
      return C[387] || CT.C387;
    }
  }, false);
  dart.defineLazy(aes_tables, {
    /*aes_tables.sBox*/get sBox() {
      return C[390] || CT.C390;
    },
    /*aes_tables.sBoxInv*/get sBoxInv() {
      return C[391] || CT.C391;
    },
    /*aes_tables.rcon*/get rcon() {
      return C[392] || CT.C392;
    },
    /*aes_tables.table0*/get table0() {
      return C[393] || CT.C393;
    },
    /*aes_tables.table1*/get table1() {
      return C[394] || CT.C394;
    },
    /*aes_tables.table2*/get table2() {
      return C[395] || CT.C395;
    },
    /*aes_tables.table3*/get table3() {
      return C[396] || CT.C396;
    },
    /*aes_tables.table0Inv*/get table0Inv() {
      return C[397] || CT.C397;
    },
    /*aes_tables.table1Inv*/get table1Inv() {
      return C[398] || CT.C398;
    },
    /*aes_tables.table2Inv*/get table2Inv() {
      return C[399] || CT.C399;
    },
    /*aes_tables.table3Inv*/get table3Inv() {
      return C[400] || CT.C400;
    }
  }, false);
  frame$.Frame = class Frame extends core.Object {
    get key() {
      return this[S$1.key$4];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[S$1.value$6];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[S$1.deleted$1];
    }
    set deleted(value) {
      super.deleted = value;
    }
    get lazy() {
      return this[S$1.lazy$2];
    }
    set lazy(value) {
      super.lazy = value;
    }
    get length() {
      return this[S$1.length$1];
    }
    set length(value) {
      this[S$1.length$1] = value;
    }
    get offset() {
      return this[S$1.offset$1];
    }
    set offset(value) {
      this[S$1.offset$1] = value;
    }
    static ['_#new#tearOff'](key, value, opts$) {
      let length = opts$ && 'length' in opts$ ? opts$.length : null;
      let offset = opts$ && 'offset' in opts$ ? opts$.offset : -1;
      return new frame$.Frame.new(key, value, {length: length, offset: offset});
    }
    static ['_#deleted#tearOff'](key, opts$) {
      let length = opts$ && 'length' in opts$ ? opts$.length : null;
      return new frame$.Frame.deleted(key, {length: length});
    }
    static ['_#lazy#tearOff'](key, opts$) {
      let length = opts$ && 'length' in opts$ ? opts$.length : null;
      let offset = opts$ && 'offset' in opts$ ? opts$.offset : -1;
      return new frame$.Frame.lazy(key, {length: length, offset: offset});
    }
    static assertKey(key) {
      if (core.int.is(key)) {
        if (dart.notNull(key) < 0 || dart.notNull(key) > 4294967295) {
          dart.throw(new hive.HiveError.new("Integer keys need to be in the range 0 - 0xFFFFFFFF"));
        }
      } else if (typeof key == 'string') {
        if (key.length > 255) {
          dart.throw(new hive.HiveError.new("String keys need to be a max length of 255"));
        }
      } else {
        dart.throw(new hive.HiveError.new("Keys need to be Strings or integers"));
      }
      return true;
    }
    toLazy() {
      if (this.deleted) return this;
      return new frame$.Frame.lazy(this.key, {length: this.length, offset: this.offset});
    }
    _equals(other) {
      if (other == null) return false;
      if (frame$.Frame.is(other)) {
        return dart.equals(this.key, other.key) && dart.equals(this.value, other.value) && this.length == other.length && this.deleted === other.deleted;
      } else {
        return false;
      }
    }
    toString() {
      if (this.deleted) {
        return "Frame.deleted(key: " + dart.str(this.key) + ", length: " + dart.str(this.length) + ")";
      } else if (this.lazy) {
        return "Frame.lazy(key: " + dart.str(this.key) + ", length: " + dart.str(this.length) + ", offset: " + dart.str(this.offset) + ")";
      } else {
        return "Frame(key: " + dart.str(this.key) + ", value: " + dart.str(this.value) + ", " + "length: " + dart.str(this.length) + ", offset: " + dart.str(this.offset) + ")";
      }
    }
    get hashCode() {
      return (this[S$0.$runtimeType].hashCode ^ dart.hashCode(this.key) ^ dart.hashCode(this.value) ^ dart.hashCode(this.length) ^ this.deleted[S$.$hashCode]) >>> 0;
    }
  };
  (frame$.Frame.new = function(key, value, opts$) {
    let length = opts$ && 'length' in opts$ ? opts$.length : null;
    let offset = opts$ && 'offset' in opts$ ? opts$.offset : -1;
    this[S$1.offset$1] = -1;
    this[S$1.key$4] = key;
    this[S$1.value$6] = value;
    this[S$1.length$1] = length;
    this[S$1.offset$1] = offset;
    this[S$1.lazy$2] = false;
    this[S$1.deleted$1] = false;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[264], 27, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  (frame$.Frame.deleted = function(key, opts$) {
    let length = opts$ && 'length' in opts$ ? opts$.length : null;
    this[S$1.offset$1] = -1;
    this[S$1.key$4] = key;
    this[S$1.length$1] = length;
    this[S$1.value$6] = null;
    this[S$1.lazy$2] = false;
    this[S$1.deleted$1] = true;
    this[S$1.offset$1] = -1;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[264], 36, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  (frame$.Frame.lazy = function(key, opts$) {
    let length = opts$ && 'length' in opts$ ? opts$.length : null;
    let offset = opts$ && 'offset' in opts$ ? opts$.offset : -1;
    this[S$1.offset$1] = -1;
    this[S$1.key$4] = key;
    this[S$1.length$1] = length;
    this[S$1.offset$1] = offset;
    this[S$1.value$6] = null;
    this[S$1.lazy$2] = true;
    this[S$1.deleted$1] = false;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[264], 44, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  dart.addTypeTests(frame$.Frame);
  dart.addTypeCaches(frame$.Frame);
  dart.setMethodSignature(frame$.Frame, () => ({
    __proto__: dart.getMethods(frame$.Frame.__proto__),
    toLazy: dart.fnType(frame$.Frame, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [S$.$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setStaticMethodSignature(frame$.Frame, () => ['assertKey']);
  dart.setLibraryUri(frame$.Frame, I[265]);
  dart.setFieldSignature(frame$.Frame, () => ({
    __proto__: dart.getFields(frame$.Frame.__proto__),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(core.bool),
    lazy: dart.finalFieldType(core.bool),
    length: dart.fieldType(dart.nullable(core.int)),
    offset: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(frame$.Frame, ['_equals', 'toString']);
  dart.defineExtensionAccessors(frame$.Frame, ['hashCode']);
  frame$.FrameKeyType = class FrameKeyType extends core.Object {
    static ['_#new#tearOff']() {
      return new frame$.FrameKeyType.new();
    }
  };
  (frame$.FrameKeyType.new = function() {
    ;
  }).prototype = frame$.FrameKeyType.prototype;
  dart.addTypeTests(frame$.FrameKeyType);
  dart.addTypeCaches(frame$.FrameKeyType);
  dart.setLibraryUri(frame$.FrameKeyType, I[265]);
  dart.setStaticFieldSignature(frame$.FrameKeyType, () => ['uintT', 'utf8StringT']);
  dart.defineLazy(frame$.FrameKeyType, {
    /*frame$.FrameKeyType.uintT*/get uintT() {
      return 0;
    },
    /*frame$.FrameKeyType.utf8StringT*/get utf8StringT() {
      return 1;
    }
  }, false);
  frame$.FrameValueType = class FrameValueType extends core.Object {
    static ['_#new#tearOff']() {
      return new frame$.FrameValueType.new();
    }
  };
  (frame$.FrameValueType.new = function() {
    ;
  }).prototype = frame$.FrameValueType.prototype;
  dart.addTypeTests(frame$.FrameValueType);
  dart.addTypeCaches(frame$.FrameValueType);
  dart.setLibraryUri(frame$.FrameValueType, I[265]);
  dart.setStaticFieldSignature(frame$.FrameValueType, () => ['nullT', 'intT', 'doubleT', 'boolT', 'stringT', 'byteListT', 'intListT', 'doubleListT', 'boolListT', 'stringListT', 'listT', 'mapT', 'hiveListT']);
  dart.defineLazy(frame$.FrameValueType, {
    /*frame$.FrameValueType.nullT*/get nullT() {
      return 0;
    },
    /*frame$.FrameValueType.intT*/get intT() {
      return 1;
    },
    /*frame$.FrameValueType.doubleT*/get doubleT() {
      return 2;
    },
    /*frame$.FrameValueType.boolT*/get boolT() {
      return 3;
    },
    /*frame$.FrameValueType.stringT*/get stringT() {
      return 4;
    },
    /*frame$.FrameValueType.byteListT*/get byteListT() {
      return 5;
    },
    /*frame$.FrameValueType.intListT*/get intListT() {
      return 6;
    },
    /*frame$.FrameValueType.doubleListT*/get doubleListT() {
      return 7;
    },
    /*frame$.FrameValueType.boolListT*/get boolListT() {
      return 8;
    },
    /*frame$.FrameValueType.stringListT*/get stringListT() {
      return 9;
    },
    /*frame$.FrameValueType.listT*/get listT() {
      return 10;
    },
    /*frame$.FrameValueType.mapT*/get mapT() {
      return 11;
    },
    /*frame$.FrameValueType.hiveListT*/get hiveListT() {
      return 12;
    }
  }, false);
  frame_helper.FrameHelper = class FrameHelper extends core.Object {
    framesFromBytes(bytes, keystore, registry, cipher) {
      let reader = new binary_reader_impl.BinaryReaderImpl.new(bytes, registry);
      while (reader.availableBytes !== 0) {
        let frameOffset = reader.usedBytes;
        let frame = reader.readFrame({cipher: cipher, lazy: false, frameOffset: frameOffset});
        if (frame == null) return frameOffset;
        dart.nullCheck(keystore).insert(frame, {notify: false});
      }
      return -1;
    }
    static ['_#new#tearOff']() {
      return new frame_helper.FrameHelper.new();
    }
  };
  (frame_helper.FrameHelper.new = function() {
    ;
  }).prototype = frame_helper.FrameHelper.prototype;
  dart.addTypeTests(frame_helper.FrameHelper);
  dart.addTypeCaches(frame_helper.FrameHelper);
  dart.setMethodSignature(frame_helper.FrameHelper, () => ({
    __proto__: dart.getMethods(frame_helper.FrameHelper.__proto__),
    framesFromBytes: dart.fnType(core.int, [typed_data.Uint8List, dart.nullable(keystore$.Keystore), hive.TypeRegistry, dart.nullable(hive.HiveCipher)])
  }));
  dart.setLibraryUri(frame_helper.FrameHelper, I[266]);
  const _is_KeyTransaction_default = Symbol('_is_KeyTransaction_default');
  keystore$.KeyTransaction$ = dart.generic(E => {
    class KeyTransaction extends core.Object {
      get added() {
        return this[S$1.added];
      }
      set added(value) {
        super.added = value;
      }
      get deleted() {
        return this[S$1.deleted$2];
      }
      set deleted(value) {
        super.deleted = value;
      }
      static ['_#new#tearOff'](E) {
        return new (keystore$.KeyTransaction$(E)).new();
      }
    }
    (KeyTransaction.new = function() {
      this[S$1.added] = [];
      this[S$1.deleted$2] = new (T$0.LinkedMapOfdynamic$Frame()).new();
      ;
    }).prototype = KeyTransaction.prototype;
    dart.addTypeTests(KeyTransaction);
    KeyTransaction.prototype[_is_KeyTransaction_default] = true;
    dart.addTypeCaches(KeyTransaction);
    dart.setLibraryUri(KeyTransaction, I[267]);
    dart.setFieldSignature(KeyTransaction, () => ({
      __proto__: dart.getFields(KeyTransaction.__proto__),
      added: dart.finalFieldType(core.List),
      deleted: dart.finalFieldType(core.Map$(dart.dynamic, frame$.Frame))
    }));
    return KeyTransaction;
  });
  keystore$.KeyTransaction = keystore$.KeyTransaction$();
  dart.addTypeTests(keystore$.KeyTransaction, _is_KeyTransaction_default);
  const _is_Keystore_default = Symbol('_is_Keystore_default');
  keystore$.Keystore$ = dart.generic(E => {
    var __t$KeyTransactionOfE = () => (__t$KeyTransactionOfE = dart.constFn(keystore$.KeyTransaction$(E)))();
    var __t$ListQueueOfKeyTransactionOfE = () => (__t$ListQueueOfKeyTransactionOfE = dart.constFn(collection.ListQueue$(__t$KeyTransactionOfE())))();
    var __t$FrameToE = () => (__t$FrameToE = dart.constFn(dart.fnType(E, [frame$.Frame])))();
    var __t$SyncIterableOfE = () => (__t$SyncIterableOfE = dart.constFn(_js_helper.SyncIterable$(E)))();
    class Keystore extends core.Object {
      get transactions() {
        return this[S$1.transactions];
      }
      set transactions(value) {
        super.transactions = value;
      }
      static ['_#new#tearOff'](E, _box, _notifier, keyComparator) {
        return new (keystore$.Keystore$(E)).new(_box, _notifier, keyComparator);
      }
      static debug(opts$) {
        let t508, t508$;
        let frames = opts$ && 'frames' in opts$ ? opts$.frames : C[401] || CT.C401;
        let box = opts$ && 'box' in opts$ ? opts$.box : null;
        let notifier = opts$ && 'notifier' in opts$ ? opts$.notifier : null;
        let keyComparator = opts$ && 'keyComparator' in opts$ ? opts$.keyComparator : C[327] || CT.C327;
        let keystore = new (keystore$.Keystore$(E)).new((t508 = box, t508 == null ? box_base_impl.BoxBaseImpl.nullImpl(E) : t508), (t508$ = notifier, t508$ == null ? new change_notifier$.ChangeNotifier.new() : t508$), keyComparator);
        for (let frame of frames) {
          keystore.insert(frame);
        }
        return keystore;
      }
      static ['_#debug#tearOff'](E, opts$) {
        let frames = opts$ && 'frames' in opts$ ? opts$.frames : C[401] || CT.C401;
        let box = opts$ && 'box' in opts$ ? opts$.box : null;
        let notifier = opts$ && 'notifier' in opts$ ? opts$.notifier : null;
        let keyComparator = opts$ && 'keyComparator' in opts$ ? opts$.keyComparator : C[327] || CT.C327;
        return keystore$.Keystore$(E).debug({frames: frames, box: box, notifier: notifier, keyComparator: keyComparator});
      }
      get deletedEntries() {
        return this[S$1._deletedEntries];
      }
      get length() {
        return this[S$1._store].length;
      }
      get frames() {
        return this[S$1._store].values;
      }
      resetDeletedEntries() {
        this[S$1._deletedEntries] = 0;
      }
      autoIncrement() {
        return this[S$1._autoIncrement] = this[S$1._autoIncrement] + 1;
      }
      updateAutoIncrement(key) {
        if (key > this[S$1._autoIncrement]) {
          this[S$1._autoIncrement] = key;
        }
      }
      containsKey(key) {
        return this[S$1._store].get(key) != null;
      }
      keyAt(index) {
        return this[S$1._store].getKeyAt(index);
      }
      get(key) {
        return this[S$1._store].get(key);
      }
      getAt(index) {
        return this[S$1._store].getAt(index);
      }
      getKeys() {
        return this[S$1._store].keys;
      }
      getValues() {
        return this[S$1._store].values[S$.$map](E, dart.fn(e => E.as(e.value), __t$FrameToE()));
      }
      getValuesBetween(startKey = null, endKey = null) {
        return new (__t$SyncIterableOfE()).new((function* getValuesBetween() {
          let iterable = null;
          if (startKey != null) {
            iterable = this[S$1._store].valuesFromKey(startKey);
          } else {
            iterable = this[S$1._store].values;
          }
          for (let frame of iterable) {
            yield E.as(frame.value);
            if (dart.equals(frame.key, endKey)) break;
          }
        }).bind(this));
      }
      watch(opts$) {
        let key = opts$ && 'key' in opts$ ? opts$.key : null;
        return this[S$1._notifier].watch({key: key});
      }
      insert(frame, opts$) {
        let notify = opts$ && 'notify' in opts$ ? opts$.notify : true;
        let lazy = opts$ && 'lazy' in opts$ ? opts$.lazy : false;
        let value = frame.value;
        let deletedFrame = null;
        if (!frame.deleted) {
          let key = frame.key;
          if (core.int.is(key) && dart.notNull(key) > this[S$1._autoIncrement]) {
            this[S$1._autoIncrement] = key;
          }
          if (hive_object.HiveObjectMixin.is(value)) {
            hive_object['HiveObjectInternal|init'](value, key, this[S$1._box$3]);
          }
          deletedFrame = this[S$1._store].insert(key, lazy ? frame.toLazy() : frame);
        } else {
          deletedFrame = this[S$1._store].delete(frame.key);
        }
        if (deletedFrame != null) {
          this[S$1._deletedEntries] = this[S$1._deletedEntries] + 1;
          if (hive_object.HiveObjectMixin.is(deletedFrame.value) && !core.identical(deletedFrame.value, value)) {
            hive_object['HiveObjectInternal|dispose'](hive_object.HiveObjectMixin.as(deletedFrame.value));
          }
        }
        if (notify && (!frame.deleted || deletedFrame != null)) {
          this[S$1._notifier].notify(frame);
        }
        return deletedFrame;
      }
      beginTransaction(newFrames) {
        let transaction = new (__t$KeyTransactionOfE()).new();
        for (let frame of newFrames) {
          if (!frame.deleted) {
            transaction.added[S$.$add](frame.key);
          }
          let deletedFrame = this.insert(frame);
          if (deletedFrame != null) {
            transaction.deleted[S$.$_set](frame.key, deletedFrame);
          }
        }
        if (transaction.added[S$.$isNotEmpty] || transaction.deleted[S$.$isNotEmpty]) {
          this.transactions.add(transaction);
          return true;
        } else {
          return false;
        }
      }
      commitTransaction() {
        this.transactions.removeFirst();
      }
      cancelTransaction() {
        let canceled = this.transactions.removeFirst();
        L0:
          for (let key of canceled.deleted[S$.$keys]) {
            let deletedFrame = canceled.deleted[S$.$_get](key);
            for (let t of this.transactions) {
              if (t.deleted[S$.$containsKey](key)) {
                t.deleted[S$.$_set](key, dart.nullCheck(deletedFrame));
                continue L0;
              }
              if (t.added[S$.$contains](key)) {
                t.deleted[S$.$_set](key, dart.nullCheck(deletedFrame));
                continue L0;
              }
            }
            this[S$1._store].insert(key, deletedFrame);
            this[S$1._notifier].notify(dart.nullCheck(deletedFrame));
          }
        L1:
          for (let key of canceled.added) {
            let isOverride = canceled.deleted[S$.$containsKey](key);
            for (let t of this.transactions) {
              if (t.deleted[S$.$containsKey](key)) {
                if (!isOverride) {
                  t.deleted[S$.$remove](key);
                }
                continue L1;
              }
              if (t.added[S$.$contains](key)) {
                continue L1;
              }
            }
            if (!isOverride) {
              this[S$1._store].delete(key);
              this[S$1._notifier].notify(new frame$.Frame.deleted(key));
            }
          }
      }
      clear() {
        let frameList = this.frames[S$.$toList]();
        this[S$1._store].clear();
        for (let frame of frameList) {
          if (hive_object.HiveObjectMixin.is(frame.value)) {
            hive_object['HiveObjectInternal|dispose'](hive_object.HiveObjectMixin.as(frame.value));
          }
          this[S$1._notifier].notify(new frame$.Frame.deleted(frame.key));
        }
        this[S$1._deletedEntries] = 0;
        this[S$1._autoIncrement] = -1;
        return frameList[S$.$length];
      }
      close() {
        return this[S$1._notifier].close();
      }
    }
    (Keystore.new = function(_box, _notifier, keyComparator) {
      let t508;
      this[S$1.transactions] = new (__t$ListQueueOfKeyTransactionOfE()).new();
      this[S$1._deletedEntries] = 0;
      this[S$1._autoIncrement] = -1;
      this[S$1._box$3] = _box;
      this[S$1._notifier] = _notifier;
      this[S$1._store] = new (T$0.IndexableSkipListOfdynamic$Frame()).new((t508 = keyComparator, t508 == null ? C[327] || CT.C327 : t508));
      ;
    }).prototype = Keystore.prototype;
    dart.addTypeTests(Keystore);
    Keystore.prototype[_is_Keystore_default] = true;
    dart.addTypeCaches(Keystore);
    dart.setMethodSignature(Keystore, () => ({
      __proto__: dart.getMethods(Keystore.__proto__),
      resetDeletedEntries: dart.fnType(dart.void, []),
      autoIncrement: dart.fnType(core.int, []),
      updateAutoIncrement: dart.fnType(dart.void, [core.int]),
      containsKey: dart.fnType(core.bool, [dart.dynamic]),
      keyAt: dart.fnType(dart.dynamic, [core.int]),
      get: dart.fnType(dart.nullable(frame$.Frame), [dart.dynamic]),
      getAt: dart.fnType(dart.nullable(frame$.Frame), [core.int]),
      getKeys: dart.fnType(core.Iterable, []),
      getValues: dart.fnType(core.Iterable$(E), []),
      getValuesBetween: dart.fnType(core.Iterable$(E), [], [dart.dynamic, dart.dynamic]),
      watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
      insert: dart.fnType(dart.nullable(frame$.Frame), [frame$.Frame], {lazy: core.bool, notify: core.bool}, {}),
      beginTransaction: dart.fnType(core.bool, [core.List$(frame$.Frame)]),
      commitTransaction: dart.fnType(dart.void, []),
      cancelTransaction: dart.fnType(dart.void, []),
      clear: dart.fnType(core.int, []),
      close: dart.fnType(async.Future, [])
    }));
    dart.setStaticMethodSignature(Keystore, () => ['debug']);
    dart.setGetterSignature(Keystore, () => ({
      __proto__: dart.getGetters(Keystore.__proto__),
      deletedEntries: core.int,
      length: core.int,
      frames: core.Iterable$(frame$.Frame)
    }));
    dart.setLibraryUri(Keystore, I[267]);
    dart.setFieldSignature(Keystore, () => ({
      __proto__: dart.getFields(Keystore.__proto__),
      [S$1._box$3]: dart.finalFieldType(hive.BoxBase$(E)),
      [S$1._notifier]: dart.finalFieldType(change_notifier$.ChangeNotifier),
      [S$1._store]: dart.finalFieldType(indexable_skip_list.IndexableSkipList$(dart.dynamic, frame$.Frame)),
      transactions: dart.finalFieldType(collection.ListQueue$(keystore$.KeyTransaction$(E))),
      [S$1._deletedEntries]: dart.fieldType(core.int),
      [S$1._autoIncrement]: dart.fieldType(core.int)
    }));
    return Keystore;
  });
  keystore$.Keystore = keystore$.Keystore$();
  dart.addTypeTests(keystore$.Keystore, _is_Keystore_default);
  change_notifier$.ChangeNotifier = class ChangeNotifier extends core.Object {
    static ['_#new#tearOff']() {
      return new change_notifier$.ChangeNotifier.new();
    }
    static ['_#debug#tearOff'](_streamController) {
      return new change_notifier$.ChangeNotifier.debug(_streamController);
    }
    notify(frame) {
      this[S$1._streamController$1].add(new hive.BoxEvent.new(frame.key, frame.value, frame.deleted));
    }
    watch(opts$) {
      let key = opts$ && 'key' in opts$ ? opts$.key : null;
      if (key != null) {
        return this[S$1._streamController$1].stream.where(dart.fn(it => dart.equals(it.key, key), T$0.BoxEventTobool()));
      } else {
        return this[S$1._streamController$1].stream;
      }
    }
    close() {
      return this[S$1._streamController$1].close();
    }
  };
  (change_notifier$.ChangeNotifier.new = function() {
    this[S$1._streamController$1] = T$0.StreamControllerOfBoxEvent().broadcast();
    ;
  }).prototype = change_notifier$.ChangeNotifier.prototype;
  (change_notifier$.ChangeNotifier.debug = function(_streamController) {
    this[S$1._streamController$1] = _streamController;
    ;
  }).prototype = change_notifier$.ChangeNotifier.prototype;
  dart.addTypeTests(change_notifier$.ChangeNotifier);
  dart.addTypeCaches(change_notifier$.ChangeNotifier);
  dart.setMethodSignature(change_notifier$.ChangeNotifier, () => ({
    __proto__: dart.getMethods(change_notifier$.ChangeNotifier.__proto__),
    notify: dart.fnType(dart.void, [frame$.Frame]),
    watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
    close: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(change_notifier$.ChangeNotifier, I[268]);
  dart.setFieldSignature(change_notifier$.ChangeNotifier, () => ({
    __proto__: dart.getFields(change_notifier$.ChangeNotifier.__proto__),
    [S$1._streamController$1]: dart.finalFieldType(async.StreamController$(hive.BoxEvent))
  }));
  const _is_IgnoredTypeAdapter_default = Symbol('_is_IgnoredTypeAdapter_default');
  ignored_type_adapter.IgnoredTypeAdapter$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class IgnoredTypeAdapter extends core.Object {
      get typeId() {
        return this[S$1.typeId$5];
      }
      set typeId(value) {
        super.typeId = value;
      }
      static ['_#new#tearOff'](T, typeId = 0) {
        return new (ignored_type_adapter.IgnoredTypeAdapter$(T)).new(typeId);
      }
      read(reader) {
        return null;
      }
      write(writer, obj) {
        __t$TN().as(obj);
      }
    }
    (IgnoredTypeAdapter.new = function(typeId = 0) {
      this[S$1.typeId$5] = typeId;
      ;
    }).prototype = IgnoredTypeAdapter.prototype;
    dart.addTypeTests(IgnoredTypeAdapter);
    IgnoredTypeAdapter.prototype[_is_IgnoredTypeAdapter_default] = true;
    dart.addTypeCaches(IgnoredTypeAdapter);
    IgnoredTypeAdapter[dart.implements] = () => [hive.TypeAdapter$(dart.nullable(T))];
    dart.setMethodSignature(IgnoredTypeAdapter, () => ({
      __proto__: dart.getMethods(IgnoredTypeAdapter.__proto__),
      read: dart.fnType(dart.nullable(T), [hive.BinaryReader]),
      write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(IgnoredTypeAdapter, I[269]);
    dart.setFieldSignature(IgnoredTypeAdapter, () => ({
      __proto__: dart.getFields(IgnoredTypeAdapter.__proto__),
      typeId: dart.finalFieldType(core.int)
    }));
    return IgnoredTypeAdapter;
  });
  ignored_type_adapter.IgnoredTypeAdapter = ignored_type_adapter.IgnoredTypeAdapter$();
  dart.addTypeTests(ignored_type_adapter.IgnoredTypeAdapter, _is_IgnoredTypeAdapter_default);
  backend_manager.BackendManager = class BackendManager extends core.Object {
    static select(backendPreference = null) {
      switch (backendPreference) {
        default:
          {
            return new backend_manager$.BackendManager.new();
          }
      }
    }
  };
  (backend_manager.BackendManager.__ = function() {
    ;
  }).prototype = backend_manager.BackendManager.prototype;
  dart.addTypeTests(backend_manager.BackendManager);
  dart.addTypeCaches(backend_manager.BackendManager);
  dart.setStaticMethodSignature(backend_manager.BackendManager, () => ['select']);
  dart.setLibraryUri(backend_manager.BackendManager, I[270]);
  scan$.parseList = function parseList(T, scanner, parseElement) {
    let result = _interceptors.JSArray$(T).of([]);
    while (scanner.scan(",")) {
      scanner.scan(scan$.whitespace);
    }
    result[S$.$add](parseElement());
    scanner.scan(scan$.whitespace);
    while (scanner.scan(",")) {
      scanner.scan(scan$.whitespace);
      if (scanner.matches(",") || scanner.isDone) continue;
      result[S$.$add](parseElement());
      scanner.scan(scan$.whitespace);
    }
    return result;
  };
  scan$.expectQuotedString = function expectQuotedString(scanner, opts$) {
    let name = opts$ && 'name' in opts$ ? opts$.name : "quoted string";
    scanner.expect(scan$._quotedString, {name: name});
    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
    return string[S$.$substring](1, string.length - 1)[S$0.$replaceAllMapped](scan$._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T$.MatchToString()));
  };
  dart.defineLazy(scan$, {
    /*scan$.token*/get token() {
      return core.RegExp.new("[^()<>@,;:\"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+");
    },
    /*scan$._lws*/get _lws() {
      return core.RegExp.new("(?:\\r\\n)?[ \\t]+");
    },
    /*scan$._quotedString*/get _quotedString() {
      return core.RegExp.new("\"(?:[^\"\\x00-\\x1F\\x7F]|\\\\.)*\"");
    },
    /*scan$._quotedPair*/get _quotedPair() {
      return core.RegExp.new("\\\\(.)");
    },
    /*scan$.nonToken*/get nonToken() {
      return core.RegExp.new("[()<>@,;:\"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]");
    },
    /*scan$.whitespace*/get whitespace() {
      return core.RegExp.new("(?:" + scan$._lws.pattern + ")*");
    }
  }, false);
  utils$1.wrapFormatException = function wrapFormatException(T, name, value, body) {
    try {
      return body();
    } catch (e) {
      let ex = dart.getThrown(e);
      if (span_exception.SourceSpanFormatException.is(ex)) {
        let error = ex;
        dart.throw(new span_exception.SourceSpanFormatException.new("Invalid " + name + ": " + error.message, error.span, error.source));
      } else if (core.FormatException.is(ex)) {
        let error = ex;
        dart.throw(new core.FormatException.new("Invalid " + name + " \"" + value + "\": " + error.message, error.source, error.offset));
      } else
        throw e;
    }
  };
  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new decoder.ChunkedCodingDecoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      let sink = new decoder._Sink.new(T$.StreamControllerOfListOfint().new());
      let output = sink[S$1._decode](input, 0, input[S$.$length]);
      if (sink[S$1._state$2][S$.$_equals](decoder._State.end)) return output;
      dart.throw(new core.FormatException.new("Input ended unexpectedly.", input, input[S$.$length]));
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      return new decoder._Sink.new(sink);
    }
  };
  (decoder.ChunkedCodingDecoder.__ = function() {
    decoder.ChunkedCodingDecoder.__proto__.new.call(this);
    ;
  }).prototype = decoder.ChunkedCodingDecoder.prototype;
  dart.addTypeTests(decoder.ChunkedCodingDecoder);
  dart.addTypeCaches(decoder.ChunkedCodingDecoder);
  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({
    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[271]);
  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    get [S$1._size]() {
      let t510;
      t510 = this[S$1.___Sink__size];
      return t510 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t510;
    }
    set [S$1._size](_size$35param) {
      this[S$1.___Sink__size] = _size$35param;
    }
    static ['_#new#tearOff'](_sink) {
      return new decoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      return this.addSlice(chunk, 0, chunk[S$.$length], false);
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[S$.$length]);
      let output = this[S$1._decode](chunk, start, end);
      if (output[S$.$isNotEmpty]) this[S$1._sink$3].add(output);
      if (isLast) this[S$1._close$1](chunk, end);
    }
    close() {
      return this[S$1._close$1]();
    }
    [S$1._close$1](chunk = null, index = null) {
      if (!this[S$1._state$2][S$.$_equals](decoder._State.end)) {
        dart.throw(new core.FormatException.new("Input ended unexpectedly.", chunk, index));
      }
      this[S$1._sink$3].close();
    }
    [S$1._decode](bytes, start, end) {
      function assertCurrentChar(char, name) {
        if (bytes[S$.$_get](start) !== char) {
          dart.throw(new core.FormatException.new("Expected " + name + ".", bytes, start));
        }
      }
      dart.fn(assertCurrentChar, T$0.intAndStringTovoid());
      let buffer = new typed_buffer.Uint8Buffer.new();
      while (start !== end) {
        switch (this[S$1._state$2]) {
          case C[402] || CT.C402:
            {
              this[S$1._size] = this[S$1._digitForByte](bytes, start);
              this[S$1._state$2] = decoder._State.size;
              start = start + 1;
              break;
            }
          case C[403] || CT.C403:
            {
              if (bytes[S$.$_get](start) === 13) {
                this[S$1._state$2] = decoder._State.sizeBeforeLF;
              } else {
                this[S$1._size] = (this[S$1._size] << 4 >>> 0) + this[S$1._digitForByte](bytes, start);
              }
              start = start + 1;
              break;
            }
          case C[404] || CT.C404:
            {
              assertCurrentChar(10, "LF");
              this[S$1._state$2] = this[S$1._size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;
              start = start + 1;
              break;
            }
          case C[405] || CT.C405:
            {
              let chunkEnd = math.min(core.int, end, start + this[S$1._size]);
              buffer.addAll(bytes, start, chunkEnd);
              this[S$1._size] = this[S$1._size] - (chunkEnd - start);
              start = chunkEnd;
              if (this[S$1._size] === 0) this[S$1._state$2] = decoder._State.bodyBeforeCR;
              break;
            }
          case C[406] || CT.C406:
            {
              assertCurrentChar(13, "CR");
              this[S$1._state$2] = decoder._State.bodyBeforeLF;
              start = start + 1;
              break;
            }
          case C[407] || CT.C407:
            {
              assertCurrentChar(10, "LF");
              this[S$1._state$2] = decoder._State.boundary;
              start = start + 1;
              break;
            }
          case C[408] || CT.C408:
            {
              assertCurrentChar(13, "CR");
              this[S$1._state$2] = decoder._State.endBeforeLF;
              start = start + 1;
              break;
            }
          case C[409] || CT.C409:
            {
              assertCurrentChar(10, "LF");
              this[S$1._state$2] = decoder._State.end;
              start = start + 1;
              break;
            }
          case C[410] || CT.C410:
            {
              dart.throw(new core.FormatException.new("Expected no more data.", bytes, start));
            }
        }
      }
      return buffer.buffer[S$0.$asUint8List](0, buffer.length);
    }
    [S$1._digitForByte](bytes, index) {
      let byte = bytes[S$.$_get](index);
      let digit = (48 ^ byte) >>> 0;
      if (digit <= 9) {
        if (digit >= 0) return digit;
      } else {
        let letter = (32 | byte) >>> 0;
        if (97 <= letter && letter <= 102) return letter - 97 + 10;
      }
      dart.throw(new core.FormatException.new("Invalid hexadecimal byte 0x" + byte[S$0.$toRadixString](16)[S$.$toUpperCase]() + ".", bytes, index));
    }
  };
  (decoder._Sink.new = function(_sink) {
    this[S$1._state$2] = decoder._State.boundary;
    this[S$1.___Sink__size] = null;
    this[S$1._sink$3] = _sink;
    decoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = decoder._Sink.prototype;
  dart.addTypeTests(decoder._Sink);
  dart.addTypeCaches(decoder._Sink);
  dart.setMethodSignature(decoder._Sink, () => ({
    __proto__: dart.getMethods(decoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [S$1._close$1]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),
    [S$1._decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),
    [S$1._digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(decoder._Sink, () => ({
    __proto__: dart.getGetters(decoder._Sink.__proto__),
    [S$1._size]: core.int
  }));
  dart.setSetterSignature(decoder._Sink, () => ({
    __proto__: dart.getSetters(decoder._Sink.__proto__),
    [S$1._size]: core.int
  }));
  dart.setLibraryUri(decoder._Sink, I[271]);
  dart.setFieldSignature(decoder._Sink, () => ({
    __proto__: dart.getFields(decoder._Sink.__proto__),
    [S$1._sink$3]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [S$1._state$2]: dart.fieldType(decoder._State),
    [S$1.___Sink__size]: dart.fieldType(dart.nullable(core.int))
  }));
  decoder._State = class _State extends core.Object {
    get [S$1._name$2]() {
      return this[S$1._name$1];
    }
    set [S$1._name$2](value) {
      super[S$1._name$2] = value;
    }
    static ['_#_#tearOff'](_name) {
      return new decoder._State.__(_name);
    }
    toString() {
      return this[S$1._name$2];
    }
  };
  (decoder._State.__ = function(_name) {
    this[S$1._name$1] = _name;
    ;
  }).prototype = decoder._State.prototype;
  dart.addTypeTests(decoder._State);
  dart.addTypeCaches(decoder._State);
  dart.setLibraryUri(decoder._State, I[271]);
  dart.setFieldSignature(decoder._State, () => ({
    __proto__: dart.getFields(decoder._State.__proto__),
    [S$1._name$2]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);
  dart.defineExtensionMethods(decoder._State, ['toString']);
  dart.defineLazy(decoder._State, {
    /*decoder._State.boundary*/get boundary() {
      return C[402] || CT.C402;
    },
    /*decoder._State.size*/get size() {
      return C[403] || CT.C403;
    },
    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {
      return C[404] || CT.C404;
    },
    /*decoder._State.body*/get body() {
      return C[405] || CT.C405;
    },
    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {
      return C[406] || CT.C406;
    },
    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {
      return C[407] || CT.C407;
    },
    /*decoder._State.endBeforeCR*/get endBeforeCR() {
      return C[408] || CT.C408;
    },
    /*decoder._State.endBeforeLF*/get endBeforeLF() {
      return C[409] || CT.C409;
    },
    /*decoder._State.end*/get end() {
      return C[410] || CT.C410;
    }
  }, false);
  dart.defineLazy(decoder, {
    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {
      return C[411] || CT.C411;
    }
  }, false);
  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new encoder.ChunkedCodingEncoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      return encoder._convert(input, 0, input[S$.$length], {isLast: true});
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      return new encoder._Sink.new(sink);
    }
  };
  (encoder.ChunkedCodingEncoder.__ = function() {
    encoder.ChunkedCodingEncoder.__proto__.new.call(this);
    ;
  }).prototype = encoder.ChunkedCodingEncoder.prototype;
  dart.addTypeTests(encoder.ChunkedCodingEncoder);
  dart.addTypeCaches(encoder.ChunkedCodingEncoder);
  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({
    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[272]);
  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    static ['_#new#tearOff'](_sink) {
      return new encoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      this[S$1._sink$4].add(encoder._convert(chunk, 0, chunk[S$.$length]));
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[S$.$length]);
      this[S$1._sink$4].add(encoder._convert(chunk, start, end, {isLast: isLast}));
      if (isLast) this[S$1._sink$4].close();
    }
    close() {
      this[S$1._sink$4].add(encoder._doneChunk);
      this[S$1._sink$4].close();
    }
  };
  (encoder._Sink.new = function(_sink) {
    this[S$1._sink$4] = _sink;
    encoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = encoder._Sink.prototype;
  dart.addTypeTests(encoder._Sink);
  dart.addTypeCaches(encoder._Sink);
  dart.setMethodSignature(encoder._Sink, () => ({
    __proto__: dart.getMethods(encoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(encoder._Sink, I[272]);
  dart.setFieldSignature(encoder._Sink, () => ({
    __proto__: dart.getFields(encoder._Sink.__proto__),
    [S$1._sink$4]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  encoder._convert = function _convert(bytes, start, end, opts$) {
    let t510, t510$, t510$0, t510$1;
    let isLast = opts$ && 'isLast' in opts$ ? opts$.isLast : false;
    if (end === start) return isLast ? encoder._doneChunk : C[412] || CT.C412;
    let size = end - start;
    let sizeInHex = size[S$0.$toRadixString](16);
    let footerSize = isLast ? encoder._doneChunk[S$.$length] : 0;
    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);
    list[S$0.$setRange](0, sizeInHex.length, sizeInHex[S$0.$codeUnits]);
    let cursor = sizeInHex.length;
    list[S$.$_set]((t510 = cursor, cursor = t510 + 1, t510), 13);
    list[S$.$_set]((t510$ = cursor, cursor = t510$ + 1, t510$), 10);
    list[S$0.$setRange](cursor, cursor + end - start, bytes, start);
    cursor = cursor + (end - start);
    list[S$.$_set]((t510$0 = cursor, cursor = t510$0 + 1, t510$0), 13);
    list[S$.$_set]((t510$1 = cursor, cursor = t510$1 + 1, t510$1), 10);
    if (isLast) {
      list[S$0.$setRange](list[S$.$length] - footerSize, list[S$.$length], encoder._doneChunk);
    }
    return list;
  };
  dart.defineLazy(encoder, {
    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {
      return C[413] || CT.C413;
    },
    /*encoder._doneChunk*/get _doneChunk() {
      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([48, 13, 10, 13, 10]));
    }
  }, false);
  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');
  typed_queue._TypedQueue$ = dart.generic((E, L) => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class _TypedQueue extends Object_ListMixin$36 {
      get [S$1._table$3]() {
        return this[S$1._table$2];
      }
      set [S$1._table$3](value) {
        this[S$1._table$2] = value;
      }
      get [S$1._head$1]() {
        return this[S$1._head];
      }
      set [S$1._head$1](value) {
        this[S$1._head] = value;
      }
      get [S$1._tail$1]() {
        return this[S$1._tail];
      }
      set [S$1._tail$1](value) {
        this[S$1._tail] = value;
      }
      get length() {
        return (this[S$1._tail$1] - this[S$1._head$1] & this[S$1._table$3][S$.$length] - 1) >>> 0;
      }
      toList(opts$) {
        let growable = opts$ && 'growable' in opts$ ? opts$.growable : true;
        let list = growable ? this[S$1._createBuffer](this.length) : this[S$1._createList](this.length);
        this[S$1._writeToList](list);
        return list;
      }
      cast(T) {
        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);
        dart.throw(new core.UnsupportedError.new(dart.str(this) + " cannot be cast to the desired type."));
      }
      retype(T) {
        return this.cast(T);
      }
      addLast(value) {
        E.as(value);
        this[S$1._table$3][S$.$_set](this[S$1._tail$1], value);
        this[S$1._tail$1] = (this[S$1._tail$1] + 1 & this[S$1._table$3][S$.$length] - 1) >>> 0;
        if (this[S$1._head$1] === this[S$1._tail$1]) this[S$1._growAtCapacity]();
      }
      addFirst(value) {
        E.as(value);
        this[S$1._head$1] = (this[S$1._head$1] - 1 & this[S$1._table$3][S$.$length] - 1) >>> 0;
        this[S$1._table$3][S$.$_set](this[S$1._head$1], value);
        if (this[S$1._head$1] === this[S$1._tail$1]) this[S$1._growAtCapacity]();
      }
      removeFirst() {
        if (this[S$1._head$1] === this[S$1._tail$1]) dart.throw(new core.StateError.new("No element"));
        let result = this[S$1._table$3][S$.$_get](this[S$1._head$1]);
        this[S$1._head$1] = (this[S$1._head$1] + 1 & this[S$1._table$3][S$.$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[S$1._head$1] === this[S$1._tail$1]) dart.throw(new core.StateError.new("No element"));
        this[S$1._tail$1] = (this[S$1._tail$1] - 1 & this[S$1._table$3][S$.$length] - 1) >>> 0;
        return this[S$1._table$3][S$.$_get](this[S$1._tail$1]);
      }
      add(value) {
        E.as(value);
        return this.addLast(value);
      }
      set length(value) {
        core.RangeError.checkNotNegative(value, "length");
        let delta = value - this.length;
        if (delta >= 0) {
          let needsToGrow = this[S$1._table$3][S$.$length] <= value;
          if (needsToGrow) this[S$1._growTo](value);
          this[S$1._tail$1] = (this[S$1._tail$1] + delta & this[S$1._table$3][S$.$length] - 1) >>> 0;
          if (!needsToGrow) this.fillRange(value - delta, value, this[S$1._defaultValue$1]);
        } else {
          this.removeRange(value, this.length);
        }
      }
      _get(index) {
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this[S$1._table$3][S$.$_get]((this[S$1._head$1] + index & this[S$1._table$3][S$.$length] - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        this[S$1._table$3][S$.$_set]((this[S$1._head$1] + index & this[S$1._table$3][S$.$length] - 1) >>> 0, value);
        return value$;
      }
      removeRange(start, end) {
        let length = this.length;
        core.RangeError.checkValidRange(start, end, length);
        if (start === 0) {
          this[S$1._head$1] = (this[S$1._head$1] + end & this[S$1._table$3][S$.$length] - 1) >>> 0;
          return;
        }
        let elementsAfter = length - end;
        if (elementsAfter === 0) {
          this[S$1._tail$1] = (this[S$1._head$1] + start & this[S$1._table$3][S$.$length] - 1) >>> 0;
          return;
        }
        let removedElements = end - start;
        if (start < elementsAfter) {
          this.setRange(removedElements, end, this);
          this[S$1._head$1] = (this[S$1._head$1] + removedElements & this[S$1._table$3][S$.$length] - 1) >>> 0;
        } else {
          this.setRange(start, length - removedElements, this, end);
          this[S$1._tail$1] = (this[S$1._tail$1] - removedElements & this[S$1._table$3][S$.$length] - 1) >>> 0;
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        if (start === end) return;
        let targetStart = (this[S$1._head$1] + start & this[S$1._table$3][S$.$length] - 1) >>> 0;
        let targetEnd = (this[S$1._head$1] + end & this[S$1._table$3][S$.$length] - 1) >>> 0;
        let targetIsContiguous = targetStart < targetEnd;
        if (iterable === this) {
          let sourceStart = (this[S$1._head$1] + skipCount & this[S$1._table$3][S$.$length] - 1) >>> 0;
          let sourceEnd = (sourceStart + (end - start) & this[S$1._table$3][S$.$length] - 1) >>> 0;
          if (sourceStart === targetStart) return;
          let sourceIsContiguous = sourceStart < sourceEnd;
          if (targetIsContiguous && sourceIsContiguous) {
            this[S$1._table$3][S$0.$setRange](targetStart, targetEnd, this[S$1._table$3], sourceStart);
          } else if (!targetIsContiguous && !sourceIsContiguous) {
            if (sourceStart > targetStart) {
              let startGap = sourceStart - targetStart;
              let firstEnd = this[S$1._table$3][S$.$length] - startGap;
              this[S$1._table$3][S$0.$setRange](targetStart, firstEnd, this[S$1._table$3], sourceStart);
              this[S$1._table$3][S$0.$setRange](firstEnd, this[S$1._table$3][S$.$length], this[S$1._table$3]);
              this[S$1._table$3][S$0.$setRange](0, targetEnd, this[S$1._table$3], startGap);
            } else if (sourceEnd < targetEnd) {
              let firstStart = targetEnd - sourceEnd;
              this[S$1._table$3][S$0.$setRange](firstStart, targetEnd, this[S$1._table$3]);
              this[S$1._table$3][S$0.$setRange](0, firstStart, this[S$1._table$3], this[S$1._table$3][S$.$length] - firstStart);
              this[S$1._table$3][S$0.$setRange](targetStart, this[S$1._table$3][S$.$length], this[S$1._table$3], sourceStart);
            }
          } else if (sourceStart < targetEnd) {
            if (sourceIsContiguous) {
              this[S$1._table$3][S$0.$setRange](targetStart, this[S$1._table$3][S$.$length], this[S$1._table$3], sourceStart);
              this[S$1._table$3][S$0.$setRange](0, targetEnd, this[S$1._table$3], sourceStart + (this[S$1._table$3][S$.$length] - targetStart));
            } else {
              let firstEnd = this[S$1._table$3][S$.$length] - sourceStart;
              this[S$1._table$3][S$0.$setRange](targetStart, firstEnd, this[S$1._table$3], sourceStart);
              this[S$1._table$3][S$0.$setRange](firstEnd, targetEnd, this[S$1._table$3]);
            }
          } else {
            if (sourceIsContiguous) {
              this[S$1._table$3][S$0.$setRange](0, targetEnd, this[S$1._table$3], sourceStart + (this[S$1._table$3][S$.$length] - targetStart));
              this[S$1._table$3][S$0.$setRange](targetStart, this[S$1._table$3][S$.$length], this[S$1._table$3], sourceStart);
            } else {
              let firstStart = targetEnd - sourceEnd;
              this[S$1._table$3][S$0.$setRange](firstStart, targetEnd, this[S$1._table$3]);
              this[S$1._table$3][S$0.$setRange](targetStart, firstStart, this[S$1._table$3], sourceStart);
            }
          }
        } else if (targetIsContiguous) {
          this[S$1._table$3][S$0.$setRange](targetStart, targetEnd, iterable, skipCount);
        } else if (__t$ListOfE().is(iterable)) {
          this[S$1._table$3][S$0.$setRange](targetStart, this[S$1._table$3][S$.$length], iterable, skipCount);
          this[S$1._table$3][S$0.$setRange](0, targetEnd, iterable, skipCount + (this[S$1._table$3][S$.$length] - targetStart));
        } else {
          super.setRange(start, end, iterable, skipCount);
        }
      }
      fillRange(start, end, value = null) {
        __t$EN().as(value);
        let startInTable = (this[S$1._head$1] + start & this[S$1._table$3][S$.$length] - 1) >>> 0;
        let endInTable = (this[S$1._head$1] + end & this[S$1._table$3][S$.$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          this[S$1._table$3][S$0.$fillRange](startInTable, endInTable, value);
        } else {
          this[S$1._table$3][S$0.$fillRange](startInTable, this[S$1._table$3][S$.$length], value);
          this[S$1._table$3][S$0.$fillRange](0, endInTable, value);
        }
      }
      sublist(start, end = null) {
        let length = this.length;
        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);
        let list = this[S$1._createList](nonNullEnd - start);
        this[S$1._writeToList](list, start, nonNullEnd);
        return list;
      }
      [S$1._writeToList](target, start = null, end = null) {
        start == null ? start = 0 : null;
        end == null ? end = this.length : null;
        if (!(target[S$.$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[273], 278, 12, "target.length >= end - start");
        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[273], 279, 12, "start <= end");
        let elementsToWrite = dart.notNull(end) - dart.notNull(start);
        let startInTable = (this[S$1._head$1] + dart.notNull(start) & this[S$1._table$3][S$.$length] - 1) >>> 0;
        let endInTable = (this[S$1._head$1] + dart.notNull(end) & this[S$1._table$3][S$.$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          target[S$0.$setRange](0, elementsToWrite, this[S$1._table$3], startInTable);
        } else {
          let firstPartSize = this[S$1._table$3][S$.$length] - startInTable;
          target[S$0.$setRange](0, firstPartSize, this[S$1._table$3], startInTable);
          target[S$0.$setRange](firstPartSize, firstPartSize + endInTable, this[S$1._table$3], 0);
        }
        return elementsToWrite;
      }
      [S$1._growAtCapacity]() {
        if (!(this[S$1._head$1] === this[S$1._tail$1])) dart.assertFailed(null, I[273], 297, 12, "_head == _tail");
        let newTable = this[S$1._createList](this[S$1._table$3][S$.$length] * 2);
        let partitionPoint = this[S$1._table$3][S$.$length] - this[S$1._head$1];
        newTable[S$0.$setRange](0, partitionPoint, this[S$1._table$3], this[S$1._head$1]);
        if (partitionPoint !== this[S$1._table$3][S$.$length]) {
          newTable[S$0.$setRange](partitionPoint, this[S$1._table$3][S$.$length], this[S$1._table$3]);
        }
        this[S$1._head$1] = 0;
        this[S$1._tail$1] = this[S$1._table$3][S$.$length];
        this[S$1._table$3] = newTable;
      }
      [S$1._growTo](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[273], 316, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[S$0.$rightShift](1);
        let newTable = this[S$1._createList](typed_queue._nextPowerOf2(newElementCount));
        this[S$1._tail$1] = this[S$1._writeToList](newTable);
        this[S$1._table$3] = newTable;
        this[S$1._head$1] = 0;
      }
    }
    (_TypedQueue.new = function(table) {
      this[S$1._table$2] = L.as(table);
      this[S$1._head] = 0;
      this[S$1._tail] = 0;
      ;
    }).prototype = _TypedQueue.prototype;
    dart.addTypeTests(_TypedQueue);
    _TypedQueue.prototype[_is__TypedQueue_default] = true;
    dart.addTypeCaches(_TypedQueue);
    dart.setMethodSignature(_TypedQueue, () => ({
      __proto__: dart.getMethods(_TypedQueue.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [S$.$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [S$0.$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [S$1._writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),
      [S$1._growAtCapacity]: dart.fnType(dart.void, []),
      [S$1._growTo]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(_TypedQueue, () => ({
      __proto__: dart.getGetters(_TypedQueue.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setSetterSignature(_TypedQueue, () => ({
      __proto__: dart.getSetters(_TypedQueue.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setLibraryUri(_TypedQueue, I[274]);
    dart.setFieldSignature(_TypedQueue, () => ({
      __proto__: dart.getFields(_TypedQueue.__proto__),
      [S$1._table$3]: dart.fieldType(L),
      [S$1._head$1]: dart.fieldType(core.int),
      [S$1._tail$1]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedQueue, [
      'toList',
      'cast',
      'removeLast',
      'add',
      '_get',
      '_set',
      'removeRange',
      'setRange',
      'fillRange',
      'sublist'
    ]);
    dart.defineExtensionAccessors(_TypedQueue, ['length']);
    return _TypedQueue;
  });
  typed_queue._TypedQueue = typed_queue._TypedQueue$();
  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);
  const _is__IntQueue_default = Symbol('_is__IntQueue_default');
  typed_queue._IntQueue$ = dart.generic(L => {
    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {
      get [S$1._defaultValue$1]() {
        return 0;
      }
    }
    (_IntQueue.new = function(queue) {
      _IntQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _IntQueue.prototype;
    dart.addTypeTests(_IntQueue);
    _IntQueue.prototype[_is__IntQueue_default] = true;
    dart.addTypeCaches(_IntQueue);
    dart.setGetterSignature(_IntQueue, () => ({
      __proto__: dart.getGetters(_IntQueue.__proto__),
      [S$1._defaultValue$1]: core.int
    }));
    dart.setLibraryUri(_IntQueue, I[274]);
    return _IntQueue;
  });
  typed_queue._IntQueue = typed_queue._IntQueue$();
  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);
  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');
  typed_queue._FloatQueue$ = dart.generic(L => {
    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {
      get [S$1._defaultValue$1]() {
        return 0;
      }
    }
    (_FloatQueue.new = function(queue) {
      _FloatQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _FloatQueue.prototype;
    dart.addTypeTests(_FloatQueue);
    _FloatQueue.prototype[_is__FloatQueue_default] = true;
    dart.addTypeCaches(_FloatQueue);
    dart.setGetterSignature(_FloatQueue, () => ({
      __proto__: dart.getGetters(_FloatQueue.__proto__),
      [S$1._defaultValue$1]: core.double
    }));
    dart.setLibraryUri(_FloatQueue, I[274]);
    return _FloatQueue;
  });
  typed_queue._FloatQueue = typed_queue._FloatQueue$();
  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);
  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Uint8Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Uint8Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {
    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8Queue.prototype;
  dart.addTypeTests(typed_queue.Uint8Queue);
  dart.addTypeCaches(typed_queue.Uint8Queue);
  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Uint8List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8Queue, I[274]);
  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Int8Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int8Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Int8Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Int8Queue.new = function(initialCapacity = null) {
    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int8Queue.prototype;
  dart.addTypeTests(typed_queue.Int8Queue);
  dart.addTypeCaches(typed_queue.Int8Queue);
  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Int8List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int8Queue, I[274]);
  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Uint8ClampedQueue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8ClampedQueue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Uint8ClampedBuffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {
    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8ClampedQueue.prototype;
  dart.addTypeTests(typed_queue.Uint8ClampedQueue);
  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);
  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[274]);
  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Uint16Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint16Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Uint16Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {
    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint16Queue.prototype;
  dart.addTypeTests(typed_queue.Uint16Queue);
  dart.addTypeCaches(typed_queue.Uint16Queue);
  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Uint16List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint16Queue, I[274]);
  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Int16Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int16Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Int16Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Int16Queue.new = function(initialCapacity = null) {
    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int16Queue.prototype;
  dart.addTypeTests(typed_queue.Int16Queue);
  dart.addTypeCaches(typed_queue.Int16Queue);
  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Int16List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int16Queue, I[274]);
  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Uint32Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint32Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Uint32Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {
    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint32Queue.prototype;
  dart.addTypeTests(typed_queue.Uint32Queue);
  dart.addTypeCaches(typed_queue.Uint32Queue);
  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Uint32List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint32Queue, I[274]);
  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Int32Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Int32Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Int32Queue.new = function(initialCapacity = null) {
    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32Queue.prototype;
  dart.addTypeTests(typed_queue.Int32Queue);
  dart.addTypeCaches(typed_queue.Int32Queue);
  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Int32List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32Queue, I[274]);
  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Uint64Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint64Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return typed_data.Uint64List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Uint64Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {
    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint64Queue.prototype;
  dart.addTypeTests(typed_queue.Uint64Queue);
  dart.addTypeCaches(typed_queue.Uint64Queue);
  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Uint64List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint64Queue, I[274]);
  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Int64Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int64Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return typed_data.Int64List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Int64Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Int64Queue.new = function(initialCapacity = null) {
    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int64Queue.prototype;
  dart.addTypeTests(typed_queue.Int64Queue);
  dart.addTypeCaches(typed_queue.Int64Queue);
  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Int64List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.int]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.int)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int64Queue, I[274]);
  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Float32Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Float32Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Float32Queue.new = function(initialCapacity = null) {
    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32Queue.prototype;
  dart.addTypeTests(typed_queue.Float32Queue);
  dart.addTypeCaches(typed_queue.Float32Queue);
  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Float32List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.double]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.double)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.double)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32Queue, I[274]);
  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Float64Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float64Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Float64Buffer.new(size);
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Float64Queue.new = function(initialCapacity = null) {
    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float64Queue.prototype;
  dart.addTypeTests(typed_queue.Float64Queue);
  dart.addTypeCaches(typed_queue.Float64Queue);
  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Float64List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [core.double]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.double)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(core.double)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float64Queue, I[274]);
  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Int32x4Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32x4Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Int32x4Buffer.new(size);
    }
    get [S$1._defaultValue$1]() {
      return typed_queue.Int32x4Queue._zero;
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Int32x4Queue);
  dart.addTypeCaches(typed_queue.Int32x4Queue);
  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];
  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Int32x4List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [typed_data.Int32x4]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),
    [S$1._defaultValue$1]: typed_data.Int32x4,
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(typed_data.Int32x4)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(typed_data.Int32x4)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32x4Queue, I[274]);
  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);
  dart.defineLazy(typed_queue.Int32x4Queue, {
    /*typed_queue.Int32x4Queue._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t510;
      t510 = new typed_queue.Float32x4Queue.new(elements[S$.$length]);
      return (() => {
        t510.addAll(elements);
        return t510;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32x4Queue.fromList(elements);
    }
    [S$1._createList](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
    [S$1._createBuffer](size) {
      return new typed_buffer.Float32x4Buffer.new(size);
    }
    get [S$1._defaultValue$1]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [S$1._add$3](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[414] || CT.C414, null, [element])));
    }
    get [S$1._head$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[415] || CT.C415)));
    }
    [S$1._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[416] || CT.C416, null, [target])));
    }
    [S$1._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[417] || CT.C417, null, [])));
    }
    [S$1._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[418] || CT.C418, null, [newElementCount])));
    }
    get [S$1._table$4]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[419] || CT.C419)));
    }
    get [S$1._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[420] || CT.C420)));
    }
    set [S$1._head$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[421] || CT.C421, value)));
    }
    set [S$1._table$4](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[422] || CT.C422, value)));
    }
    set [S$1._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[423] || CT.C423, value)));
    }
  };
  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Float32x4Queue);
  dart.addTypeCaches(typed_queue.Float32x4Queue);
  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];
  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),
    [S$1._createList]: dart.fnType(typed_data.Float32x4List, [core.int]),
    [S$1._createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),
    [S$1._add$3]: dart.fnType(dart.void, [typed_data.Float32x4]),
    [S$1._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),
    [S$1._grow$1]: dart.fnType(dart.void, []),
    [S$1._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),
    [S$1._defaultValue$1]: typed_data.Float32x4,
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(typed_data.Float32x4)),
    [S$1._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),
    [S$1._head$2]: core.int,
    [S$1._table$4]: core.List$(dart.nullable(typed_data.Float32x4)),
    [S$1._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32x4Queue, I[274]);
  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {
    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {
      return 16;
    } else if (!typed_queue._isPowerOf2(initialCapacity)) {
      return typed_queue._nextPowerOf2(initialCapacity);
    } else {
      return initialCapacity;
    }
  };
  typed_queue._isPowerOf2 = function _isPowerOf2(number) {
    return (number & number - 1) === 0;
  };
  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {
    if (!(number > 0)) dart.assertFailed(null, I[273], 691, 10, "number > 0");
    number = (number << 1 >>> 0) - 1;
    for (;;) {
      let nextNumber = (number & number - 1) >>> 0;
      if (nextNumber === 0) return number;
      number = nextNumber;
    }
  };
  dart.defineLazy(typed_queue, {
    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {
      return 16;
    }
  }, false);
  const _is__MultiControllerSink_default = Symbol('_is__MultiControllerSink_default');
  forwarding_stream._MultiControllerSink$ = dart.generic(T => {
    class _MultiControllerSink extends core.Object {
      static ['_#new#tearOff'](T, controller) {
        return new (forwarding_stream._MultiControllerSink$(T)).new(controller);
      }
      add(event) {
        T.as(event);
        return this.controller.addSync(event);
      }
      addError(error, stackTrace = null) {
        return this.controller.addErrorSync(error, stackTrace);
      }
      close() {
        return this.controller.closeSync();
      }
    }
    (_MultiControllerSink.new = function(controller) {
      this.controller = controller;
      ;
    }).prototype = _MultiControllerSink.prototype;
    dart.addTypeTests(_MultiControllerSink);
    _MultiControllerSink.prototype[_is__MultiControllerSink_default] = true;
    dart.addTypeCaches(_MultiControllerSink);
    _MultiControllerSink[dart.implements] = () => [async.EventSink$(T)];
    dart.setMethodSignature(_MultiControllerSink, () => ({
      __proto__: dart.getMethods(_MultiControllerSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_MultiControllerSink, I[275]);
    dart.setFieldSignature(_MultiControllerSink, () => ({
      __proto__: dart.getFields(_MultiControllerSink.__proto__),
      controller: dart.finalFieldType(async.MultiStreamController$(T))
    }));
    return _MultiControllerSink;
  });
  forwarding_stream._MultiControllerSink = forwarding_stream._MultiControllerSink$();
  dart.addTypeTests(forwarding_stream._MultiControllerSink, _is__MultiControllerSink_default);
  forwarding_stream.forwardStream = function forwardStream(T, R, stream, sinkFactory, listenOnlyOnce = false) {
    return stream.isBroadcast ? listenOnlyOnce ? forwarding_stream._forward(T, R, stream, sinkFactory) : forwarding_stream._forwardMulti(T, R, stream, sinkFactory) : forwarding_stream._forward(T, R, stream, sinkFactory);
  };
  forwarding_stream._forwardMulti = function _forwardMulti(T, R, stream, sinkFactory) {
    return async.Stream$(R).multi(dart.fn(controller => {
      let sink = sinkFactory();
      sink.setSink(new (forwarding_stream._MultiControllerSink$(R)).new(controller));
      let subscription = null;
      let cancelled = false;
      function listenToUpstream(_ = null) {
        if (cancelled) {
          return;
        }
        subscription = stream.listen(dart.fnType(dart.void, [T]).as(dart.bind(sink, 'onData')), {onError: dart.bind(sink, 'onError'), onDone: dart.bind(sink, 'onDone')});
      }
      dart.fn(listenToUpstream, T$0.voidTovoid$1());
      let futureOrVoid = sink.onListen();
      if (T$.FutureOfvoid().is(futureOrVoid)) {
        async['FutureExtensions|onError'](dart.void, core.Object, futureOrVoid.then(dart.void, listenToUpstream), dart.fn((e, s) => {
          if (!cancelled && !controller.isClosed) {
            controller.addError(e, s);
            controller.close();
          }
        }, T$.ObjectAndStackTraceToNull()));
      } else {
        listenToUpstream();
      }
      controller.onCancel = dart.fn(() => {
        let t510;
        cancelled = true;
        let future = (t510 = subscription, t510 == null ? null : t510.cancel());
        subscription = null;
        return future$.waitTwoFutures(future, sink.onCancel());
      }, T$.VoidToFutureOrOfvoid());
    }, dart.fnType(dart.void, [async.MultiStreamController$(R)])), {isBroadcast: true});
  };
  forwarding_stream._forward = function _forward(T, R, stream, sinkFactory) {
    let controller = stream.isBroadcast ? async.StreamController$(R).broadcast({sync: true}) : async.StreamController$(R).new({sync: true});
    let subscription = null;
    let cancelled = false;
    let sink = null;
    function sink$35get() {
      let t512, t511;
      t511 = sink;
      return t511 == null ? (t512 = sinkFactory(), sink == null ? sink = t512 : dart.throw(new _internal.LateError.localADI("sink"))) : t511;
    }
    controller.onListen = dart.fn(() => {
      function listenToUpstream(_ = null) {
        if (cancelled) {
          return;
        }
        subscription = stream.listen(dart.fnType(dart.void, [T]).as(dart.bind(sink$35get(), 'onData')), {onError: dart.bind(sink$35get(), 'onError'), onDone: dart.bind(sink$35get(), 'onDone')});
        if (!stream.isBroadcast) {
          controller.onPause = dart.fn(() => {
            dart.nullCheck(subscription).pause();
            sink$35get().onPause();
          }, T$.VoidTovoid());
          controller.onResume = dart.fn(() => {
            dart.nullCheck(subscription).resume();
            sink$35get().onResume();
          }, T$.VoidTovoid());
        }
      }
      dart.fn(listenToUpstream, T$0.voidTovoid$1());
      sink$35get().setSink(controller);
      let futureOrVoid = sink$35get().onListen();
      if (T$.FutureOfvoid().is(futureOrVoid)) {
        async['FutureExtensions|onError'](dart.void, core.Object, futureOrVoid.then(dart.void, listenToUpstream), dart.fn((e, s) => {
          if (!cancelled && !controller.isClosed) {
            controller.addError(e, s);
            controller.close();
          }
        }, T$.ObjectAndStackTraceToNull()));
      } else {
        listenToUpstream();
      }
    }, T$.VoidTovoid());
    controller.onCancel = dart.fn(() => {
      let t512;
      cancelled = true;
      let future = (t512 = subscription, t512 == null ? null : t512.cancel());
      subscription = null;
      return future$.waitTwoFutures(future, sink$35get().onCancel());
    }, T$.VoidToFutureOrOfvoid());
    return controller.stream;
  };
  const _is_StreamSinkImpl_default = Symbol('_is_StreamSinkImpl_default');
  io_sink.StreamSinkImpl$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    class StreamSinkImpl extends core.Object {
      static ['_#new#tearOff'](T, _target) {
        return new (io_sink.StreamSinkImpl$(T)).new(_target);
      }
      add(data) {
        T.as(data);
        if (this[S$1._isClosed$3]) {
          return;
        }
        this[S$1._controller$13].add(data);
      }
      addError(error, stackTrace = null) {
        if (this[S$1._isClosed$3]) {
          return;
        }
        this[S$1._controller$13].addError(error, stackTrace);
      }
      addStream(stream) {
        let t512;
        __t$StreamOfT().as(stream);
        if (this[S$1._isBound]) {
          dart.throw(new core.StateError.new("StreamSink is already bound to a stream"));
        }
        if (this[S$1._hasError]) return this.done;
        this[S$1._isBound] = true;
        let future = this[S$1._controllerCompleter] == null ? this[S$1._target$1].addStream(stream) : dart.nullCheck(this[S$1._controllerCompleter]).future.then(dart.dynamic, dart.fn(_ => this[S$1._target$1].addStream(stream), T$.dynamicToFuture()));
        t512 = this[S$1._controllerInstance];
        t512 == null ? null : t512.close();
        return future.whenComplete(dart.fn(() => {
          this[S$1._isBound] = false;
        }, T$.VoidToNull()));
      }
      flush() {
        if (this[S$1._isBound]) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        if (this[S$1._controllerInstance] == null) return async.Future.value(this);
        this[S$1._isBound] = true;
        let future = dart.nullCheck(this[S$1._controllerCompleter]).future;
        dart.nullCheck(this[S$1._controllerInstance]).close();
        return future.whenComplete(dart.fn(() => {
          this[S$1._isBound] = false;
        }, T$.VoidToNull()));
      }
      close() {
        if (this[S$1._isBound]) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        if (!this[S$1._isClosed$3]) {
          this[S$1._isClosed$3] = true;
          if (this[S$1._controllerInstance] != null) {
            dart.nullCheck(this[S$1._controllerInstance]).close();
          } else {
            this[S$1._closeTarget]();
          }
        }
        return this.done;
      }
      [S$1._closeTarget]() {
        this[S$1._target$1].close().then(dart.void, dart.bind(this, S$1._completeDoneValue), {onError: dart.bind(this, S$1._completeDoneError)});
      }
      get done() {
        return this[S$1._doneCompleter].future;
      }
      [S$1._completeDoneValue](value) {
        if (!this[S$1._doneCompleter].isCompleted) {
          this[S$1._doneCompleter].complete(value);
        }
      }
      [S$1._completeDoneError](error, stackTrace) {
        if (!this[S$1._doneCompleter].isCompleted) {
          this[S$1._hasError] = true;
          this[S$1._doneCompleter].completeError(error, stackTrace);
        }
      }
      get [S$1._controller$13]() {
        if (this[S$1._isBound]) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        if (this[S$1._isClosed$3]) {
          dart.throw(new core.StateError.new("StreamSink is closed"));
        }
        if (this[S$1._controllerInstance] == null) {
          this[S$1._controllerInstance] = __t$StreamControllerOfT().new({sync: true});
          this[S$1._controllerCompleter] = async.Completer.new();
          this[S$1._target$1].addStream(this[S$1._controller$13].stream).then(core.Null, dart.fn(_ => {
            if (this[S$1._isBound]) {
              dart.nullCheck(this[S$1._controllerCompleter]).complete(this);
              this[S$1._controllerCompleter] = null;
              this[S$1._controllerInstance] = null;
            } else {
              this[S$1._closeTarget]();
            }
          }, T$.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
              if (this[S$1._isBound]) {
                dart.nullCheck(this[S$1._controllerCompleter]).completeError(error, stackTrace);
                this[S$1._controllerCompleter] = null;
                this[S$1._controllerInstance] = null;
              } else {
                this[S$1._completeDoneError](error, stackTrace);
              }
            }, T$.ObjectAndStackTraceToNull())});
        }
        return dart.nullCheck(this[S$1._controllerInstance]);
      }
    }
    (StreamSinkImpl.new = function(_target) {
      this[S$1._doneCompleter] = async.Completer.new();
      this[S$1._controllerInstance] = null;
      this[S$1._controllerCompleter] = null;
      this[S$1._isClosed$3] = false;
      this[S$1._isBound] = false;
      this[S$1._hasError] = false;
      this[S$1._target$1] = _target;
      ;
    }).prototype = StreamSinkImpl.prototype;
    dart.addTypeTests(StreamSinkImpl);
    StreamSinkImpl.prototype[_is_StreamSinkImpl_default] = true;
    dart.addTypeCaches(StreamSinkImpl);
    StreamSinkImpl[dart.implements] = () => [async.StreamSink$(T)];
    dart.setMethodSignature(StreamSinkImpl, () => ({
      __proto__: dart.getMethods(StreamSinkImpl.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
      flush: dart.fnType(async.Future, []),
      close: dart.fnType(async.Future, []),
      [S$1._closeTarget]: dart.fnType(dart.void, []),
      [S$1._completeDoneValue]: dart.fnType(dart.void, [dart.dynamic]),
      [S$1._completeDoneError]: dart.fnType(dart.void, [core.Object, core.StackTrace])
    }));
    dart.setGetterSignature(StreamSinkImpl, () => ({
      __proto__: dart.getGetters(StreamSinkImpl.__proto__),
      done: async.Future,
      [S$1._controller$13]: async.StreamController$(T)
    }));
    dart.setLibraryUri(StreamSinkImpl, I[276]);
    dart.setFieldSignature(StreamSinkImpl, () => ({
      __proto__: dart.getFields(StreamSinkImpl.__proto__),
      [S$1._target$1]: dart.finalFieldType(async.StreamConsumer$(T)),
      [S$1._doneCompleter]: dart.finalFieldType(async.Completer),
      [S$1._controllerInstance]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [S$1._controllerCompleter]: dart.fieldType(dart.nullable(async.Completer)),
      [S$1._isClosed$3]: dart.fieldType(core.bool),
      [S$1._isBound]: dart.fieldType(core.bool),
      [S$1._hasError]: dart.fieldType(core.bool)
    }));
    return StreamSinkImpl;
  });
  io_sink.StreamSinkImpl = io_sink.StreamSinkImpl$();
  dart.addTypeTests(io_sink.StreamSinkImpl, _is_StreamSinkImpl_default);
  web_socket.WebSocketStatus = class WebSocketStatus extends core.Object {};
  (web_socket.WebSocketStatus.new = function() {
    ;
  }).prototype = web_socket.WebSocketStatus.prototype;
  dart.addTypeTests(web_socket.WebSocketStatus);
  dart.addTypeCaches(web_socket.WebSocketStatus);
  dart.setLibraryUri(web_socket.WebSocketStatus, I[277]);
  dart.setStaticFieldSignature(web_socket.WebSocketStatus, () => ['NORMAL_CLOSURE', 'GOING_AWAY', 'PROTOCOL_ERROR', 'UNSUPPORTED_DATA', 'RESERVED_1004', 'NO_STATUS_RECEIVED', 'ABNORMAL_CLOSURE', 'INVALID_FRAME_PAYLOAD_DATA', 'POLICY_VIOLATION', 'MESSAGE_TOO_BIG', 'MISSING_MANDATORY_EXTENSION', 'INTERNAL_SERVER_ERROR', 'RESERVED_1015']);
  dart.defineLazy(web_socket.WebSocketStatus, {
    /*web_socket.WebSocketStatus.NORMAL_CLOSURE*/get NORMAL_CLOSURE() {
      return 1000;
    },
    /*web_socket.WebSocketStatus.GOING_AWAY*/get GOING_AWAY() {
      return 1001;
    },
    /*web_socket.WebSocketStatus.PROTOCOL_ERROR*/get PROTOCOL_ERROR() {
      return 1002;
    },
    /*web_socket.WebSocketStatus.UNSUPPORTED_DATA*/get UNSUPPORTED_DATA() {
      return 1003;
    },
    /*web_socket.WebSocketStatus.RESERVED_1004*/get RESERVED_1004() {
      return 1004;
    },
    /*web_socket.WebSocketStatus.NO_STATUS_RECEIVED*/get NO_STATUS_RECEIVED() {
      return 1005;
    },
    /*web_socket.WebSocketStatus.ABNORMAL_CLOSURE*/get ABNORMAL_CLOSURE() {
      return 1006;
    },
    /*web_socket.WebSocketStatus.INVALID_FRAME_PAYLOAD_DATA*/get INVALID_FRAME_PAYLOAD_DATA() {
      return 1007;
    },
    /*web_socket.WebSocketStatus.POLICY_VIOLATION*/get POLICY_VIOLATION() {
      return 1008;
    },
    /*web_socket.WebSocketStatus.MESSAGE_TOO_BIG*/get MESSAGE_TOO_BIG() {
      return 1009;
    },
    /*web_socket.WebSocketStatus.MISSING_MANDATORY_EXTENSION*/get MISSING_MANDATORY_EXTENSION() {
      return 1010;
    },
    /*web_socket.WebSocketStatus.INTERNAL_SERVER_ERROR*/get INTERNAL_SERVER_ERROR() {
      return 1011;
    },
    /*web_socket.WebSocketStatus.RESERVED_1015*/get RESERVED_1015() {
      return 1015;
    }
  }, false);
  web_socket.WebSocket = class WebSocket extends core.Object {};
  (web_socket.WebSocket.new = function() {
    ;
  }).prototype = web_socket.WebSocket.prototype;
  dart.addTypeTests(web_socket.WebSocket);
  dart.addTypeCaches(web_socket.WebSocket);
  dart.setLibraryUri(web_socket.WebSocket, I[277]);
  dart.setStaticFieldSignature(web_socket.WebSocket, () => ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED']);
  dart.defineLazy(web_socket.WebSocket, {
    /*web_socket.WebSocket.CONNECTING*/get CONNECTING() {
      return 0;
    },
    /*web_socket.WebSocket.OPEN*/get OPEN() {
      return 1;
    },
    /*web_socket.WebSocket.CLOSING*/get CLOSING() {
      return 2;
    },
    /*web_socket.WebSocket.CLOSED*/get CLOSED() {
      return 3;
    }
  }, false);
  bound_multipart_stream._MimeMultipart = class _MimeMultipart extends mime_shared.MimeMultipart {
    get headers() {
      return this[S$1.headers$12];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](headers, _stream) {
      return new bound_multipart_stream._MimeMultipart.new(headers, _stream);
    }
    listen(onData, opts$) {
      let onDone = opts$ && 'onDone' in opts$ ? opts$.onDone : null;
      let onError = opts$ && 'onError' in opts$ ? opts$.onError : null;
      let cancelOnError = opts$ && 'cancelOnError' in opts$ ? opts$.cancelOnError : null;
      return this[S$1._stream$3].listen(onData, {onDone: onDone, onError: onError, cancelOnError: cancelOnError});
    }
  };
  (bound_multipart_stream._MimeMultipart.new = function(headers, _stream) {
    this[S$1.headers$12] = headers;
    this[S$1._stream$3] = _stream;
    bound_multipart_stream._MimeMultipart.__proto__.new.call(this);
    ;
  }).prototype = bound_multipart_stream._MimeMultipart.prototype;
  dart.addTypeTests(bound_multipart_stream._MimeMultipart);
  dart.addTypeCaches(bound_multipart_stream._MimeMultipart);
  dart.setMethodSignature(bound_multipart_stream._MimeMultipart, () => ({
    __proto__: dart.getMethods(bound_multipart_stream._MimeMultipart.__proto__),
    listen: dart.fnType(async.StreamSubscription$(core.List$(core.int)), [dart.nullable(dart.fnType(dart.void, [core.List$(core.int)]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setLibraryUri(bound_multipart_stream._MimeMultipart, I[278]);
  dart.setFieldSignature(bound_multipart_stream._MimeMultipart, () => ({
    __proto__: dart.getFields(bound_multipart_stream._MimeMultipart.__proto__),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S$1._stream$3]: dart.finalFieldType(async.Stream$(core.List$(core.int)))
  }));
  bound_multipart_stream.BoundMultipartStream = class BoundMultipartStream extends core.Object {
    get stream() {
      return this[S$1._controller$14].stream;
    }
    get [S$1._subscription$5]() {
      let t512;
      t512 = this[S$1.__BoundMultipartStream__subscription];
      return t512 == null ? dart.throw(new _internal.LateError.fieldNI("_subscription")) : t512;
    }
    set [S$1._subscription$5](_subscription$35param) {
      this[S$1.__BoundMultipartStream__subscription] = _subscription$35param;
    }
    static ['_#new#tearOff'](_boundary, stream) {
      return new bound_multipart_stream.BoundMultipartStream.new(_boundary, stream);
    }
    [S$1._resumeStream]() {
      if (!(this[S$1._controllerState] === 2)) dart.assertFailed(null, I[279], 138, 12, "_controllerState == _controllerStatePaused");
      this[S$1._controllerState] = 1;
      this[S$1._tryPropagateControllerState]();
    }
    [S$1._pauseStream]() {
      this[S$1._controllerState] = 2;
      this[S$1._tryPropagateControllerState]();
    }
    [S$1._tryPropagateControllerState]() {
      if (this[S$1._multipartController] == null) {
        switch (this[S$1._controllerState]) {
          case 1:
            {
              if (this[S$1._subscription$5].isPaused) this[S$1._subscription$5].resume();
              break;
            }
          case 2:
            {
              if (!this[S$1._subscription$5].isPaused) this[S$1._subscription$5].pause();
              break;
            }
          case 3:
            {
              this[S$1._subscription$5].cancel();
              break;
            }
          default:
            {
              dart.throw(new core.StateError.new("This code should never be reached."));
            }
        }
      }
    }
    [S$1._parse]() {
      let t512, t512$;
      let boundaryPrefix = this[S$1._boundaryIndex];
      let contentStartIndex = this[S$1._state$3] === 10 && this[S$1._boundaryIndex] === 0 ? 0 : null;
      const reportData = () => {
        if (dart.nullCheck(contentStartIndex) < 0) {
          let contentLength = boundaryPrefix + this[S$1._index$1] - this[S$1._boundaryIndex];
          if (contentLength <= boundaryPrefix) {
            dart.nullCheck(this[S$1._multipartController]).add(this[S$1._boundary$1][S$0.$sublist](0, contentLength));
          } else {
            dart.nullCheck(this[S$1._multipartController]).add(this[S$1._boundary$1][S$0.$sublist](0, boundaryPrefix));
            dart.nullCheck(this[S$1._multipartController]).add(this[S$1._buffer][S$0.$sublist](0, contentLength - boundaryPrefix));
          }
        } else {
          let contentEndIndex = this[S$1._index$1] - this[S$1._boundaryIndex];
          dart.nullCheck(this[S$1._multipartController]).add(this[S$1._buffer][S$0.$sublist](contentStartIndex, contentEndIndex));
        }
      };
      dart.fn(reportData, T$.VoidTovoid());
      while (this[S$1._index$1] < this[S$1._buffer][S$.$length] && this[S$1._state$3] !== 15 && this[S$1._state$3] !== 14) {
        let byte = this[S$1._index$1] < 0 ? this[S$1._boundary$1][S$.$_get](boundaryPrefix + this[S$1._index$1]) : this[S$1._buffer][S$.$_get](this[S$1._index$1]);
        switch (this[S$1._state$3]) {
          case 0:
            {
              if (byte === this[S$1._boundary$1][S$.$_get](this[S$1._boundaryIndex])) {
                this[S$1._boundaryIndex] = this[S$1._boundaryIndex] + 1;
                if (this[S$1._boundaryIndex] === this[S$1._boundary$1][S$.$length]) {
                  this[S$1._state$3] = 1;
                  this[S$1._boundaryIndex] = 0;
                }
              } else {
                this[S$1._index$1] = this[S$1._index$1] - this[S$1._boundaryIndex];
                this[S$1._boundaryIndex] = 0;
              }
              break;
            }
          case 1:
            {
              if (byte === 13) {
                this[S$1._state$3] = 2;
              } else if (byte === 45) {
                this[S$1._state$3] = 11;
              } else {
                bound_multipart_stream._expectWhitespace(byte);
              }
              break;
            }
          case 2:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              t512 = this[S$1._multipartController];
              t512 == null ? null : t512.close();
              if (this[S$1._multipartController] != null) {
                this[S$1._multipartController] = null;
                this[S$1._tryPropagateControllerState]();
              }
              this[S$1._state$3] = 3;
              break;
            }
          case 3:
            {
              this[S$1._headers$6] = new (T$.IdentityMapOfString$String()).new();
              if (byte === 13) {
                this[S$1._state$3] = 9;
              } else {
                this[S$1._headerField][S$.$add](bound_multipart_stream._toLowerCase(byte));
                this[S$1._state$3] = 4;
              }
              break;
            }
          case 4:
            {
              if (byte === 58) {
                this[S$1._state$3] = 5;
              } else {
                if (!bound_multipart_stream._isTokenChar(byte)) {
                  dart.throw(C[425] || CT.C425);
                }
                this[S$1._headerField][S$.$add](bound_multipart_stream._toLowerCase(byte));
              }
              break;
            }
          case 5:
            {
              if (byte === 13) {
                this[S$1._state$3] = 7;
              } else if (byte !== 32 && byte !== 9) {
                this[S$1._headerValue][S$.$add](byte);
                this[S$1._state$3] = 6;
              }
              break;
            }
          case 6:
            {
              if (byte === 13) {
                this[S$1._state$3] = 7;
              } else {
                this[S$1._headerValue][S$.$add](byte);
              }
              break;
            }
          case 7:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              this[S$1._state$3] = 8;
              break;
            }
          case 8:
            {
              if (byte === 32 || byte === 9) {
                this[S$1._state$3] = 5;
              } else {
                let headerField = convert.utf8.decode(this[S$1._headerField]);
                let headerValue = convert.utf8.decode(this[S$1._headerValue]);
                dart.nullCheck(this[S$1._headers$6])[S$.$_set](headerField[S$.$toLowerCase](), headerValue);
                this[S$1._headerField][S$.$clear]();
                this[S$1._headerValue][S$.$clear]();
                if (byte === 13) {
                  this[S$1._state$3] = 9;
                } else {
                  this[S$1._headerField][S$.$add](bound_multipart_stream._toLowerCase(byte));
                  this[S$1._state$3] = 4;
                }
              }
              break;
            }
          case 9:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              this[S$1._multipartController] = T$.StreamControllerOfListOfint().new({sync: true, onListen: dart.fn(() => {
                  if (this[S$1._subscription$5].isPaused) this[S$1._subscription$5].resume();
                }, T$.VoidTovoid()), onPause: dart.bind(this[S$1._subscription$5], 'pause'), onResume: dart.bind(this[S$1._subscription$5], 'resume')});
              this[S$1._controller$14].add(new bound_multipart_stream._MimeMultipart.new(dart.nullCheck(this[S$1._headers$6]), dart.nullCheck(this[S$1._multipartController]).stream));
              this[S$1._headers$6] = null;
              this[S$1._state$3] = 10;
              contentStartIndex = this[S$1._index$1] + 1;
              break;
            }
          case 10:
            {
              if (byte === this[S$1._boundary$1][S$.$_get](this[S$1._boundaryIndex])) {
                this[S$1._boundaryIndex] = this[S$1._boundaryIndex] + 1;
                if (this[S$1._boundaryIndex] === this[S$1._boundary$1][S$.$length]) {
                  if (contentStartIndex != null) {
                    this[S$1._index$1] = this[S$1._index$1] + 1;
                    reportData();
                    this[S$1._index$1] = this[S$1._index$1] - 1;
                  }
                  dart.nullCheck(this[S$1._multipartController]).close();
                  this[S$1._multipartController] = null;
                  this[S$1._tryPropagateControllerState]();
                  this[S$1._boundaryIndex] = 0;
                  this[S$1._state$3] = 1;
                }
              } else {
                this[S$1._index$1] = this[S$1._index$1] - this[S$1._boundaryIndex];
                contentStartIndex == null ? contentStartIndex = this[S$1._index$1] : null;
                this[S$1._boundaryIndex] = 0;
              }
              break;
            }
          case 11:
            {
              bound_multipart_stream._expectByteValue(byte, 45);
              this[S$1._state$3] = 12;
              break;
            }
          case 12:
            {
              if (byte === 13) {
                this[S$1._state$3] = 13;
              } else {
                bound_multipart_stream._expectWhitespace(byte);
              }
              break;
            }
          case 13:
            {
              bound_multipart_stream._expectByteValue(byte, 10);
              t512$ = this[S$1._multipartController];
              t512$ == null ? null : t512$.close();
              if (this[S$1._multipartController] != null) {
                this[S$1._multipartController] = null;
                this[S$1._tryPropagateControllerState]();
              }
              this[S$1._state$3] = 14;
              break;
            }
          default:
            {
              if (!false) dart.assertFailed(null, I[279], 367, 18, "false");
              break;
            }
        }
        this[S$1._index$1] = this[S$1._index$1] + 1;
      }
      if (this[S$1._state$3] === 10 && contentStartIndex != null) {
        reportData();
      }
      if (this[S$1._index$1] === this[S$1._buffer][S$.$length]) {
        this[S$1._buffer] = bound_multipart_stream._placeholderBuffer;
        this[S$1._index$1] = 0;
        this[S$1._subscription$5].resume();
      }
    }
  };
  (bound_multipart_stream.BoundMultipartStream.new = function(_boundary, stream) {
    let t512;
    this[S$1._headerField] = T$.JSArrayOfint().of([]);
    this[S$1._headerValue] = T$.JSArrayOfint().of([]);
    this[S$1._controllerState] = 0;
    this[S$1._controller$14] = T$0.StreamControllerOfMimeMultipart().new({sync: true});
    this[S$1.__BoundMultipartStream__subscription] = null;
    this[S$1._multipartController] = null;
    this[S$1._headers$6] = null;
    this[S$1._state$3] = 0;
    this[S$1._boundaryIndex] = 2;
    this[S$1._index$1] = 0;
    this[S$1._buffer] = bound_multipart_stream._placeholderBuffer;
    this[S$1._boundary$1] = _boundary;
    t512 = this[S$1._controller$14];
    (() => {
      t512.onPause = dart.bind(this, S$1._pauseStream);
      t512.onResume = dart.bind(this, S$1._resumeStream);
      t512.onCancel = dart.fn(() => {
        this[S$1._controllerState] = 3;
        this[S$1._tryPropagateControllerState]();
      }, T$.VoidToNull());
      t512.onListen = dart.fn(() => {
        this[S$1._controllerState] = 1;
        this[S$1._subscription$5] = stream.listen(dart.fn(data => {
          if (!this[S$1._buffer][S$.$_equals](bound_multipart_stream._placeholderBuffer)) dart.assertFailed(null, I[279], 122, 18, "_buffer == _placeholderBuffer");
          this[S$1._subscription$5].pause();
          this[S$1._buffer] = data;
          this[S$1._index$1] = 0;
          this[S$1._parse]();
        }, T$.ListOfintTovoid()), {onDone: dart.fn(() => {
            if (this[S$1._state$3] !== 14) {
              this[S$1._controller$14].addError(C[424] || CT.C424);
            }
            this[S$1._controller$14].close();
          }, T$.VoidTovoid()), onError: dart.bind(this[S$1._controller$14], 'addError')});
      }, T$.VoidTovoid());
      return t512;
    })();
  }).prototype = bound_multipart_stream.BoundMultipartStream.prototype;
  dart.addTypeTests(bound_multipart_stream.BoundMultipartStream);
  dart.addTypeCaches(bound_multipart_stream.BoundMultipartStream);
  dart.setMethodSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getMethods(bound_multipart_stream.BoundMultipartStream.__proto__),
    [S$1._resumeStream]: dart.fnType(dart.void, []),
    [S$1._pauseStream]: dart.fnType(dart.void, []),
    [S$1._tryPropagateControllerState]: dart.fnType(dart.void, []),
    [S$1._parse]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getGetters(bound_multipart_stream.BoundMultipartStream.__proto__),
    stream: async.Stream$(mime_shared.MimeMultipart),
    [S$1._subscription$5]: async.StreamSubscription$(dart.void)
  }));
  dart.setSetterSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getSetters(bound_multipart_stream.BoundMultipartStream.__proto__),
    [S$1._subscription$5]: async.StreamSubscription$(dart.void)
  }));
  dart.setLibraryUri(bound_multipart_stream.BoundMultipartStream, I[278]);
  dart.setFieldSignature(bound_multipart_stream.BoundMultipartStream, () => ({
    __proto__: dart.getFields(bound_multipart_stream.BoundMultipartStream.__proto__),
    [S$1._boundary$1]: dart.finalFieldType(core.List$(core.int)),
    [S$1._headerField]: dart.finalFieldType(core.List$(core.int)),
    [S$1._headerValue]: dart.finalFieldType(core.List$(core.int)),
    [S$1._controllerState]: dart.fieldType(core.int),
    [S$1._controller$14]: dart.finalFieldType(async.StreamController$(mime_shared.MimeMultipart)),
    [S$1.__BoundMultipartStream__subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(dart.void))),
    [S$1._multipartController]: dart.fieldType(dart.nullable(async.StreamController$(core.List$(core.int)))),
    [S$1._headers$6]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    [S$1._state$3]: dart.fieldType(core.int),
    [S$1._boundaryIndex]: dart.fieldType(core.int),
    [S$1._index$1]: dart.fieldType(core.int),
    [S$1._buffer]: dart.fieldType(core.List$(core.int))
  }));
  dart.setStaticFieldSignature(bound_multipart_stream.BoundMultipartStream, () => ['_startCode', '_boundaryEndingCode', '_boundaryEndCode', '_headerStartCode', '_headerFieldCode', '_headerValueStartCode', '_headerValueCode', '_headerValueFoldingOrEndingCode', '_headerValueFoldOrEndCode', '_headerEndingCode', '_contentCode', '_lastBoundaryDash2Code', '_lastBoundaryEndingCode', '_lastBoundaryEndCode', '_doneCode', '_failCode', '_controllerStateIdle', '_controllerStateActive', '_controllerStatePaused', '_controllerStateCanceled']);
  dart.defineLazy(bound_multipart_stream.BoundMultipartStream, {
    /*bound_multipart_stream.BoundMultipartStream._startCode*/get _startCode() {
      return 0;
    },
    /*bound_multipart_stream.BoundMultipartStream._boundaryEndingCode*/get _boundaryEndingCode() {
      return 1;
    },
    /*bound_multipart_stream.BoundMultipartStream._boundaryEndCode*/get _boundaryEndCode() {
      return 2;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerStartCode*/get _headerStartCode() {
      return 3;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerFieldCode*/get _headerFieldCode() {
      return 4;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueStartCode*/get _headerValueStartCode() {
      return 5;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueCode*/get _headerValueCode() {
      return 6;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueFoldingOrEndingCode*/get _headerValueFoldingOrEndingCode() {
      return 7;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerValueFoldOrEndCode*/get _headerValueFoldOrEndCode() {
      return 8;
    },
    /*bound_multipart_stream.BoundMultipartStream._headerEndingCode*/get _headerEndingCode() {
      return 9;
    },
    /*bound_multipart_stream.BoundMultipartStream._contentCode*/get _contentCode() {
      return 10;
    },
    /*bound_multipart_stream.BoundMultipartStream._lastBoundaryDash2Code*/get _lastBoundaryDash2Code() {
      return 11;
    },
    /*bound_multipart_stream.BoundMultipartStream._lastBoundaryEndingCode*/get _lastBoundaryEndingCode() {
      return 12;
    },
    /*bound_multipart_stream.BoundMultipartStream._lastBoundaryEndCode*/get _lastBoundaryEndCode() {
      return 13;
    },
    /*bound_multipart_stream.BoundMultipartStream._doneCode*/get _doneCode() {
      return 14;
    },
    /*bound_multipart_stream.BoundMultipartStream._failCode*/get _failCode() {
      return 15;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStateIdle*/get _controllerStateIdle() {
      return 0;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStateActive*/get _controllerStateActive() {
      return 1;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStatePaused*/get _controllerStatePaused() {
      return 2;
    },
    /*bound_multipart_stream.BoundMultipartStream._controllerStateCanceled*/get _controllerStateCanceled() {
      return 3;
    }
  }, false);
  bound_multipart_stream._isTokenChar = function _isTokenChar(byte) {
    return byte > 31 && byte < 128 && !bound_multipart_stream._separators.contains(byte);
  };
  bound_multipart_stream._toLowerCase = function _toLowerCase(byte) {
    return 65 <= byte && byte <= 90 ? byte + 32 : byte;
  };
  bound_multipart_stream._expectByteValue = function _expectByteValue(val1, val2) {
    if (val1 !== val2) {
      dart.throw(C[426] || CT.C426);
    }
  };
  bound_multipart_stream._expectWhitespace = function _expectWhitespace(byte) {
    if (byte !== 32 && byte !== 9) {
      dart.throw(C[427] || CT.C427);
    }
  };
  dart.defineLazy(bound_multipart_stream, {
    /*bound_multipart_stream._separators*/get _separators() {
      return C[428] || CT.C428;
    },
    /*bound_multipart_stream._placeholderBuffer*/get _placeholderBuffer() {
      return C[412] || CT.C412;
    }
  }, false);
  dart.defineLazy(char_code, {
    /*char_code.ht*/get ht() {
      return 9;
    },
    /*char_code.lf*/get lf() {
      return 10;
    },
    /*char_code.cr*/get cr() {
      return 13;
    },
    /*char_code.sp*/get sp() {
      return 32;
    },
    /*char_code.dash*/get dash() {
      return 45;
    },
    /*char_code.colon*/get colon() {
      return 58;
    },
    /*char_code.upperA*/get upperA() {
      return 65;
    },
    /*char_code.upperZ*/get upperZ() {
      return 90;
    },
    /*char_code.lowerA*/get lowerA() {
      return 97;
    }
  }, false);
  dart.defineLazy(default_extension_map, {
    /*default_extension_map.defaultExtensionMap*/get defaultExtensionMap() {
      return C[429] || CT.C429;
    }
  }, false);
  magic_number.MagicNumber = class MagicNumber extends core.Object {
    get mimeType() {
      return this[S$1.mimeType];
    }
    set mimeType(value) {
      super.mimeType = value;
    }
    get numbers() {
      return this[S$1.numbers];
    }
    set numbers(value) {
      super.numbers = value;
    }
    get mask() {
      return this[S$1.mask];
    }
    set mask(value) {
      super.mask = value;
    }
    static ['_#new#tearOff'](mimeType, numbers, opts$) {
      let mask = opts$ && 'mask' in opts$ ? opts$.mask : null;
      return new magic_number.MagicNumber.new(mimeType, numbers, {mask: mask});
    }
    matches(header) {
      if (header[S$.$length] < this.numbers[S$.$length]) return false;
      for (let i = 0; i < this.numbers[S$.$length]; i = i + 1) {
        if (this.mask != null) {
          if ((dart.nullCheck(this.mask)[S$.$_get](i) & this.numbers[S$.$_get](i)) >>> 0 !== (dart.nullCheck(this.mask)[S$.$_get](i) & header[S$.$_get](i)) >>> 0) return false;
        } else {
          if (this.numbers[S$.$_get](i) !== header[S$.$_get](i)) return false;
        }
      }
      return true;
    }
  };
  (magic_number.MagicNumber.new = function(mimeType, numbers, opts$) {
    let mask = opts$ && 'mask' in opts$ ? opts$.mask : null;
    this[S$1.mimeType] = mimeType;
    this[S$1.numbers] = numbers;
    this[S$1.mask] = mask;
    ;
  }).prototype = magic_number.MagicNumber.prototype;
  dart.addTypeTests(magic_number.MagicNumber);
  dart.addTypeCaches(magic_number.MagicNumber);
  dart.setMethodSignature(magic_number.MagicNumber, () => ({
    __proto__: dart.getMethods(magic_number.MagicNumber.__proto__),
    matches: dart.fnType(core.bool, [core.List$(core.int)])
  }));
  dart.setLibraryUri(magic_number.MagicNumber, I[280]);
  dart.setFieldSignature(magic_number.MagicNumber, () => ({
    __proto__: dart.getFields(magic_number.MagicNumber.__proto__),
    mimeType: dart.finalFieldType(core.String),
    numbers: dart.finalFieldType(core.List$(core.int)),
    mask: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  dart.defineLazy(magic_number, {
    /*magic_number.initialMagicNumbersMaxLength*/get initialMagicNumbersMaxLength() {
      return 12;
    },
    /*magic_number.initialMagicNumbers*/get initialMagicNumbers() {
      return C[430] || CT.C430;
    }
  }, false);
  subscription['StreamSubscriptionsIterableExtensions|pauseAll'] = function StreamSubscriptionsIterableExtensions$124pauseAll($this, resumeSignal = null) {
    for (let s of $this) {
      s.pause(resumeSignal);
    }
  };
  subscription['StreamSubscriptionsIterableExtensions|get#pauseAll'] = function StreamSubscriptionsIterableExtensions$124get$35pauseAll($this) {
    return dart.fn((resumeSignal = null) => subscription['StreamSubscriptionsIterableExtensions|pauseAll']($this, resumeSignal), T$0.FutureNOfvoidTovoid());
  };
  subscription['StreamSubscriptionsIterableExtensions|resumeAll'] = function StreamSubscriptionsIterableExtensions$124resumeAll($this) {
    for (let s of $this) {
      s.resume();
    }
  };
  subscription['StreamSubscriptionsIterableExtensions|get#resumeAll'] = function StreamSubscriptionsIterableExtensions$124get$35resumeAll($this) {
    return dart.fn(() => subscription['StreamSubscriptionsIterableExtensions|resumeAll']($this), T$.VoidTovoid());
  };
  subscription['StreamSubscriptionsIterableExtension|cancelAll'] = function StreamSubscriptionsIterableExtension$124cancelAll($this) {
    return future$.waitFuturesList((() => {
      let t517 = T$.JSArrayOfFutureOfvoid().of([]);
      for (let s of $this)
        t517.push(s.cancel());
      return t517;
    })());
  };
  subscription['StreamSubscriptionsIterableExtension|get#cancelAll'] = function StreamSubscriptionsIterableExtension$124get$35cancelAll($this) {
    return dart.fn(() => subscription['StreamSubscriptionsIterableExtension|cancelAll']($this), T$.VoidToFutureNOfvoid());
  };
  future$.waitTwoFutures = function waitTwoFutures(f1, f2) {
    return f1 == null ? f2 : T$.FutureOfvoid().is(f2) ? async.Future.wait(dart.void, T$.JSArrayOfFutureOfvoid().of([f1, f2])).then(dart.void, C[475] || CT.C475) : f1;
  };
  future$.waitFuturesList = function waitFuturesList(futures) {
    switch (futures[S$.$length]) {
      case 0:
        {
          return null;
        }
      case 1:
        {
          return futures[S$.$_get](0);
        }
      default:
        {
          return async.Future.wait(dart.void, futures).then(dart.void, C[475] || CT.C475);
        }
    }
  };
  future$._ignore = function _ignore(_) {
  };
  backpressure.WindowStrategy = class WindowStrategy extends core._Enum {
    [S$._enumToString]() {
      return "WindowStrategy." + this[S$._name];
    }
  };
  (backpressure.WindowStrategy.new = function(index, name) {
    backpressure.WindowStrategy.__proto__.new.call(this, index, name);
    ;
  }).prototype = backpressure.WindowStrategy.prototype;
  dart.addTypeTests(backpressure.WindowStrategy);
  dart.addTypeCaches(backpressure.WindowStrategy);
  dart.setMethodSignature(backpressure.WindowStrategy, () => ({
    __proto__: dart.getMethods(backpressure.WindowStrategy.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(backpressure.WindowStrategy, I[224]);
  dart.setStaticFieldSignature(backpressure.WindowStrategy, () => ['values', 'everyEvent', 'eventAfterLastWindow', 'firstEventOnly', 'onHandler']);
  dart.defineLazy(backpressure.WindowStrategy, {
    /*backpressure.WindowStrategy.values*/get values() {
      return C[476] || CT.C476;
    },
    /*backpressure.WindowStrategy.everyEvent*/get everyEvent() {
      return C[477] || CT.C477;
    },
    /*backpressure.WindowStrategy.eventAfterLastWindow*/get eventAfterLastWindow() {
      return C[478] || CT.C478;
    },
    /*backpressure.WindowStrategy.firstEventOnly*/get firstEventOnly() {
      return C[479] || CT.C479;
    },
    /*backpressure.WindowStrategy.onHandler*/get onHandler() {
      return C[480] || CT.C480;
    }
  }, false);
  const _is__BackpressureStreamSink_default = Symbol('_is__BackpressureStreamSink_default');
  backpressure._BackpressureStreamSink$ = dart.generic((S, T) => {
    var __t$DoubleLinkedQueueOfS = () => (__t$DoubleLinkedQueueOfS = dart.constFn(collection.DoubleLinkedQueue$(S)))();
    var __t$ListOfS = () => (__t$ListOfS = dart.constFn(core.List$(S)))();
    var __t$EventSinkOfT = () => (__t$EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _BackpressureStreamSink extends forwarding_sink.ForwardingSink$(S, T) {
      static ['_#new#tearOff'](S, T, _strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue) {
        return new (backpressure._BackpressureStreamSink$(S, T)).new(_strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue);
      }
      onData(data) {
        S.as(data);
        this[S$1._hasData] = true;
        this.maybeCreateWindow(data, this.sink);
        if (this.skip === 0) {
          this.queue.add(data);
          if (this.maxLengthQueue != null && this.queue[S$.$length] > dart.nullCheck(this.maxLengthQueue)) {
            collection_extensions['RemoveFirstElementsQueueExtension|removeFirstElements'](S, this.queue, this.queue[S$.$length] - dart.nullCheck(this.maxLengthQueue));
          }
        }
        if (this.skip > 0) {
          this.skip = this.skip - 1;
        }
        this.maybeCloseWindow(this.sink);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let t521;
        this[S$1._mainClosed] = true;
        if (this[S$1._strategy] === backpressure.WindowStrategy.eventAfterLastWindow) {
          return;
        }
        if (this[S$1._dispatchOnClose] && this.queue[S$.$isNotEmpty]) {
          this.resolveWindowStart(this.queue[S$.$last], this.sink);
        }
        this.resolveWindowEnd(this.sink, true);
        this.queue.clear();
        t521 = this[S$1._windowSubscription];
        t521 == null ? null : t521.cancel();
        this.sink.close();
      }
      onCancel() {
        let t521;
        t521 = this[S$1._windowSubscription];
        return t521 == null ? null : t521.cancel();
      }
      onListen() {
      }
      onPause() {
        let t521;
        t521 = this[S$1._windowSubscription];
        return t521 == null ? null : t521.pause();
      }
      onResume() {
        let t521;
        t521 = this[S$1._windowSubscription];
        return t521 == null ? null : t521.resume();
      }
      maybeCreateWindow(event, sink) {
        let t521;
        S.as(event);
        __t$EventSinkOfT().as(sink);
        switch (this[S$1._strategy]) {
          case C[478] || CT.C478:
            {
              if (this[S$1._windowSubscription] != null) return;
              this[S$1._windowSubscription] = this.singleWindow(event, sink);
              this.resolveWindowStart(event, sink);
              break;
            }
          case C[479] || CT.C479:
            {
              if (this[S$1._windowSubscription] != null) return;
              this[S$1._windowSubscription] = this.multiWindow(event, sink);
              this.resolveWindowStart(event, sink);
              break;
            }
          case C[477] || CT.C477:
            {
              t521 = this[S$1._windowSubscription];
              t521 == null ? null : t521.cancel();
              this[S$1._windowSubscription] = this.singleWindow(event, sink);
              this.resolveWindowStart(event, sink);
              break;
            }
          case C[480] || CT.C480:
            {
              break;
            }
        }
      }
      maybeCloseWindow(sink) {
        __t$EventSinkOfT().as(sink);
        if (this[S$1._closeWindowWhen] != null && dart.nullCheck(this[S$1._closeWindowWhen])(this.unmodifiableQueue)) {
          this.resolveWindowEnd(sink);
        }
      }
      singleWindow(event, sink) {
        S.as(event);
        __t$EventSinkOfT().as(sink);
        return this.buildStream(event, sink).take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink, this[S$1._mainClosed]), T$.VoidTovoid())});
      }
      multiWindow(event, sink) {
        S.as(event);
        __t$EventSinkOfT().as(sink);
        return this.buildStream(event, sink).listen(dart.fn(_ => this.resolveWindowEnd(sink), T$.dynamicTovoid()), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink), T$.VoidTovoid())});
      }
      buildStream(event, sink) {
        let t521;
        S.as(event);
        __t$EventSinkOfT().as(sink);
        let stream = null;
        t521 = this[S$1._windowSubscription];
        t521 == null ? null : t521.cancel();
        stream = dart.nullCheck(this[S$1._windowStreamFactory])(event);
        return stream;
      }
      resolveWindowStart(event, sink) {
        S.as(event);
        __t$EventSinkOfT().as(sink);
        if (this[S$1._onWindowStart] != null) {
          sink.add(dart.nullCheck(this[S$1._onWindowStart])(event));
        }
      }
      resolveWindowEnd(sink, isControllerClosing = false) {
        let t521, t521$;
        __t$EventSinkOfT().as(sink);
        if (isControllerClosing && this[S$1._strategy] === backpressure.WindowStrategy.eventAfterLastWindow) {
          if (this[S$1._dispatchOnClose] && this[S$1._hasData] && this.queue[S$.$length] > 1 && this[S$1._onWindowEnd] != null) {
            sink.add(dart.nullCheck(this[S$1._onWindowEnd])(this.unmodifiableQueue));
          }
          this.queue.clear();
          t521 = this[S$1._windowSubscription];
          t521 == null ? null : t521.cancel();
          this[S$1._windowSubscription] = null;
          sink.close();
          return;
        }
        if (isControllerClosing || this[S$1._strategy] === backpressure.WindowStrategy.eventAfterLastWindow || this[S$1._strategy] === backpressure.WindowStrategy.everyEvent) {
          t521$ = this[S$1._windowSubscription];
          t521$ == null ? null : t521$.cancel();
          this[S$1._windowSubscription] = null;
        }
        if (isControllerClosing && !this[S$1._dispatchOnClose]) {
          return;
        }
        if (this[S$1._hasData] && (this.queue[S$.$isNotEmpty] || !this[S$1._ignoreEmptyWindows])) {
          if (this[S$1._onWindowEnd] != null) {
            sink.add(dart.nullCheck(this[S$1._onWindowEnd])(this.unmodifiableQueue));
          }
          if (!isControllerClosing && this[S$1._startBufferEvery] > 0) {
            this.skip = this[S$1._startBufferEvery] > this.queue[S$.$length] ? this[S$1._startBufferEvery] - this.queue[S$.$length] : 0;
            if (this[S$1._startBufferEvery] < this.queue[S$.$length]) {
              collection_extensions['RemoveFirstElementsQueueExtension|removeFirstElements'](S, this.queue, this[S$1._startBufferEvery]);
            } else {
              this.queue.clear();
            }
          } else {
            this.queue.clear();
          }
        }
      }
      get unmodifiableQueue() {
        return __t$ListOfS().unmodifiable(this.queue);
      }
    }
    (_BackpressureStreamSink.new = function(_strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue) {
      this.queue = new (__t$DoubleLinkedQueueOfS()).new();
      this.skip = 0;
      this[S$1._hasData] = false;
      this[S$1._mainClosed] = false;
      this[S$1._windowSubscription] = null;
      this[S$1._strategy] = _strategy;
      this[S$1._windowStreamFactory] = _windowStreamFactory;
      this[S$1._onWindowStart] = _onWindowStart;
      this[S$1._onWindowEnd] = _onWindowEnd;
      this[S$1._startBufferEvery] = _startBufferEvery;
      this[S$1._closeWindowWhen] = _closeWindowWhen;
      this[S$1._ignoreEmptyWindows] = _ignoreEmptyWindows;
      this[S$1._dispatchOnClose] = _dispatchOnClose;
      this.maxLengthQueue = maxLengthQueue;
      _BackpressureStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _BackpressureStreamSink.prototype;
    dart.addTypeTests(_BackpressureStreamSink);
    _BackpressureStreamSink.prototype[_is__BackpressureStreamSink_default] = true;
    dart.addTypeCaches(_BackpressureStreamSink);
    dart.setMethodSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getMethods(_BackpressureStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, []),
      maybeCreateWindow: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      maybeCloseWindow: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      singleWindow: dart.fnType(async.StreamSubscription, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      multiWindow: dart.fnType(async.StreamSubscription, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      buildStream: dart.fnType(async.Stream, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      resolveWindowStart: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      resolveWindowEnd: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.bool])
    }));
    dart.setGetterSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getGetters(_BackpressureStreamSink.__proto__),
      unmodifiableQueue: core.List$(S)
    }));
    dart.setLibraryUri(_BackpressureStreamSink, I[224]);
    dart.setFieldSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getFields(_BackpressureStreamSink.__proto__),
      [S$1._strategy]: dart.finalFieldType(backpressure.WindowStrategy),
      [S$1._windowStreamFactory]: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [S]))),
      [S$1._onWindowStart]: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      [S$1._onWindowEnd]: dart.finalFieldType(dart.nullable(dart.fnType(T, [core.List$(S)]))),
      [S$1._startBufferEvery]: dart.finalFieldType(core.int),
      [S$1._closeWindowWhen]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.List$(S)]))),
      [S$1._ignoreEmptyWindows]: dart.finalFieldType(core.bool),
      [S$1._dispatchOnClose]: dart.finalFieldType(core.bool),
      queue: dart.finalFieldType(collection.Queue$(S)),
      maxLengthQueue: dart.finalFieldType(dart.nullable(core.int)),
      skip: dart.fieldType(core.int),
      [S$1._hasData]: dart.fieldType(core.bool),
      [S$1._mainClosed]: dart.fieldType(core.bool),
      [S$1._windowSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription))
    }));
    return _BackpressureStreamSink;
  });
  backpressure._BackpressureStreamSink = backpressure._BackpressureStreamSink$();
  dart.addTypeTests(backpressure._BackpressureStreamSink, _is__BackpressureStreamSink_default);
  min_max.minMax = function minMax(T, stream, findMin, comparator) {
    let completer = async.Completer$(T).new();
    let seenFirst = false;
    let subscription = null;
    function subscription$35get() {
      let t522;
      t522 = subscription;
      return t522 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t522;
    }
    function subscription$35set(subscription$35param) {
      return subscription = subscription$35param;
    }
    let accumulator = null;
    let accumulator$35isSet = false;
    function accumulator$35get() {
      return accumulator$35isSet ? accumulator : dart.throw(new _internal.LateError.localNI("accumulator"));
    }
    function accumulator$35set(accumulator$35param) {
      accumulator$35isSet = true;
      return accumulator = accumulator$35param;
    }
    let comparatorNotNull = null;
    function comparatorNotNull$35get() {
      let t529;
      t529 = comparatorNotNull;
      return t529 == null ? dart.throw(new _internal.LateError.localNI("comparatorNotNull")) : t529;
    }
    function comparatorNotNull$35set(comparatorNotNull$35param) {
      return comparatorNotNull = comparatorNotNull$35param;
    }
    function cancelAndCompleteError(e, st) {
      return async.async(dart.void, function* cancelAndCompleteError() {
        yield subscription$35get().cancel();
        completer.completeError(e, st);
      });
    }
    dart.fn(cancelAndCompleteError, T$0.ObjectAndStackTraceToFutureOfvoid());
    function onData(element) {
      return async.async(dart.void, function* onData() {
        let t532;
        if (seenFirst) {
          try {
            accumulator$35set(findMin ? comparatorNotNull$35get()(element, accumulator$35get()) < 0 ? element : accumulator$35get() : comparatorNotNull$35get()(element, accumulator$35get()) > 0 ? element : accumulator$35get());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let st = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              yield cancelAndCompleteError(e, st);
            } else
              throw e$;
          }
          return;
        }
        accumulator$35set(element);
        seenFirst = true;
        try {
          comparatorNotNull$35set((t532 = comparator, t532 == null ? dart.fn(() => {
            if (core.Comparable.is(element)) {
              return dart.fnType(core.int, [T, T]).as(C[481] || CT.C481);
            } else {
              dart.throw(new core.StateError.new("Please provide a comparator for type " + dart.str(dart.wrapType(T)) + ", because it is not comparable"));
            }
          }, dart.fnType(dart.fnType(core.int, [T, T]), []))() : t532));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let st = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            yield cancelAndCompleteError(e, st);
          } else
            throw e$0;
        }
      });
    }
    dart.fn(onData, dart.fnType(dart.void, [T]));
    function onDone() {
      if (seenFirst) {
        completer.complete(accumulator$35get());
      } else {
        completer.completeError(new core.StateError.new("No element"));
      }
    }
    dart.fn(onDone, T$.VoidTovoid());
    subscription$35set(stream.listen(onData, {onError: dart.bind(completer, 'completeError'), onDone: onDone, cancelOnError: true}));
    return completer.future;
  };
  binary_reader_impl.BinaryReaderImpl = class BinaryReaderImpl extends hive.BinaryReader {
    static ['_#new#tearOff'](_buffer, typeRegistry, bufferLength = null) {
      return new binary_reader_impl.BinaryReaderImpl.new(_buffer, typeRegistry, bufferLength);
    }
    get availableBytes() {
      return this[S$1._bufferLimit] - this[S$1._offset];
    }
    get usedBytes() {
      return this[S$1._offset];
    }
    [S$1._limitAvailableBytes](bytes) {
      this[S$1._requireBytes](bytes);
      this[S$1._bufferLimit] = this[S$1._offset] + bytes;
    }
    [S$1._resetLimit]() {
      this[S$1._bufferLimit] = this[S$1._bufferLength];
    }
    [S$1._requireBytes](bytes) {
      if (this[S$1._offset] + bytes > this[S$1._bufferLimit]) {
        dart.throw(new core.RangeError.new("Not enough bytes available."));
      }
    }
    skip(bytes) {
      this[S$1._requireBytes](bytes);
      this[S$1._offset] = this[S$1._offset] + bytes;
    }
    readByte() {
      let t533;
      this[S$1._requireBytes](1);
      return this[S$1._buffer$1][S$.$_get]((t533 = this[S$1._offset], this[S$1._offset] = t533 + 1, t533));
    }
    viewBytes(bytes) {
      this[S$1._requireBytes](bytes);
      this[S$1._offset] = this[S$1._offset] + bytes;
      return extensions['Uint8ListX|view'](this[S$1._buffer$1], this[S$1._offset] - bytes, bytes);
    }
    peekBytes(bytes) {
      this[S$1._requireBytes](bytes);
      return extensions['Uint8ListX|view'](this[S$1._buffer$1], this[S$1._offset], bytes);
    }
    readWord() {
      let t533, t533$;
      this[S$1._requireBytes](2);
      return (this[S$1._buffer$1][S$.$_get]((t533 = this[S$1._offset], this[S$1._offset] = t533 + 1, t533)) | this[S$1._buffer$1][S$.$_get]((t533$ = this[S$1._offset], this[S$1._offset] = t533$ + 1, t533$)) << 8 >>> 0) >>> 0;
    }
    readInt32() {
      this[S$1._requireBytes](4);
      this[S$1._offset] = this[S$1._offset] + 4;
      return this[S$1._byteData][S$1.$getInt32](this[S$1._offset] - 4, typed_data.Endian.little);
    }
    readUint32() {
      this[S$1._requireBytes](4);
      this[S$1._offset] = this[S$1._offset] + 4;
      return extensions['ListIntX|readUint32'](this[S$1._buffer$1], this[S$1._offset] - 4);
    }
    peekUint32() {
      this[S$1._requireBytes](4);
      return extensions['ListIntX|readUint32'](this[S$1._buffer$1], this[S$1._offset]);
    }
    readInt() {
      return this.readDouble()[S$1.$toInt]();
    }
    readDouble() {
      this[S$1._requireBytes](8);
      let value = this[S$1._byteData][S$1.$getFloat64](this[S$1._offset], typed_data.Endian.little);
      this[S$1._offset] = this[S$1._offset] + 8;
      return value;
    }
    readBool() {
      return this.readByte() > 0;
    }
    readString(byteCount = null, decoder = C[279] || CT.C279) {
      byteCount == null ? byteCount = this.readUint32() : null;
      let view = this.viewBytes(byteCount);
      return decoder.convert(view);
    }
    readByteList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[S$1._requireBytes](length);
      let byteList = this[S$1._buffer$1][S$0.$sublist](this[S$1._offset], this[S$1._offset] + dart.notNull(length));
      this[S$1._offset] = this[S$1._offset] + dart.notNull(length);
      return byteList;
    }
    readIntList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[S$1._requireBytes](dart.notNull(length) * 8);
      let byteData = this[S$1._byteData];
      let list = T$.ListOfint().filled(length, 0, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, byteData[S$1.$getFloat64](this[S$1._offset], typed_data.Endian.little)[S$1.$toInt]());
        this[S$1._offset] = this[S$1._offset] + 8;
      }
      return list;
    }
    readDoubleList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[S$1._requireBytes](dart.notNull(length) * 8);
      let byteData = this[S$1._byteData];
      let list = T$0.ListOfdouble().filled(length, 0, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, byteData[S$1.$getFloat64](this[S$1._offset], typed_data.Endian.little));
        this[S$1._offset] = this[S$1._offset] + 8;
      }
      return list;
    }
    readBoolList(length = null) {
      let t533;
      length == null ? length = this.readUint32() : null;
      this[S$1._requireBytes](length);
      let list = T$0.ListOfbool().filled(length, false, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, this[S$1._buffer$1][S$.$_get]((t533 = this[S$1._offset], this[S$1._offset] = t533 + 1, t533)) > 0);
      }
      return list;
    }
    readStringList(length = null, decoder = C[279] || CT.C279) {
      length == null ? length = this.readUint32() : null;
      let list = T$.ListOfString().filled(length, "", {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, this.readString(null, decoder));
      }
      return list;
    }
    readList(length = null) {
      length == null ? length = this.readUint32() : null;
      let list = core.List.filled(length, null, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, this.read());
      }
      return list;
    }
    readMap(length = null) {
      length == null ? length = this.readUint32() : null;
      let map = new _js_helper.LinkedMap.new();
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        map[S$.$_set](this.read(), this.read());
      }
      return map;
    }
    readKey() {
      let keyType = this.readByte();
      if (keyType === 0) {
        return this.readUint32();
      } else if (keyType === 1) {
        let byteCount = this.readByte();
        return hive.BinaryReader.utf8Decoder.convert(this.viewBytes(byteCount));
      } else {
        dart.throw(new hive.HiveError.new("Unsupported key type. Frame might be corrupted."));
      }
    }
    readHiveList(length = null) {
      length == null ? length = this.readUint32() : null;
      let boxNameLength = this.readByte();
      let boxName = core.String.fromCharCodes(this.viewBytes(boxNameLength));
      let keys = core.List.filled(length, null, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        keys[S$.$_set](i, this.readKey());
      }
      return new (T$.HiveListImplOfHiveObjectMixin()).lazy(boxName, keys);
    }
    readFrame(opts$) {
      let t533, t533$, t533$0;
      let cipher = opts$ && 'cipher' in opts$ ? opts$.cipher : null;
      let lazy = opts$ && 'lazy' in opts$ ? opts$.lazy : false;
      let frameOffset = opts$ && 'frameOffset' in opts$ ? opts$.frameOffset : 0;
      if (this.availableBytes < 4) return null;
      let frameLength = this.readUint32();
      if (frameLength < 8) return null;
      if (this.availableBytes < frameLength - 4) return null;
      let crc = extensions['ListIntX|readUint32'](this[S$1._buffer$1], this[S$1._offset] + frameLength - 8);
      let computedCrc = crc32.Crc32.compute(this[S$1._buffer$1], {offset: this[S$1._offset] - 4, length: frameLength - 4, crc: (t533$ = (t533 = cipher, t533 == null ? null : t533.calculateKeyCrc()), t533$ == null ? 0 : t533$)});
      if (computedCrc !== crc) return null;
      this[S$1._limitAvailableBytes](frameLength - 8);
      let frame = null;
      let key = this.readKey();
      if (this.availableBytes === 0) {
        frame = new frame$.Frame.deleted(key);
      } else if (lazy) {
        frame = new frame$.Frame.lazy(key);
      } else if (cipher == null) {
        frame = new frame$.Frame.new(key, this.read());
      } else {
        frame = new frame$.Frame.new(key, this.readEncrypted(cipher));
      }
      t533$0 = frame;
      (() => {
        t533$0.length = frameLength;
        t533$0.offset = frameOffset;
        return t533$0;
      })();
      this.skip(this.availableBytes);
      this[S$1._resetLimit]();
      this.skip(4);
      return frame;
    }
    read(typeId = null) {
      typeId == null ? typeId = this.readByte() : null;
      switch (typeId) {
        case 0:
          {
            return null;
          }
        case 1:
          {
            return this.readInt();
          }
        case 2:
          {
            return this.readDouble();
          }
        case 3:
          {
            return this.readBool();
          }
        case 4:
          {
            return this.readString();
          }
        case 5:
          {
            return this.readByteList();
          }
        case 6:
          {
            return this.readIntList();
          }
        case 7:
          {
            return this.readDoubleList();
          }
        case 8:
          {
            return this.readBoolList();
          }
        case 9:
          {
            return this.readStringList();
          }
        case 10:
          {
            return this.readList();
          }
        case 11:
          {
            return this.readMap();
          }
        case 12:
          {
            return this.readHiveList();
          }
        default:
          {
            let resolved = this[S$1._typeRegistry].findAdapterForTypeId(typeId);
            if (resolved == null) {
              dart.throw(new hive.HiveError.new("Cannot read, unknown typeId: " + dart.str(typeId) + ". " + "Did you forget to register an adapter?"));
            }
            return resolved.adapter.read(this);
          }
      }
    }
    readEncrypted(cipher) {
      let inpLength = this.availableBytes;
      let out = _native_typed_data.NativeUint8List.new(inpLength);
      let outLength = cipher.decrypt(this[S$1._buffer$1], this[S$1._offset], inpLength, out, 0);
      this[S$1._offset] = this[S$1._offset] + inpLength;
      let valueReader = new binary_reader_impl.BinaryReaderImpl.new(out, this[S$1._typeRegistry], outLength);
      return valueReader.read();
    }
  };
  (binary_reader_impl.BinaryReaderImpl.new = function(_buffer, typeRegistry, bufferLength = null) {
    let t533, t533$;
    this[S$1._offset] = 0;
    this[S$1._buffer$1] = _buffer;
    this[S$1._byteData] = typed_data.ByteData.view(_buffer[S$0.$buffer], _buffer[S$0.$offsetInBytes]);
    this[S$1._bufferLength] = (t533 = bufferLength, t533 == null ? _buffer[S$.$length] : t533);
    this[S$1._bufferLimit] = (t533$ = bufferLength, t533$ == null ? _buffer[S$.$length] : t533$);
    this[S$1._typeRegistry] = type_registry_impl.TypeRegistryImpl.as(typeRegistry);
    ;
  }).prototype = binary_reader_impl.BinaryReaderImpl.prototype;
  dart.addTypeTests(binary_reader_impl.BinaryReaderImpl);
  dart.addTypeCaches(binary_reader_impl.BinaryReaderImpl);
  dart.setMethodSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getMethods(binary_reader_impl.BinaryReaderImpl.__proto__),
    [S$1._limitAvailableBytes]: dart.fnType(dart.void, [core.int]),
    [S$1._resetLimit]: dart.fnType(dart.void, []),
    [S$1._requireBytes]: dart.fnType(dart.void, [core.int]),
    skip: dart.fnType(dart.void, [core.int]),
    readByte: dart.fnType(core.int, []),
    viewBytes: dart.fnType(typed_data.Uint8List, [core.int]),
    peekBytes: dart.fnType(typed_data.Uint8List, [core.int]),
    readWord: dart.fnType(core.int, []),
    readInt32: dart.fnType(core.int, []),
    readUint32: dart.fnType(core.int, []),
    peekUint32: dart.fnType(core.int, []),
    readInt: dart.fnType(core.int, []),
    readDouble: dart.fnType(core.double, []),
    readBool: dart.fnType(core.bool, []),
    readString: dart.fnType(core.String, [], [dart.nullable(core.int), convert.Converter$(core.List$(core.int), core.String)]),
    readByteList: dart.fnType(typed_data.Uint8List, [], [dart.nullable(core.int)]),
    readIntList: dart.fnType(core.List$(core.int), [], [dart.nullable(core.int)]),
    readDoubleList: dart.fnType(core.List$(core.double), [], [dart.nullable(core.int)]),
    readBoolList: dart.fnType(core.List$(core.bool), [], [dart.nullable(core.int)]),
    readStringList: dart.fnType(core.List$(core.String), [], [dart.nullable(core.int), convert.Converter$(core.List$(core.int), core.String)]),
    readList: dart.fnType(core.List, [], [dart.nullable(core.int)]),
    readMap: dart.fnType(core.Map, [], [dart.nullable(core.int)]),
    readKey: dart.fnType(dart.dynamic, []),
    readHiveList: dart.fnType(hive.HiveList$(hive_object.HiveObjectMixin), [], [dart.nullable(core.int)]),
    readFrame: dart.fnType(dart.nullable(frame$.Frame), [], {cipher: dart.nullable(hive.HiveCipher), frameOffset: core.int, lazy: core.bool}, {}),
    read: dart.fnType(dart.dynamic, [], [dart.nullable(core.int)]),
    readEncrypted: dart.fnType(dart.dynamic, [hive.HiveCipher])
  }));
  dart.setGetterSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getGetters(binary_reader_impl.BinaryReaderImpl.__proto__),
    availableBytes: core.int,
    usedBytes: core.int
  }));
  dart.setLibraryUri(binary_reader_impl.BinaryReaderImpl, I[281]);
  dart.setFieldSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getFields(binary_reader_impl.BinaryReaderImpl.__proto__),
    [S$1._buffer$1]: dart.finalFieldType(typed_data.Uint8List),
    [S$1._byteData]: dart.finalFieldType(typed_data.ByteData),
    [S$1._bufferLength]: dart.finalFieldType(core.int),
    [S$1._typeRegistry]: dart.finalFieldType(type_registry_impl.TypeRegistryImpl),
    [S$1._bufferLimit]: dart.fieldType(core.int),
    [S$1._offset]: dart.fieldType(core.int)
  }));
  const _is_IndexableSkipList_default = Symbol('_is_IndexableSkipList_default');
  indexable_skip_list.IndexableSkipList$ = dart.generic((K, V) => {
    var __t$_NodeOfK$V = () => (__t$_NodeOfK$V = dart.constFn(indexable_skip_list._Node$(K, V)))();
    var __t$_NodeNOfK$V = () => (__t$_NodeNOfK$V = dart.constFn(dart.nullable(__t$_NodeOfK$V())))();
    var __t$ListOf_NodeNOfK$V = () => (__t$ListOf_NodeNOfK$V = dart.constFn(core.List$(__t$_NodeNOfK$V())))();
    var __t$_KeyIterableOfK$V = () => (__t$_KeyIterableOfK$V = dart.constFn(indexable_skip_list._KeyIterable$(K, V)))();
    var __t$_ValueIterableOfK$V = () => (__t$_ValueIterableOfK$V = dart.constFn(indexable_skip_list._ValueIterable$(K, V)))();
    var __t$KN = () => (__t$KN = dart.constFn(dart.nullable(K)))();
    var __t$_NodeOfKN$VN = () => (__t$_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(__t$KN(), __t$VN())))();
    var __t$JSArrayOf_NodeNOfK$V = () => (__t$JSArrayOf_NodeNOfK$V = dart.constFn(_interceptors.JSArray$(__t$_NodeNOfK$V())))();
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class IndexableSkipList extends core.Object {
      static ['_#new#tearOff'](K, V, _comparator, random = null) {
        return new (indexable_skip_list.IndexableSkipList$(K, V)).new(_comparator, random);
      }
      get length() {
        return this[S$1._length];
      }
      get keys() {
        return new (__t$_KeyIterableOfK$V()).new(this[S$1._head$3]);
      }
      get values() {
        return new (__t$_ValueIterableOfK$V()).new(this[S$1._head$3]);
      }
      insert(key, value) {
        let t533, t534, t533$, t534$, t533$0, t534$0, t533$1, t534$1, t533$2, t534$2, t533$3, t534$3, t533$4;
        K.as(key);
        __t$VN().as(value);
        let existingNode = this[S$1._getNode](key);
        if (existingNode != null) {
          let oldValue = existingNode.value;
          existingNode.value = value;
          return oldValue;
        }
        let newLevel = 0;
        while (this[S$1._random].nextBool() && dart.notNull(newLevel) < 12 - 1) {
          newLevel = dart.notNull(newLevel) + 1;
        }
        if (dart.notNull(newLevel) >= this[S$1._height]) {
          newLevel = (t533 = this[S$1._height], this[S$1._height] = t533 + 1, t533);
        }
        let newNode = new (__t$_NodeOfK$V()).new(key, value, __t$ListOf_NodeNOfK$V().filled(dart.notNull(newLevel) + 1, null), T$.ListOfint().filled(dart.notNull(newLevel) + 1, 0));
        let current = this[S$1._head$3];
        for (let level = this[S$1._height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[S$.$_get](level);
            if (next == null || (t533$ = key, t534 = dart.nullCheck(next.key), this[S$1._comparator](t533$, t534)) < 0) break;
            current = next;
          }
          if (level > dart.notNull(newLevel)) {
            let next = current.next[S$.$_get](level);
            if (next != null) {
              t533$0 = next.width;
              t534$ = level;
              t533$0[S$.$_set](t534$, t533$0[S$.$_get](t534$) + 1);
            }
            continue;
          }
          if (level === 0) {
            newNode.width[S$.$_set](0, 1);
          } else {
            let width = 0;
            let node = current.next[S$.$_get](level - 1);
            while (node != null && (t533$1 = key, t534$0 = dart.nullCheck(node.key), this[S$1._comparator](t533$1, t534$0)) >= 0) {
              width = width + node.width[S$.$_get](level - 1);
              node = node.next[S$.$_get](level - 1);
            }
            for (let j = level; j <= dart.notNull(newLevel); j = j + 1) {
              t533$2 = newNode.width;
              t534$1 = j;
              t533$2[S$.$_set](t534$1, t533$2[S$.$_get](t534$1) + width);
            }
            t533$3 = newNode.width;
            t534$2 = level;
            t533$3[S$.$_set](t534$2, t533$3[S$.$_get](t534$2) + 1);
          }
          newNode.next[S$.$_set](level, current.next[S$.$_get](level));
          current.next[S$.$_set](level, newNode);
        }
        for (let i = 1; i <= dart.notNull(newLevel); i = i + 1) {
          let next = newNode.next[S$.$_get](i);
          if (next != null) {
            t533$4 = next.width;
            t534$3 = i;
            t533$4[S$.$_set](t534$3, t533$4[S$.$_get](t534$3) - (newNode.width[S$.$_get](i) - 1));
          }
        }
        this[S$1._length] = this[S$1._length] + 1;
        return null;
      }
      delete(key) {
        let t534, t533, t534$, t533$, t534$0, t533$0;
        K.as(key);
        let node = this[S$1._getNode](key);
        if (node == null) return null;
        let current = this[S$1._head$3];
        for (let level = this[S$1._height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[S$.$_get](level);
            if (next == null || (t533 = key, t534 = dart.nullCheck(next.key), this[S$1._comparator](t533, t534)) <= 0) break;
            current = next;
          }
          if (level > node.level) {
            let next = current.next[S$.$_get](level);
            if (next != null) {
              t533$ = next.width;
              t534$ = level;
              t533$[S$.$_set](t534$, t533$[S$.$_get](t534$) - 1);
            }
          } else {
            let next = node.next[S$.$_get](level);
            current.next[S$.$_set](level, next);
            if (next != null) {
              t533$0 = next.width;
              t534$0 = level;
              t533$0[S$.$_set](t534$0, t533$0[S$.$_get](t534$0) + (node.width[S$.$_get](level) - 1));
            }
          }
        }
        if (node.level === this[S$1._height] - 1 && this[S$1._height] > 1 && this[S$1._head$3].next[S$.$_get](node.level) == null) {
          this[S$1._height] = this[S$1._height] - 1;
        }
        this[S$1._length] = this[S$1._length] - 1;
        return node.value;
      }
      get(key) {
        let t533;
        K.as(key);
        t533 = this[S$1._getNode](key);
        return t533 == null ? null : t533.value;
      }
      valuesFromKey(key) {
        K.as(key);
        let node = this[S$1._getNode](key);
        let virtualHead = new (__t$_NodeOfKN$VN()).new(null, null, __t$JSArrayOf_NodeNOfK$V().of([node]), T$.JSArrayOfint().of([0]));
        return new (__t$_ValueIterableOfK$V()).new(virtualHead);
      }
      [S$1._getNode](key) {
        let t534, t533, t534$, t533$;
        let prev = this[S$1._head$3];
        let node = null;
        for (let i = this[S$1._height] - 1; i >= 0; i = i - 1) {
          node = prev.next[S$.$_get](i);
          while (node != null && (t533 = key, t534 = dart.nullCheck(node.key), this[S$1._comparator](t533, t534)) > 0) {
            prev = node;
            node = node.next[S$.$_get](i);
          }
        }
        if (node != null && (t533$ = key, t534$ = dart.nullCheck(node.key), this[S$1._comparator](t533$, t534$)) === 0) {
          return node;
        }
        return null;
      }
      getAt(index) {
        return this[S$1._getNodeAt](index).value;
      }
      getKeyAt(index) {
        return this[S$1._getNodeAt](index).key;
      }
      [S$1._getNodeAt](index) {
        core.RangeError.checkValidIndex(index, this);
        let prev = this[S$1._head$3];
        let node = null;
        for (let level = this[S$1._height] - 1; level >= 0; level = level - 1) {
          node = prev.next[S$.$_get](level);
          while (node != null && index >= node.width[S$.$_get](level)) {
            index = index - node.width[S$.$_get](level);
            prev = node;
            node = node.next[S$.$_get](level);
          }
        }
        return dart.nullCheck(node);
      }
      clear() {
        this[S$1._height] = 1;
        for (let i = 0; i < 12; i = i + 1) {
          this[S$1._head$3].next[S$.$_set](i, null);
        }
        this[S$1._height] = 1;
        this[S$1._length] = 0;
      }
    }
    (IndexableSkipList.new = function(_comparator, random = null) {
      let t533;
      this[S$1._head$3] = new (__t$_NodeOfK$V()).new(null, null, __t$ListOf_NodeNOfK$V().filled(12, null), T$.ListOfint().filled(12, 0));
      this[S$1._height] = 1;
      this[S$1._length] = 0;
      this[S$1._comparator] = _comparator;
      this[S$1._random] = (t533 = random, t533 == null ? math.Random.new() : t533);
      ;
    }).prototype = IndexableSkipList.prototype;
    dart.addTypeTests(IndexableSkipList);
    IndexableSkipList.prototype[_is_IndexableSkipList_default] = true;
    dart.addTypeCaches(IndexableSkipList);
    dart.setMethodSignature(IndexableSkipList, () => ({
      __proto__: dart.getMethods(IndexableSkipList.__proto__),
      insert: dart.fnType(dart.nullable(V), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      delete: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      valuesFromKey: dart.fnType(core.Iterable$(V), [dart.nullable(core.Object)]),
      [S$1._getNode]: dart.fnType(dart.nullable(indexable_skip_list._Node$(K, V)), [K]),
      getAt: dart.fnType(dart.nullable(V), [core.int]),
      getKeyAt: dart.fnType(dart.nullable(K), [core.int]),
      [S$1._getNodeAt]: dart.fnType(indexable_skip_list._Node$(K, V), [core.int]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(IndexableSkipList, () => ({
      __proto__: dart.getGetters(IndexableSkipList.__proto__),
      length: core.int,
      keys: core.Iterable$(K),
      values: core.Iterable$(V)
    }));
    dart.setLibraryUri(IndexableSkipList, I[282]);
    dart.setFieldSignature(IndexableSkipList, () => ({
      __proto__: dart.getFields(IndexableSkipList.__proto__),
      [S$1._head$3]: dart.finalFieldType(indexable_skip_list._Node$(K, V)),
      [S$1._random]: dart.finalFieldType(math.Random),
      [S$1._comparator]: dart.finalFieldType(dart.fnType(core.int, [K, K])),
      [S$1._height]: dart.fieldType(core.int),
      [S$1._length]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(IndexableSkipList, () => ['_maxHeight']);
    return IndexableSkipList;
  });
  indexable_skip_list.IndexableSkipList = indexable_skip_list.IndexableSkipList$();
  dart.defineLazy(indexable_skip_list.IndexableSkipList, {
    /*indexable_skip_list.IndexableSkipList._maxHeight*/get _maxHeight() {
      return 12;
    }
  }, false);
  dart.addTypeTests(indexable_skip_list.IndexableSkipList, _is_IndexableSkipList_default);
  const _is__Node_default = Symbol('_is__Node_default');
  indexable_skip_list._Node$ = dart.generic((K, V) => {
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class _Node extends core.Object {
      get value() {
        return this[S$1.value$7];
      }
      set value(value) {
        this[S$1.value$7] = __t$VN().as(value);
      }
      get level() {
        return this.next[S$.$length] - 1;
      }
      static ['_#new#tearOff'](K, V, key, value, next, width) {
        return new (indexable_skip_list._Node$(K, V)).new(key, value, next, width);
      }
    }
    (_Node.new = function(key, value, next, width) {
      this.key = key;
      this[S$1.value$7] = value;
      this.next = next;
      this.width = width;
      ;
    }).prototype = _Node.prototype;
    dart.addTypeTests(_Node);
    _Node.prototype[_is__Node_default] = true;
    dart.addTypeCaches(_Node);
    dart.setGetterSignature(_Node, () => ({
      __proto__: dart.getGetters(_Node.__proto__),
      level: core.int
    }));
    dart.setLibraryUri(_Node, I[282]);
    dart.setFieldSignature(_Node, () => ({
      __proto__: dart.getFields(_Node.__proto__),
      key: dart.finalFieldType(dart.nullable(K)),
      value: dart.fieldType(dart.nullable(V)),
      next: dart.finalFieldType(core.List$(dart.nullable(indexable_skip_list._Node$(K, V)))),
      width: dart.finalFieldType(core.List$(core.int))
    }));
    return _Node;
  });
  indexable_skip_list._Node = indexable_skip_list._Node$();
  dart.addTypeTests(indexable_skip_list._Node, _is__Node_default);
  const _is__Iterator_default = Symbol('_is__Iterator_default');
  indexable_skip_list._Iterator$ = dart.generic((K, V, E) => {
    var __t$KN = () => (__t$KN = dart.constFn(dart.nullable(K)))();
    var __t$_NodeOfKN$VN = () => (__t$_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(__t$KN(), __t$VN())))();
    var __t$_NodeNOfKN$VN = () => (__t$_NodeNOfKN$VN = dart.constFn(dart.nullable(__t$_NodeOfKN$VN())))();
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class _Iterator extends core.Object {
      get node() {
        return this[S$1.node];
      }
      set node(value) {
        this[S$1.node] = __t$_NodeNOfKN$VN().as(value);
      }
      moveNext() {
        return (this.node = dart.nullCheck(this.node).next[S$.$_get](0)) != null;
      }
    }
    (_Iterator.new = function(node) {
      this[S$1.node] = node;
      ;
    }).prototype = _Iterator.prototype;
    dart.addTypeTests(_Iterator);
    _Iterator.prototype[_is__Iterator_default] = true;
    dart.addTypeCaches(_Iterator);
    _Iterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_Iterator, () => ({
      __proto__: dart.getMethods(_Iterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setLibraryUri(_Iterator, I[282]);
    dart.setFieldSignature(_Iterator, () => ({
      __proto__: dart.getFields(_Iterator.__proto__),
      node: dart.fieldType(dart.nullable(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V))))
    }));
    return _Iterator;
  });
  indexable_skip_list._Iterator = indexable_skip_list._Iterator$();
  dart.addTypeTests(indexable_skip_list._Iterator, _is__Iterator_default);
  const _is__KeyIterator_default = Symbol('_is__KeyIterator_default');
  indexable_skip_list._KeyIterator$ = dart.generic((K, V) => {
    class _KeyIterator extends indexable_skip_list._Iterator$(K, V, K) {
      static ['_#new#tearOff'](K, V, node) {
        return new (indexable_skip_list._KeyIterator$(K, V)).new(node);
      }
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).key);
      }
    }
    (_KeyIterator.new = function(node) {
      _KeyIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _KeyIterator.prototype;
    dart.addTypeTests(_KeyIterator);
    _KeyIterator.prototype[_is__KeyIterator_default] = true;
    dart.addTypeCaches(_KeyIterator);
    dart.setGetterSignature(_KeyIterator, () => ({
      __proto__: dart.getGetters(_KeyIterator.__proto__),
      current: K
    }));
    dart.setLibraryUri(_KeyIterator, I[282]);
    return _KeyIterator;
  });
  indexable_skip_list._KeyIterator = indexable_skip_list._KeyIterator$();
  dart.addTypeTests(indexable_skip_list._KeyIterator, _is__KeyIterator_default);
  const _is__KeyIterable_default = Symbol('_is__KeyIterable_default');
  indexable_skip_list._KeyIterable$ = dart.generic((K, V) => {
    var __t$_KeyIteratorOfK$V = () => (__t$_KeyIteratorOfK$V = dart.constFn(indexable_skip_list._KeyIterator$(K, V)))();
    class _KeyIterable extends collection.IterableBase$(K) {
      static ['_#new#tearOff'](K, V, head) {
        return new (indexable_skip_list._KeyIterable$(K, V)).new(head);
      }
      get iterator() {
        return new (__t$_KeyIteratorOfK$V()).new(this.head);
      }
    }
    (_KeyIterable.new = function(head) {
      this.head = head;
      _KeyIterable.__proto__.new.call(this);
      ;
    }).prototype = _KeyIterable.prototype;
    dart.addTypeTests(_KeyIterable);
    _KeyIterable.prototype[_is__KeyIterable_default] = true;
    dart.addTypeCaches(_KeyIterable);
    dart.setGetterSignature(_KeyIterable, () => ({
      __proto__: dart.getGetters(_KeyIterable.__proto__),
      iterator: core.Iterator$(K),
      [S$0.$iterator]: core.Iterator$(K)
    }));
    dart.setLibraryUri(_KeyIterable, I[282]);
    dart.setFieldSignature(_KeyIterable, () => ({
      __proto__: dart.getFields(_KeyIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_KeyIterable, ['iterator']);
    return _KeyIterable;
  });
  indexable_skip_list._KeyIterable = indexable_skip_list._KeyIterable$();
  dart.addTypeTests(indexable_skip_list._KeyIterable, _is__KeyIterable_default);
  const _is__ValueIterator_default = Symbol('_is__ValueIterator_default');
  indexable_skip_list._ValueIterator$ = dart.generic((K, V) => {
    class _ValueIterator extends indexable_skip_list._Iterator$(K, V, V) {
      static ['_#new#tearOff'](K, V, node) {
        return new (indexable_skip_list._ValueIterator$(K, V)).new(node);
      }
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).value);
      }
    }
    (_ValueIterator.new = function(node) {
      _ValueIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _ValueIterator.prototype;
    dart.addTypeTests(_ValueIterator);
    _ValueIterator.prototype[_is__ValueIterator_default] = true;
    dart.addTypeCaches(_ValueIterator);
    dart.setGetterSignature(_ValueIterator, () => ({
      __proto__: dart.getGetters(_ValueIterator.__proto__),
      current: V
    }));
    dart.setLibraryUri(_ValueIterator, I[282]);
    return _ValueIterator;
  });
  indexable_skip_list._ValueIterator = indexable_skip_list._ValueIterator$();
  dart.addTypeTests(indexable_skip_list._ValueIterator, _is__ValueIterator_default);
  const _is__ValueIterable_default = Symbol('_is__ValueIterable_default');
  indexable_skip_list._ValueIterable$ = dart.generic((K, V) => {
    var __t$_ValueIteratorOfK$V = () => (__t$_ValueIteratorOfK$V = dart.constFn(indexable_skip_list._ValueIterator$(K, V)))();
    class _ValueIterable extends collection.IterableBase$(V) {
      static ['_#new#tearOff'](K, V, head) {
        return new (indexable_skip_list._ValueIterable$(K, V)).new(head);
      }
      get iterator() {
        return new (__t$_ValueIteratorOfK$V()).new(this.head);
      }
    }
    (_ValueIterable.new = function(head) {
      this.head = head;
      _ValueIterable.__proto__.new.call(this);
      ;
    }).prototype = _ValueIterable.prototype;
    dart.addTypeTests(_ValueIterable);
    _ValueIterable.prototype[_is__ValueIterable_default] = true;
    dart.addTypeCaches(_ValueIterable);
    dart.setGetterSignature(_ValueIterable, () => ({
      __proto__: dart.getGetters(_ValueIterable.__proto__),
      iterator: core.Iterator$(V),
      [S$0.$iterator]: core.Iterator$(V)
    }));
    dart.setLibraryUri(_ValueIterable, I[282]);
    dart.setFieldSignature(_ValueIterable, () => ({
      __proto__: dart.getFields(_ValueIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_ValueIterable, ['iterator']);
    return _ValueIterable;
  });
  indexable_skip_list._ValueIterable = indexable_skip_list._ValueIterable$();
  dart.addTypeTests(indexable_skip_list._ValueIterable, _is__ValueIterable_default);
  backend_manager$.BackendManager = class BackendManager extends core.Object {
    get indexedDB() {
      return js.context.hasProperty("window") ? html.window[S$0.$indexedDB] : html.WorkerGlobalScope.instance.indexedDB;
    }
    open(name, path, crashRecovery, cipher, collection) {
      return async.async(storage_backend.StorageBackend, (function* open() {
        let t533, t533$, t533$0;
        let databaseName = (t533 = collection, t533 == null ? name : t533);
        let objectStoreName = collection == null ? "box" : name;
        let db = (yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
            let t533;
            let db = indexed_db.Database.as(e[S$.$target][S$0.$result]);
            if (!(t533 = db.objectStoreNames, t533 == null ? T$.JSArrayOfString().of([]) : t533)[S$.$contains](objectStoreName)) {
              db[S$1.$createObjectStore](objectStoreName);
            }
          }, T$.VersionChangeEventTovoid())}));
        if (!(t533$ = db.objectStoreNames, t533$ == null ? T$.JSArrayOfString().of([]) : t533$)[S$.$contains](objectStoreName)) {
          core.print("Creating objectStore " + objectStoreName + " in database " + databaseName + "...");
          db = (yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: dart.notNull((t533$0 = db.version, t533$0 == null ? 1 : t533$0)) + 1, onUpgradeNeeded: dart.fn(e => {
              let t533;
              let db = indexed_db.Database.as(e[S$.$target][S$0.$result]);
              if (!(t533 = db.objectStoreNames, t533 == null ? T$.JSArrayOfString().of([]) : t533)[S$.$contains](objectStoreName)) {
                db[S$1.$createObjectStore](objectStoreName);
              }
            }, T$.VersionChangeEventTovoid())}));
        }
        core.print("Got object store " + objectStoreName + " in database " + databaseName + ".");
        return new storage_backend_js.StorageBackendJs.new(db, cipher, objectStoreName);
      }).bind(this));
    }
    deleteBox(name, path, collection) {
      return async.async(dart.void, (function* deleteBox() {
        let t533, t533$;
        core.print("Delete " + name + " // " + dart.str(collection) + " from disk");
        let databaseName = (t533 = collection, t533 == null ? name : t533);
        let objectStoreName = collection == null ? "box" : name;
        if (collection == null) {
          yield dart.nullCheck(this.indexedDB)[S$0.$deleteDatabase](databaseName);
        } else {
          let db = (yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
              let t533;
              let db = indexed_db.Database.as(e[S$.$target][S$0.$result]);
              if ((t533 = db.objectStoreNames, t533 == null ? T$.JSArrayOfString().of([]) : t533)[S$.$contains](objectStoreName)) {
                db.deleteObjectStore(objectStoreName);
              }
            }, T$.VersionChangeEventTovoid())}));
          if ((t533$ = db.objectStoreNames, t533$ == null ? T$.JSArrayOfString().of([]) : t533$)[S$.$isEmpty]) {
            dart.nullCheck(this.indexedDB)[S$0.$deleteDatabase](databaseName);
          }
        }
      }).bind(this));
    }
    boxExists(name, path, collection) {
      return async.async(core.bool, (function* boxExists() {
        let t533, t533$;
        let databaseName = (t533 = collection, t533 == null ? name : t533);
        let objectStoreName = collection == null ? "box" : name;
        try {
          let _exists = true;
          if (collection == null) {
            yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
                dart.nullCheck(e[S$.$target].transaction).abort();
                _exists = false;
              }, T$.VersionChangeEventTovoid())});
          } else {
            let db = (yield dart.nullCheck(this.indexedDB)[S$.$open](collection, {version: 1, onUpgradeNeeded: dart.fn(e => {
                let t533;
                let db = indexed_db.Database.as(e[S$.$target][S$0.$result]);
                _exists = (t533 = db.objectStoreNames, t533 == null ? T$.JSArrayOfString().of([]) : t533)[S$.$contains](objectStoreName);
              }, T$.VersionChangeEventTovoid())}));
            _exists = (t533$ = db.objectStoreNames, t533$ == null ? T$.JSArrayOfString().of([]) : t533$)[S$.$contains](objectStoreName);
          }
          return _exists;
        } catch (e) {
          let error = dart.getThrown(e);
          if (core.Object.is(error)) {
            return false;
          } else
            throw e;
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new backend_manager$.BackendManager.new();
    }
  };
  (backend_manager$.BackendManager.new = function() {
    ;
  }).prototype = backend_manager$.BackendManager.prototype;
  dart.addTypeTests(backend_manager$.BackendManager);
  dart.addTypeCaches(backend_manager$.BackendManager);
  backend_manager$.BackendManager[dart.implements] = () => [storage_backend.BackendManagerInterface];
  dart.setMethodSignature(backend_manager$.BackendManager, () => ({
    __proto__: dart.getMethods(backend_manager$.BackendManager.__proto__),
    open: dart.fnType(async.Future$(storage_backend.StorageBackend), [core.String, dart.nullable(core.String), core.bool, dart.nullable(hive.HiveCipher), dart.nullable(core.String)]),
    deleteBox: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(core.String), dart.nullable(core.String)]),
    boxExists: dart.fnType(async.Future$(core.bool), [core.String, dart.nullable(core.String), dart.nullable(core.String)])
  }));
  dart.setGetterSignature(backend_manager$.BackendManager, () => ({
    __proto__: dart.getGetters(backend_manager$.BackendManager.__proto__),
    indexedDB: dart.nullable(indexed_db.IdbFactory)
  }));
  dart.setLibraryUri(backend_manager$.BackendManager, I[283]);
  dart.defineLazy(charcodes, {
    /*charcodes.$lf*/get $lf() {
      return 10;
    },
    /*charcodes.$cr*/get $cr() {
      return 13;
    },
    /*charcodes.$0*/get $0() {
      return 48;
    },
    /*charcodes.$1*/get $1() {
      return 49;
    },
    /*charcodes.$3*/get $3() {
      return 51;
    },
    /*charcodes.$4*/get $4() {
      return 52;
    },
    /*charcodes.$7*/get $7() {
      return 55;
    },
    /*charcodes.$A*/get $A() {
      return 65;
    },
    /*charcodes.$q*/get $q() {
      return 113;
    },
    /*charcodes.$a*/get $a() {
      return 97;
    },
    /*charcodes.$f*/get $f() {
      return 102;
    }
  }, false);
  const _is_TypedDataBuffer_default = Symbol('_is_TypedDataBuffer_default');
  typed_buffer.TypedDataBuffer$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$TypedDataBufferOfE = () => (__t$TypedDataBufferOfE = dart.constFn(typed_buffer.TypedDataBuffer$(E)))();
    class TypedDataBuffer extends collection.ListBase$(E) {
      get [S$1._typedBuffer]() {
        return typed_data.TypedData.as(this[S$1._buffer$2]);
      }
      get length() {
        return this[S$1._length$1];
      }
      _get(index) {
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        return this[S$1._buffer$2][S$.$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        this[S$1._buffer$2][S$.$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (newLength < this[S$1._length$1]) {
          let defaultValue = this[S$1._defaultValue$2];
          for (let i = newLength; i < this[S$1._length$1]; i = i + 1) {
            this[S$1._buffer$2][S$.$_set](i, defaultValue);
          }
        } else if (newLength > this[S$1._buffer$2][S$.$length]) {
          let newBuffer = null;
          if (this[S$1._buffer$2][S$.$isEmpty]) {
            newBuffer = this[S$1._createBuffer$1](newLength);
          } else {
            newBuffer = this[S$1._createBiggerBuffer](newLength);
          }
          newBuffer[S$0.$setRange](0, this[S$1._length$1], this[S$1._buffer$2]);
          this[S$1._buffer$2] = newBuffer;
        }
        this[S$1._length$1] = newLength;
      }
      [S$1._add$4](value) {
        let t534;
        if (this[S$1._length$1] === this[S$1._buffer$2][S$.$length]) this[S$1._grow$2](this[S$1._length$1]);
        this[S$1._buffer$2][S$.$_set]((t534 = this[S$1._length$1], this[S$1._length$1] = t534 + 1, t534), value);
      }
      add(element) {
        E.as(element);
        this[S$1._add$4](element);
      }
      addAll(values, start = 0, end = null) {
        __t$IterableOfE().as(values);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && start > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[S$1._addAll](values, start, end);
      }
      insertAll(index, values, start = 0, end = null) {
        let t534;
        __t$IterableOfE().as(values);
        core.RangeError.checkValidIndex(index, this, "index", this[S$1._length$1] + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (start > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start === end) return;
        }
        if (index === this[S$1._length$1]) {
          this[S$1._addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[S$.$length];
        }
        if (end != null) {
          this[S$1._insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[S$1._length$1];
        let skipCount = start;
        for (let value of values) {
          if (skipCount > 0) {
            skipCount = skipCount - 1;
            continue;
          }
          if (writeIndex === this[S$1._buffer$2][S$.$length]) {
            this[S$1._grow$2](writeIndex);
          }
          this[S$1._buffer$2][S$.$_set]((t534 = writeIndex, writeIndex = t534 + 1, t534), value);
        }
        if (skipCount > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && writeIndex < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        typed_buffer.TypedDataBuffer._reverse(this[S$1._buffer$2], index, this[S$1._length$1]);
        typed_buffer.TypedDataBuffer._reverse(this[S$1._buffer$2], this[S$1._length$1], writeIndex);
        typed_buffer.TypedDataBuffer._reverse(this[S$1._buffer$2], index, writeIndex);
        this[S$1._length$1] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = end - 1;
        while (start < end) {
          let first = buffer[S$.$_get](start);
          let last = buffer[S$.$_get](end);
          buffer[S$.$_set](end, first);
          buffer[S$.$_set](start, last);
          start = start + 1;
          end = end - 1;
        }
      }
      [S$1._addAll](values, start = 0, end = null) {
        if (core.List.is(values)) end == null ? end = values[S$.$length] : null;
        if (end != null) {
          this[S$1._insertKnownLength](this[S$1._length$1], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= start) this.add(value);
          i = i + 1;
        }
        if (i < start) dart.throw(new core.StateError.new("Too few elements"));
      }
      [S$1._insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          if (start > values[S$.$length] || end > values[S$.$length]) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        }
        let valuesLength = end - start;
        let newLength = this[S$1._length$1] + valuesLength;
        this[S$1._ensureCapacity](newLength);
        this[S$1._buffer$2][S$0.$setRange](index + valuesLength, this[S$1._length$1] + valuesLength, this[S$1._buffer$2], index);
        this[S$1._buffer$2][S$0.$setRange](index, index + valuesLength, values, start);
        this[S$1._length$1] = newLength;
      }
      insert(index, element) {
        E.as(element);
        if (index < 0 || index > this[S$1._length$1]) {
          dart.throw(new core.RangeError.range(index, 0, this[S$1._length$1]));
        }
        if (this[S$1._length$1] < this[S$1._buffer$2][S$.$length]) {
          this[S$1._buffer$2][S$0.$setRange](index + 1, this[S$1._length$1] + 1, this[S$1._buffer$2], index);
          this[S$1._buffer$2][S$.$_set](index, element);
          this[S$1._length$1] = this[S$1._length$1] + 1;
          return;
        }
        let newBuffer = this[S$1._createBiggerBuffer](null);
        newBuffer[S$0.$setRange](0, index, this[S$1._buffer$2]);
        newBuffer[S$0.$setRange](index + 1, this[S$1._length$1] + 1, this[S$1._buffer$2], index);
        newBuffer[S$.$_set](index, element);
        this[S$1._length$1] = this[S$1._length$1] + 1;
        this[S$1._buffer$2] = newBuffer;
      }
      [S$1._ensureCapacity](requiredCapacity) {
        if (requiredCapacity <= this[S$1._buffer$2][S$.$length]) return;
        let newBuffer = this[S$1._createBiggerBuffer](requiredCapacity);
        newBuffer[S$0.$setRange](0, this[S$1._length$1], this[S$1._buffer$2]);
        this[S$1._buffer$2] = newBuffer;
      }
      [S$1._createBiggerBuffer](requiredCapacity) {
        let newLength = this[S$1._buffer$2][S$.$length] * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[S$1._createBuffer$1](newLength);
      }
      [S$1._grow$2](length) {
        let t534;
        this[S$1._buffer$2] = (t534 = this[S$1._createBiggerBuffer](null), (() => {
          t534[S$0.$setRange](0, length, this[S$1._buffer$2]);
          return t534;
        })());
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        if (end > this[S$1._length$1]) dart.throw(new core.RangeError.range(end, 0, this[S$1._length$1]));
        this[S$1._setRange](start, end, iterable, skipCount);
      }
      [S$1._setRange](start, end, source, skipCount) {
        if (__t$TypedDataBufferOfE().is(source)) {
          this[S$1._buffer$2][S$0.$setRange](start, end, source[S$1._buffer$2], skipCount);
        } else {
          this[S$1._buffer$2][S$0.$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[S$1._typedBuffer][S$1.$elementSizeInBytes];
      }
      get lengthInBytes() {
        return this[S$1._length$1] * this[S$1._typedBuffer][S$1.$elementSizeInBytes];
      }
      get offsetInBytes() {
        return this[S$1._typedBuffer][S$0.$offsetInBytes];
      }
      get buffer() {
        return this[S$1._typedBuffer][S$0.$buffer];
      }
    }
    (TypedDataBuffer.new = function(buffer) {
      this[S$1._buffer$2] = buffer;
      this[S$1._length$1] = buffer[S$.$length];
      ;
    }).prototype = TypedDataBuffer.prototype;
    dart.addTypeTests(TypedDataBuffer);
    TypedDataBuffer.prototype[_is_TypedDataBuffer_default] = true;
    dart.addTypeCaches(TypedDataBuffer);
    dart.setMethodSignature(TypedDataBuffer, () => ({
      __proto__: dart.getMethods(TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$1._add$4]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [S$.$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [S$0.$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [S$1._addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, dart.nullable(core.int)]),
      [S$1._insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [S$1._ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [S$1._createBiggerBuffer]: dart.fnType(core.List$(E), [dart.nullable(core.int)]),
      [S$1._grow$2]: dart.fnType(dart.void, [core.int]),
      [S$1._setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setStaticMethodSignature(TypedDataBuffer, () => ['_reverse']);
    dart.setGetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getGetters(TypedDataBuffer.__proto__),
      [S$1._typedBuffer]: typed_data.TypedData,
      length: core.int,
      [S$.$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getSetters(TypedDataBuffer.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setLibraryUri(TypedDataBuffer, I[284]);
    dart.setFieldSignature(TypedDataBuffer, () => ({
      __proto__: dart.getFields(TypedDataBuffer.__proto__),
      [S$1._buffer$2]: dart.fieldType(core.List$(E)),
      [S$1._length$1]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(TypedDataBuffer, () => ['_initialLength']);
    dart.defineExtensionMethods(TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(TypedDataBuffer, ['length']);
    return TypedDataBuffer;
  });
  typed_buffer.TypedDataBuffer = typed_buffer.TypedDataBuffer$();
  dart.defineLazy(typed_buffer.TypedDataBuffer, {
    /*typed_buffer.TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  dart.addTypeTests(typed_buffer.TypedDataBuffer, _is_TypedDataBuffer_default);
  typed_buffer._IntBuffer = class _IntBuffer extends typed_buffer.TypedDataBuffer$(core.int) {
    get [S$1._defaultValue$2]() {
      return 0;
    }
  };
  (typed_buffer._IntBuffer.new = function(buffer) {
    typed_buffer._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._IntBuffer.prototype;
  dart.addTypeTests(typed_buffer._IntBuffer);
  dart.addTypeCaches(typed_buffer._IntBuffer);
  dart.setGetterSignature(typed_buffer._IntBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._IntBuffer.__proto__),
    [S$1._defaultValue$2]: core.int
  }));
  dart.setLibraryUri(typed_buffer._IntBuffer, I[284]);
  typed_buffer._FloatBuffer = class _FloatBuffer extends typed_buffer.TypedDataBuffer$(core.double) {
    get [S$1._defaultValue$2]() {
      return 0;
    }
  };
  (typed_buffer._FloatBuffer.new = function(buffer) {
    typed_buffer._FloatBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._FloatBuffer.prototype;
  dart.addTypeTests(typed_buffer._FloatBuffer);
  dart.addTypeCaches(typed_buffer._FloatBuffer);
  dart.setGetterSignature(typed_buffer._FloatBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._FloatBuffer.__proto__),
    [S$1._defaultValue$2]: core.double
  }));
  dart.setLibraryUri(typed_buffer._FloatBuffer, I[284]);
  typed_buffer.Uint8Buffer = class Uint8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (typed_buffer.Uint8Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8Buffer);
  dart.addTypeCaches(typed_buffer.Uint8Buffer);
  dart.setMethodSignature(typed_buffer.Uint8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8Buffer, I[284]);
  typed_buffer.Int8Buffer = class Int8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int8Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
  };
  (typed_buffer.Int8Buffer.new = function(initialLength = 0) {
    typed_buffer.Int8Buffer.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int8Buffer);
  dart.addTypeCaches(typed_buffer.Int8Buffer);
  dart.setMethodSignature(typed_buffer.Int8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int8Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Int8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int8Buffer, I[284]);
  typed_buffer.Uint8ClampedBuffer = class Uint8ClampedBuffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8ClampedBuffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
  };
  (typed_buffer.Uint8ClampedBuffer.new = function(initialLength = 0) {
    typed_buffer.Uint8ClampedBuffer.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8ClampedBuffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8ClampedBuffer);
  dart.addTypeCaches(typed_buffer.Uint8ClampedBuffer);
  dart.setMethodSignature(typed_buffer.Uint8ClampedBuffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8ClampedBuffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8ClampedBuffer, I[284]);
  typed_buffer.Uint16Buffer = class Uint16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint16Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
  };
  (typed_buffer.Uint16Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint16Buffer.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint16Buffer);
  dart.addTypeCaches(typed_buffer.Uint16Buffer);
  dart.setMethodSignature(typed_buffer.Uint16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint16Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Uint16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint16Buffer, I[284]);
  typed_buffer.Int16Buffer = class Int16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int16Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
  };
  (typed_buffer.Int16Buffer.new = function(initialLength = 0) {
    typed_buffer.Int16Buffer.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int16Buffer);
  dart.addTypeCaches(typed_buffer.Int16Buffer);
  dart.setMethodSignature(typed_buffer.Int16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int16Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Int16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int16Buffer, I[284]);
  typed_buffer.Uint32Buffer = class Uint32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint32Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
  };
  (typed_buffer.Uint32Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint32Buffer.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint32Buffer);
  dart.addTypeCaches(typed_buffer.Uint32Buffer);
  dart.setMethodSignature(typed_buffer.Uint32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint32Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Uint32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint32Buffer, I[284]);
  typed_buffer.Int32Buffer = class Int32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
  };
  (typed_buffer.Int32Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32Buffer.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32Buffer);
  dart.addTypeCaches(typed_buffer.Int32Buffer);
  dart.setMethodSignature(typed_buffer.Int32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Int32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int32Buffer, I[284]);
  typed_buffer.Uint64Buffer = class Uint64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint64Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return typed_data.Uint64List.new(size);
    }
  };
  (typed_buffer.Uint64Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint64Buffer.__proto__.new.call(this, typed_data.Uint64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint64Buffer);
  dart.addTypeCaches(typed_buffer.Uint64Buffer);
  dart.setMethodSignature(typed_buffer.Uint64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint64Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Uint64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint64Buffer, I[284]);
  typed_buffer.Int64Buffer = class Int64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int64Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return typed_data.Int64List.new(size);
    }
  };
  (typed_buffer.Int64Buffer.new = function(initialLength = 0) {
    typed_buffer.Int64Buffer.__proto__.new.call(this, typed_data.Int64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int64Buffer);
  dart.addTypeCaches(typed_buffer.Int64Buffer);
  dart.setMethodSignature(typed_buffer.Int64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int64Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Int64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int64Buffer, I[284]);
  typed_buffer.Float32Buffer = class Float32Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
  };
  (typed_buffer.Float32Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32Buffer);
  dart.addTypeCaches(typed_buffer.Float32Buffer);
  dart.setMethodSignature(typed_buffer.Float32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Float32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float32Buffer, I[284]);
  typed_buffer.Float64Buffer = class Float64Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float64Buffer.new(initialLength);
    }
    [S$1._createBuffer$1](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
  };
  (typed_buffer.Float64Buffer.new = function(initialLength = 0) {
    typed_buffer.Float64Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float64Buffer);
  dart.addTypeCaches(typed_buffer.Float64Buffer);
  dart.setMethodSignature(typed_buffer.Float64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float64Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Float64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float64Buffer, I[284]);
  typed_buffer.Int32x4Buffer = class Int32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Int32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32x4Buffer.new(initialLength);
    }
    get [S$1._defaultValue$2]() {
      return typed_buffer.Int32x4Buffer._zero;
    }
    [S$1._createBuffer$1](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
  };
  (typed_buffer.Int32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32x4Buffer);
  dart.addTypeCaches(typed_buffer.Int32x4Buffer);
  dart.setMethodSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32x4Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Int32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Int32x4Buffer.__proto__),
    [S$1._defaultValue$2]: typed_data.Int32x4
  }));
  dart.setLibraryUri(typed_buffer.Int32x4Buffer, I[284]);
  dart.setStaticFieldSignature(typed_buffer.Int32x4Buffer, () => ['_zero']);
  dart.defineLazy(typed_buffer.Int32x4Buffer, {
    /*typed_buffer.Int32x4Buffer._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_buffer.Float32x4Buffer = class Float32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Float32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32x4Buffer.new(initialLength);
    }
    get [S$1._defaultValue$2]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [S$1._createBuffer$1](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
  };
  (typed_buffer.Float32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32x4Buffer);
  dart.addTypeCaches(typed_buffer.Float32x4Buffer);
  dart.setMethodSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32x4Buffer.__proto__),
    [S$1._createBuffer$1]: dart.fnType(typed_data.Float32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Float32x4Buffer.__proto__),
    [S$1._defaultValue$2]: typed_data.Float32x4
  }));
  dart.setLibraryUri(typed_buffer.Float32x4Buffer, I[284]);
  storage_backend_js.StorageBackendJs = class StorageBackendJs extends storage_backend.StorageBackend {
    get objectStoreName() {
      return this[S$1.objectStoreName];
    }
    set objectStoreName(value) {
      super.objectStoreName = value;
    }
    get supportsCompaction() {
      return this[S$1.supportsCompaction$1];
    }
    set supportsCompaction(value) {
      this[S$1.supportsCompaction$1] = value;
    }
    static ['_#new#tearOff'](_db, _cipher, objectStoreName, _registry = C[329] || CT.C329) {
      return new storage_backend_js.StorageBackendJs.new(_db, _cipher, objectStoreName, _registry);
    }
    get path() {
      return null;
    }
    [S$1._isEncoded](bytes) {
      return bytes[S$.$length] >= storage_backend_js.StorageBackendJs._bytePrefix[S$.$length] && bytes[S$.$_get](0) === storage_backend_js.StorageBackendJs._bytePrefix[S$.$_get](0) && bytes[S$.$_get](1) === storage_backend_js.StorageBackendJs._bytePrefix[S$.$_get](1);
    }
    encodeValue(frame) {
      let value = frame.value;
      if (this[S$1._cipher$2] == null) {
        if (value == null) {
          return value;
        } else if (typed_data.Uint8List.is(value)) {
          if (!this[S$1._isEncoded](value)) {
            return value[S$0.$buffer];
          }
        } else if (typeof value == 'number' || typeof value == 'boolean' || typeof value == 'string' || T$0.ListOfnum().is(value) || T$0.ListOfbool().is(value) || T$.ListOfString().is(value)) {
          return value;
        }
      }
      let frameWriter = new binary_writer_impl.BinaryWriterImpl.new(this[S$1._registry]);
      frameWriter.writeByteList(storage_backend_js.StorageBackendJs._bytePrefix, {writeLength: false});
      if (this[S$1._cipher$2] == null) {
        frameWriter.write(dart.dynamic, value);
      } else {
        frameWriter.writeEncrypted(value, dart.nullCheck(this[S$1._cipher$2]));
      }
      let bytes = frameWriter.toBytes();
      let sublist = bytes[S$0.$sublist](0, bytes[S$.$length]);
      return sublist[S$0.$buffer];
    }
    decodeValue(value) {
      if (typed_data.ByteBuffer.is(value)) {
        let bytes = typed_data.Uint8List.view(value);
        if (this[S$1._isEncoded](bytes)) {
          let reader = new binary_reader_impl.BinaryReaderImpl.new(bytes, this[S$1._registry]);
          reader.skip(2);
          if (this[S$1._cipher$2] == null) {
            return reader.read();
          } else {
            return reader.readEncrypted(dart.nullCheck(this[S$1._cipher$2]));
          }
        } else {
          return bytes;
        }
      } else {
        return value;
      }
    }
    getStore(write) {
      return this[S$1._db$1][S$0.$transaction](this.objectStoreName, write ? "readwrite" : "readonly")[S$0.$objectStore](this.objectStoreName);
    }
    getKeys(opts$) {
      let cursor = opts$ && 'cursor' in opts$ ? opts$.cursor : false;
      let store = this.getStore(false);
      if (js_util.hasProperty(store, "getAllKeys") && !cursor) {
        let completer = T$0.CompleterOfList().new();
        let request = this.getStore(false)[S$0.$getAllKeys](null);
        request[S$0.$onSuccess].listen(dart.fn(_ => {
          completer.complete(T$.ListN().as(request[S$0.$result]));
        }, T$0.EventTovoid()));
        request[S$0.$onError].listen(dart.fn(_ => {
          completer.completeError(dart.nullCheck(request.error));
        }, T$0.EventTovoid()));
        return completer.future;
      } else {
        return store[S$0.$openCursor]({autoAdvance: true}).map(T$.ObjectN(), dart.fn(e => e.key, T$0.CursorWithValueToObjectN())).toList();
      }
    }
    getValues(opts$) {
      let cursor = opts$ && 'cursor' in opts$ ? opts$.cursor : false;
      let store = this.getStore(false);
      if (js_util.hasProperty(store, "getAll") && !cursor) {
        let completer = T$0.CompleterOfIterable().new();
        let request = store[S$1.$getAll](null);
        request[S$0.$onSuccess].listen(dart.fn(_ => {
          let values = core.List.as(request[S$0.$result])[S$.$map](dart.dynamic, dart.bind(this, 'decodeValue'));
          completer.complete(values);
        }, T$0.EventTovoid()));
        request[S$0.$onError].listen(dart.fn(_ => {
          completer.completeError(dart.nullCheck(request.error));
        }, T$0.EventTovoid()));
        return completer.future;
      } else {
        return store[S$0.$openCursor]({autoAdvance: true}).map(dart.dynamic, dart.fn(e => e[S$0.$value], T$0.CursorWithValueTodynamic())).toList();
      }
    }
    initialize(registry, keystore, lazy) {
      return async.async(core.int, (function* initialize() {
        let t534;
        this[S$1._registry] = registry;
        let keys = (yield this.getKeys());
        if (!lazy) {
          let i = 0;
          let values = (yield this.getValues());
          for (let value of values) {
            let key = keys[S$.$_get]((t534 = i, i = t534 + 1, t534));
            keystore.insert(new frame$.Frame.new(key, value), {notify: false});
          }
        } else {
          for (let key of keys) {
            keystore.insert(new frame$.Frame.lazy(key), {notify: false});
          }
        }
        return 0;
      }).bind(this));
    }
    readValue(frame) {
      return async.async(dart.dynamic, (function* readValue() {
        let value = (yield this.getStore(false)[S$0.$getObject](frame.key));
        return this.decodeValue(value);
      }).bind(this));
    }
    writeFrames(frames) {
      return async.async(dart.void, (function* writeFrames() {
        let store = this.getStore(true);
        for (let frame of frames) {
          if (frame.deleted) {
            yield store[S$0.$delete](frame.key);
          } else {
            yield store[S$0.$put](this.encodeValue(frame), frame.key);
          }
        }
      }).bind(this));
    }
    compact(frames) {
      dart.throw(new core.UnsupportedError.new("Not supported"));
    }
    clear() {
      return this.getStore(true)[S$.$clear]();
    }
    close() {
      this[S$1._db$1].close();
      return T$.FutureOfvoid().value();
    }
    deleteFromDisk() {
      return async.async(dart.void, (function* deleteFromDisk() {
        let t534, t534$;
        let indexDB = js.context.hasProperty("window") ? html.window[S$0.$indexedDB] : html.WorkerGlobalScope.instance.indexedDB;
        core.print("Delete " + dart.str(this[S$1._db$1].name) + " // " + this.objectStoreName + " from disk");
        if ((t534 = this[S$1._db$1].objectStoreNames, t534 == null ? null : t534[S$.$length]) === 1) {
          yield dart.nullCheck(indexDB)[S$0.$deleteDatabase](dart.nullCheck(this[S$1._db$1].name));
        } else {
          let db = (yield dart.nullCheck(indexDB)[S$.$open](dart.nullCheck(this[S$1._db$1].name), {version: 1, onUpgradeNeeded: dart.fn(e => {
              let t534;
              let db = indexed_db.Database.as(e[S$.$target][S$0.$result]);
              if ((t534 = db.objectStoreNames, t534 == null ? T$.JSArrayOfString().of([]) : t534)[S$.$contains](this.objectStoreName)) {
                db.deleteObjectStore(this.objectStoreName);
              }
            }, T$.VersionChangeEventTovoid())}));
          if ((t534$ = db.objectStoreNames, t534$ == null ? T$.JSArrayOfString().of([]) : t534$)[S$.$isEmpty]) {
            yield indexDB[S$0.$deleteDatabase](dart.nullCheck(this[S$1._db$1].name));
          }
        }
      }).bind(this));
    }
    flush() {
      return T$.FutureOfvoid().value();
    }
  };
  (storage_backend_js.StorageBackendJs.new = function(_db, _cipher, objectStoreName, _registry = C[329] || CT.C329) {
    this[S$1.supportsCompaction$1] = false;
    this[S$1._db$1] = _db;
    this[S$1._cipher$2] = _cipher;
    this[S$1.objectStoreName] = objectStoreName;
    this[S$1._registry] = _registry;
    ;
  }).prototype = storage_backend_js.StorageBackendJs.prototype;
  dart.addTypeTests(storage_backend_js.StorageBackendJs);
  dart.addTypeCaches(storage_backend_js.StorageBackendJs);
  dart.setMethodSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getMethods(storage_backend_js.StorageBackendJs.__proto__),
    [S$1._isEncoded]: dart.fnType(core.bool, [typed_data.Uint8List]),
    encodeValue: dart.fnType(dart.dynamic, [frame$.Frame]),
    decodeValue: dart.fnType(dart.dynamic, [dart.dynamic]),
    getStore: dart.fnType(indexed_db.ObjectStore, [core.bool]),
    getKeys: dart.fnType(async.Future$(core.List), [], {cursor: core.bool}, {}),
    getValues: dart.fnType(async.Future$(core.Iterable), [], {cursor: core.bool}, {}),
    initialize: dart.fnType(async.Future$(core.int), [hive.TypeRegistry, keystore$.Keystore, core.bool]),
    readValue: dart.fnType(async.Future, [frame$.Frame]),
    writeFrames: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
    compact: dart.fnType(async.Future$(core.List$(frame$.Frame)), [core.Iterable$(frame$.Frame)]),
    clear: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    flush: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getGetters(storage_backend_js.StorageBackendJs.__proto__),
    path: dart.nullable(core.String)
  }));
  dart.setLibraryUri(storage_backend_js.StorageBackendJs, I[285]);
  dart.setFieldSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getFields(storage_backend_js.StorageBackendJs.__proto__),
    [S$1._db$1]: dart.finalFieldType(indexed_db.Database),
    [S$1._cipher$2]: dart.finalFieldType(dart.nullable(hive.HiveCipher)),
    objectStoreName: dart.finalFieldType(core.String),
    [S$1._registry]: dart.fieldType(hive.TypeRegistry),
    supportsCompaction: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(storage_backend_js.StorageBackendJs, () => ['_bytePrefix']);
  dart.defineLazy(storage_backend_js.StorageBackendJs, {
    /*storage_backend_js.StorageBackendJs._bytePrefix*/get _bytePrefix() {
      return C[482] || CT.C482;
    }
  }, false);
  binary_writer_impl.BinaryWriterImpl = class BinaryWriterImpl extends hive.BinaryWriter {
    get [S$1._byteData$1]() {
      this[S$1._byteDataInstance] == null ? this[S$1._byteDataInstance] = typed_data.ByteData.view(this[S$1._buffer$3][S$0.$buffer]) : null;
      return dart.nullCheck(this[S$1._byteDataInstance]);
    }
    static ['_#new#tearOff'](typeRegistry) {
      return new binary_writer_impl.BinaryWriterImpl.new(typeRegistry);
    }
    static ['_#withBuffer#tearOff'](_buffer, _typeRegistry) {
      return new binary_writer_impl.BinaryWriterImpl.withBuffer(_buffer, _typeRegistry);
    }
    [S$1._reserveBytes](count) {
      if (this[S$1._buffer$3][S$.$length] - this[S$1._offset$1] < count) {
        this[S$1._increaseBufferSize](count);
      }
    }
    [S$1._increaseBufferSize](count) {
      let newSize = binary_writer_impl.BinaryWriterImpl._pow2roundup((this[S$1._offset$1] + count) * 2);
      let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
      newBuffer[S$0.$setRange](0, this[S$1._offset$1], this[S$1._buffer$3]);
      this[S$1._buffer$3] = newBuffer;
      this[S$1._byteDataInstance] = null;
    }
    [S$1._addBytes](bytes) {
      core.ArgumentError.checkNotNull(T$.ListOfint(), bytes);
      let length = bytes[S$.$length];
      this[S$1._reserveBytes](length);
      this[S$1._buffer$3][S$0.$setRange](this[S$1._offset$1], this[S$1._offset$1] + length, bytes);
      this[S$1._offset$1] = this[S$1._offset$1] + length;
    }
    writeByte(byte) {
      let t534;
      core.ArgumentError.checkNotNull(core.int, byte);
      this[S$1._reserveBytes](1);
      this[S$1._buffer$3][S$.$_set]((t534 = this[S$1._offset$1], this[S$1._offset$1] = t534 + 1, t534), byte);
    }
    writeWord(value) {
      let t534, t534$;
      core.ArgumentError.checkNotNull(core.int, value);
      this[S$1._reserveBytes](2);
      this[S$1._buffer$3][S$.$_set]((t534 = this[S$1._offset$1], this[S$1._offset$1] = t534 + 1, t534), value);
      this[S$1._buffer$3][S$.$_set]((t534$ = this[S$1._offset$1], this[S$1._offset$1] = t534$ + 1, t534$), value[S$0.$rightShift](8));
    }
    writeInt32(value) {
      core.ArgumentError.checkNotNull(core.int, value);
      this[S$1._reserveBytes](4);
      this[S$1._byteData$1][S$1.$setInt32](this[S$1._offset$1], value, typed_data.Endian.little);
      this[S$1._offset$1] = this[S$1._offset$1] + 4;
    }
    writeUint32(value) {
      core.ArgumentError.checkNotNull(core.int, value);
      this[S$1._reserveBytes](4);
      extensions['ListIntX|writeUint32'](this[S$1._buffer$3], this[S$1._offset$1], value);
      this[S$1._offset$1] = this[S$1._offset$1] + 4;
    }
    writeInt(value) {
      this.writeDouble(value[S$1.$toDouble]());
    }
    writeDouble(value) {
      core.ArgumentError.checkNotNull(core.double, value);
      this[S$1._reserveBytes](8);
      this[S$1._byteData$1][S$1.$setFloat64](this[S$1._offset$1], value, typed_data.Endian.little);
      this[S$1._offset$1] = this[S$1._offset$1] + 8;
    }
    writeBool(value) {
      core.ArgumentError.checkNotNull(core.bool, value);
      this.writeByte(value ? 1 : 0);
    }
    writeString(value, opts$) {
      let writeByteCount = opts$ && 'writeByteCount' in opts$ ? opts$.writeByteCount : true;
      let encoder = opts$ && 'encoder' in opts$ ? opts$.encoder : C[280] || CT.C280;
      core.ArgumentError.checkNotNull(core.String, value);
      let bytes = encoder.convert(value);
      if (writeByteCount) {
        this.writeUint32(bytes[S$.$length]);
      }
      this[S$1._addBytes](bytes);
    }
    writeByteList(bytes, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(T$.ListOfint(), bytes);
      if (writeLength) {
        this.writeUint32(bytes[S$.$length]);
      }
      this[S$1._addBytes](bytes);
    }
    writeIntList(list, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(T$.ListOfint(), list);
      let length = list[S$.$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[S$1._reserveBytes](length * 8);
      let byteData = this[S$1._byteData$1];
      for (let i = 0; i < length; i = i + 1) {
        byteData[S$1.$setFloat64](this[S$1._offset$1], list[S$.$_get](i)[S$1.$toDouble](), typed_data.Endian.little);
        this[S$1._offset$1] = this[S$1._offset$1] + 8;
      }
    }
    writeDoubleList(list, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(T$0.ListOfdouble(), list);
      let length = list[S$.$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[S$1._reserveBytes](length * 8);
      let byteData = this[S$1._byteData$1];
      for (let i = 0; i < length; i = i + 1) {
        byteData[S$1.$setFloat64](this[S$1._offset$1], list[S$.$_get](i), typed_data.Endian.little);
        this[S$1._offset$1] = this[S$1._offset$1] + 8;
      }
    }
    writeBoolList(list, opts$) {
      let t534;
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(T$0.ListOfbool(), list);
      let length = list[S$.$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[S$1._reserveBytes](length);
      for (let i = 0; i < length; i = i + 1) {
        this[S$1._buffer$3][S$.$_set]((t534 = this[S$1._offset$1], this[S$1._offset$1] = t534 + 1, t534), list[S$.$_get](i) ? 1 : 0);
      }
    }
    writeStringList(list, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      let encoder = opts$ && 'encoder' in opts$ ? opts$.encoder : C[280] || CT.C280;
      core.ArgumentError.checkNotNull(T$.ListOfString(), list);
      if (writeLength) {
        this.writeUint32(list[S$.$length]);
      }
      for (let str of list) {
        let strBytes = encoder.convert(str);
        this.writeUint32(strBytes[S$.$length]);
        this[S$1._addBytes](strBytes);
      }
    }
    writeList(list, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(core.List, list);
      if (writeLength) {
        this.writeUint32(list[S$.$length]);
      }
      for (let i = 0; i < list[S$.$length]; i = i + 1) {
        this.write(dart.dynamic, list[S$.$_get](i));
      }
    }
    writeMap(map, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(core.Map, map);
      if (writeLength) {
        this.writeUint32(map[S$.$length]);
      }
      for (let key of map[S$.$keys]) {
        this.write(dart.dynamic, key);
        this.write(dart.dynamic, map[S$.$_get](key));
      }
    }
    writeKey(key) {
      core.ArgumentError.checkNotNull(core.Object, key);
      if (typeof key == 'string') {
        this.writeByte(1);
        let bytes = hive.BinaryWriter.utf8Encoder.convert(key);
        this.writeByte(bytes[S$.$length]);
        this[S$1._addBytes](bytes);
      } else {
        this.writeByte(0);
        this.writeUint32(core.int.as(key));
      }
    }
    writeHiveList(list, opts$) {
      let writeLength = opts$ && 'writeLength' in opts$ ? opts$.writeLength : true;
      core.ArgumentError.checkNotNull(T$.HiveListOfHiveObjectMixin(), list);
      if (writeLength) {
        this.writeUint32(list[S$.$length]);
      }
      let boxName = T$.HiveListImplOfHiveObjectMixin().as(list).boxName;
      this.writeByte(boxName.length);
      this[S$1._addBytes](boxName[S$0.$codeUnits]);
      for (let obj of list) {
        this.writeKey(obj.key);
      }
    }
    writeFrame(frame, opts$) {
      let t534, t534$;
      let cipher = opts$ && 'cipher' in opts$ ? opts$.cipher : null;
      core.ArgumentError.checkNotNull(frame$.Frame, frame);
      let startOffset = this[S$1._offset$1];
      this[S$1._reserveBytes](4);
      this[S$1._offset$1] = this[S$1._offset$1] + 4;
      this.writeKey(frame.key);
      if (!frame.deleted) {
        if (cipher == null) {
          this.write(dart.dynamic, frame.value);
        } else {
          this.writeEncrypted(frame.value, cipher);
        }
      }
      let frameLength = this[S$1._offset$1] - startOffset + 4;
      extensions['ListIntX|writeUint32'](this[S$1._buffer$3], startOffset, frameLength);
      let crc = crc32.Crc32.compute(this[S$1._buffer$3], {offset: startOffset, length: frameLength - 4, crc: (t534$ = (t534 = cipher, t534 == null ? null : t534.calculateKeyCrc()), t534$ == null ? 0 : t534$)});
      this.writeUint32(crc);
      return frameLength;
    }
    write(T, value, opts$) {
      let writeTypeId = opts$ && 'writeTypeId' in opts$ ? opts$.writeTypeId : true;
      if (value == null) {
        if (writeTypeId) {
          this.writeByte(0);
        }
      } else if (core.int.is(value)) {
        if (writeTypeId) {
          this.writeByte(1);
        }
        this.writeInt(value);
      } else if (typeof value == 'number') {
        if (writeTypeId) {
          this.writeByte(2);
        }
        this.writeDouble(value);
      } else if (typeof value == 'boolean') {
        if (writeTypeId) {
          this.writeByte(3);
        }
        this.writeBool(value);
      } else if (typeof value == 'string') {
        if (writeTypeId) {
          this.writeByte(4);
        }
        this.writeString(value);
      } else if (core.List.is(value)) {
        this[S$1._writeList](value, {writeTypeId: writeTypeId});
      } else if (core.Map.is(value)) {
        if (writeTypeId) {
          this.writeByte(11);
        }
        this.writeMap(value);
      } else {
        let resolved = this[S$1._typeRegistry$1].findAdapterForValue(value);
        if (resolved == null) {
          dart.throw(new hive.HiveError.new("Cannot write, unknown type: " + dart.str(dart.runtimeType(value)) + ". " + "Did you forget to register an adapter?"));
        }
        if (writeTypeId) {
          this.writeByte(resolved.typeId);
        }
        resolved.adapter.write(this, value);
      }
    }
    [S$1._writeList](value, opts$) {
      let writeTypeId = opts$ && 'writeTypeId' in opts$ ? opts$.writeTypeId : true;
      if (T$.HiveListOfHiveObjectMixin().is(value)) {
        if (writeTypeId) {
          this.writeByte(12);
        }
        this.writeHiveList(value);
      } else if (value[S$.$contains](null)) {
        if (writeTypeId) {
          this.writeByte(10);
        }
        this.writeList(value);
      } else if (typed_data.Uint8List.is(value)) {
        if (writeTypeId) {
          this.writeByte(5);
        }
        this.writeByteList(value);
      } else if (T$.ListOfint().is(value)) {
        if (writeTypeId) {
          this.writeByte(6);
        }
        this.writeIntList(value);
      } else if (T$0.ListOfdouble().is(value)) {
        if (writeTypeId) {
          this.writeByte(7);
        }
        this.writeDoubleList(value);
      } else if (T$0.ListOfbool().is(value)) {
        if (writeTypeId) {
          this.writeByte(8);
        }
        this.writeBoolList(value);
      } else if (T$.ListOfString().is(value)) {
        if (writeTypeId) {
          this.writeByte(9);
        }
        this.writeStringList(value);
      } else {
        if (writeTypeId) {
          this.writeByte(10);
        }
        this.writeList(value);
      }
    }
    writeEncrypted(value, cipher, opts$) {
      let t534;
      let writeTypeId = opts$ && 'writeTypeId' in opts$ ? opts$.writeTypeId : true;
      let valueWriter = (t534 = new binary_writer_impl.BinaryWriterImpl.new(this[S$1._typeRegistry$1]), (() => {
        t534.write(dart.dynamic, value, {writeTypeId: writeTypeId});
        return t534;
      })());
      let inp = valueWriter[S$1._buffer$3];
      let inpLength = valueWriter[S$1._offset$1];
      this[S$1._reserveBytes](cipher.maxEncryptedSize(inp));
      let len = cipher.encrypt(inp, 0, inpLength, this[S$1._buffer$3], this[S$1._offset$1]);
      this[S$1._offset$1] = this[S$1._offset$1] + len;
    }
    toBytes() {
      return typed_data.Uint8List.view(this[S$1._buffer$3][S$0.$buffer], 0, this[S$1._offset$1]);
    }
    static _pow2roundup(x) {
      if (!(x > 0)) dart.assertFailed(null, I[286], 419, 12, "x > 0");
      x = x - 1;
      x = (x | x[S$0.$rightShift](1)) >>> 0;
      x = (x | x[S$0.$rightShift](2)) >>> 0;
      x = (x | x[S$0.$rightShift](4)) >>> 0;
      x = (x | x[S$0.$rightShift](8)) >>> 0;
      x = (x | x[S$0.$rightShift](16)) >>> 0;
      return x + 1;
    }
  };
  (binary_writer_impl.BinaryWriterImpl.new = function(typeRegistry) {
    this[S$1._buffer$3] = _native_typed_data.NativeUint8List.new(4096);
    this[S$1._byteDataInstance] = null;
    this[S$1._offset$1] = 0;
    this[S$1._typeRegistry$1] = type_registry_impl.TypeRegistryImpl.as(typeRegistry);
    ;
  }).prototype = binary_writer_impl.BinaryWriterImpl.prototype;
  (binary_writer_impl.BinaryWriterImpl.withBuffer = function(_buffer, _typeRegistry) {
    this[S$1._buffer$3] = _native_typed_data.NativeUint8List.new(4096);
    this[S$1._byteDataInstance] = null;
    this[S$1._offset$1] = 0;
    this[S$1._buffer$3] = _buffer;
    this[S$1._typeRegistry$1] = _typeRegistry;
    ;
  }).prototype = binary_writer_impl.BinaryWriterImpl.prototype;
  dart.addTypeTests(binary_writer_impl.BinaryWriterImpl);
  dart.addTypeCaches(binary_writer_impl.BinaryWriterImpl);
  dart.setMethodSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getMethods(binary_writer_impl.BinaryWriterImpl.__proto__),
    [S$1._reserveBytes]: dart.fnType(dart.void, [core.int]),
    [S$1._increaseBufferSize]: dart.fnType(dart.void, [core.int]),
    [S$1._addBytes]: dart.fnType(dart.void, [core.List$(core.int)]),
    writeByte: dart.fnType(dart.void, [core.int]),
    writeWord: dart.fnType(dart.void, [core.int]),
    writeInt32: dart.fnType(dart.void, [core.int]),
    writeUint32: dart.fnType(dart.void, [core.int]),
    writeInt: dart.fnType(dart.void, [core.int]),
    writeDouble: dart.fnType(dart.void, [core.double]),
    writeBool: dart.fnType(dart.void, [core.bool]),
    writeString: dart.fnType(dart.void, [core.String], {encoder: convert.Converter$(core.String, core.List$(core.int)), writeByteCount: core.bool}, {}),
    writeByteList: dart.fnType(dart.void, [core.List$(core.int)], {writeLength: core.bool}, {}),
    writeIntList: dart.fnType(dart.void, [core.List$(core.int)], {writeLength: core.bool}, {}),
    writeDoubleList: dart.fnType(dart.void, [core.List$(core.double)], {writeLength: core.bool}, {}),
    writeBoolList: dart.fnType(dart.void, [core.List$(core.bool)], {writeLength: core.bool}, {}),
    writeStringList: dart.fnType(dart.void, [core.List$(core.String)], {encoder: convert.Converter$(core.String, core.List$(core.int)), writeLength: core.bool}, {}),
    writeList: dart.fnType(dart.void, [core.List], {writeLength: core.bool}, {}),
    writeMap: dart.fnType(dart.void, [core.Map], {writeLength: core.bool}, {}),
    writeKey: dart.fnType(dart.void, [dart.dynamic]),
    writeHiveList: dart.fnType(dart.void, [hive.HiveList$(hive_object.HiveObjectMixin)], {writeLength: core.bool}, {}),
    writeFrame: dart.fnType(core.int, [frame$.Frame], {cipher: dart.nullable(hive.HiveCipher)}, {}),
    write: dart.gFnType(T => [dart.void, [T], {writeTypeId: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [S$1._writeList]: dart.fnType(dart.void, [core.List], {writeTypeId: core.bool}, {}),
    writeEncrypted: dart.fnType(dart.void, [dart.dynamic, hive.HiveCipher], {writeTypeId: core.bool}, {}),
    toBytes: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setStaticMethodSignature(binary_writer_impl.BinaryWriterImpl, () => ['_pow2roundup']);
  dart.setGetterSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getGetters(binary_writer_impl.BinaryWriterImpl.__proto__),
    [S$1._byteData$1]: typed_data.ByteData
  }));
  dart.setLibraryUri(binary_writer_impl.BinaryWriterImpl, I[287]);
  dart.setFieldSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getFields(binary_writer_impl.BinaryWriterImpl.__proto__),
    [S$1._typeRegistry$1]: dart.finalFieldType(type_registry_impl.TypeRegistryImpl),
    [S$1._buffer$3]: dart.fieldType(typed_data.Uint8List),
    [S$1._byteDataInstance]: dart.fieldType(dart.nullable(typed_data.ByteData)),
    [S$1._offset$1]: dart.fieldType(core.int)
  }));
  dart.setStaticFieldSignature(binary_writer_impl.BinaryWriterImpl, () => ['_initBufferSize']);
  dart.defineLazy(binary_writer_impl.BinaryWriterImpl, {
    /*binary_writer_impl.BinaryWriterImpl._initBufferSize*/get _initBufferSize() {
      return 4096;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/supabase_client.dart": supabase_client,
    "package:app_links/src/app_links_web.dart": app_links_web,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:sign_in_with_apple_web/sign_in_with_apple_web.dart": sign_in_with_apple_web,
    "package:url_launcher_web/url_launcher_web.dart": url_launcher_web,
    "package:supabase_flutter/supabase_flutter.dart": supabase_flutter,
    "package:app_links/src/app_links_platform_interface.dart": app_links_platform_interface,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "package:sign_in_with_apple_platform_interface/sign_in_with_apple_platform_interface.dart": sign_in_with_apple_platform_interface,
    "package:url_launcher_platform_interface/link.dart": link,
    "package:url_launcher_platform_interface/url_launcher_platform_interface.dart": url_launcher_platform_interface,
    "package:url_launcher_web/src/link.dart": link$,
    "package:url_launcher_web/src/shims/dart_ui.dart": dart_ui,
    "package:supabase/supabase.dart": supabase,
    "package:supabase_flutter/src/local_storage.dart": local_storage,
    "package:supabase_flutter/src/supabase.dart": supabase$,
    "package:supabase_flutter/src/supabase_auth.dart": supabase_auth,
    "package:url_launcher/url_launcher.dart": url_launcher,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:app_links/src/app_links_method_channel.dart": app_links_method_channel,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences,
    "package:sign_in_with_apple_platform_interface/authorization_credential.dart": authorization_credential,
    "package:sign_in_with_apple_platform_interface/authorization_request.dart": authorization_request,
    "package:sign_in_with_apple_platform_interface/credential_state.dart": credential_state,
    "package:sign_in_with_apple_platform_interface/web_authentication_options.dart": web_authentication_options,
    "package:sign_in_with_apple_platform_interface/exceptions.dart": exceptions,
    "package:sign_in_with_apple_platform_interface/nonce.dart": nonce,
    "package:sign_in_with_apple_platform_interface/method_channel_sign_in_with_apple.dart": method_channel_sign_in_with_apple,
    "package:url_launcher_platform_interface/src/types.dart": types$,
    "package:url_launcher_platform_interface/src/url_launcher_platform.dart": url_launcher_platform,
    "package:url_launcher_web/src/shims/dart_ui_real.dart": dart_ui_real,
    "package:functions_client/functions_client.dart": functions_client,
    "package:gotrue/gotrue.dart": gotrue,
    "package:postgrest/postgrest.dart": postgrest,
    "package:realtime_client/realtime_client.dart": realtime_client,
    "package:storage_client/storage_client.dart": storage_client,
    "package:supabase/src/auth_user.dart": auth_user,
    "package:supabase/src/realtime_client_options.dart": realtime_client_options,
    "package:supabase/src/remove_subscription_result.dart": remove_subscription_result,
    "package:supabase/src/supabase_client.dart": supabase_client$,
    "package:supabase/src/supabase_event_types.dart": supabase_event_types,
    "package:supabase/src/supabase_query_builder.dart": supabase_query_builder,
    "package:supabase/src/supabase_realtime_error.dart": supabase_realtime_error,
    "package:hive_flutter/hive_flutter.dart": hive_flutter,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:http/http.dart": http,
    "package:supabase_flutter/src/constants.dart": constants,
    "package:app_links/app_links.dart": app_links,
    "package:crypto/crypto.dart": crypto,
    "package:sign_in_with_apple/sign_in_with_apple.dart": sign_in_with_apple,
    "package:url_launcher/url_launcher_string.dart": url_launcher_string,
    "package:webview_flutter/webview_flutter.dart": webview_flutter,
    "package:url_launcher/src/legacy_api.dart": legacy_api,
    "package:url_launcher/src/types.dart": types$0,
    "package:url_launcher/src/url_launcher_uri.dart": url_launcher_uri,
    "package:url_launcher_platform_interface/method_channel_url_launcher.dart": method_channel_url_launcher,
    "package:functions_client/src/functions_client.dart": functions_client$,
    "package:functions_client/src/types.dart": types$1,
    "package:gotrue/src/constants.dart": constants$,
    "package:gotrue/src/gotrue_admin_api.dart": gotrue_admin_api,
    "package:gotrue/src/gotrue_client.dart": gotrue_client,
    "package:gotrue/src/types/auth_exception.dart": auth_exception,
    "package:gotrue/src/types/auth_response.dart": auth_response,
    "package:gotrue/src/types/auth_state.dart": auth_state,
    "package:gotrue/src/types/gotrue_async_storage.dart": gotrue_async_storage,
    "package:gotrue/src/types/mfa.dart": mfa,
    "package:gotrue/src/types/oauth_flow_type.dart": oauth_flow_type,
    "package:gotrue/src/types/provider.dart": provider$,
    "package:gotrue/src/types/session.dart": session$,
    "package:gotrue/src/types/user.dart": user,
    "package:gotrue/src/types/user_attributes.dart": user_attributes,
    "package:postgrest/src/postgrest.dart": postgrest$,
    "package:postgrest/src/postgrest_builder.dart": postgrest_builder,
    "package:postgrest/src/types.dart": types$2,
    "package:realtime_client/src/realtime_channel.dart": realtime_channel,
    "package:realtime_client/src/realtime_client.dart": realtime_client$,
    "package:realtime_client/src/realtime_presence.dart": realtime_presence,
    "package:realtime_client/src/transformers.dart": transformers,
    "package:realtime_client/src/constants.dart": constants$0,
    "package:storage_client/src/storage_client.dart": storage_client$,
    "package:storage_client/src/storage_file_api.dart": storage_file_api,
    "package:storage_client/src/types.dart": types$3,
    "package:supabase/src/constants.dart": constants$1,
    "package:yet_another_json_isolate/yet_another_json_isolate.dart": yet_another_json_isolate,
    "package:supabase/src/auth_http_client.dart": auth_http_client,
    "package:supabase/src/supabase_stream_builder.dart": supabase_stream_builder,
    "package:hive/hive.dart": hive,
    "package:hive_flutter/src/stub/path_provider.dart": path_provider,
    "package:hive_flutter/src/stub/path.dart": path,
    "package:http/src/client.dart": client$,
    "package:http/src/exception.dart": exception,
    "package:http/src/request.dart": request$,
    "package:http/src/response.dart": response$,
    "package:http/src/streamed_request.dart": streamed_request,
    "package:http/src/base_client.dart": base_client,
    "package:http/src/base_request.dart": base_request,
    "package:http/src/base_response.dart": base_response,
    "package:http/src/byte_stream.dart": byte_stream,
    "package:http/src/multipart_file.dart": multipart_file,
    "package:http/src/multipart_request.dart": multipart_request,
    "package:http/src/streamed_response.dart": streamed_response,
    "package:supabase_flutter/src/version.dart": version,
    "package:app_links/src/app_links.dart": app_links$,
    "package:crypto/src/digest.dart": digest,
    "package:crypto/src/hash.dart": hash,
    "package:crypto/src/hmac.dart": hmac,
    "package:crypto/src/md5.dart": md5,
    "package:crypto/src/sha1.dart": sha1,
    "package:crypto/src/sha256.dart": sha256,
    "package:crypto/src/sha512.dart": sha512,
    "package:sign_in_with_apple/src/sign_in_with_apple.dart": sign_in_with_apple$,
    "package:sign_in_with_apple/src/widgets/apple_logo_painter.dart": apple_logo_painter,
    "package:sign_in_with_apple/src/widgets/sign_in_with_apple_builder.dart": sign_in_with_apple_builder,
    "package:sign_in_with_apple/src/widgets/sign_in_with_apple_button.dart": sign_in_with_apple_button,
    "package:url_launcher/src/url_launcher_string.dart": url_launcher_string$,
    "package:webview_flutter_platform_interface/webview_flutter_platform_interface.dart": webview_flutter_platform_interface,
    "package:webview_flutter/src/navigation_delegate.dart": navigation_delegate,
    "package:webview_flutter/src/webview_controller.dart": webview_controller,
    "package:webview_flutter/src/webview_cookie_manager.dart": webview_cookie_manager,
    "package:webview_flutter/src/webview_widget.dart": webview_widget,
    "package:url_launcher/src/type_conversion.dart": type_conversion,
    "package:functions_client/src/constants.dart": constants$2,
    "package:gotrue/src/version.dart": version$,
    "package:gotrue/src/fetch.dart": fetch,
    "package:gotrue/src/types/fetch_options.dart": fetch_options,
    "package:gotrue/src/gotrue_admin_mfa_api.dart": gotrue_admin_mfa_api,
    "package:gotrue/src/helper.dart": helper,
    "package:jwt_decode/jwt_decode.dart": jwt_decode,
    "package:rxdart/subjects.dart": subjects,
    "package:postgrest/src/constants.dart": constants$3,
    "package:realtime_client/src/push.dart": push,
    "package:realtime_client/src/retry_timer.dart": retry_timer,
    "package:realtime_client/src/message.dart": message,
    "package:realtime_client/src/websocket/websocket.dart": websocket,
    "package:web_socket_channel/web_socket_channel.dart": web_socket_channel,
    "package:realtime_client/src/version.dart": version$0,
    "package:storage_client/src/constants.dart": constants$4,
    "package:storage_client/src/storage_bucket_api.dart": storage_bucket_api,
    "package:storage_client/src/fetch.dart": fetch$,
    "package:storage_client/src/file_stub.dart": file_stub,
    "package:supabase/src/version.dart": version$1,
    "package:yet_another_json_isolate/src/_isolates_web.dart": _isolates_web,
    "package:rxdart/rxdart.dart": rxdart,
    "package:hive/src/box/default_compaction_strategy.dart": default_compaction_strategy,
    "package:hive/src/box/default_key_comparator.dart": default_key_comparator,
    "package:hive/src/crypto/aes_cbc_pkcs7.dart": aes_cbc_pkcs7,
    "package:hive/src/crypto/crc32.dart": crc32,
    "package:hive/src/hive_impl.dart": hive_impl,
    "package:hive/src/object/hive_list_impl.dart": hive_list_impl,
    "package:hive/src/object/hive_object.dart": hive_object,
    "package:hive/src/util/extensions.dart": extensions,
    "package:hive/src/box_collection/box_collection_indexed_db.dart": box_collection_indexed_db,
    "package:http/src/browser_client.dart": browser_client,
    "package:http_parser/http_parser.dart": http_parser,
    "package:http/src/utils.dart": utils,
    "package:http/src/multipart_file_stub.dart": multipart_file_stub,
    "package:http/src/boundary_characters.dart": boundary_characters,
    "package:crypto/src/digest_sink.dart": digest_sink,
    "package:crypto/src/hash_sink.dart": hash_sink,
    "package:crypto/src/utils.dart": utils$,
    "package:crypto/src/sha512_slowsinks.dart": sha512_slowsinks,
    "package:webview_flutter_platform_interface/src/platform_navigation_delegate.dart": platform_navigation_delegate,
    "package:webview_flutter_platform_interface/src/platform_webview_controller.dart": platform_webview_controller,
    "package:webview_flutter_platform_interface/src/platform_webview_cookie_manager.dart": platform_webview_cookie_manager,
    "package:webview_flutter_platform_interface/src/platform_webview_widget.dart": platform_webview_widget,
    "package:webview_flutter_platform_interface/src/types/types.dart": types$4,
    "package:webview_flutter_platform_interface/src/webview_platform.dart": webview_platform,
    "package:functions_client/src/version.dart": version$2,
    "package:rxdart/src/subjects/behavior_subject.dart": behavior_subject,
    "package:rxdart/src/subjects/publish_subject.dart": publish_subject,
    "package:rxdart/src/subjects/replay_subject.dart": replay_subject,
    "package:rxdart/src/subjects/subject.dart": subject,
    "package:postgrest/src/version.dart": version$3,
    "package:realtime_client/src/websocket/websocket_web.dart": websocket_web,
    "package:web_socket_channel/src/channel.dart": channel$,
    "package:web_socket_channel/src/exception.dart": exception$,
    "package:storage_client/src/version.dart": version$4,
    "package:mime/mime.dart": mime,
    "package:retry/retry.dart": retry,
    "package:rxdart/src/rx.dart": rx,
    "package:rxdart/streams.dart": streams,
    "package:rxdart/transformers.dart": transformers$,
    "package:rxdart/utils.dart": utils$0,
    "package:hive/src/crypto/aes_engine.dart": aes_engine,
    "package:hive/src/adapters/big_int_adapter.dart": big_int_adapter,
    "package:hive/src/adapters/date_time_adapter.dart": date_time_adapter,
    "package:hive/src/backend/storage_backend_memory.dart": storage_backend_memory,
    "package:hive/src/box/box_base_impl.dart": box_base_impl,
    "package:hive/src/box/box_impl.dart": box_impl,
    "package:hive/src/box/lazy_box_impl.dart": lazy_box_impl,
    "package:hive/src/registry/type_registry_impl.dart": type_registry_impl,
    "package:hive/src/backend/storage_backend.dart": storage_backend,
    "package:hive/src/object/hive_collection_mixin.dart": hive_collection_mixin,
    "package:hive/src/util/delegating_list_view_mixin.dart": delegating_list_view_mixin,
    "package:hive/src/box_collection/box_collection_stub.dart": box_collection_stub,
    "package:http_parser/src/authentication_challenge.dart": authentication_challenge,
    "package:http_parser/src/case_insensitive_map.dart": case_insensitive_map,
    "package:http_parser/src/chunked_coding.dart": chunked_coding,
    "package:http_parser/src/http_date.dart": http_date,
    "package:http_parser/src/media_type.dart": media_type,
    "package:typed_data/typed_data.dart": typed_data$,
    "package:webview_flutter_platform_interface/src/types/http_response_error.dart": http_response_error,
    "package:webview_flutter_platform_interface/src/types/javascript_console_message.dart": javascript_console_message,
    "package:webview_flutter_platform_interface/src/types/javascript_log_level.dart": javascript_log_level,
    "package:webview_flutter_platform_interface/src/types/javascript_message.dart": javascript_message,
    "package:webview_flutter_platform_interface/src/types/javascript_mode.dart": javascript_mode,
    "package:webview_flutter_platform_interface/src/types/load_request_params.dart": load_request_params,
    "package:webview_flutter_platform_interface/src/types/navigation_decision.dart": navigation_decision,
    "package:webview_flutter_platform_interface/src/types/navigation_request.dart": navigation_request,
    "package:webview_flutter_platform_interface/src/types/platform_navigation_delegate_creation_params.dart": platform_navigation_delegate_creation_params,
    "package:webview_flutter_platform_interface/src/types/platform_webview_controller_creation_params.dart": platform_webview_controller_creation_params,
    "package:webview_flutter_platform_interface/src/types/platform_webview_cookie_manager_creation_params.dart": platform_webview_cookie_manager_creation_params,
    "package:webview_flutter_platform_interface/src/types/platform_webview_permission_request.dart": platform_webview_permission_request,
    "package:webview_flutter_platform_interface/src/types/platform_webview_widget_creation_params.dart": platform_webview_widget_creation_params,
    "package:webview_flutter_platform_interface/src/types/url_change.dart": url_change,
    "package:webview_flutter_platform_interface/src/types/web_resource_error.dart": web_resource_error,
    "package:webview_flutter_platform_interface/src/types/webview_cookie.dart": webview_cookie,
    "package:rxdart/src/streams/value_stream.dart": value_stream,
    "package:rxdart/src/transformers/start_with.dart": start_with,
    "package:rxdart/src/transformers/start_with_error.dart": start_with_error,
    "package:rxdart/src/utils/empty.dart": empty,
    "package:rxdart/src/utils/error_and_stacktrace.dart": error_and_stacktrace,
    "package:rxdart/src/streams/replay_stream.dart": replay_stream,
    "package:rxdart/src/utils/collection_extensions.dart": collection_extensions,
    "package:web_socket_channel/html.dart": html$,
    "package:web_socket_channel/src/_connect_html.dart": _connect_html,
    "package:web_socket_channel/src/copy/web_socket_impl.dart": web_socket_impl,
    "package:mime/src/mime_multipart_transformer.dart": mime_multipart_transformer,
    "package:mime/src/mime_shared.dart": mime_shared,
    "package:mime/src/mime_type.dart": mime_type,
    "package:rxdart/src/streams/combine_latest.dart": combine_latest,
    "package:rxdart/src/streams/concat.dart": concat,
    "package:rxdart/src/streams/concat_eager.dart": concat_eager,
    "package:rxdart/src/streams/connectable_stream.dart": connectable_stream,
    "package:rxdart/src/streams/defer.dart": defer,
    "package:rxdart/src/streams/fork_join.dart": fork_join,
    "package:rxdart/src/streams/from_callable.dart": from_callable,
    "package:rxdart/src/streams/merge.dart": merge,
    "package:rxdart/src/streams/never.dart": never,
    "package:rxdart/src/streams/race.dart": race,
    "package:rxdart/src/streams/range.dart": range,
    "package:rxdart/src/streams/repeat.dart": repeat,
    "package:rxdart/src/streams/retry.dart": retry$,
    "package:rxdart/src/streams/retry_when.dart": retry_when,
    "package:rxdart/src/streams/sequence_equal.dart": sequence_equal,
    "package:rxdart/src/streams/switch_latest.dart": switch_latest,
    "package:rxdart/src/streams/timer.dart": timer,
    "package:rxdart/src/streams/using.dart": using,
    "package:rxdart/src/streams/zip.dart": zip,
    "package:rxdart/src/transformers/backpressure/buffer.dart": buffer,
    "package:rxdart/src/transformers/backpressure/debounce.dart": debounce,
    "package:rxdart/src/transformers/backpressure/pairwise.dart": pairwise,
    "package:rxdart/src/transformers/backpressure/sample.dart": sample,
    "package:rxdart/src/transformers/backpressure/throttle.dart": throttle,
    "package:rxdart/src/transformers/backpressure/window.dart": window$,
    "package:rxdart/src/transformers/default_if_empty.dart": default_if_empty,
    "package:rxdart/src/transformers/delay.dart": delay,
    "package:rxdart/src/transformers/delay_when.dart": delay_when,
    "package:rxdart/src/transformers/dematerialize.dart": dematerialize,
    "package:rxdart/src/transformers/distinct_unique.dart": distinct_unique,
    "package:rxdart/src/transformers/do.dart": $do,
    "package:rxdart/src/transformers/end_with.dart": end_with,
    "package:rxdart/src/transformers/end_with_many.dart": end_with_many,
    "package:rxdart/src/transformers/exhaust_map.dart": exhaust_map,
    "package:rxdart/src/transformers/flat_map.dart": flat_map,
    "package:rxdart/src/transformers/group_by.dart": group_by,
    "package:rxdart/src/transformers/ignore_elements.dart": ignore_elements,
    "package:rxdart/src/transformers/interval.dart": interval,
    "package:rxdart/src/transformers/map_not_null.dart": map_not_null,
    "package:rxdart/src/transformers/map_to.dart": map_to,
    "package:rxdart/src/transformers/materialize.dart": materialize,
    "package:rxdart/src/transformers/max.dart": max,
    "package:rxdart/src/transformers/min.dart": min,
    "package:rxdart/src/transformers/on_error_resume.dart": on_error_resume,
    "package:rxdart/src/transformers/scan.dart": scan,
    "package:rxdart/src/transformers/skip_last.dart": skip_last,
    "package:rxdart/src/transformers/skip_until.dart": skip_until,
    "package:rxdart/src/transformers/start_with_many.dart": start_with_many,
    "package:rxdart/src/transformers/switch_if_empty.dart": switch_if_empty,
    "package:rxdart/src/transformers/switch_map.dart": switch_map,
    "package:rxdart/src/transformers/take_last.dart": take_last,
    "package:rxdart/src/transformers/take_until.dart": take_until,
    "package:rxdart/src/transformers/take_while_inclusive.dart": take_while_inclusive,
    "package:rxdart/src/transformers/time_interval.dart": time_interval,
    "package:rxdart/src/transformers/timestamp.dart": timestamp$,
    "package:rxdart/src/transformers/where_not_null.dart": where_not_null,
    "package:rxdart/src/transformers/where_type.dart": where_type,
    "package:rxdart/src/transformers/with_latest_from.dart": with_latest_from,
    "package:rxdart/src/utils/composite_subscription.dart": composite_subscription,
    "package:rxdart/src/utils/notification.dart": notification,
    "package:hive/src/crypto/aes_tables.dart": aes_tables,
    "package:hive/src/binary/frame.dart": frame$,
    "package:hive/src/binary/frame_helper.dart": frame_helper,
    "package:hive/src/box/keystore.dart": keystore$,
    "package:hive/src/box/change_notifier.dart": change_notifier$,
    "package:hive/src/adapters/ignored_type_adapter.dart": ignored_type_adapter,
    "package:hive/src/backend/js/backend_manager.dart": backend_manager,
    "package:http_parser/src/scan.dart": scan$,
    "package:http_parser/src/utils.dart": utils$1,
    "package:http_parser/src/chunked_coding/decoder.dart": decoder,
    "package:http_parser/src/chunked_coding/encoder.dart": encoder,
    "package:typed_data/src/typed_queue.dart": typed_queue,
    "package:typed_data/typed_buffers.dart": typed_buffers,
    "package:rxdart/src/utils/forwarding_sink.dart": forwarding_sink,
    "package:rxdart/src/utils/forwarding_stream.dart": forwarding_stream,
    "package:web_socket_channel/src/copy/io_sink.dart": io_sink,
    "package:web_socket_channel/src/copy/web_socket.dart": web_socket,
    "package:mime/src/bound_multipart_stream.dart": bound_multipart_stream,
    "package:mime/src/char_code.dart": char_code,
    "package:mime/src/default_extension_map.dart": default_extension_map,
    "package:mime/src/magic_number.dart": magic_number,
    "package:rxdart/src/utils/subscription.dart": subscription,
    "package:rxdart/src/utils/future.dart": future$,
    "package:rxdart/src/transformers/backpressure/backpressure.dart": backpressure,
    "package:rxdart/src/utils/min_max.dart": min_max,
    "package:hive/src/binary/binary_reader_impl.dart": binary_reader_impl,
    "package:hive/src/util/indexable_skip_list.dart": indexable_skip_list,
    "package:hive/src/backend/js/native/backend_manager.dart": backend_manager$,
    "package:http_parser/src/chunked_coding/charcodes.dart": charcodes,
    "package:typed_data/src/typed_buffer.dart": typed_buffer,
    "package:hive/src/backend/js/native/storage_backend_js.dart": storage_backend_js,
    "package:hive/src/binary/binary_writer_impl.dart": binary_writer_impl
  }, {
    "package:hive_flutter/hive_flutter.dart": ["src/box_extensions.dart", "src/hive_extensions.dart", "src/watch_box_builder.dart"],
    "package:gotrue/src/gotrue_client.dart": ["gotrue_mfa_api.dart"],
    "package:postgrest/src/postgrest_builder.dart": ["postgrest_filter_builder.dart", "postgrest_query_builder.dart", "postgrest_rpc_builder.dart", "postgrest_transform_builder.dart"],
    "package:hive/hive.dart": ["src/annotations/hive_field.dart", "src/annotations/hive_type.dart", "src/binary/binary_reader.dart", "src/binary/binary_writer.dart", "src/box/box.dart", "src/box/box_base.dart", "src/box/lazy_box.dart", "src/crypto/hive_aes_cipher.dart", "src/crypto/hive_cipher.dart", "src/hive.dart", "src/hive_error.dart", "src/object/hive_collection.dart", "src/object/hive_list.dart", "src/object/hive_storage_backend_preference.dart", "src/registry/type_adapter.dart", "src/registry/type_registry.dart"],
    "package:hive/src/object/hive_object.dart": ["hive_object_internal.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/supabase_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/app_links-3.4.5/lib/src/app_links_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/app_links-3.4.5/lib/src/app_links_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/sign_in_with_apple_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1/lib/sign_in_with_apple_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/src/url_launcher_platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_web-2.0.19/lib/url_launcher_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/link.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_web-2.0.19/lib/src/link.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/local_storage.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/gotrue_async_storage.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/supabase.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/supabase_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/app_links-3.4.5/lib/src/app_links_method_channel.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/authorization_credential.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/authorization_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/credential_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/web_authentication_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/exceptions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/nonce.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple_platform_interface-1.0.0/lib/method_channel_sign_in_with_apple.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/user.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/auth_user.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/realtime_client_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/remove_subscription_result.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_event_types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest_query_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_query_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_realtime_error.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/box_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/watch_box_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/hive_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/http.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher-6.1.11/lib/src/legacy_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher-6.1.11/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher-6.1.11/lib/src/url_launcher_uri.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher_platform_interface-2.2.0/lib/method_channel_url_launcher.dart","/zapp/pub/.pub_cache/hosted/pub.dev/functions_client-1.3.2/lib/src/functions_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/functions_client-1.3.2/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/gotrue_admin_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/gotrue_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/gotrue_mfa_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/auth_exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/auth_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/auth_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/mfa.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/oauth_flow_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/session.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/user_attributes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest_transform_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest_filter_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/postgrest_rpc_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/realtime_channel.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/realtime_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/realtime_presence.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/transformers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/storage_bucket_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/storage_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/storage_file_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/auth_http_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/supabase_stream_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/annotations/hive_field.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/annotations/hive_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_reader.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_writer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box_base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/lazy_box.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/hive_aes_cipher.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/hive_cipher.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive_error.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_collection.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_list.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_storage_backend_preference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/registry/type_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/registry/type_registry.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/hive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/stub/path_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/stub/path.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/byte_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase_flutter-1.10.25/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/app_links-3.4.5/lib/src/app_links.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/digest.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hash.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hmac.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/md5.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hash_sink.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha1.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha256.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha512.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple-4.3.0/lib/src/sign_in_with_apple.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple-4.3.0/lib/src/widgets/apple_logo_painter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple-4.3.0/lib/src/widgets/sign_in_with_apple_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/sign_in_with_apple-4.3.0/lib/src/widgets/sign_in_with_apple_button.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher-6.1.11/lib/src/url_launcher_string.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter-4.4.2/lib/src/navigation_delegate.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter-4.4.2/lib/src/webview_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter-4.4.2/lib/src/webview_cookie_manager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter-4.4.2/lib/src/webview_widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/url_launcher-6.1.11/lib/src/type_conversion.dart","/zapp/pub/.pub_cache/hosted/pub.dev/functions_client-1.3.2/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/fetch.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/types/fetch_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/gotrue_admin_mfa_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/gotrue-1.12.6/lib/src/helper.dart","/zapp/pub/.pub_cache/hosted/pub.dev/jwt_decode-0.3.1/lib/jwt_decode.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/push.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/retry_timer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/message.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/constants.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/fetch.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/file_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/supabase-1.11.11/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/yet_another_json_isolate-1.1.1/lib/src/_isolates_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/default_compaction_strategy.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/default_key_comparator.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/aes_cbc_pkcs7.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/crc32.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/registry/type_registry_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_collection_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/util/delegating_list_view_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_list_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_object.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_object_internal.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/util/extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box_collection/box_collection_indexed_db.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/browser_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/boundary_characters.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/digest_sink.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha512_slowsinks.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_navigation_delegate.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_webview_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_webview_cookie_manager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/platform_webview_widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/webview_platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/functions_client-1.3.2/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/subjects/subject.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/subjects/behavior_subject.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/subjects/publish_subject.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/subjects/replay_subject.dart","/zapp/pub/.pub_cache/hosted/pub.dev/postgrest-1.5.2/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/realtime_client-1.4.0/lib/src/websocket/websocket_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/channel.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/storage_client-1.5.4/lib/src/version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/retry-3.1.1/lib/retry.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/rx.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/aes_engine.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/adapters/big_int_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/adapters/date_time_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/storage_backend.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/storage_backend_memory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box_base_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/lazy_box_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box_collection/box_collection_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/authentication_challenge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/case_insensitive_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/http_date.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/media_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/http_response_error.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/javascript_console_message.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/javascript_log_level.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/javascript_message.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/javascript_mode.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/load_request_params.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/navigation_decision.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/navigation_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/platform_navigation_delegate_creation_params.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/platform_webview_controller_creation_params.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/platform_webview_cookie_manager_creation_params.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/platform_webview_permission_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/platform_webview_widget_creation_params.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/url_change.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/web_resource_error.dart","/zapp/pub/.pub_cache/hosted/pub.dev/webview_flutter_platform_interface-2.6.0/lib/src/types/webview_cookie.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/value_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/forwarding_sink.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/start_with.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/start_with_error.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/empty.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/error_and_stacktrace.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/replay_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/collection_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/_connect_html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/copy/web_socket_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/mime_shared.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/mime_multipart_transformer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/mime_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/combine_latest.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/concat.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/concat_eager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/connectable_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/defer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/fork_join.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/from_callable.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/merge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/never.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/race.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/range.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/repeat.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/retry.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/retry_when.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/sequence_equal.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/switch_latest.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/timer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/using.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/streams/zip.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/backpressure.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/buffer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/debounce.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/pairwise.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/sample.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/throttle.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/backpressure/window.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/default_if_empty.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/delay.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/delay_when.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/dematerialize.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/notification.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/distinct_unique.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/do.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/end_with.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/end_with_many.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/exhaust_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/flat_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/group_by.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/ignore_elements.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/interval.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/map_not_null.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/map_to.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/materialize.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/max.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/min.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/on_error_resume.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/skip_last.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/skip_until.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/start_with_many.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/switch_if_empty.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/switch_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/take_last.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/take_until.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/take_while_inclusive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/time_interval.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/timestamp.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/where_not_null.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/where_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/transformers/with_latest_from.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/composite_subscription.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/aes_tables.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/frame.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/frame_helper.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/keystore.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/change_notifier.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/adapters/ignored_type_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/js/backend_manager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/encoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/forwarding_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/copy/io_sink.dart","/zapp/pub/.pub_cache/hosted/pub.dev/web_socket_channel-2.4.0/lib/src/copy/web_socket.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/bound_multipart_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/char_code.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/default_extension_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/mime-1.0.4/lib/src/magic_number.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/subscription.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/future.dart","/zapp/pub/.pub_cache/hosted/pub.dev/rxdart-0.27.7/lib/src/utils/min_max.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_reader_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/util/indexable_skip_list.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/js/native/backend_manager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/charcodes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_buffer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/js/native/storage_backend_js.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_writer_impl.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__supabase_client: supabase_client,
    src__app_links_web: app_links_web,
    shared_preferences_web: shared_preferences_web,
    sign_in_with_apple_web: sign_in_with_apple_web,
    url_launcher_web: url_launcher_web,
    supabase_flutter: supabase_flutter,
    src__app_links_platform_interface: app_links_platform_interface,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    sign_in_with_apple_platform_interface: sign_in_with_apple_platform_interface,
    link: link,
    url_launcher_platform_interface: url_launcher_platform_interface,
    src__link: link$,
    src__shims__dart_ui: dart_ui,
    supabase: supabase,
    src__local_storage: local_storage,
    src__supabase: supabase$,
    src__supabase_auth: supabase_auth,
    url_launcher: url_launcher,
    plugin_platform_interface: plugin_platform_interface,
    src__app_links_method_channel: app_links_method_channel,
    method_channel_shared_preferences: method_channel_shared_preferences,
    authorization_credential: authorization_credential,
    authorization_request: authorization_request,
    credential_state: credential_state,
    web_authentication_options: web_authentication_options,
    exceptions: exceptions,
    nonce: nonce,
    method_channel_sign_in_with_apple: method_channel_sign_in_with_apple,
    src__types: types$,
    src__url_launcher_platform: url_launcher_platform,
    src__shims__dart_ui_real: dart_ui_real,
    functions_client: functions_client,
    gotrue: gotrue,
    postgrest: postgrest,
    realtime_client: realtime_client,
    storage_client: storage_client,
    src__auth_user: auth_user,
    src__realtime_client_options: realtime_client_options,
    src__remove_subscription_result: remove_subscription_result,
    src__supabase_client: supabase_client$,
    src__supabase_event_types: supabase_event_types,
    src__supabase_query_builder: supabase_query_builder,
    src__supabase_realtime_error: supabase_realtime_error,
    hive_flutter: hive_flutter,
    shared_preferences: shared_preferences,
    http: http,
    src__constants: constants,
    app_links: app_links,
    crypto: crypto,
    sign_in_with_apple: sign_in_with_apple,
    url_launcher_string: url_launcher_string,
    webview_flutter: webview_flutter,
    src__legacy_api: legacy_api,
    src__types: types$0,
    src__url_launcher_uri: url_launcher_uri,
    method_channel_url_launcher: method_channel_url_launcher,
    src__functions_client: functions_client$,
    src__types: types$1,
    src__constants: constants$,
    src__gotrue_admin_api: gotrue_admin_api,
    src__gotrue_client: gotrue_client,
    src__types__auth_exception: auth_exception,
    src__types__auth_response: auth_response,
    src__types__auth_state: auth_state,
    src__types__gotrue_async_storage: gotrue_async_storage,
    src__types__mfa: mfa,
    src__types__oauth_flow_type: oauth_flow_type,
    src__types__provider: provider$,
    src__types__session: session$,
    src__types__user: user,
    src__types__user_attributes: user_attributes,
    src__postgrest: postgrest$,
    src__postgrest_builder: postgrest_builder,
    src__types: types$2,
    src__realtime_channel: realtime_channel,
    src__realtime_client: realtime_client$,
    src__realtime_presence: realtime_presence,
    src__transformers: transformers,
    src__constants: constants$0,
    src__storage_client: storage_client$,
    src__storage_file_api: storage_file_api,
    src__types: types$3,
    src__constants: constants$1,
    yet_another_json_isolate: yet_another_json_isolate,
    src__auth_http_client: auth_http_client,
    src__supabase_stream_builder: supabase_stream_builder,
    hive: hive,
    src__stub__path_provider: path_provider,
    src__stub__path: path,
    src__client: client$,
    src__exception: exception,
    src__request: request$,
    src__response: response$,
    src__streamed_request: streamed_request,
    src__base_client: base_client,
    src__base_request: base_request,
    src__base_response: base_response,
    src__byte_stream: byte_stream,
    src__multipart_file: multipart_file,
    src__multipart_request: multipart_request,
    src__streamed_response: streamed_response,
    src__version: version,
    src__app_links: app_links$,
    src__digest: digest,
    src__hash: hash,
    src__hmac: hmac,
    src__md5: md5,
    src__sha1: sha1,
    src__sha256: sha256,
    src__sha512: sha512,
    src__sign_in_with_apple: sign_in_with_apple$,
    src__widgets__apple_logo_painter: apple_logo_painter,
    src__widgets__sign_in_with_apple_builder: sign_in_with_apple_builder,
    src__widgets__sign_in_with_apple_button: sign_in_with_apple_button,
    src__url_launcher_string: url_launcher_string$,
    webview_flutter_platform_interface: webview_flutter_platform_interface,
    src__navigation_delegate: navigation_delegate,
    src__webview_controller: webview_controller,
    src__webview_cookie_manager: webview_cookie_manager,
    src__webview_widget: webview_widget,
    src__type_conversion: type_conversion,
    src__constants: constants$2,
    src__version: version$,
    src__fetch: fetch,
    src__types__fetch_options: fetch_options,
    src__gotrue_admin_mfa_api: gotrue_admin_mfa_api,
    src__helper: helper,
    jwt_decode: jwt_decode,
    subjects: subjects,
    src__constants: constants$3,
    src__push: push,
    src__retry_timer: retry_timer,
    src__message: message,
    src__websocket__websocket: websocket,
    web_socket_channel: web_socket_channel,
    src__version: version$0,
    src__constants: constants$4,
    src__storage_bucket_api: storage_bucket_api,
    src__fetch: fetch$,
    src__file_stub: file_stub,
    src__version: version$1,
    src___isolates_web: _isolates_web,
    rxdart: rxdart,
    src__box__default_compaction_strategy: default_compaction_strategy,
    src__box__default_key_comparator: default_key_comparator,
    src__crypto__aes_cbc_pkcs7: aes_cbc_pkcs7,
    src__crypto__crc32: crc32,
    src__hive_impl: hive_impl,
    src__object__hive_list_impl: hive_list_impl,
    src__object__hive_object: hive_object,
    src__util__extensions: extensions,
    src__box_collection__box_collection_indexed_db: box_collection_indexed_db,
    src__browser_client: browser_client,
    http_parser: http_parser,
    src__utils: utils,
    src__multipart_file_stub: multipart_file_stub,
    src__boundary_characters: boundary_characters,
    src__digest_sink: digest_sink,
    src__hash_sink: hash_sink,
    src__utils: utils$,
    src__sha512_slowsinks: sha512_slowsinks,
    src__platform_navigation_delegate: platform_navigation_delegate,
    src__platform_webview_controller: platform_webview_controller,
    src__platform_webview_cookie_manager: platform_webview_cookie_manager,
    src__platform_webview_widget: platform_webview_widget,
    src__types__types: types$4,
    src__webview_platform: webview_platform,
    src__version: version$2,
    src__subjects__behavior_subject: behavior_subject,
    src__subjects__publish_subject: publish_subject,
    src__subjects__replay_subject: replay_subject,
    src__subjects__subject: subject,
    src__version: version$3,
    src__websocket__websocket_web: websocket_web,
    src__channel: channel$,
    src__exception: exception$,
    src__version: version$4,
    mime: mime,
    retry: retry,
    src__rx: rx,
    streams: streams,
    transformers: transformers$,
    utils: utils$0,
    src__crypto__aes_engine: aes_engine,
    src__adapters__big_int_adapter: big_int_adapter,
    src__adapters__date_time_adapter: date_time_adapter,
    src__backend__storage_backend_memory: storage_backend_memory,
    src__box__box_base_impl: box_base_impl,
    src__box__box_impl: box_impl,
    src__box__lazy_box_impl: lazy_box_impl,
    src__registry__type_registry_impl: type_registry_impl,
    src__backend__storage_backend: storage_backend,
    src__object__hive_collection_mixin: hive_collection_mixin,
    src__util__delegating_list_view_mixin: delegating_list_view_mixin,
    src__box_collection__box_collection_stub: box_collection_stub,
    src__authentication_challenge: authentication_challenge,
    src__case_insensitive_map: case_insensitive_map,
    src__chunked_coding: chunked_coding,
    src__http_date: http_date,
    src__media_type: media_type,
    typed_data: typed_data$,
    src__types__http_response_error: http_response_error,
    src__types__javascript_console_message: javascript_console_message,
    src__types__javascript_log_level: javascript_log_level,
    src__types__javascript_message: javascript_message,
    src__types__javascript_mode: javascript_mode,
    src__types__load_request_params: load_request_params,
    src__types__navigation_decision: navigation_decision,
    src__types__navigation_request: navigation_request,
    src__types__platform_navigation_delegate_creation_params: platform_navigation_delegate_creation_params,
    src__types__platform_webview_controller_creation_params: platform_webview_controller_creation_params,
    src__types__platform_webview_cookie_manager_creation_params: platform_webview_cookie_manager_creation_params,
    src__types__platform_webview_permission_request: platform_webview_permission_request,
    src__types__platform_webview_widget_creation_params: platform_webview_widget_creation_params,
    src__types__url_change: url_change,
    src__types__web_resource_error: web_resource_error,
    src__types__webview_cookie: webview_cookie,
    src__streams__value_stream: value_stream,
    src__transformers__start_with: start_with,
    src__transformers__start_with_error: start_with_error,
    src__utils__empty: empty,
    src__utils__error_and_stacktrace: error_and_stacktrace,
    src__streams__replay_stream: replay_stream,
    src__utils__collection_extensions: collection_extensions,
    html: html$,
    src___connect_html: _connect_html,
    src__copy__web_socket_impl: web_socket_impl,
    src__mime_multipart_transformer: mime_multipart_transformer,
    src__mime_shared: mime_shared,
    src__mime_type: mime_type,
    src__streams__combine_latest: combine_latest,
    src__streams__concat: concat,
    src__streams__concat_eager: concat_eager,
    src__streams__connectable_stream: connectable_stream,
    src__streams__defer: defer,
    src__streams__fork_join: fork_join,
    src__streams__from_callable: from_callable,
    src__streams__merge: merge,
    src__streams__never: never,
    src__streams__race: race,
    src__streams__range: range,
    src__streams__repeat: repeat,
    src__streams__retry: retry$,
    src__streams__retry_when: retry_when,
    src__streams__sequence_equal: sequence_equal,
    src__streams__switch_latest: switch_latest,
    src__streams__timer: timer,
    src__streams__using: using,
    src__streams__zip: zip,
    src__transformers__backpressure__buffer: buffer,
    src__transformers__backpressure__debounce: debounce,
    src__transformers__backpressure__pairwise: pairwise,
    src__transformers__backpressure__sample: sample,
    src__transformers__backpressure__throttle: throttle,
    src__transformers__backpressure__window: window$,
    src__transformers__default_if_empty: default_if_empty,
    src__transformers__delay: delay,
    src__transformers__delay_when: delay_when,
    src__transformers__dematerialize: dematerialize,
    src__transformers__distinct_unique: distinct_unique,
    src__transformers__do: $do,
    src__transformers__end_with: end_with,
    src__transformers__end_with_many: end_with_many,
    src__transformers__exhaust_map: exhaust_map,
    src__transformers__flat_map: flat_map,
    src__transformers__group_by: group_by,
    src__transformers__ignore_elements: ignore_elements,
    src__transformers__interval: interval,
    src__transformers__map_not_null: map_not_null,
    src__transformers__map_to: map_to,
    src__transformers__materialize: materialize,
    src__transformers__max: max,
    src__transformers__min: min,
    src__transformers__on_error_resume: on_error_resume,
    src__transformers__scan: scan,
    src__transformers__skip_last: skip_last,
    src__transformers__skip_until: skip_until,
    src__transformers__start_with_many: start_with_many,
    src__transformers__switch_if_empty: switch_if_empty,
    src__transformers__switch_map: switch_map,
    src__transformers__take_last: take_last,
    src__transformers__take_until: take_until,
    src__transformers__take_while_inclusive: take_while_inclusive,
    src__transformers__time_interval: time_interval,
    src__transformers__timestamp: timestamp$,
    src__transformers__where_not_null: where_not_null,
    src__transformers__where_type: where_type,
    src__transformers__with_latest_from: with_latest_from,
    src__utils__composite_subscription: composite_subscription,
    src__utils__notification: notification,
    src__crypto__aes_tables: aes_tables,
    src__binary__frame: frame$,
    src__binary__frame_helper: frame_helper,
    src__box__keystore: keystore$,
    src__box__change_notifier: change_notifier$,
    src__adapters__ignored_type_adapter: ignored_type_adapter,
    src__backend__js__backend_manager: backend_manager,
    src__scan: scan$,
    src__utils: utils$1,
    src__chunked_coding__decoder: decoder,
    src__chunked_coding__encoder: encoder,
    src__typed_queue: typed_queue,
    typed_buffers: typed_buffers,
    src__utils__forwarding_sink: forwarding_sink,
    src__utils__forwarding_stream: forwarding_stream,
    src__copy__io_sink: io_sink,
    src__copy__web_socket: web_socket,
    src__bound_multipart_stream: bound_multipart_stream,
    src__char_code: char_code,
    src__default_extension_map: default_extension_map,
    src__magic_number: magic_number,
    src__utils__subscription: subscription,
    src__utils__future: future$,
    src__transformers__backpressure__backpressure: backpressure,
    src__utils__min_max: min_max,
    src__binary__binary_reader_impl: binary_reader_impl,
    src__util__indexable_skip_list: indexable_skip_list,
    src__backend__js__native__backend_manager: backend_manager$,
    src__chunked_coding__charcodes: charcodes,
    src__typed_buffer: typed_buffer,
    src__backend__js__native__storage_backend_js: storage_backend_js,
    src__binary__binary_writer_impl: binary_writer_impl
  };
}));

//# sourceMappingURL=main.js.map
